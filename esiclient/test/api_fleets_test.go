/*
EVE Stellar Information (ESI) - tranquility

Testing FleetsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package esiclient

import (
	"context"
	"testing"

	openapiclient "github.com/fnt-eve/esi/esiclient"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_esiclient_FleetsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test FleetsAPIService DeleteFleetsFleetIdMembersMemberId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fleetId int64
		var memberId int64

		resp, httpRes, err := apiClient.FleetsAPI.DeleteFleetsFleetIdMembersMemberId(context.Background(), fleetId, memberId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FleetsAPIService DeleteFleetsFleetIdSquadsSquadId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fleetId int64
		var squadId int64

		resp, httpRes, err := apiClient.FleetsAPI.DeleteFleetsFleetIdSquadsSquadId(context.Background(), fleetId, squadId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FleetsAPIService DeleteFleetsFleetIdWingsWingId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fleetId int64
		var wingId int64

		resp, httpRes, err := apiClient.FleetsAPI.DeleteFleetsFleetIdWingsWingId(context.Background(), fleetId, wingId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FleetsAPIService GetCharactersCharacterIdFleet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var characterId int64

		resp, httpRes, err := apiClient.FleetsAPI.GetCharactersCharacterIdFleet(context.Background(), characterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FleetsAPIService GetFleetsFleetId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fleetId int64

		resp, httpRes, err := apiClient.FleetsAPI.GetFleetsFleetId(context.Background(), fleetId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FleetsAPIService GetFleetsFleetIdMembers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fleetId int64

		resp, httpRes, err := apiClient.FleetsAPI.GetFleetsFleetIdMembers(context.Background(), fleetId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FleetsAPIService GetFleetsFleetIdWings", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fleetId int64

		resp, httpRes, err := apiClient.FleetsAPI.GetFleetsFleetIdWings(context.Background(), fleetId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FleetsAPIService PostFleetsFleetIdMembers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fleetId int64

		resp, httpRes, err := apiClient.FleetsAPI.PostFleetsFleetIdMembers(context.Background(), fleetId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FleetsAPIService PostFleetsFleetIdWings", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fleetId int64

		resp, httpRes, err := apiClient.FleetsAPI.PostFleetsFleetIdWings(context.Background(), fleetId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FleetsAPIService PostFleetsFleetIdWingsWingIdSquads", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fleetId int64
		var wingId int64

		resp, httpRes, err := apiClient.FleetsAPI.PostFleetsFleetIdWingsWingIdSquads(context.Background(), fleetId, wingId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FleetsAPIService PutFleetsFleetId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fleetId int64

		resp, httpRes, err := apiClient.FleetsAPI.PutFleetsFleetId(context.Background(), fleetId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FleetsAPIService PutFleetsFleetIdMembersMemberId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fleetId int64
		var memberId int64

		resp, httpRes, err := apiClient.FleetsAPI.PutFleetsFleetIdMembersMemberId(context.Background(), fleetId, memberId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FleetsAPIService PutFleetsFleetIdSquadsSquadId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fleetId int64
		var squadId int64

		resp, httpRes, err := apiClient.FleetsAPI.PutFleetsFleetIdSquadsSquadId(context.Background(), fleetId, squadId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FleetsAPIService PutFleetsFleetIdWingsWingId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fleetId int64
		var wingId int64

		resp, httpRes, err := apiClient.FleetsAPI.PutFleetsFleetIdWingsWingId(context.Background(), fleetId, wingId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
