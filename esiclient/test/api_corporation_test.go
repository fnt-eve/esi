/*
EVE Stellar Information (ESI) - tranquility

Testing CorporationAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package esiclient

import (
	"context"
	"testing"

	openapiclient "github.com/fnt-eve/esi/esiclient"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_esiclient_CorporationAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CorporationAPIService GetCorporationsCorporationId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var corporationId int64

		resp, httpRes, err := apiClient.CorporationAPI.GetCorporationsCorporationId(context.Background(), corporationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorporationAPIService GetCorporationsCorporationIdAlliancehistory", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var corporationId int64

		resp, httpRes, err := apiClient.CorporationAPI.GetCorporationsCorporationIdAlliancehistory(context.Background(), corporationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorporationAPIService GetCorporationsCorporationIdBlueprints", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var corporationId int64

		resp, httpRes, err := apiClient.CorporationAPI.GetCorporationsCorporationIdBlueprints(context.Background(), corporationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorporationAPIService GetCorporationsCorporationIdContainersLogs", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var corporationId int64

		resp, httpRes, err := apiClient.CorporationAPI.GetCorporationsCorporationIdContainersLogs(context.Background(), corporationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorporationAPIService GetCorporationsCorporationIdDivisions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var corporationId int64

		resp, httpRes, err := apiClient.CorporationAPI.GetCorporationsCorporationIdDivisions(context.Background(), corporationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorporationAPIService GetCorporationsCorporationIdFacilities", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var corporationId int64

		resp, httpRes, err := apiClient.CorporationAPI.GetCorporationsCorporationIdFacilities(context.Background(), corporationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorporationAPIService GetCorporationsCorporationIdIcons", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var corporationId int64

		resp, httpRes, err := apiClient.CorporationAPI.GetCorporationsCorporationIdIcons(context.Background(), corporationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorporationAPIService GetCorporationsCorporationIdMedals", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var corporationId int64

		resp, httpRes, err := apiClient.CorporationAPI.GetCorporationsCorporationIdMedals(context.Background(), corporationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorporationAPIService GetCorporationsCorporationIdMedalsIssued", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var corporationId int64

		resp, httpRes, err := apiClient.CorporationAPI.GetCorporationsCorporationIdMedalsIssued(context.Background(), corporationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorporationAPIService GetCorporationsCorporationIdMembers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var corporationId int64

		resp, httpRes, err := apiClient.CorporationAPI.GetCorporationsCorporationIdMembers(context.Background(), corporationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorporationAPIService GetCorporationsCorporationIdMembersLimit", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var corporationId int64

		resp, httpRes, err := apiClient.CorporationAPI.GetCorporationsCorporationIdMembersLimit(context.Background(), corporationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorporationAPIService GetCorporationsCorporationIdMembersTitles", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var corporationId int64

		resp, httpRes, err := apiClient.CorporationAPI.GetCorporationsCorporationIdMembersTitles(context.Background(), corporationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorporationAPIService GetCorporationsCorporationIdMembertracking", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var corporationId int64

		resp, httpRes, err := apiClient.CorporationAPI.GetCorporationsCorporationIdMembertracking(context.Background(), corporationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorporationAPIService GetCorporationsCorporationIdRoles", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var corporationId int64

		resp, httpRes, err := apiClient.CorporationAPI.GetCorporationsCorporationIdRoles(context.Background(), corporationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorporationAPIService GetCorporationsCorporationIdRolesHistory", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var corporationId int64

		resp, httpRes, err := apiClient.CorporationAPI.GetCorporationsCorporationIdRolesHistory(context.Background(), corporationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorporationAPIService GetCorporationsCorporationIdShareholders", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var corporationId int64

		resp, httpRes, err := apiClient.CorporationAPI.GetCorporationsCorporationIdShareholders(context.Background(), corporationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorporationAPIService GetCorporationsCorporationIdStandings", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var corporationId int64

		resp, httpRes, err := apiClient.CorporationAPI.GetCorporationsCorporationIdStandings(context.Background(), corporationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorporationAPIService GetCorporationsCorporationIdStarbases", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var corporationId int64

		resp, httpRes, err := apiClient.CorporationAPI.GetCorporationsCorporationIdStarbases(context.Background(), corporationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorporationAPIService GetCorporationsCorporationIdStarbasesStarbaseId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var corporationId int64
		var starbaseId int64

		resp, httpRes, err := apiClient.CorporationAPI.GetCorporationsCorporationIdStarbasesStarbaseId(context.Background(), corporationId, starbaseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorporationAPIService GetCorporationsCorporationIdStructures", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var corporationId int64

		resp, httpRes, err := apiClient.CorporationAPI.GetCorporationsCorporationIdStructures(context.Background(), corporationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorporationAPIService GetCorporationsCorporationIdTitles", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var corporationId int64

		resp, httpRes, err := apiClient.CorporationAPI.GetCorporationsCorporationIdTitles(context.Background(), corporationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CorporationAPIService GetCorporationsNpccorps", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CorporationAPI.GetCorporationsNpccorps(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
