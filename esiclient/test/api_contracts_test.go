/*
EVE Stellar Information (ESI) - tranquility

Testing ContractsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package esiclient

import (
	"context"
	"testing"

	openapiclient "github.com/fnt-eve/esi/esiclient"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_esiclient_ContractsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ContractsAPIService GetCharactersCharacterIdContracts", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var characterId int64

		resp, httpRes, err := apiClient.ContractsAPI.GetCharactersCharacterIdContracts(context.Background(), characterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContractsAPIService GetCharactersCharacterIdContractsContractIdBids", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var characterId int64
		var contractId int64

		resp, httpRes, err := apiClient.ContractsAPI.GetCharactersCharacterIdContractsContractIdBids(context.Background(), characterId, contractId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContractsAPIService GetCharactersCharacterIdContractsContractIdItems", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var characterId int64
		var contractId int64

		resp, httpRes, err := apiClient.ContractsAPI.GetCharactersCharacterIdContractsContractIdItems(context.Background(), characterId, contractId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContractsAPIService GetContractsPublicBidsContractId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var contractId int64

		resp, httpRes, err := apiClient.ContractsAPI.GetContractsPublicBidsContractId(context.Background(), contractId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContractsAPIService GetContractsPublicItemsContractId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var contractId int64

		resp, httpRes, err := apiClient.ContractsAPI.GetContractsPublicItemsContractId(context.Background(), contractId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContractsAPIService GetContractsPublicRegionId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var regionId int64

		resp, httpRes, err := apiClient.ContractsAPI.GetContractsPublicRegionId(context.Background(), regionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContractsAPIService GetCorporationsCorporationIdContracts", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var corporationId int64

		resp, httpRes, err := apiClient.ContractsAPI.GetCorporationsCorporationIdContracts(context.Background(), corporationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContractsAPIService GetCorporationsCorporationIdContractsContractIdBids", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var contractId int64
		var corporationId int64

		resp, httpRes, err := apiClient.ContractsAPI.GetCorporationsCorporationIdContractsContractIdBids(context.Background(), contractId, corporationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContractsAPIService GetCorporationsCorporationIdContractsContractIdItems", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var contractId int64
		var corporationId int64

		resp, httpRes, err := apiClient.ContractsAPI.GetCorporationsCorporationIdContractsContractIdItems(context.Background(), contractId, corporationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
