/*
EVE Stellar Information (ESI) - tranquility

Testing CalendarAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package esiclient

import (
	"context"
	"testing"

	openapiclient "github.com/fnt-eve/esi/esiclient"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_esiclient_CalendarAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CalendarAPIService GetCharactersCharacterIdCalendar", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var characterId int64

		resp, httpRes, err := apiClient.CalendarAPI.GetCharactersCharacterIdCalendar(context.Background(), characterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CalendarAPIService GetCharactersCharacterIdCalendarEventId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var characterId int64
		var eventId int64

		resp, httpRes, err := apiClient.CalendarAPI.GetCharactersCharacterIdCalendarEventId(context.Background(), characterId, eventId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CalendarAPIService GetCharactersCharacterIdCalendarEventIdAttendees", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var characterId int64
		var eventId int64

		resp, httpRes, err := apiClient.CalendarAPI.GetCharactersCharacterIdCalendarEventIdAttendees(context.Background(), characterId, eventId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CalendarAPIService PutCharactersCharacterIdCalendarEventId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var characterId int64
		var eventId int64

		resp, httpRes, err := apiClient.CalendarAPI.PutCharactersCharacterIdCalendarEventId(context.Background(), characterId, eventId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
