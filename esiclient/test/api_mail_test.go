/*
EVE Stellar Information (ESI) - tranquility

Testing MailAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package esiclient

import (
	"context"
	"testing"

	openapiclient "github.com/fnt-eve/esi/esiclient"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_esiclient_MailAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test MailAPIService DeleteCharactersCharacterIdMailLabelsLabelId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var characterId int64
		var labelId int64

		resp, httpRes, err := apiClient.MailAPI.DeleteCharactersCharacterIdMailLabelsLabelId(context.Background(), characterId, labelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MailAPIService DeleteCharactersCharacterIdMailMailId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var characterId int64
		var mailId int64

		resp, httpRes, err := apiClient.MailAPI.DeleteCharactersCharacterIdMailMailId(context.Background(), characterId, mailId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MailAPIService GetCharactersCharacterIdMail", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var characterId int64

		resp, httpRes, err := apiClient.MailAPI.GetCharactersCharacterIdMail(context.Background(), characterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MailAPIService GetCharactersCharacterIdMailLabels", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var characterId int64

		resp, httpRes, err := apiClient.MailAPI.GetCharactersCharacterIdMailLabels(context.Background(), characterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MailAPIService GetCharactersCharacterIdMailLists", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var characterId int64

		resp, httpRes, err := apiClient.MailAPI.GetCharactersCharacterIdMailLists(context.Background(), characterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MailAPIService GetCharactersCharacterIdMailMailId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var characterId int64
		var mailId int64

		resp, httpRes, err := apiClient.MailAPI.GetCharactersCharacterIdMailMailId(context.Background(), characterId, mailId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MailAPIService PostCharactersCharacterIdMail", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var characterId int64

		resp, httpRes, err := apiClient.MailAPI.PostCharactersCharacterIdMail(context.Background(), characterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MailAPIService PostCharactersCharacterIdMailLabels", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var characterId int64

		resp, httpRes, err := apiClient.MailAPI.PostCharactersCharacterIdMailLabels(context.Background(), characterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MailAPIService PutCharactersCharacterIdMailMailId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var characterId int64
		var mailId int64

		resp, httpRes, err := apiClient.MailAPI.PutCharactersCharacterIdMailMailId(context.Background(), characterId, mailId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
