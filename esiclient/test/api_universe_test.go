/*
EVE Stellar Information (ESI) - tranquility

Testing UniverseAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package esiclient

import (
	"context"
	"testing"

	openapiclient "github.com/fnt-eve/esi/esiclient"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_esiclient_UniverseAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test UniverseAPIService GetUniverseAncestries", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UniverseAPI.GetUniverseAncestries(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UniverseAPIService GetUniverseAsteroidBeltsAsteroidBeltId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var asteroidBeltId int64

		resp, httpRes, err := apiClient.UniverseAPI.GetUniverseAsteroidBeltsAsteroidBeltId(context.Background(), asteroidBeltId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UniverseAPIService GetUniverseBloodlines", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UniverseAPI.GetUniverseBloodlines(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UniverseAPIService GetUniverseCategories", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UniverseAPI.GetUniverseCategories(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UniverseAPIService GetUniverseCategoriesCategoryId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var categoryId int64

		resp, httpRes, err := apiClient.UniverseAPI.GetUniverseCategoriesCategoryId(context.Background(), categoryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UniverseAPIService GetUniverseConstellations", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UniverseAPI.GetUniverseConstellations(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UniverseAPIService GetUniverseConstellationsConstellationId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var constellationId int64

		resp, httpRes, err := apiClient.UniverseAPI.GetUniverseConstellationsConstellationId(context.Background(), constellationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UniverseAPIService GetUniverseFactions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UniverseAPI.GetUniverseFactions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UniverseAPIService GetUniverseGraphics", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UniverseAPI.GetUniverseGraphics(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UniverseAPIService GetUniverseGraphicsGraphicId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var graphicId int64

		resp, httpRes, err := apiClient.UniverseAPI.GetUniverseGraphicsGraphicId(context.Background(), graphicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UniverseAPIService GetUniverseGroups", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UniverseAPI.GetUniverseGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UniverseAPIService GetUniverseGroupsGroupId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var groupId int64

		resp, httpRes, err := apiClient.UniverseAPI.GetUniverseGroupsGroupId(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UniverseAPIService GetUniverseMoonsMoonId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var moonId int64

		resp, httpRes, err := apiClient.UniverseAPI.GetUniverseMoonsMoonId(context.Background(), moonId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UniverseAPIService GetUniversePlanetsPlanetId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var planetId int64

		resp, httpRes, err := apiClient.UniverseAPI.GetUniversePlanetsPlanetId(context.Background(), planetId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UniverseAPIService GetUniverseRaces", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UniverseAPI.GetUniverseRaces(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UniverseAPIService GetUniverseRegions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UniverseAPI.GetUniverseRegions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UniverseAPIService GetUniverseRegionsRegionId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var regionId int64

		resp, httpRes, err := apiClient.UniverseAPI.GetUniverseRegionsRegionId(context.Background(), regionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UniverseAPIService GetUniverseStargatesStargateId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stargateId int64

		resp, httpRes, err := apiClient.UniverseAPI.GetUniverseStargatesStargateId(context.Background(), stargateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UniverseAPIService GetUniverseStarsStarId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var starId int64

		resp, httpRes, err := apiClient.UniverseAPI.GetUniverseStarsStarId(context.Background(), starId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UniverseAPIService GetUniverseStationsStationId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stationId int64

		resp, httpRes, err := apiClient.UniverseAPI.GetUniverseStationsStationId(context.Background(), stationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UniverseAPIService GetUniverseStructures", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UniverseAPI.GetUniverseStructures(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UniverseAPIService GetUniverseStructuresStructureId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var structureId int64

		resp, httpRes, err := apiClient.UniverseAPI.GetUniverseStructuresStructureId(context.Background(), structureId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UniverseAPIService GetUniverseSystemJumps", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UniverseAPI.GetUniverseSystemJumps(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UniverseAPIService GetUniverseSystemKills", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UniverseAPI.GetUniverseSystemKills(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UniverseAPIService GetUniverseSystems", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UniverseAPI.GetUniverseSystems(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UniverseAPIService GetUniverseSystemsSystemId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var systemId int64

		resp, httpRes, err := apiClient.UniverseAPI.GetUniverseSystemsSystemId(context.Background(), systemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UniverseAPIService GetUniverseTypes", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UniverseAPI.GetUniverseTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UniverseAPIService GetUniverseTypesTypeId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var typeId int64

		resp, httpRes, err := apiClient.UniverseAPI.GetUniverseTypesTypeId(context.Background(), typeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UniverseAPIService PostUniverseIds", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UniverseAPI.PostUniverseIds(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UniverseAPIService PostUniverseNames", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UniverseAPI.PostUniverseNames(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
