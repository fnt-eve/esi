// Package esi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package esi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	OAuth2Scopes = "OAuth2.Scopes"
)

// Defines values for AlliancesAllianceIDContactsGetContactType.
const (
	AlliancesAllianceIDContactsGetContactTypeAlliance    AlliancesAllianceIDContactsGetContactType = "alliance"
	AlliancesAllianceIDContactsGetContactTypeCharacter   AlliancesAllianceIDContactsGetContactType = "character"
	AlliancesAllianceIDContactsGetContactTypeCorporation AlliancesAllianceIDContactsGetContactType = "corporation"
	AlliancesAllianceIDContactsGetContactTypeFaction     AlliancesAllianceIDContactsGetContactType = "faction"
)

// Defines values for CharactersCharacterIDAssetsGetLocationFlag.
const (
	CharactersCharacterIDAssetsGetLocationFlagAssetSafety                         CharactersCharacterIDAssetsGetLocationFlag = "AssetSafety"
	CharactersCharacterIDAssetsGetLocationFlagAutoFit                             CharactersCharacterIDAssetsGetLocationFlag = "AutoFit"
	CharactersCharacterIDAssetsGetLocationFlagBoosterBay                          CharactersCharacterIDAssetsGetLocationFlag = "BoosterBay"
	CharactersCharacterIDAssetsGetLocationFlagCapsuleerDeliveries                 CharactersCharacterIDAssetsGetLocationFlag = "CapsuleerDeliveries"
	CharactersCharacterIDAssetsGetLocationFlagCargo                               CharactersCharacterIDAssetsGetLocationFlag = "Cargo"
	CharactersCharacterIDAssetsGetLocationFlagCorporationGoalDeliveries           CharactersCharacterIDAssetsGetLocationFlag = "CorporationGoalDeliveries"
	CharactersCharacterIDAssetsGetLocationFlagCorpseBay                           CharactersCharacterIDAssetsGetLocationFlag = "CorpseBay"
	CharactersCharacterIDAssetsGetLocationFlagDeliveries                          CharactersCharacterIDAssetsGetLocationFlag = "Deliveries"
	CharactersCharacterIDAssetsGetLocationFlagDroneBay                            CharactersCharacterIDAssetsGetLocationFlag = "DroneBay"
	CharactersCharacterIDAssetsGetLocationFlagFighterBay                          CharactersCharacterIDAssetsGetLocationFlag = "FighterBay"
	CharactersCharacterIDAssetsGetLocationFlagFighterTube0                        CharactersCharacterIDAssetsGetLocationFlag = "FighterTube0"
	CharactersCharacterIDAssetsGetLocationFlagFighterTube1                        CharactersCharacterIDAssetsGetLocationFlag = "FighterTube1"
	CharactersCharacterIDAssetsGetLocationFlagFighterTube2                        CharactersCharacterIDAssetsGetLocationFlag = "FighterTube2"
	CharactersCharacterIDAssetsGetLocationFlagFighterTube3                        CharactersCharacterIDAssetsGetLocationFlag = "FighterTube3"
	CharactersCharacterIDAssetsGetLocationFlagFighterTube4                        CharactersCharacterIDAssetsGetLocationFlag = "FighterTube4"
	CharactersCharacterIDAssetsGetLocationFlagFleetHangar                         CharactersCharacterIDAssetsGetLocationFlag = "FleetHangar"
	CharactersCharacterIDAssetsGetLocationFlagFrigateEscapeBay                    CharactersCharacterIDAssetsGetLocationFlag = "FrigateEscapeBay"
	CharactersCharacterIDAssetsGetLocationFlagHangar                              CharactersCharacterIDAssetsGetLocationFlag = "Hangar"
	CharactersCharacterIDAssetsGetLocationFlagHangarAll                           CharactersCharacterIDAssetsGetLocationFlag = "HangarAll"
	CharactersCharacterIDAssetsGetLocationFlagHiSlot0                             CharactersCharacterIDAssetsGetLocationFlag = "HiSlot0"
	CharactersCharacterIDAssetsGetLocationFlagHiSlot1                             CharactersCharacterIDAssetsGetLocationFlag = "HiSlot1"
	CharactersCharacterIDAssetsGetLocationFlagHiSlot2                             CharactersCharacterIDAssetsGetLocationFlag = "HiSlot2"
	CharactersCharacterIDAssetsGetLocationFlagHiSlot3                             CharactersCharacterIDAssetsGetLocationFlag = "HiSlot3"
	CharactersCharacterIDAssetsGetLocationFlagHiSlot4                             CharactersCharacterIDAssetsGetLocationFlag = "HiSlot4"
	CharactersCharacterIDAssetsGetLocationFlagHiSlot5                             CharactersCharacterIDAssetsGetLocationFlag = "HiSlot5"
	CharactersCharacterIDAssetsGetLocationFlagHiSlot6                             CharactersCharacterIDAssetsGetLocationFlag = "HiSlot6"
	CharactersCharacterIDAssetsGetLocationFlagHiSlot7                             CharactersCharacterIDAssetsGetLocationFlag = "HiSlot7"
	CharactersCharacterIDAssetsGetLocationFlagHiddenModifiers                     CharactersCharacterIDAssetsGetLocationFlag = "HiddenModifiers"
	CharactersCharacterIDAssetsGetLocationFlagImplant                             CharactersCharacterIDAssetsGetLocationFlag = "Implant"
	CharactersCharacterIDAssetsGetLocationFlagInfrastructureHangar                CharactersCharacterIDAssetsGetLocationFlag = "InfrastructureHangar"
	CharactersCharacterIDAssetsGetLocationFlagLoSlot0                             CharactersCharacterIDAssetsGetLocationFlag = "LoSlot0"
	CharactersCharacterIDAssetsGetLocationFlagLoSlot1                             CharactersCharacterIDAssetsGetLocationFlag = "LoSlot1"
	CharactersCharacterIDAssetsGetLocationFlagLoSlot2                             CharactersCharacterIDAssetsGetLocationFlag = "LoSlot2"
	CharactersCharacterIDAssetsGetLocationFlagLoSlot3                             CharactersCharacterIDAssetsGetLocationFlag = "LoSlot3"
	CharactersCharacterIDAssetsGetLocationFlagLoSlot4                             CharactersCharacterIDAssetsGetLocationFlag = "LoSlot4"
	CharactersCharacterIDAssetsGetLocationFlagLoSlot5                             CharactersCharacterIDAssetsGetLocationFlag = "LoSlot5"
	CharactersCharacterIDAssetsGetLocationFlagLoSlot6                             CharactersCharacterIDAssetsGetLocationFlag = "LoSlot6"
	CharactersCharacterIDAssetsGetLocationFlagLoSlot7                             CharactersCharacterIDAssetsGetLocationFlag = "LoSlot7"
	CharactersCharacterIDAssetsGetLocationFlagLocked                              CharactersCharacterIDAssetsGetLocationFlag = "Locked"
	CharactersCharacterIDAssetsGetLocationFlagMedSlot0                            CharactersCharacterIDAssetsGetLocationFlag = "MedSlot0"
	CharactersCharacterIDAssetsGetLocationFlagMedSlot1                            CharactersCharacterIDAssetsGetLocationFlag = "MedSlot1"
	CharactersCharacterIDAssetsGetLocationFlagMedSlot2                            CharactersCharacterIDAssetsGetLocationFlag = "MedSlot2"
	CharactersCharacterIDAssetsGetLocationFlagMedSlot3                            CharactersCharacterIDAssetsGetLocationFlag = "MedSlot3"
	CharactersCharacterIDAssetsGetLocationFlagMedSlot4                            CharactersCharacterIDAssetsGetLocationFlag = "MedSlot4"
	CharactersCharacterIDAssetsGetLocationFlagMedSlot5                            CharactersCharacterIDAssetsGetLocationFlag = "MedSlot5"
	CharactersCharacterIDAssetsGetLocationFlagMedSlot6                            CharactersCharacterIDAssetsGetLocationFlag = "MedSlot6"
	CharactersCharacterIDAssetsGetLocationFlagMedSlot7                            CharactersCharacterIDAssetsGetLocationFlag = "MedSlot7"
	CharactersCharacterIDAssetsGetLocationFlagMobileDepotHold                     CharactersCharacterIDAssetsGetLocationFlag = "MobileDepotHold"
	CharactersCharacterIDAssetsGetLocationFlagMoonMaterialBay                     CharactersCharacterIDAssetsGetLocationFlag = "MoonMaterialBay"
	CharactersCharacterIDAssetsGetLocationFlagQuafeBay                            CharactersCharacterIDAssetsGetLocationFlag = "QuafeBay"
	CharactersCharacterIDAssetsGetLocationFlagRigSlot0                            CharactersCharacterIDAssetsGetLocationFlag = "RigSlot0"
	CharactersCharacterIDAssetsGetLocationFlagRigSlot1                            CharactersCharacterIDAssetsGetLocationFlag = "RigSlot1"
	CharactersCharacterIDAssetsGetLocationFlagRigSlot2                            CharactersCharacterIDAssetsGetLocationFlag = "RigSlot2"
	CharactersCharacterIDAssetsGetLocationFlagRigSlot3                            CharactersCharacterIDAssetsGetLocationFlag = "RigSlot3"
	CharactersCharacterIDAssetsGetLocationFlagRigSlot4                            CharactersCharacterIDAssetsGetLocationFlag = "RigSlot4"
	CharactersCharacterIDAssetsGetLocationFlagRigSlot5                            CharactersCharacterIDAssetsGetLocationFlag = "RigSlot5"
	CharactersCharacterIDAssetsGetLocationFlagRigSlot6                            CharactersCharacterIDAssetsGetLocationFlag = "RigSlot6"
	CharactersCharacterIDAssetsGetLocationFlagRigSlot7                            CharactersCharacterIDAssetsGetLocationFlag = "RigSlot7"
	CharactersCharacterIDAssetsGetLocationFlagShipHangar                          CharactersCharacterIDAssetsGetLocationFlag = "ShipHangar"
	CharactersCharacterIDAssetsGetLocationFlagSkill                               CharactersCharacterIDAssetsGetLocationFlag = "Skill"
	CharactersCharacterIDAssetsGetLocationFlagSpecializedAmmoHold                 CharactersCharacterIDAssetsGetLocationFlag = "SpecializedAmmoHold"
	CharactersCharacterIDAssetsGetLocationFlagSpecializedAsteroidHold             CharactersCharacterIDAssetsGetLocationFlag = "SpecializedAsteroidHold"
	CharactersCharacterIDAssetsGetLocationFlagSpecializedCommandCenterHold        CharactersCharacterIDAssetsGetLocationFlag = "SpecializedCommandCenterHold"
	CharactersCharacterIDAssetsGetLocationFlagSpecializedFuelBay                  CharactersCharacterIDAssetsGetLocationFlag = "SpecializedFuelBay"
	CharactersCharacterIDAssetsGetLocationFlagSpecializedGasHold                  CharactersCharacterIDAssetsGetLocationFlag = "SpecializedGasHold"
	CharactersCharacterIDAssetsGetLocationFlagSpecializedIceHold                  CharactersCharacterIDAssetsGetLocationFlag = "SpecializedIceHold"
	CharactersCharacterIDAssetsGetLocationFlagSpecializedIndustrialShipHold       CharactersCharacterIDAssetsGetLocationFlag = "SpecializedIndustrialShipHold"
	CharactersCharacterIDAssetsGetLocationFlagSpecializedLargeShipHold            CharactersCharacterIDAssetsGetLocationFlag = "SpecializedLargeShipHold"
	CharactersCharacterIDAssetsGetLocationFlagSpecializedMaterialBay              CharactersCharacterIDAssetsGetLocationFlag = "SpecializedMaterialBay"
	CharactersCharacterIDAssetsGetLocationFlagSpecializedMediumShipHold           CharactersCharacterIDAssetsGetLocationFlag = "SpecializedMediumShipHold"
	CharactersCharacterIDAssetsGetLocationFlagSpecializedMineralHold              CharactersCharacterIDAssetsGetLocationFlag = "SpecializedMineralHold"
	CharactersCharacterIDAssetsGetLocationFlagSpecializedOreHold                  CharactersCharacterIDAssetsGetLocationFlag = "SpecializedOreHold"
	CharactersCharacterIDAssetsGetLocationFlagSpecializedPlanetaryCommoditiesHold CharactersCharacterIDAssetsGetLocationFlag = "SpecializedPlanetaryCommoditiesHold"
	CharactersCharacterIDAssetsGetLocationFlagSpecializedSalvageHold              CharactersCharacterIDAssetsGetLocationFlag = "SpecializedSalvageHold"
	CharactersCharacterIDAssetsGetLocationFlagSpecializedShipHold                 CharactersCharacterIDAssetsGetLocationFlag = "SpecializedShipHold"
	CharactersCharacterIDAssetsGetLocationFlagSpecializedSmallShipHold            CharactersCharacterIDAssetsGetLocationFlag = "SpecializedSmallShipHold"
	CharactersCharacterIDAssetsGetLocationFlagStructureDeedBay                    CharactersCharacterIDAssetsGetLocationFlag = "StructureDeedBay"
	CharactersCharacterIDAssetsGetLocationFlagSubSystemBay                        CharactersCharacterIDAssetsGetLocationFlag = "SubSystemBay"
	CharactersCharacterIDAssetsGetLocationFlagSubSystemSlot0                      CharactersCharacterIDAssetsGetLocationFlag = "SubSystemSlot0"
	CharactersCharacterIDAssetsGetLocationFlagSubSystemSlot1                      CharactersCharacterIDAssetsGetLocationFlag = "SubSystemSlot1"
	CharactersCharacterIDAssetsGetLocationFlagSubSystemSlot2                      CharactersCharacterIDAssetsGetLocationFlag = "SubSystemSlot2"
	CharactersCharacterIDAssetsGetLocationFlagSubSystemSlot3                      CharactersCharacterIDAssetsGetLocationFlag = "SubSystemSlot3"
	CharactersCharacterIDAssetsGetLocationFlagSubSystemSlot4                      CharactersCharacterIDAssetsGetLocationFlag = "SubSystemSlot4"
	CharactersCharacterIDAssetsGetLocationFlagSubSystemSlot5                      CharactersCharacterIDAssetsGetLocationFlag = "SubSystemSlot5"
	CharactersCharacterIDAssetsGetLocationFlagSubSystemSlot6                      CharactersCharacterIDAssetsGetLocationFlag = "SubSystemSlot6"
	CharactersCharacterIDAssetsGetLocationFlagSubSystemSlot7                      CharactersCharacterIDAssetsGetLocationFlag = "SubSystemSlot7"
	CharactersCharacterIDAssetsGetLocationFlagUnlocked                            CharactersCharacterIDAssetsGetLocationFlag = "Unlocked"
	CharactersCharacterIDAssetsGetLocationFlagWardrobe                            CharactersCharacterIDAssetsGetLocationFlag = "Wardrobe"
)

// Defines values for CharactersCharacterIDAssetsGetLocationType.
const (
	CharactersCharacterIDAssetsGetLocationTypeItem        CharactersCharacterIDAssetsGetLocationType = "item"
	CharactersCharacterIDAssetsGetLocationTypeOther       CharactersCharacterIDAssetsGetLocationType = "other"
	CharactersCharacterIDAssetsGetLocationTypeSolarSystem CharactersCharacterIDAssetsGetLocationType = "solar_system"
	CharactersCharacterIDAssetsGetLocationTypeStation     CharactersCharacterIDAssetsGetLocationType = "station"
)

// Defines values for CharactersCharacterIDBlueprintsGetLocationFlag.
const (
	CharactersCharacterIDBlueprintsGetLocationFlagAssetSafety                         CharactersCharacterIDBlueprintsGetLocationFlag = "AssetSafety"
	CharactersCharacterIDBlueprintsGetLocationFlagAutoFit                             CharactersCharacterIDBlueprintsGetLocationFlag = "AutoFit"
	CharactersCharacterIDBlueprintsGetLocationFlagCargo                               CharactersCharacterIDBlueprintsGetLocationFlag = "Cargo"
	CharactersCharacterIDBlueprintsGetLocationFlagCorpseBay                           CharactersCharacterIDBlueprintsGetLocationFlag = "CorpseBay"
	CharactersCharacterIDBlueprintsGetLocationFlagDeliveries                          CharactersCharacterIDBlueprintsGetLocationFlag = "Deliveries"
	CharactersCharacterIDBlueprintsGetLocationFlagDroneBay                            CharactersCharacterIDBlueprintsGetLocationFlag = "DroneBay"
	CharactersCharacterIDBlueprintsGetLocationFlagFighterBay                          CharactersCharacterIDBlueprintsGetLocationFlag = "FighterBay"
	CharactersCharacterIDBlueprintsGetLocationFlagFighterTube0                        CharactersCharacterIDBlueprintsGetLocationFlag = "FighterTube0"
	CharactersCharacterIDBlueprintsGetLocationFlagFighterTube1                        CharactersCharacterIDBlueprintsGetLocationFlag = "FighterTube1"
	CharactersCharacterIDBlueprintsGetLocationFlagFighterTube2                        CharactersCharacterIDBlueprintsGetLocationFlag = "FighterTube2"
	CharactersCharacterIDBlueprintsGetLocationFlagFighterTube3                        CharactersCharacterIDBlueprintsGetLocationFlag = "FighterTube3"
	CharactersCharacterIDBlueprintsGetLocationFlagFighterTube4                        CharactersCharacterIDBlueprintsGetLocationFlag = "FighterTube4"
	CharactersCharacterIDBlueprintsGetLocationFlagFleetHangar                         CharactersCharacterIDBlueprintsGetLocationFlag = "FleetHangar"
	CharactersCharacterIDBlueprintsGetLocationFlagHangar                              CharactersCharacterIDBlueprintsGetLocationFlag = "Hangar"
	CharactersCharacterIDBlueprintsGetLocationFlagHangarAll                           CharactersCharacterIDBlueprintsGetLocationFlag = "HangarAll"
	CharactersCharacterIDBlueprintsGetLocationFlagHiSlot0                             CharactersCharacterIDBlueprintsGetLocationFlag = "HiSlot0"
	CharactersCharacterIDBlueprintsGetLocationFlagHiSlot1                             CharactersCharacterIDBlueprintsGetLocationFlag = "HiSlot1"
	CharactersCharacterIDBlueprintsGetLocationFlagHiSlot2                             CharactersCharacterIDBlueprintsGetLocationFlag = "HiSlot2"
	CharactersCharacterIDBlueprintsGetLocationFlagHiSlot3                             CharactersCharacterIDBlueprintsGetLocationFlag = "HiSlot3"
	CharactersCharacterIDBlueprintsGetLocationFlagHiSlot4                             CharactersCharacterIDBlueprintsGetLocationFlag = "HiSlot4"
	CharactersCharacterIDBlueprintsGetLocationFlagHiSlot5                             CharactersCharacterIDBlueprintsGetLocationFlag = "HiSlot5"
	CharactersCharacterIDBlueprintsGetLocationFlagHiSlot6                             CharactersCharacterIDBlueprintsGetLocationFlag = "HiSlot6"
	CharactersCharacterIDBlueprintsGetLocationFlagHiSlot7                             CharactersCharacterIDBlueprintsGetLocationFlag = "HiSlot7"
	CharactersCharacterIDBlueprintsGetLocationFlagHiddenModifiers                     CharactersCharacterIDBlueprintsGetLocationFlag = "HiddenModifiers"
	CharactersCharacterIDBlueprintsGetLocationFlagImplant                             CharactersCharacterIDBlueprintsGetLocationFlag = "Implant"
	CharactersCharacterIDBlueprintsGetLocationFlagLoSlot0                             CharactersCharacterIDBlueprintsGetLocationFlag = "LoSlot0"
	CharactersCharacterIDBlueprintsGetLocationFlagLoSlot1                             CharactersCharacterIDBlueprintsGetLocationFlag = "LoSlot1"
	CharactersCharacterIDBlueprintsGetLocationFlagLoSlot2                             CharactersCharacterIDBlueprintsGetLocationFlag = "LoSlot2"
	CharactersCharacterIDBlueprintsGetLocationFlagLoSlot3                             CharactersCharacterIDBlueprintsGetLocationFlag = "LoSlot3"
	CharactersCharacterIDBlueprintsGetLocationFlagLoSlot4                             CharactersCharacterIDBlueprintsGetLocationFlag = "LoSlot4"
	CharactersCharacterIDBlueprintsGetLocationFlagLoSlot5                             CharactersCharacterIDBlueprintsGetLocationFlag = "LoSlot5"
	CharactersCharacterIDBlueprintsGetLocationFlagLoSlot6                             CharactersCharacterIDBlueprintsGetLocationFlag = "LoSlot6"
	CharactersCharacterIDBlueprintsGetLocationFlagLoSlot7                             CharactersCharacterIDBlueprintsGetLocationFlag = "LoSlot7"
	CharactersCharacterIDBlueprintsGetLocationFlagLocked                              CharactersCharacterIDBlueprintsGetLocationFlag = "Locked"
	CharactersCharacterIDBlueprintsGetLocationFlagMedSlot0                            CharactersCharacterIDBlueprintsGetLocationFlag = "MedSlot0"
	CharactersCharacterIDBlueprintsGetLocationFlagMedSlot1                            CharactersCharacterIDBlueprintsGetLocationFlag = "MedSlot1"
	CharactersCharacterIDBlueprintsGetLocationFlagMedSlot2                            CharactersCharacterIDBlueprintsGetLocationFlag = "MedSlot2"
	CharactersCharacterIDBlueprintsGetLocationFlagMedSlot3                            CharactersCharacterIDBlueprintsGetLocationFlag = "MedSlot3"
	CharactersCharacterIDBlueprintsGetLocationFlagMedSlot4                            CharactersCharacterIDBlueprintsGetLocationFlag = "MedSlot4"
	CharactersCharacterIDBlueprintsGetLocationFlagMedSlot5                            CharactersCharacterIDBlueprintsGetLocationFlag = "MedSlot5"
	CharactersCharacterIDBlueprintsGetLocationFlagMedSlot6                            CharactersCharacterIDBlueprintsGetLocationFlag = "MedSlot6"
	CharactersCharacterIDBlueprintsGetLocationFlagMedSlot7                            CharactersCharacterIDBlueprintsGetLocationFlag = "MedSlot7"
	CharactersCharacterIDBlueprintsGetLocationFlagModule                              CharactersCharacterIDBlueprintsGetLocationFlag = "Module"
	CharactersCharacterIDBlueprintsGetLocationFlagQuafeBay                            CharactersCharacterIDBlueprintsGetLocationFlag = "QuafeBay"
	CharactersCharacterIDBlueprintsGetLocationFlagRigSlot0                            CharactersCharacterIDBlueprintsGetLocationFlag = "RigSlot0"
	CharactersCharacterIDBlueprintsGetLocationFlagRigSlot1                            CharactersCharacterIDBlueprintsGetLocationFlag = "RigSlot1"
	CharactersCharacterIDBlueprintsGetLocationFlagRigSlot2                            CharactersCharacterIDBlueprintsGetLocationFlag = "RigSlot2"
	CharactersCharacterIDBlueprintsGetLocationFlagRigSlot3                            CharactersCharacterIDBlueprintsGetLocationFlag = "RigSlot3"
	CharactersCharacterIDBlueprintsGetLocationFlagRigSlot4                            CharactersCharacterIDBlueprintsGetLocationFlag = "RigSlot4"
	CharactersCharacterIDBlueprintsGetLocationFlagRigSlot5                            CharactersCharacterIDBlueprintsGetLocationFlag = "RigSlot5"
	CharactersCharacterIDBlueprintsGetLocationFlagRigSlot6                            CharactersCharacterIDBlueprintsGetLocationFlag = "RigSlot6"
	CharactersCharacterIDBlueprintsGetLocationFlagRigSlot7                            CharactersCharacterIDBlueprintsGetLocationFlag = "RigSlot7"
	CharactersCharacterIDBlueprintsGetLocationFlagShipHangar                          CharactersCharacterIDBlueprintsGetLocationFlag = "ShipHangar"
	CharactersCharacterIDBlueprintsGetLocationFlagSpecializedAmmoHold                 CharactersCharacterIDBlueprintsGetLocationFlag = "SpecializedAmmoHold"
	CharactersCharacterIDBlueprintsGetLocationFlagSpecializedCommandCenterHold        CharactersCharacterIDBlueprintsGetLocationFlag = "SpecializedCommandCenterHold"
	CharactersCharacterIDBlueprintsGetLocationFlagSpecializedFuelBay                  CharactersCharacterIDBlueprintsGetLocationFlag = "SpecializedFuelBay"
	CharactersCharacterIDBlueprintsGetLocationFlagSpecializedGasHold                  CharactersCharacterIDBlueprintsGetLocationFlag = "SpecializedGasHold"
	CharactersCharacterIDBlueprintsGetLocationFlagSpecializedIndustrialShipHold       CharactersCharacterIDBlueprintsGetLocationFlag = "SpecializedIndustrialShipHold"
	CharactersCharacterIDBlueprintsGetLocationFlagSpecializedLargeShipHold            CharactersCharacterIDBlueprintsGetLocationFlag = "SpecializedLargeShipHold"
	CharactersCharacterIDBlueprintsGetLocationFlagSpecializedMaterialBay              CharactersCharacterIDBlueprintsGetLocationFlag = "SpecializedMaterialBay"
	CharactersCharacterIDBlueprintsGetLocationFlagSpecializedMediumShipHold           CharactersCharacterIDBlueprintsGetLocationFlag = "SpecializedMediumShipHold"
	CharactersCharacterIDBlueprintsGetLocationFlagSpecializedMineralHold              CharactersCharacterIDBlueprintsGetLocationFlag = "SpecializedMineralHold"
	CharactersCharacterIDBlueprintsGetLocationFlagSpecializedOreHold                  CharactersCharacterIDBlueprintsGetLocationFlag = "SpecializedOreHold"
	CharactersCharacterIDBlueprintsGetLocationFlagSpecializedPlanetaryCommoditiesHold CharactersCharacterIDBlueprintsGetLocationFlag = "SpecializedPlanetaryCommoditiesHold"
	CharactersCharacterIDBlueprintsGetLocationFlagSpecializedSalvageHold              CharactersCharacterIDBlueprintsGetLocationFlag = "SpecializedSalvageHold"
	CharactersCharacterIDBlueprintsGetLocationFlagSpecializedShipHold                 CharactersCharacterIDBlueprintsGetLocationFlag = "SpecializedShipHold"
	CharactersCharacterIDBlueprintsGetLocationFlagSpecializedSmallShipHold            CharactersCharacterIDBlueprintsGetLocationFlag = "SpecializedSmallShipHold"
	CharactersCharacterIDBlueprintsGetLocationFlagSubSystemSlot0                      CharactersCharacterIDBlueprintsGetLocationFlag = "SubSystemSlot0"
	CharactersCharacterIDBlueprintsGetLocationFlagSubSystemSlot1                      CharactersCharacterIDBlueprintsGetLocationFlag = "SubSystemSlot1"
	CharactersCharacterIDBlueprintsGetLocationFlagSubSystemSlot2                      CharactersCharacterIDBlueprintsGetLocationFlag = "SubSystemSlot2"
	CharactersCharacterIDBlueprintsGetLocationFlagSubSystemSlot3                      CharactersCharacterIDBlueprintsGetLocationFlag = "SubSystemSlot3"
	CharactersCharacterIDBlueprintsGetLocationFlagSubSystemSlot4                      CharactersCharacterIDBlueprintsGetLocationFlag = "SubSystemSlot4"
	CharactersCharacterIDBlueprintsGetLocationFlagSubSystemSlot5                      CharactersCharacterIDBlueprintsGetLocationFlag = "SubSystemSlot5"
	CharactersCharacterIDBlueprintsGetLocationFlagSubSystemSlot6                      CharactersCharacterIDBlueprintsGetLocationFlag = "SubSystemSlot6"
	CharactersCharacterIDBlueprintsGetLocationFlagSubSystemSlot7                      CharactersCharacterIDBlueprintsGetLocationFlag = "SubSystemSlot7"
	CharactersCharacterIDBlueprintsGetLocationFlagUnlocked                            CharactersCharacterIDBlueprintsGetLocationFlag = "Unlocked"
)

// Defines values for CharactersCharacterIDCalendarEventIDAttendeesGetEventResponse.
const (
	CharactersCharacterIDCalendarEventIDAttendeesGetEventResponseAccepted     CharactersCharacterIDCalendarEventIDAttendeesGetEventResponse = "accepted"
	CharactersCharacterIDCalendarEventIDAttendeesGetEventResponseDeclined     CharactersCharacterIDCalendarEventIDAttendeesGetEventResponse = "declined"
	CharactersCharacterIDCalendarEventIDAttendeesGetEventResponseNotResponded CharactersCharacterIDCalendarEventIDAttendeesGetEventResponse = "not_responded"
	CharactersCharacterIDCalendarEventIDAttendeesGetEventResponseTentative    CharactersCharacterIDCalendarEventIDAttendeesGetEventResponse = "tentative"
)

// Defines values for CharactersCharacterIDCalendarEventIDGetOwnerType.
const (
	CharactersCharacterIDCalendarEventIDGetOwnerTypeAlliance    CharactersCharacterIDCalendarEventIDGetOwnerType = "alliance"
	CharactersCharacterIDCalendarEventIDGetOwnerTypeCharacter   CharactersCharacterIDCalendarEventIDGetOwnerType = "character"
	CharactersCharacterIDCalendarEventIDGetOwnerTypeCorporation CharactersCharacterIDCalendarEventIDGetOwnerType = "corporation"
	CharactersCharacterIDCalendarEventIDGetOwnerTypeEveServer   CharactersCharacterIDCalendarEventIDGetOwnerType = "eve_server"
	CharactersCharacterIDCalendarEventIDGetOwnerTypeFaction     CharactersCharacterIDCalendarEventIDGetOwnerType = "faction"
)

// Defines values for CharactersCharacterIDCalendarGetEventResponse.
const (
	CharactersCharacterIDCalendarGetEventResponseAccepted     CharactersCharacterIDCalendarGetEventResponse = "accepted"
	CharactersCharacterIDCalendarGetEventResponseDeclined     CharactersCharacterIDCalendarGetEventResponse = "declined"
	CharactersCharacterIDCalendarGetEventResponseNotResponded CharactersCharacterIDCalendarGetEventResponse = "not_responded"
	CharactersCharacterIDCalendarGetEventResponseTentative    CharactersCharacterIDCalendarGetEventResponse = "tentative"
)

// Defines values for CharactersCharacterIDClonesGetHomeLocationLocationType.
const (
	CharactersCharacterIDClonesGetHomeLocationLocationTypeStation   CharactersCharacterIDClonesGetHomeLocationLocationType = "station"
	CharactersCharacterIDClonesGetHomeLocationLocationTypeStructure CharactersCharacterIDClonesGetHomeLocationLocationType = "structure"
)

// Defines values for CharactersCharacterIDClonesGetJumpClonesLocationType.
const (
	CharactersCharacterIDClonesGetJumpClonesLocationTypeStation   CharactersCharacterIDClonesGetJumpClonesLocationType = "station"
	CharactersCharacterIDClonesGetJumpClonesLocationTypeStructure CharactersCharacterIDClonesGetJumpClonesLocationType = "structure"
)

// Defines values for CharactersCharacterIDContactsGetContactType.
const (
	CharactersCharacterIDContactsGetContactTypeAlliance    CharactersCharacterIDContactsGetContactType = "alliance"
	CharactersCharacterIDContactsGetContactTypeCharacter   CharactersCharacterIDContactsGetContactType = "character"
	CharactersCharacterIDContactsGetContactTypeCorporation CharactersCharacterIDContactsGetContactType = "corporation"
	CharactersCharacterIDContactsGetContactTypeFaction     CharactersCharacterIDContactsGetContactType = "faction"
)

// Defines values for CharactersCharacterIDContractsGetAvailability.
const (
	CharactersCharacterIDContractsGetAvailabilityAlliance    CharactersCharacterIDContractsGetAvailability = "alliance"
	CharactersCharacterIDContractsGetAvailabilityCorporation CharactersCharacterIDContractsGetAvailability = "corporation"
	CharactersCharacterIDContractsGetAvailabilityPersonal    CharactersCharacterIDContractsGetAvailability = "personal"
	CharactersCharacterIDContractsGetAvailabilityPublic      CharactersCharacterIDContractsGetAvailability = "public"
)

// Defines values for CharactersCharacterIDContractsGetStatus.
const (
	CharactersCharacterIDContractsGetStatusCancelled          CharactersCharacterIDContractsGetStatus = "cancelled"
	CharactersCharacterIDContractsGetStatusDeleted            CharactersCharacterIDContractsGetStatus = "deleted"
	CharactersCharacterIDContractsGetStatusFailed             CharactersCharacterIDContractsGetStatus = "failed"
	CharactersCharacterIDContractsGetStatusFinished           CharactersCharacterIDContractsGetStatus = "finished"
	CharactersCharacterIDContractsGetStatusFinishedContractor CharactersCharacterIDContractsGetStatus = "finished_contractor"
	CharactersCharacterIDContractsGetStatusFinishedIssuer     CharactersCharacterIDContractsGetStatus = "finished_issuer"
	CharactersCharacterIDContractsGetStatusInProgress         CharactersCharacterIDContractsGetStatus = "in_progress"
	CharactersCharacterIDContractsGetStatusOutstanding        CharactersCharacterIDContractsGetStatus = "outstanding"
	CharactersCharacterIDContractsGetStatusRejected           CharactersCharacterIDContractsGetStatus = "rejected"
	CharactersCharacterIDContractsGetStatusReversed           CharactersCharacterIDContractsGetStatus = "reversed"
)

// Defines values for CharactersCharacterIDContractsGetType.
const (
	CharactersCharacterIDContractsGetTypeAuction      CharactersCharacterIDContractsGetType = "auction"
	CharactersCharacterIDContractsGetTypeCourier      CharactersCharacterIDContractsGetType = "courier"
	CharactersCharacterIDContractsGetTypeItemExchange CharactersCharacterIDContractsGetType = "item_exchange"
	CharactersCharacterIDContractsGetTypeLoan         CharactersCharacterIDContractsGetType = "loan"
	CharactersCharacterIDContractsGetTypeUnknown      CharactersCharacterIDContractsGetType = "unknown"
)

// Defines values for CharactersCharacterIDFittingsGetItemsFlag.
const (
	CharactersCharacterIDFittingsGetItemsFlagCargo          CharactersCharacterIDFittingsGetItemsFlag = "Cargo"
	CharactersCharacterIDFittingsGetItemsFlagDroneBay       CharactersCharacterIDFittingsGetItemsFlag = "DroneBay"
	CharactersCharacterIDFittingsGetItemsFlagFighterBay     CharactersCharacterIDFittingsGetItemsFlag = "FighterBay"
	CharactersCharacterIDFittingsGetItemsFlagHiSlot0        CharactersCharacterIDFittingsGetItemsFlag = "HiSlot0"
	CharactersCharacterIDFittingsGetItemsFlagHiSlot1        CharactersCharacterIDFittingsGetItemsFlag = "HiSlot1"
	CharactersCharacterIDFittingsGetItemsFlagHiSlot2        CharactersCharacterIDFittingsGetItemsFlag = "HiSlot2"
	CharactersCharacterIDFittingsGetItemsFlagHiSlot3        CharactersCharacterIDFittingsGetItemsFlag = "HiSlot3"
	CharactersCharacterIDFittingsGetItemsFlagHiSlot4        CharactersCharacterIDFittingsGetItemsFlag = "HiSlot4"
	CharactersCharacterIDFittingsGetItemsFlagHiSlot5        CharactersCharacterIDFittingsGetItemsFlag = "HiSlot5"
	CharactersCharacterIDFittingsGetItemsFlagHiSlot6        CharactersCharacterIDFittingsGetItemsFlag = "HiSlot6"
	CharactersCharacterIDFittingsGetItemsFlagHiSlot7        CharactersCharacterIDFittingsGetItemsFlag = "HiSlot7"
	CharactersCharacterIDFittingsGetItemsFlagInvalid        CharactersCharacterIDFittingsGetItemsFlag = "Invalid"
	CharactersCharacterIDFittingsGetItemsFlagLoSlot0        CharactersCharacterIDFittingsGetItemsFlag = "LoSlot0"
	CharactersCharacterIDFittingsGetItemsFlagLoSlot1        CharactersCharacterIDFittingsGetItemsFlag = "LoSlot1"
	CharactersCharacterIDFittingsGetItemsFlagLoSlot2        CharactersCharacterIDFittingsGetItemsFlag = "LoSlot2"
	CharactersCharacterIDFittingsGetItemsFlagLoSlot3        CharactersCharacterIDFittingsGetItemsFlag = "LoSlot3"
	CharactersCharacterIDFittingsGetItemsFlagLoSlot4        CharactersCharacterIDFittingsGetItemsFlag = "LoSlot4"
	CharactersCharacterIDFittingsGetItemsFlagLoSlot5        CharactersCharacterIDFittingsGetItemsFlag = "LoSlot5"
	CharactersCharacterIDFittingsGetItemsFlagLoSlot6        CharactersCharacterIDFittingsGetItemsFlag = "LoSlot6"
	CharactersCharacterIDFittingsGetItemsFlagLoSlot7        CharactersCharacterIDFittingsGetItemsFlag = "LoSlot7"
	CharactersCharacterIDFittingsGetItemsFlagMedSlot0       CharactersCharacterIDFittingsGetItemsFlag = "MedSlot0"
	CharactersCharacterIDFittingsGetItemsFlagMedSlot1       CharactersCharacterIDFittingsGetItemsFlag = "MedSlot1"
	CharactersCharacterIDFittingsGetItemsFlagMedSlot2       CharactersCharacterIDFittingsGetItemsFlag = "MedSlot2"
	CharactersCharacterIDFittingsGetItemsFlagMedSlot3       CharactersCharacterIDFittingsGetItemsFlag = "MedSlot3"
	CharactersCharacterIDFittingsGetItemsFlagMedSlot4       CharactersCharacterIDFittingsGetItemsFlag = "MedSlot4"
	CharactersCharacterIDFittingsGetItemsFlagMedSlot5       CharactersCharacterIDFittingsGetItemsFlag = "MedSlot5"
	CharactersCharacterIDFittingsGetItemsFlagMedSlot6       CharactersCharacterIDFittingsGetItemsFlag = "MedSlot6"
	CharactersCharacterIDFittingsGetItemsFlagMedSlot7       CharactersCharacterIDFittingsGetItemsFlag = "MedSlot7"
	CharactersCharacterIDFittingsGetItemsFlagRigSlot0       CharactersCharacterIDFittingsGetItemsFlag = "RigSlot0"
	CharactersCharacterIDFittingsGetItemsFlagRigSlot1       CharactersCharacterIDFittingsGetItemsFlag = "RigSlot1"
	CharactersCharacterIDFittingsGetItemsFlagRigSlot2       CharactersCharacterIDFittingsGetItemsFlag = "RigSlot2"
	CharactersCharacterIDFittingsGetItemsFlagServiceSlot0   CharactersCharacterIDFittingsGetItemsFlag = "ServiceSlot0"
	CharactersCharacterIDFittingsGetItemsFlagServiceSlot1   CharactersCharacterIDFittingsGetItemsFlag = "ServiceSlot1"
	CharactersCharacterIDFittingsGetItemsFlagServiceSlot2   CharactersCharacterIDFittingsGetItemsFlag = "ServiceSlot2"
	CharactersCharacterIDFittingsGetItemsFlagServiceSlot3   CharactersCharacterIDFittingsGetItemsFlag = "ServiceSlot3"
	CharactersCharacterIDFittingsGetItemsFlagServiceSlot4   CharactersCharacterIDFittingsGetItemsFlag = "ServiceSlot4"
	CharactersCharacterIDFittingsGetItemsFlagServiceSlot5   CharactersCharacterIDFittingsGetItemsFlag = "ServiceSlot5"
	CharactersCharacterIDFittingsGetItemsFlagServiceSlot6   CharactersCharacterIDFittingsGetItemsFlag = "ServiceSlot6"
	CharactersCharacterIDFittingsGetItemsFlagServiceSlot7   CharactersCharacterIDFittingsGetItemsFlag = "ServiceSlot7"
	CharactersCharacterIDFittingsGetItemsFlagSubSystemSlot0 CharactersCharacterIDFittingsGetItemsFlag = "SubSystemSlot0"
	CharactersCharacterIDFittingsGetItemsFlagSubSystemSlot1 CharactersCharacterIDFittingsGetItemsFlag = "SubSystemSlot1"
	CharactersCharacterIDFittingsGetItemsFlagSubSystemSlot2 CharactersCharacterIDFittingsGetItemsFlag = "SubSystemSlot2"
	CharactersCharacterIDFittingsGetItemsFlagSubSystemSlot3 CharactersCharacterIDFittingsGetItemsFlag = "SubSystemSlot3"
)

// Defines values for CharactersCharacterIDFleetGetRole.
const (
	CharactersCharacterIDFleetGetRoleFleetCommander CharactersCharacterIDFleetGetRole = "fleet_commander"
	CharactersCharacterIDFleetGetRoleSquadCommander CharactersCharacterIDFleetGetRole = "squad_commander"
	CharactersCharacterIDFleetGetRoleSquadMember    CharactersCharacterIDFleetGetRole = "squad_member"
	CharactersCharacterIDFleetGetRoleWingCommander  CharactersCharacterIDFleetGetRole = "wing_commander"
)

// Defines values for CharactersCharacterIDGetGender.
const (
	Female CharactersCharacterIDGetGender = "female"
	Male   CharactersCharacterIDGetGender = "male"
)

// Defines values for CharactersCharacterIDIndustryJobsGetStatus.
const (
	CharactersCharacterIDIndustryJobsGetStatusActive    CharactersCharacterIDIndustryJobsGetStatus = "active"
	CharactersCharacterIDIndustryJobsGetStatusCancelled CharactersCharacterIDIndustryJobsGetStatus = "cancelled"
	CharactersCharacterIDIndustryJobsGetStatusDelivered CharactersCharacterIDIndustryJobsGetStatus = "delivered"
	CharactersCharacterIDIndustryJobsGetStatusPaused    CharactersCharacterIDIndustryJobsGetStatus = "paused"
	CharactersCharacterIDIndustryJobsGetStatusReady     CharactersCharacterIDIndustryJobsGetStatus = "ready"
	CharactersCharacterIDIndustryJobsGetStatusReverted  CharactersCharacterIDIndustryJobsGetStatus = "reverted"
)

// Defines values for CharactersCharacterIDMailGetRecipientsRecipientType.
const (
	CharactersCharacterIDMailGetRecipientsRecipientTypeAlliance    CharactersCharacterIDMailGetRecipientsRecipientType = "alliance"
	CharactersCharacterIDMailGetRecipientsRecipientTypeCharacter   CharactersCharacterIDMailGetRecipientsRecipientType = "character"
	CharactersCharacterIDMailGetRecipientsRecipientTypeCorporation CharactersCharacterIDMailGetRecipientsRecipientType = "corporation"
	CharactersCharacterIDMailGetRecipientsRecipientTypeMailingList CharactersCharacterIDMailGetRecipientsRecipientType = "mailing_list"
)

// Defines values for CharactersCharacterIDMailLabelsGetLabelsColor.
const (
	CharactersCharacterIDMailLabelsGetLabelsColorHash0000Fe CharactersCharacterIDMailLabelsGetLabelsColor = "#0000fe"
	CharactersCharacterIDMailLabelsGetLabelsColorHash006634 CharactersCharacterIDMailLabelsGetLabelsColor = "#006634"
	CharactersCharacterIDMailLabelsGetLabelsColorHash0099Ff CharactersCharacterIDMailLabelsGetLabelsColor = "#0099ff"
	CharactersCharacterIDMailLabelsGetLabelsColorHash00Ff33 CharactersCharacterIDMailLabelsGetLabelsColor = "#00ff33"
	CharactersCharacterIDMailLabelsGetLabelsColorHash01Ffff CharactersCharacterIDMailLabelsGetLabelsColor = "#01ffff"
	CharactersCharacterIDMailLabelsGetLabelsColorHash349800 CharactersCharacterIDMailLabelsGetLabelsColor = "#349800"
	CharactersCharacterIDMailLabelsGetLabelsColorHash660066 CharactersCharacterIDMailLabelsGetLabelsColor = "#660066"
	CharactersCharacterIDMailLabelsGetLabelsColorHash666666 CharactersCharacterIDMailLabelsGetLabelsColor = "#666666"
	CharactersCharacterIDMailLabelsGetLabelsColorHash999999 CharactersCharacterIDMailLabelsGetLabelsColor = "#999999"
	CharactersCharacterIDMailLabelsGetLabelsColorHash99Ffff CharactersCharacterIDMailLabelsGetLabelsColor = "#99ffff"
	CharactersCharacterIDMailLabelsGetLabelsColorHash9A0000 CharactersCharacterIDMailLabelsGetLabelsColor = "#9a0000"
	CharactersCharacterIDMailLabelsGetLabelsColorHashCcff9A CharactersCharacterIDMailLabelsGetLabelsColor = "#ccff9a"
	CharactersCharacterIDMailLabelsGetLabelsColorHashE6E6E6 CharactersCharacterIDMailLabelsGetLabelsColor = "#e6e6e6"
	CharactersCharacterIDMailLabelsGetLabelsColorHashFe0000 CharactersCharacterIDMailLabelsGetLabelsColor = "#fe0000"
	CharactersCharacterIDMailLabelsGetLabelsColorHashFf6600 CharactersCharacterIDMailLabelsGetLabelsColor = "#ff6600"
	CharactersCharacterIDMailLabelsGetLabelsColorHashFfff01 CharactersCharacterIDMailLabelsGetLabelsColor = "#ffff01"
	CharactersCharacterIDMailLabelsGetLabelsColorHashFfffcd CharactersCharacterIDMailLabelsGetLabelsColor = "#ffffcd"
	CharactersCharacterIDMailLabelsGetLabelsColorHashFfffff CharactersCharacterIDMailLabelsGetLabelsColor = "#ffffff"
)

// Defines values for CharactersCharacterIDMailMailIDGetRecipientsRecipientType.
const (
	CharactersCharacterIDMailMailIDGetRecipientsRecipientTypeAlliance    CharactersCharacterIDMailMailIDGetRecipientsRecipientType = "alliance"
	CharactersCharacterIDMailMailIDGetRecipientsRecipientTypeCharacter   CharactersCharacterIDMailMailIDGetRecipientsRecipientType = "character"
	CharactersCharacterIDMailMailIDGetRecipientsRecipientTypeCorporation CharactersCharacterIDMailMailIDGetRecipientsRecipientType = "corporation"
	CharactersCharacterIDMailMailIDGetRecipientsRecipientTypeMailingList CharactersCharacterIDMailMailIDGetRecipientsRecipientType = "mailing_list"
)

// Defines values for CharactersCharacterIDMedalsGetStatus.
const (
	CharactersCharacterIDMedalsGetStatusPrivate CharactersCharacterIDMedalsGetStatus = "private"
	CharactersCharacterIDMedalsGetStatusPublic  CharactersCharacterIDMedalsGetStatus = "public"
)

// Defines values for CharactersCharacterIDNotificationsGetSenderType.
const (
	CharactersCharacterIDNotificationsGetSenderTypeAlliance    CharactersCharacterIDNotificationsGetSenderType = "alliance"
	CharactersCharacterIDNotificationsGetSenderTypeCharacter   CharactersCharacterIDNotificationsGetSenderType = "character"
	CharactersCharacterIDNotificationsGetSenderTypeCorporation CharactersCharacterIDNotificationsGetSenderType = "corporation"
	CharactersCharacterIDNotificationsGetSenderTypeFaction     CharactersCharacterIDNotificationsGetSenderType = "faction"
	CharactersCharacterIDNotificationsGetSenderTypeOther       CharactersCharacterIDNotificationsGetSenderType = "other"
)

// Defines values for CharactersCharacterIDNotificationsGetType.
const (
	AcceptedAlly                              CharactersCharacterIDNotificationsGetType = "AcceptedAlly"
	AcceptedSurrender                         CharactersCharacterIDNotificationsGetType = "AcceptedSurrender"
	AgentRetiredTrigravian                    CharactersCharacterIDNotificationsGetType = "AgentRetiredTrigravian"
	AllAnchoringMsg                           CharactersCharacterIDNotificationsGetType = "AllAnchoringMsg"
	AllMaintenanceBillMsg                     CharactersCharacterIDNotificationsGetType = "AllMaintenanceBillMsg"
	AllStrucInvulnerableMsg                   CharactersCharacterIDNotificationsGetType = "AllStrucInvulnerableMsg"
	AllStructVulnerableMsg                    CharactersCharacterIDNotificationsGetType = "AllStructVulnerableMsg"
	AllWarCorpJoinedAllianceMsg               CharactersCharacterIDNotificationsGetType = "AllWarCorpJoinedAllianceMsg"
	AllWarDeclaredMsg                         CharactersCharacterIDNotificationsGetType = "AllWarDeclaredMsg"
	AllWarInvalidatedMsg                      CharactersCharacterIDNotificationsGetType = "AllWarInvalidatedMsg"
	AllWarRetractedMsg                        CharactersCharacterIDNotificationsGetType = "AllWarRetractedMsg"
	AllWarSurrenderMsg                        CharactersCharacterIDNotificationsGetType = "AllWarSurrenderMsg"
	AllianceCapitalChanged                    CharactersCharacterIDNotificationsGetType = "AllianceCapitalChanged"
	AllianceWarDeclaredV2                     CharactersCharacterIDNotificationsGetType = "AllianceWarDeclaredV2"
	AllyContractCancelled                     CharactersCharacterIDNotificationsGetType = "AllyContractCancelled"
	AllyJoinedWarAggressorMsg                 CharactersCharacterIDNotificationsGetType = "AllyJoinedWarAggressorMsg"
	AllyJoinedWarAllyMsg                      CharactersCharacterIDNotificationsGetType = "AllyJoinedWarAllyMsg"
	AllyJoinedWarDefenderMsg                  CharactersCharacterIDNotificationsGetType = "AllyJoinedWarDefenderMsg"
	BattlePunishFriendlyFire                  CharactersCharacterIDNotificationsGetType = "BattlePunishFriendlyFire"
	BillOutOfMoneyMsg                         CharactersCharacterIDNotificationsGetType = "BillOutOfMoneyMsg"
	BillPaidCorpAllMsg                        CharactersCharacterIDNotificationsGetType = "BillPaidCorpAllMsg"
	BountyClaimMsg                            CharactersCharacterIDNotificationsGetType = "BountyClaimMsg"
	BountyESSShared                           CharactersCharacterIDNotificationsGetType = "BountyESSShared"
	BountyESSTaken                            CharactersCharacterIDNotificationsGetType = "BountyESSTaken"
	BountyPlacedAlliance                      CharactersCharacterIDNotificationsGetType = "BountyPlacedAlliance"
	BountyPlacedChar                          CharactersCharacterIDNotificationsGetType = "BountyPlacedChar"
	BountyPlacedCorp                          CharactersCharacterIDNotificationsGetType = "BountyPlacedCorp"
	BountyYourBountyClaimed                   CharactersCharacterIDNotificationsGetType = "BountyYourBountyClaimed"
	BuddyConnectContactAdd                    CharactersCharacterIDNotificationsGetType = "BuddyConnectContactAdd"
	CharAppAcceptMsg                          CharactersCharacterIDNotificationsGetType = "CharAppAcceptMsg"
	CharAppRejectMsg                          CharactersCharacterIDNotificationsGetType = "CharAppRejectMsg"
	CharAppWithdrawMsg                        CharactersCharacterIDNotificationsGetType = "CharAppWithdrawMsg"
	CharLeftCorpMsg                           CharactersCharacterIDNotificationsGetType = "CharLeftCorpMsg"
	CharMedalMsg                              CharactersCharacterIDNotificationsGetType = "CharMedalMsg"
	CharTerminationMsg                        CharactersCharacterIDNotificationsGetType = "CharTerminationMsg"
	CloneActivationMsg                        CharactersCharacterIDNotificationsGetType = "CloneActivationMsg"
	CloneActivationMsg2                       CharactersCharacterIDNotificationsGetType = "CloneActivationMsg2"
	CloneMovedMsg                             CharactersCharacterIDNotificationsGetType = "CloneMovedMsg"
	CloneRevokedMsg1                          CharactersCharacterIDNotificationsGetType = "CloneRevokedMsg1"
	CloneRevokedMsg2                          CharactersCharacterIDNotificationsGetType = "CloneRevokedMsg2"
	CombatOperationFinished                   CharactersCharacterIDNotificationsGetType = "CombatOperationFinished"
	ContactAdd                                CharactersCharacterIDNotificationsGetType = "ContactAdd"
	ContactEdit                               CharactersCharacterIDNotificationsGetType = "ContactEdit"
	ContainerPasswordMsg                      CharactersCharacterIDNotificationsGetType = "ContainerPasswordMsg"
	ContractRegionChangedToPochven            CharactersCharacterIDNotificationsGetType = "ContractRegionChangedToPochven"
	CorpAllBillMsg                            CharactersCharacterIDNotificationsGetType = "CorpAllBillMsg"
	CorpAppAcceptMsg                          CharactersCharacterIDNotificationsGetType = "CorpAppAcceptMsg"
	CorpAppInvitedMsg                         CharactersCharacterIDNotificationsGetType = "CorpAppInvitedMsg"
	CorpAppNewMsg                             CharactersCharacterIDNotificationsGetType = "CorpAppNewMsg"
	CorpAppRejectCustomMsg                    CharactersCharacterIDNotificationsGetType = "CorpAppRejectCustomMsg"
	CorpAppRejectMsg                          CharactersCharacterIDNotificationsGetType = "CorpAppRejectMsg"
	CorpBecameWarEligible                     CharactersCharacterIDNotificationsGetType = "CorpBecameWarEligible"
	CorpDividendMsg                           CharactersCharacterIDNotificationsGetType = "CorpDividendMsg"
	CorpFriendlyFireDisableTimerCompleted     CharactersCharacterIDNotificationsGetType = "CorpFriendlyFireDisableTimerCompleted"
	CorpFriendlyFireDisableTimerStarted       CharactersCharacterIDNotificationsGetType = "CorpFriendlyFireDisableTimerStarted"
	CorpFriendlyFireEnableTimerCompleted      CharactersCharacterIDNotificationsGetType = "CorpFriendlyFireEnableTimerCompleted"
	CorpFriendlyFireEnableTimerStarted        CharactersCharacterIDNotificationsGetType = "CorpFriendlyFireEnableTimerStarted"
	CorpKicked                                CharactersCharacterIDNotificationsGetType = "CorpKicked"
	CorpLiquidationMsg                        CharactersCharacterIDNotificationsGetType = "CorpLiquidationMsg"
	CorpNewCEOMsg                             CharactersCharacterIDNotificationsGetType = "CorpNewCEOMsg"
	CorpNewsMsg                               CharactersCharacterIDNotificationsGetType = "CorpNewsMsg"
	CorpNoLongerWarEligible                   CharactersCharacterIDNotificationsGetType = "CorpNoLongerWarEligible"
	CorpOfficeExpirationMsg                   CharactersCharacterIDNotificationsGetType = "CorpOfficeExpirationMsg"
	CorpStructLostMsg                         CharactersCharacterIDNotificationsGetType = "CorpStructLostMsg"
	CorpTaxChangeMsg                          CharactersCharacterIDNotificationsGetType = "CorpTaxChangeMsg"
	CorpVoteCEORevokedMsg                     CharactersCharacterIDNotificationsGetType = "CorpVoteCEORevokedMsg"
	CorpVoteMsg                               CharactersCharacterIDNotificationsGetType = "CorpVoteMsg"
	CorpWarDeclaredMsg                        CharactersCharacterIDNotificationsGetType = "CorpWarDeclaredMsg"
	CorpWarDeclaredV2                         CharactersCharacterIDNotificationsGetType = "CorpWarDeclaredV2"
	CorpWarFightingLegalMsg                   CharactersCharacterIDNotificationsGetType = "CorpWarFightingLegalMsg"
	CorpWarInvalidatedMsg                     CharactersCharacterIDNotificationsGetType = "CorpWarInvalidatedMsg"
	CorpWarRetractedMsg                       CharactersCharacterIDNotificationsGetType = "CorpWarRetractedMsg"
	CorpWarSurrenderMsg                       CharactersCharacterIDNotificationsGetType = "CorpWarSurrenderMsg"
	CorporationGoalClosed                     CharactersCharacterIDNotificationsGetType = "CorporationGoalClosed"
	CorporationGoalCompleted                  CharactersCharacterIDNotificationsGetType = "CorporationGoalCompleted"
	CorporationGoalCreated                    CharactersCharacterIDNotificationsGetType = "CorporationGoalCreated"
	CorporationGoalExpired                    CharactersCharacterIDNotificationsGetType = "CorporationGoalExpired"
	CorporationGoalLimitReached               CharactersCharacterIDNotificationsGetType = "CorporationGoalLimitReached"
	CorporationGoalNameChange                 CharactersCharacterIDNotificationsGetType = "CorporationGoalNameChange"
	CorporationLeft                           CharactersCharacterIDNotificationsGetType = "CorporationLeft"
	CustomsMsg                                CharactersCharacterIDNotificationsGetType = "CustomsMsg"
	DailyItemRewardAutoClaimed                CharactersCharacterIDNotificationsGetType = "DailyItemRewardAutoClaimed"
	DeclareWar                                CharactersCharacterIDNotificationsGetType = "DeclareWar"
	DistrictAttacked                          CharactersCharacterIDNotificationsGetType = "DistrictAttacked"
	DustAppAcceptedMsg                        CharactersCharacterIDNotificationsGetType = "DustAppAcceptedMsg"
	ESSMainBankLink                           CharactersCharacterIDNotificationsGetType = "ESSMainBankLink"
	EntosisCaptureStarted                     CharactersCharacterIDNotificationsGetType = "EntosisCaptureStarted"
	ExpertSystemExpired                       CharactersCharacterIDNotificationsGetType = "ExpertSystemExpired"
	ExpertSystemExpiryImminent                CharactersCharacterIDNotificationsGetType = "ExpertSystemExpiryImminent"
	FWAllianceKickMsg                         CharactersCharacterIDNotificationsGetType = "FWAllianceKickMsg"
	FWAllianceWarningMsg                      CharactersCharacterIDNotificationsGetType = "FWAllianceWarningMsg"
	FWCharKickMsg                             CharactersCharacterIDNotificationsGetType = "FWCharKickMsg"
	FWCharRankGainMsg                         CharactersCharacterIDNotificationsGetType = "FWCharRankGainMsg"
	FWCharRankLossMsg                         CharactersCharacterIDNotificationsGetType = "FWCharRankLossMsg"
	FWCharWarningMsg                          CharactersCharacterIDNotificationsGetType = "FWCharWarningMsg"
	FWCorpJoinMsg                             CharactersCharacterIDNotificationsGetType = "FWCorpJoinMsg"
	FWCorpKickMsg                             CharactersCharacterIDNotificationsGetType = "FWCorpKickMsg"
	FWCorpLeaveMsg                            CharactersCharacterIDNotificationsGetType = "FWCorpLeaveMsg"
	FWCorpWarningMsg                          CharactersCharacterIDNotificationsGetType = "FWCorpWarningMsg"
	FacWarCorpJoinRequestMsg                  CharactersCharacterIDNotificationsGetType = "FacWarCorpJoinRequestMsg"
	FacWarCorpJoinWithdrawMsg                 CharactersCharacterIDNotificationsGetType = "FacWarCorpJoinWithdrawMsg"
	FacWarCorpLeaveRequestMsg                 CharactersCharacterIDNotificationsGetType = "FacWarCorpLeaveRequestMsg"
	FacWarCorpLeaveWithdrawMsg                CharactersCharacterIDNotificationsGetType = "FacWarCorpLeaveWithdrawMsg"
	FacWarLPDisqualifiedEvent                 CharactersCharacterIDNotificationsGetType = "FacWarLPDisqualifiedEvent"
	FacWarLPDisqualifiedKill                  CharactersCharacterIDNotificationsGetType = "FacWarLPDisqualifiedKill"
	FacWarLPPayoutEvent                       CharactersCharacterIDNotificationsGetType = "FacWarLPPayoutEvent"
	FacWarLPPayoutKill                        CharactersCharacterIDNotificationsGetType = "FacWarLPPayoutKill"
	FreelanceProjectClosed                    CharactersCharacterIDNotificationsGetType = "FreelanceProjectClosed"
	FreelanceProjectCompleted                 CharactersCharacterIDNotificationsGetType = "FreelanceProjectCompleted"
	FreelanceProjectCreated                   CharactersCharacterIDNotificationsGetType = "FreelanceProjectCreated"
	FreelanceProjectExpired                   CharactersCharacterIDNotificationsGetType = "FreelanceProjectExpired"
	FreelanceProjectLimitReached              CharactersCharacterIDNotificationsGetType = "FreelanceProjectLimitReached"
	FreelanceProjectParticipantKicked         CharactersCharacterIDNotificationsGetType = "FreelanceProjectParticipantKicked"
	GameTimeAdded                             CharactersCharacterIDNotificationsGetType = "GameTimeAdded"
	GameTimeReceived                          CharactersCharacterIDNotificationsGetType = "GameTimeReceived"
	GameTimeSent                              CharactersCharacterIDNotificationsGetType = "GameTimeSent"
	GiftReceived                              CharactersCharacterIDNotificationsGetType = "GiftReceived"
	IHubDestroyedByBillFailure                CharactersCharacterIDNotificationsGetType = "IHubDestroyedByBillFailure"
	IncursionCompletedMsg                     CharactersCharacterIDNotificationsGetType = "IncursionCompletedMsg"
	IndustryOperationFinished                 CharactersCharacterIDNotificationsGetType = "IndustryOperationFinished"
	IndustryTeamAuctionLost                   CharactersCharacterIDNotificationsGetType = "IndustryTeamAuctionLost"
	IndustryTeamAuctionWon                    CharactersCharacterIDNotificationsGetType = "IndustryTeamAuctionWon"
	InfrastructureHubBillAboutToExpire        CharactersCharacterIDNotificationsGetType = "InfrastructureHubBillAboutToExpire"
	InsuranceExpirationMsg                    CharactersCharacterIDNotificationsGetType = "InsuranceExpirationMsg"
	InsuranceFirstShipMsg                     CharactersCharacterIDNotificationsGetType = "InsuranceFirstShipMsg"
	InsuranceInvalidatedMsg                   CharactersCharacterIDNotificationsGetType = "InsuranceInvalidatedMsg"
	InsuranceIssuedMsg                        CharactersCharacterIDNotificationsGetType = "InsuranceIssuedMsg"
	InsurancePayoutMsg                        CharactersCharacterIDNotificationsGetType = "InsurancePayoutMsg"
	InvasionCompletedMsg                      CharactersCharacterIDNotificationsGetType = "InvasionCompletedMsg"
	InvasionSystemLogin                       CharactersCharacterIDNotificationsGetType = "InvasionSystemLogin"
	InvasionSystemStart                       CharactersCharacterIDNotificationsGetType = "InvasionSystemStart"
	JumpCloneDeletedMsg1                      CharactersCharacterIDNotificationsGetType = "JumpCloneDeletedMsg1"
	JumpCloneDeletedMsg2                      CharactersCharacterIDNotificationsGetType = "JumpCloneDeletedMsg2"
	KillReportFinalBlow                       CharactersCharacterIDNotificationsGetType = "KillReportFinalBlow"
	KillReportVictim                          CharactersCharacterIDNotificationsGetType = "KillReportVictim"
	KillRightAvailable                        CharactersCharacterIDNotificationsGetType = "KillRightAvailable"
	KillRightAvailableOpen                    CharactersCharacterIDNotificationsGetType = "KillRightAvailableOpen"
	KillRightEarned                           CharactersCharacterIDNotificationsGetType = "KillRightEarned"
	KillRightUnavailable                      CharactersCharacterIDNotificationsGetType = "KillRightUnavailable"
	KillRightUnavailableOpen                  CharactersCharacterIDNotificationsGetType = "KillRightUnavailableOpen"
	KillRightUsed                             CharactersCharacterIDNotificationsGetType = "KillRightUsed"
	LPAutoRedeemed                            CharactersCharacterIDNotificationsGetType = "LPAutoRedeemed"
	LocateCharMsg                             CharactersCharacterIDNotificationsGetType = "LocateCharMsg"
	MadeWarMutual                             CharactersCharacterIDNotificationsGetType = "MadeWarMutual"
	MercOfferRetractedMsg                     CharactersCharacterIDNotificationsGetType = "MercOfferRetractedMsg"
	MercOfferedNegotiationMsg                 CharactersCharacterIDNotificationsGetType = "MercOfferedNegotiationMsg"
	MercenaryDenAttacked                      CharactersCharacterIDNotificationsGetType = "MercenaryDenAttacked"
	MercenaryDenNewMTO                        CharactersCharacterIDNotificationsGetType = "MercenaryDenNewMTO"
	MercenaryDenReinforced                    CharactersCharacterIDNotificationsGetType = "MercenaryDenReinforced"
	MissionCanceledTriglavian                 CharactersCharacterIDNotificationsGetType = "MissionCanceledTriglavian"
	MissionOfferExpirationMsg                 CharactersCharacterIDNotificationsGetType = "MissionOfferExpirationMsg"
	MissionTimeoutMsg                         CharactersCharacterIDNotificationsGetType = "MissionTimeoutMsg"
	MoonminingAutomaticFracture               CharactersCharacterIDNotificationsGetType = "MoonminingAutomaticFracture"
	MoonminingExtractionCancelled             CharactersCharacterIDNotificationsGetType = "MoonminingExtractionCancelled"
	MoonminingExtractionFinished              CharactersCharacterIDNotificationsGetType = "MoonminingExtractionFinished"
	MoonminingExtractionStarted               CharactersCharacterIDNotificationsGetType = "MoonminingExtractionStarted"
	MoonminingLaserFired                      CharactersCharacterIDNotificationsGetType = "MoonminingLaserFired"
	MutualWarExpired                          CharactersCharacterIDNotificationsGetType = "MutualWarExpired"
	MutualWarInviteAccepted                   CharactersCharacterIDNotificationsGetType = "MutualWarInviteAccepted"
	MutualWarInviteRejected                   CharactersCharacterIDNotificationsGetType = "MutualWarInviteRejected"
	MutualWarInviteSent                       CharactersCharacterIDNotificationsGetType = "MutualWarInviteSent"
	NPCStandingsGained                        CharactersCharacterIDNotificationsGetType = "NPCStandingsGained"
	NPCStandingsLost                          CharactersCharacterIDNotificationsGetType = "NPCStandingsLost"
	OfferToAllyRetracted                      CharactersCharacterIDNotificationsGetType = "OfferToAllyRetracted"
	OfferedSurrender                          CharactersCharacterIDNotificationsGetType = "OfferedSurrender"
	OfferedToAlly                             CharactersCharacterIDNotificationsGetType = "OfferedToAlly"
	OfficeLeaseCanceledInsufficientStandings  CharactersCharacterIDNotificationsGetType = "OfficeLeaseCanceledInsufficientStandings"
	OldLscMessages                            CharactersCharacterIDNotificationsGetType = "OldLscMessages"
	OperationFinished                         CharactersCharacterIDNotificationsGetType = "OperationFinished"
	OrbitalAttacked                           CharactersCharacterIDNotificationsGetType = "OrbitalAttacked"
	OrbitalReinforced                         CharactersCharacterIDNotificationsGetType = "OrbitalReinforced"
	OwnershipTransferred                      CharactersCharacterIDNotificationsGetType = "OwnershipTransferred"
	RaffleCreated                             CharactersCharacterIDNotificationsGetType = "RaffleCreated"
	RaffleExpired                             CharactersCharacterIDNotificationsGetType = "RaffleExpired"
	RaffleFinished                            CharactersCharacterIDNotificationsGetType = "RaffleFinished"
	ReimbursementMsg                          CharactersCharacterIDNotificationsGetType = "ReimbursementMsg"
	ResearchMissionAvailableMsg               CharactersCharacterIDNotificationsGetType = "ResearchMissionAvailableMsg"
	RetractsWar                               CharactersCharacterIDNotificationsGetType = "RetractsWar"
	SPAutoRedeemed                            CharactersCharacterIDNotificationsGetType = "SPAutoRedeemed"
	SeasonalChallengeCompleted                CharactersCharacterIDNotificationsGetType = "SeasonalChallengeCompleted"
	SkinSequencingCompleted                   CharactersCharacterIDNotificationsGetType = "SkinSequencingCompleted"
	SkyhookDeployed                           CharactersCharacterIDNotificationsGetType = "SkyhookDeployed"
	SkyhookDestroyed                          CharactersCharacterIDNotificationsGetType = "SkyhookDestroyed"
	SkyhookLostShields                        CharactersCharacterIDNotificationsGetType = "SkyhookLostShields"
	SkyhookOnline                             CharactersCharacterIDNotificationsGetType = "SkyhookOnline"
	SkyhookUnderAttack                        CharactersCharacterIDNotificationsGetType = "SkyhookUnderAttack"
	SovAllClaimAquiredMsg                     CharactersCharacterIDNotificationsGetType = "SovAllClaimAquiredMsg"
	SovAllClaimLostMsg                        CharactersCharacterIDNotificationsGetType = "SovAllClaimLostMsg"
	SovCommandNodeEventStarted                CharactersCharacterIDNotificationsGetType = "SovCommandNodeEventStarted"
	SovCorpBillLateMsg                        CharactersCharacterIDNotificationsGetType = "SovCorpBillLateMsg"
	SovCorpClaimFailMsg                       CharactersCharacterIDNotificationsGetType = "SovCorpClaimFailMsg"
	SovDisruptorMsg                           CharactersCharacterIDNotificationsGetType = "SovDisruptorMsg"
	SovStationEnteredFreeport                 CharactersCharacterIDNotificationsGetType = "SovStationEnteredFreeport"
	SovStructureDestroyed                     CharactersCharacterIDNotificationsGetType = "SovStructureDestroyed"
	SovStructureReinforced                    CharactersCharacterIDNotificationsGetType = "SovStructureReinforced"
	SovStructureSelfDestructCancel            CharactersCharacterIDNotificationsGetType = "SovStructureSelfDestructCancel"
	SovStructureSelfDestructFinished          CharactersCharacterIDNotificationsGetType = "SovStructureSelfDestructFinished"
	SovStructureSelfDestructRequested         CharactersCharacterIDNotificationsGetType = "SovStructureSelfDestructRequested"
	SovereigntyIHDamageMsg                    CharactersCharacterIDNotificationsGetType = "SovereigntyIHDamageMsg"
	SovereigntySBUDamageMsg                   CharactersCharacterIDNotificationsGetType = "SovereigntySBUDamageMsg"
	SovereigntyTCUDamageMsg                   CharactersCharacterIDNotificationsGetType = "SovereigntyTCUDamageMsg"
	StationAggressionMsg1                     CharactersCharacterIDNotificationsGetType = "StationAggressionMsg1"
	StationAggressionMsg2                     CharactersCharacterIDNotificationsGetType = "StationAggressionMsg2"
	StationConquerMsg                         CharactersCharacterIDNotificationsGetType = "StationConquerMsg"
	StationServiceDisabled                    CharactersCharacterIDNotificationsGetType = "StationServiceDisabled"
	StationServiceEnabled                     CharactersCharacterIDNotificationsGetType = "StationServiceEnabled"
	StationStateChangeMsg                     CharactersCharacterIDNotificationsGetType = "StationStateChangeMsg"
	StoryLineMissionAvailableMsg              CharactersCharacterIDNotificationsGetType = "StoryLineMissionAvailableMsg"
	StructureAnchoring                        CharactersCharacterIDNotificationsGetType = "StructureAnchoring"
	StructureCourierContractChanged           CharactersCharacterIDNotificationsGetType = "StructureCourierContractChanged"
	StructureDestroyed                        CharactersCharacterIDNotificationsGetType = "StructureDestroyed"
	StructureFuelAlert                        CharactersCharacterIDNotificationsGetType = "StructureFuelAlert"
	StructureImpendingAbandonmentAssetsAtRisk CharactersCharacterIDNotificationsGetType = "StructureImpendingAbandonmentAssetsAtRisk"
	StructureItemsDelivered                   CharactersCharacterIDNotificationsGetType = "StructureItemsDelivered"
	StructureItemsMovedToSafety               CharactersCharacterIDNotificationsGetType = "StructureItemsMovedToSafety"
	StructureLostArmor                        CharactersCharacterIDNotificationsGetType = "StructureLostArmor"
	StructureLostShields                      CharactersCharacterIDNotificationsGetType = "StructureLostShields"
	StructureLowReagentsAlert                 CharactersCharacterIDNotificationsGetType = "StructureLowReagentsAlert"
	StructureNoReagentsAlert                  CharactersCharacterIDNotificationsGetType = "StructureNoReagentsAlert"
	StructureOnline                           CharactersCharacterIDNotificationsGetType = "StructureOnline"
	StructurePaintPurchased                   CharactersCharacterIDNotificationsGetType = "StructurePaintPurchased"
	StructureServicesOffline                  CharactersCharacterIDNotificationsGetType = "StructureServicesOffline"
	StructureUnanchoring                      CharactersCharacterIDNotificationsGetType = "StructureUnanchoring"
	StructureUnderAttack                      CharactersCharacterIDNotificationsGetType = "StructureUnderAttack"
	StructureWentHighPower                    CharactersCharacterIDNotificationsGetType = "StructureWentHighPower"
	StructureWentLowPower                     CharactersCharacterIDNotificationsGetType = "StructureWentLowPower"
	StructuresJobsCancelled                   CharactersCharacterIDNotificationsGetType = "StructuresJobsCancelled"
	StructuresJobsPaused                      CharactersCharacterIDNotificationsGetType = "StructuresJobsPaused"
	StructuresReinforcementChanged            CharactersCharacterIDNotificationsGetType = "StructuresReinforcementChanged"
	TowerAlertMsg                             CharactersCharacterIDNotificationsGetType = "TowerAlertMsg"
	TowerResourceAlertMsg                     CharactersCharacterIDNotificationsGetType = "TowerResourceAlertMsg"
	TransactionReversalMsg                    CharactersCharacterIDNotificationsGetType = "TransactionReversalMsg"
	TutorialMsg                               CharactersCharacterIDNotificationsGetType = "TutorialMsg"
	WarAdopted                                CharactersCharacterIDNotificationsGetType = "WarAdopted "
	WarAllyInherited                          CharactersCharacterIDNotificationsGetType = "WarAllyInherited"
	WarAllyOfferDeclinedMsg                   CharactersCharacterIDNotificationsGetType = "WarAllyOfferDeclinedMsg"
	WarConcordInvalidates                     CharactersCharacterIDNotificationsGetType = "WarConcordInvalidates"
	WarDeclared                               CharactersCharacterIDNotificationsGetType = "WarDeclared"
	WarEndedHqSecurityDrop                    CharactersCharacterIDNotificationsGetType = "WarEndedHqSecurityDrop"
	WarHQRemovedFromSpace                     CharactersCharacterIDNotificationsGetType = "WarHQRemovedFromSpace"
	WarInherited                              CharactersCharacterIDNotificationsGetType = "WarInherited"
	WarInvalid                                CharactersCharacterIDNotificationsGetType = "WarInvalid"
	WarRetracted                              CharactersCharacterIDNotificationsGetType = "WarRetracted"
	WarRetractedByConcord                     CharactersCharacterIDNotificationsGetType = "WarRetractedByConcord"
	WarSurrenderDeclinedMsg                   CharactersCharacterIDNotificationsGetType = "WarSurrenderDeclinedMsg"
	WarSurrenderOfferMsg                      CharactersCharacterIDNotificationsGetType = "WarSurrenderOfferMsg"
)

// Defines values for CharactersCharacterIDOrdersGetRange.
const (
	CharactersCharacterIDOrdersGetRangeN1          CharactersCharacterIDOrdersGetRange = "1"
	CharactersCharacterIDOrdersGetRangeN10         CharactersCharacterIDOrdersGetRange = "10"
	CharactersCharacterIDOrdersGetRangeN2          CharactersCharacterIDOrdersGetRange = "2"
	CharactersCharacterIDOrdersGetRangeN20         CharactersCharacterIDOrdersGetRange = "20"
	CharactersCharacterIDOrdersGetRangeN3          CharactersCharacterIDOrdersGetRange = "3"
	CharactersCharacterIDOrdersGetRangeN30         CharactersCharacterIDOrdersGetRange = "30"
	CharactersCharacterIDOrdersGetRangeN4          CharactersCharacterIDOrdersGetRange = "4"
	CharactersCharacterIDOrdersGetRangeN40         CharactersCharacterIDOrdersGetRange = "40"
	CharactersCharacterIDOrdersGetRangeN5          CharactersCharacterIDOrdersGetRange = "5"
	CharactersCharacterIDOrdersGetRangeRegion      CharactersCharacterIDOrdersGetRange = "region"
	CharactersCharacterIDOrdersGetRangeSolarsystem CharactersCharacterIDOrdersGetRange = "solarsystem"
	CharactersCharacterIDOrdersGetRangeStation     CharactersCharacterIDOrdersGetRange = "station"
)

// Defines values for CharactersCharacterIDOrdersHistoryGetRange.
const (
	CharactersCharacterIDOrdersHistoryGetRangeN1          CharactersCharacterIDOrdersHistoryGetRange = "1"
	CharactersCharacterIDOrdersHistoryGetRangeN10         CharactersCharacterIDOrdersHistoryGetRange = "10"
	CharactersCharacterIDOrdersHistoryGetRangeN2          CharactersCharacterIDOrdersHistoryGetRange = "2"
	CharactersCharacterIDOrdersHistoryGetRangeN20         CharactersCharacterIDOrdersHistoryGetRange = "20"
	CharactersCharacterIDOrdersHistoryGetRangeN3          CharactersCharacterIDOrdersHistoryGetRange = "3"
	CharactersCharacterIDOrdersHistoryGetRangeN30         CharactersCharacterIDOrdersHistoryGetRange = "30"
	CharactersCharacterIDOrdersHistoryGetRangeN4          CharactersCharacterIDOrdersHistoryGetRange = "4"
	CharactersCharacterIDOrdersHistoryGetRangeN40         CharactersCharacterIDOrdersHistoryGetRange = "40"
	CharactersCharacterIDOrdersHistoryGetRangeN5          CharactersCharacterIDOrdersHistoryGetRange = "5"
	CharactersCharacterIDOrdersHistoryGetRangeRegion      CharactersCharacterIDOrdersHistoryGetRange = "region"
	CharactersCharacterIDOrdersHistoryGetRangeSolarsystem CharactersCharacterIDOrdersHistoryGetRange = "solarsystem"
	CharactersCharacterIDOrdersHistoryGetRangeStation     CharactersCharacterIDOrdersHistoryGetRange = "station"
)

// Defines values for CharactersCharacterIDOrdersHistoryGetState.
const (
	CharactersCharacterIDOrdersHistoryGetStateCancelled CharactersCharacterIDOrdersHistoryGetState = "cancelled"
	CharactersCharacterIDOrdersHistoryGetStateExpired   CharactersCharacterIDOrdersHistoryGetState = "expired"
)

// Defines values for CharactersCharacterIDPlanetsGetPlanetType.
const (
	Barren    CharactersCharacterIDPlanetsGetPlanetType = "barren"
	Gas       CharactersCharacterIDPlanetsGetPlanetType = "gas"
	Ice       CharactersCharacterIDPlanetsGetPlanetType = "ice"
	Lava      CharactersCharacterIDPlanetsGetPlanetType = "lava"
	Oceanic   CharactersCharacterIDPlanetsGetPlanetType = "oceanic"
	Plasma    CharactersCharacterIDPlanetsGetPlanetType = "plasma"
	Storm     CharactersCharacterIDPlanetsGetPlanetType = "storm"
	Temperate CharactersCharacterIDPlanetsGetPlanetType = "temperate"
)

// Defines values for CharactersCharacterIDRolesGetRoles.
const (
	CharactersCharacterIDRolesGetRolesAccountTake1            CharactersCharacterIDRolesGetRoles = "Account_Take_1"
	CharactersCharacterIDRolesGetRolesAccountTake2            CharactersCharacterIDRolesGetRoles = "Account_Take_2"
	CharactersCharacterIDRolesGetRolesAccountTake3            CharactersCharacterIDRolesGetRoles = "Account_Take_3"
	CharactersCharacterIDRolesGetRolesAccountTake4            CharactersCharacterIDRolesGetRoles = "Account_Take_4"
	CharactersCharacterIDRolesGetRolesAccountTake5            CharactersCharacterIDRolesGetRoles = "Account_Take_5"
	CharactersCharacterIDRolesGetRolesAccountTake6            CharactersCharacterIDRolesGetRoles = "Account_Take_6"
	CharactersCharacterIDRolesGetRolesAccountTake7            CharactersCharacterIDRolesGetRoles = "Account_Take_7"
	CharactersCharacterIDRolesGetRolesAccountant              CharactersCharacterIDRolesGetRoles = "Accountant"
	CharactersCharacterIDRolesGetRolesAuditor                 CharactersCharacterIDRolesGetRoles = "Auditor"
	CharactersCharacterIDRolesGetRolesBrandManager            CharactersCharacterIDRolesGetRoles = "Brand_Manager"
	CharactersCharacterIDRolesGetRolesCommunicationsOfficer   CharactersCharacterIDRolesGetRoles = "Communications_Officer"
	CharactersCharacterIDRolesGetRolesConfigEquipment         CharactersCharacterIDRolesGetRoles = "Config_Equipment"
	CharactersCharacterIDRolesGetRolesConfigStarbaseEquipment CharactersCharacterIDRolesGetRoles = "Config_Starbase_Equipment"
	CharactersCharacterIDRolesGetRolesContainerTake1          CharactersCharacterIDRolesGetRoles = "Container_Take_1"
	CharactersCharacterIDRolesGetRolesContainerTake2          CharactersCharacterIDRolesGetRoles = "Container_Take_2"
	CharactersCharacterIDRolesGetRolesContainerTake3          CharactersCharacterIDRolesGetRoles = "Container_Take_3"
	CharactersCharacterIDRolesGetRolesContainerTake4          CharactersCharacterIDRolesGetRoles = "Container_Take_4"
	CharactersCharacterIDRolesGetRolesContainerTake5          CharactersCharacterIDRolesGetRoles = "Container_Take_5"
	CharactersCharacterIDRolesGetRolesContainerTake6          CharactersCharacterIDRolesGetRoles = "Container_Take_6"
	CharactersCharacterIDRolesGetRolesContainerTake7          CharactersCharacterIDRolesGetRoles = "Container_Take_7"
	CharactersCharacterIDRolesGetRolesContractManager         CharactersCharacterIDRolesGetRoles = "Contract_Manager"
	CharactersCharacterIDRolesGetRolesDeliveriesContainerTake CharactersCharacterIDRolesGetRoles = "Deliveries_Container_Take"
	CharactersCharacterIDRolesGetRolesDeliveriesQuery         CharactersCharacterIDRolesGetRoles = "Deliveries_Query"
	CharactersCharacterIDRolesGetRolesDeliveriesTake          CharactersCharacterIDRolesGetRoles = "Deliveries_Take"
	CharactersCharacterIDRolesGetRolesDiplomat                CharactersCharacterIDRolesGetRoles = "Diplomat"
	CharactersCharacterIDRolesGetRolesDirector                CharactersCharacterIDRolesGetRoles = "Director"
	CharactersCharacterIDRolesGetRolesFactoryManager          CharactersCharacterIDRolesGetRoles = "Factory_Manager"
	CharactersCharacterIDRolesGetRolesFittingManager          CharactersCharacterIDRolesGetRoles = "Fitting_Manager"
	CharactersCharacterIDRolesGetRolesHangarQuery1            CharactersCharacterIDRolesGetRoles = "Hangar_Query_1"
	CharactersCharacterIDRolesGetRolesHangarQuery2            CharactersCharacterIDRolesGetRoles = "Hangar_Query_2"
	CharactersCharacterIDRolesGetRolesHangarQuery3            CharactersCharacterIDRolesGetRoles = "Hangar_Query_3"
	CharactersCharacterIDRolesGetRolesHangarQuery4            CharactersCharacterIDRolesGetRoles = "Hangar_Query_4"
	CharactersCharacterIDRolesGetRolesHangarQuery5            CharactersCharacterIDRolesGetRoles = "Hangar_Query_5"
	CharactersCharacterIDRolesGetRolesHangarQuery6            CharactersCharacterIDRolesGetRoles = "Hangar_Query_6"
	CharactersCharacterIDRolesGetRolesHangarQuery7            CharactersCharacterIDRolesGetRoles = "Hangar_Query_7"
	CharactersCharacterIDRolesGetRolesHangarTake1             CharactersCharacterIDRolesGetRoles = "Hangar_Take_1"
	CharactersCharacterIDRolesGetRolesHangarTake2             CharactersCharacterIDRolesGetRoles = "Hangar_Take_2"
	CharactersCharacterIDRolesGetRolesHangarTake3             CharactersCharacterIDRolesGetRoles = "Hangar_Take_3"
	CharactersCharacterIDRolesGetRolesHangarTake4             CharactersCharacterIDRolesGetRoles = "Hangar_Take_4"
	CharactersCharacterIDRolesGetRolesHangarTake5             CharactersCharacterIDRolesGetRoles = "Hangar_Take_5"
	CharactersCharacterIDRolesGetRolesHangarTake6             CharactersCharacterIDRolesGetRoles = "Hangar_Take_6"
	CharactersCharacterIDRolesGetRolesHangarTake7             CharactersCharacterIDRolesGetRoles = "Hangar_Take_7"
	CharactersCharacterIDRolesGetRolesJuniorAccountant        CharactersCharacterIDRolesGetRoles = "Junior_Accountant"
	CharactersCharacterIDRolesGetRolesPersonnelManager        CharactersCharacterIDRolesGetRoles = "Personnel_Manager"
	CharactersCharacterIDRolesGetRolesProjectManager          CharactersCharacterIDRolesGetRoles = "Project_Manager"
	CharactersCharacterIDRolesGetRolesRentFactoryFacility     CharactersCharacterIDRolesGetRoles = "Rent_Factory_Facility"
	CharactersCharacterIDRolesGetRolesRentOffice              CharactersCharacterIDRolesGetRoles = "Rent_Office"
	CharactersCharacterIDRolesGetRolesRentResearchFacility    CharactersCharacterIDRolesGetRoles = "Rent_Research_Facility"
	CharactersCharacterIDRolesGetRolesSecurityOfficer         CharactersCharacterIDRolesGetRoles = "Security_Officer"
	CharactersCharacterIDRolesGetRolesSkillPlanManager        CharactersCharacterIDRolesGetRoles = "Skill_Plan_Manager"
	CharactersCharacterIDRolesGetRolesStarbaseDefenseOperator CharactersCharacterIDRolesGetRoles = "Starbase_Defense_Operator"
	CharactersCharacterIDRolesGetRolesStarbaseFuelTechnician  CharactersCharacterIDRolesGetRoles = "Starbase_Fuel_Technician"
	CharactersCharacterIDRolesGetRolesStationManager          CharactersCharacterIDRolesGetRoles = "Station_Manager"
	CharactersCharacterIDRolesGetRolesTrader                  CharactersCharacterIDRolesGetRoles = "Trader"
)

// Defines values for CharactersCharacterIDRolesGetRolesAtBase.
const (
	CharactersCharacterIDRolesGetRolesAtBaseAccountTake1            CharactersCharacterIDRolesGetRolesAtBase = "Account_Take_1"
	CharactersCharacterIDRolesGetRolesAtBaseAccountTake2            CharactersCharacterIDRolesGetRolesAtBase = "Account_Take_2"
	CharactersCharacterIDRolesGetRolesAtBaseAccountTake3            CharactersCharacterIDRolesGetRolesAtBase = "Account_Take_3"
	CharactersCharacterIDRolesGetRolesAtBaseAccountTake4            CharactersCharacterIDRolesGetRolesAtBase = "Account_Take_4"
	CharactersCharacterIDRolesGetRolesAtBaseAccountTake5            CharactersCharacterIDRolesGetRolesAtBase = "Account_Take_5"
	CharactersCharacterIDRolesGetRolesAtBaseAccountTake6            CharactersCharacterIDRolesGetRolesAtBase = "Account_Take_6"
	CharactersCharacterIDRolesGetRolesAtBaseAccountTake7            CharactersCharacterIDRolesGetRolesAtBase = "Account_Take_7"
	CharactersCharacterIDRolesGetRolesAtBaseAccountant              CharactersCharacterIDRolesGetRolesAtBase = "Accountant"
	CharactersCharacterIDRolesGetRolesAtBaseAuditor                 CharactersCharacterIDRolesGetRolesAtBase = "Auditor"
	CharactersCharacterIDRolesGetRolesAtBaseBrandManager            CharactersCharacterIDRolesGetRolesAtBase = "Brand_Manager"
	CharactersCharacterIDRolesGetRolesAtBaseCommunicationsOfficer   CharactersCharacterIDRolesGetRolesAtBase = "Communications_Officer"
	CharactersCharacterIDRolesGetRolesAtBaseConfigEquipment         CharactersCharacterIDRolesGetRolesAtBase = "Config_Equipment"
	CharactersCharacterIDRolesGetRolesAtBaseConfigStarbaseEquipment CharactersCharacterIDRolesGetRolesAtBase = "Config_Starbase_Equipment"
	CharactersCharacterIDRolesGetRolesAtBaseContainerTake1          CharactersCharacterIDRolesGetRolesAtBase = "Container_Take_1"
	CharactersCharacterIDRolesGetRolesAtBaseContainerTake2          CharactersCharacterIDRolesGetRolesAtBase = "Container_Take_2"
	CharactersCharacterIDRolesGetRolesAtBaseContainerTake3          CharactersCharacterIDRolesGetRolesAtBase = "Container_Take_3"
	CharactersCharacterIDRolesGetRolesAtBaseContainerTake4          CharactersCharacterIDRolesGetRolesAtBase = "Container_Take_4"
	CharactersCharacterIDRolesGetRolesAtBaseContainerTake5          CharactersCharacterIDRolesGetRolesAtBase = "Container_Take_5"
	CharactersCharacterIDRolesGetRolesAtBaseContainerTake6          CharactersCharacterIDRolesGetRolesAtBase = "Container_Take_6"
	CharactersCharacterIDRolesGetRolesAtBaseContainerTake7          CharactersCharacterIDRolesGetRolesAtBase = "Container_Take_7"
	CharactersCharacterIDRolesGetRolesAtBaseContractManager         CharactersCharacterIDRolesGetRolesAtBase = "Contract_Manager"
	CharactersCharacterIDRolesGetRolesAtBaseDeliveriesContainerTake CharactersCharacterIDRolesGetRolesAtBase = "Deliveries_Container_Take"
	CharactersCharacterIDRolesGetRolesAtBaseDeliveriesQuery         CharactersCharacterIDRolesGetRolesAtBase = "Deliveries_Query"
	CharactersCharacterIDRolesGetRolesAtBaseDeliveriesTake          CharactersCharacterIDRolesGetRolesAtBase = "Deliveries_Take"
	CharactersCharacterIDRolesGetRolesAtBaseDiplomat                CharactersCharacterIDRolesGetRolesAtBase = "Diplomat"
	CharactersCharacterIDRolesGetRolesAtBaseDirector                CharactersCharacterIDRolesGetRolesAtBase = "Director"
	CharactersCharacterIDRolesGetRolesAtBaseFactoryManager          CharactersCharacterIDRolesGetRolesAtBase = "Factory_Manager"
	CharactersCharacterIDRolesGetRolesAtBaseFittingManager          CharactersCharacterIDRolesGetRolesAtBase = "Fitting_Manager"
	CharactersCharacterIDRolesGetRolesAtBaseHangarQuery1            CharactersCharacterIDRolesGetRolesAtBase = "Hangar_Query_1"
	CharactersCharacterIDRolesGetRolesAtBaseHangarQuery2            CharactersCharacterIDRolesGetRolesAtBase = "Hangar_Query_2"
	CharactersCharacterIDRolesGetRolesAtBaseHangarQuery3            CharactersCharacterIDRolesGetRolesAtBase = "Hangar_Query_3"
	CharactersCharacterIDRolesGetRolesAtBaseHangarQuery4            CharactersCharacterIDRolesGetRolesAtBase = "Hangar_Query_4"
	CharactersCharacterIDRolesGetRolesAtBaseHangarQuery5            CharactersCharacterIDRolesGetRolesAtBase = "Hangar_Query_5"
	CharactersCharacterIDRolesGetRolesAtBaseHangarQuery6            CharactersCharacterIDRolesGetRolesAtBase = "Hangar_Query_6"
	CharactersCharacterIDRolesGetRolesAtBaseHangarQuery7            CharactersCharacterIDRolesGetRolesAtBase = "Hangar_Query_7"
	CharactersCharacterIDRolesGetRolesAtBaseHangarTake1             CharactersCharacterIDRolesGetRolesAtBase = "Hangar_Take_1"
	CharactersCharacterIDRolesGetRolesAtBaseHangarTake2             CharactersCharacterIDRolesGetRolesAtBase = "Hangar_Take_2"
	CharactersCharacterIDRolesGetRolesAtBaseHangarTake3             CharactersCharacterIDRolesGetRolesAtBase = "Hangar_Take_3"
	CharactersCharacterIDRolesGetRolesAtBaseHangarTake4             CharactersCharacterIDRolesGetRolesAtBase = "Hangar_Take_4"
	CharactersCharacterIDRolesGetRolesAtBaseHangarTake5             CharactersCharacterIDRolesGetRolesAtBase = "Hangar_Take_5"
	CharactersCharacterIDRolesGetRolesAtBaseHangarTake6             CharactersCharacterIDRolesGetRolesAtBase = "Hangar_Take_6"
	CharactersCharacterIDRolesGetRolesAtBaseHangarTake7             CharactersCharacterIDRolesGetRolesAtBase = "Hangar_Take_7"
	CharactersCharacterIDRolesGetRolesAtBaseJuniorAccountant        CharactersCharacterIDRolesGetRolesAtBase = "Junior_Accountant"
	CharactersCharacterIDRolesGetRolesAtBasePersonnelManager        CharactersCharacterIDRolesGetRolesAtBase = "Personnel_Manager"
	CharactersCharacterIDRolesGetRolesAtBaseProjectManager          CharactersCharacterIDRolesGetRolesAtBase = "Project_Manager"
	CharactersCharacterIDRolesGetRolesAtBaseRentFactoryFacility     CharactersCharacterIDRolesGetRolesAtBase = "Rent_Factory_Facility"
	CharactersCharacterIDRolesGetRolesAtBaseRentOffice              CharactersCharacterIDRolesGetRolesAtBase = "Rent_Office"
	CharactersCharacterIDRolesGetRolesAtBaseRentResearchFacility    CharactersCharacterIDRolesGetRolesAtBase = "Rent_Research_Facility"
	CharactersCharacterIDRolesGetRolesAtBaseSecurityOfficer         CharactersCharacterIDRolesGetRolesAtBase = "Security_Officer"
	CharactersCharacterIDRolesGetRolesAtBaseSkillPlanManager        CharactersCharacterIDRolesGetRolesAtBase = "Skill_Plan_Manager"
	CharactersCharacterIDRolesGetRolesAtBaseStarbaseDefenseOperator CharactersCharacterIDRolesGetRolesAtBase = "Starbase_Defense_Operator"
	CharactersCharacterIDRolesGetRolesAtBaseStarbaseFuelTechnician  CharactersCharacterIDRolesGetRolesAtBase = "Starbase_Fuel_Technician"
	CharactersCharacterIDRolesGetRolesAtBaseStationManager          CharactersCharacterIDRolesGetRolesAtBase = "Station_Manager"
	CharactersCharacterIDRolesGetRolesAtBaseTrader                  CharactersCharacterIDRolesGetRolesAtBase = "Trader"
)

// Defines values for CharactersCharacterIDRolesGetRolesAtHq.
const (
	CharactersCharacterIDRolesGetRolesAtHqAccountTake1            CharactersCharacterIDRolesGetRolesAtHq = "Account_Take_1"
	CharactersCharacterIDRolesGetRolesAtHqAccountTake2            CharactersCharacterIDRolesGetRolesAtHq = "Account_Take_2"
	CharactersCharacterIDRolesGetRolesAtHqAccountTake3            CharactersCharacterIDRolesGetRolesAtHq = "Account_Take_3"
	CharactersCharacterIDRolesGetRolesAtHqAccountTake4            CharactersCharacterIDRolesGetRolesAtHq = "Account_Take_4"
	CharactersCharacterIDRolesGetRolesAtHqAccountTake5            CharactersCharacterIDRolesGetRolesAtHq = "Account_Take_5"
	CharactersCharacterIDRolesGetRolesAtHqAccountTake6            CharactersCharacterIDRolesGetRolesAtHq = "Account_Take_6"
	CharactersCharacterIDRolesGetRolesAtHqAccountTake7            CharactersCharacterIDRolesGetRolesAtHq = "Account_Take_7"
	CharactersCharacterIDRolesGetRolesAtHqAccountant              CharactersCharacterIDRolesGetRolesAtHq = "Accountant"
	CharactersCharacterIDRolesGetRolesAtHqAuditor                 CharactersCharacterIDRolesGetRolesAtHq = "Auditor"
	CharactersCharacterIDRolesGetRolesAtHqBrandManager            CharactersCharacterIDRolesGetRolesAtHq = "Brand_Manager"
	CharactersCharacterIDRolesGetRolesAtHqCommunicationsOfficer   CharactersCharacterIDRolesGetRolesAtHq = "Communications_Officer"
	CharactersCharacterIDRolesGetRolesAtHqConfigEquipment         CharactersCharacterIDRolesGetRolesAtHq = "Config_Equipment"
	CharactersCharacterIDRolesGetRolesAtHqConfigStarbaseEquipment CharactersCharacterIDRolesGetRolesAtHq = "Config_Starbase_Equipment"
	CharactersCharacterIDRolesGetRolesAtHqContainerTake1          CharactersCharacterIDRolesGetRolesAtHq = "Container_Take_1"
	CharactersCharacterIDRolesGetRolesAtHqContainerTake2          CharactersCharacterIDRolesGetRolesAtHq = "Container_Take_2"
	CharactersCharacterIDRolesGetRolesAtHqContainerTake3          CharactersCharacterIDRolesGetRolesAtHq = "Container_Take_3"
	CharactersCharacterIDRolesGetRolesAtHqContainerTake4          CharactersCharacterIDRolesGetRolesAtHq = "Container_Take_4"
	CharactersCharacterIDRolesGetRolesAtHqContainerTake5          CharactersCharacterIDRolesGetRolesAtHq = "Container_Take_5"
	CharactersCharacterIDRolesGetRolesAtHqContainerTake6          CharactersCharacterIDRolesGetRolesAtHq = "Container_Take_6"
	CharactersCharacterIDRolesGetRolesAtHqContainerTake7          CharactersCharacterIDRolesGetRolesAtHq = "Container_Take_7"
	CharactersCharacterIDRolesGetRolesAtHqContractManager         CharactersCharacterIDRolesGetRolesAtHq = "Contract_Manager"
	CharactersCharacterIDRolesGetRolesAtHqDeliveriesContainerTake CharactersCharacterIDRolesGetRolesAtHq = "Deliveries_Container_Take"
	CharactersCharacterIDRolesGetRolesAtHqDeliveriesQuery         CharactersCharacterIDRolesGetRolesAtHq = "Deliveries_Query"
	CharactersCharacterIDRolesGetRolesAtHqDeliveriesTake          CharactersCharacterIDRolesGetRolesAtHq = "Deliveries_Take"
	CharactersCharacterIDRolesGetRolesAtHqDiplomat                CharactersCharacterIDRolesGetRolesAtHq = "Diplomat"
	CharactersCharacterIDRolesGetRolesAtHqDirector                CharactersCharacterIDRolesGetRolesAtHq = "Director"
	CharactersCharacterIDRolesGetRolesAtHqFactoryManager          CharactersCharacterIDRolesGetRolesAtHq = "Factory_Manager"
	CharactersCharacterIDRolesGetRolesAtHqFittingManager          CharactersCharacterIDRolesGetRolesAtHq = "Fitting_Manager"
	CharactersCharacterIDRolesGetRolesAtHqHangarQuery1            CharactersCharacterIDRolesGetRolesAtHq = "Hangar_Query_1"
	CharactersCharacterIDRolesGetRolesAtHqHangarQuery2            CharactersCharacterIDRolesGetRolesAtHq = "Hangar_Query_2"
	CharactersCharacterIDRolesGetRolesAtHqHangarQuery3            CharactersCharacterIDRolesGetRolesAtHq = "Hangar_Query_3"
	CharactersCharacterIDRolesGetRolesAtHqHangarQuery4            CharactersCharacterIDRolesGetRolesAtHq = "Hangar_Query_4"
	CharactersCharacterIDRolesGetRolesAtHqHangarQuery5            CharactersCharacterIDRolesGetRolesAtHq = "Hangar_Query_5"
	CharactersCharacterIDRolesGetRolesAtHqHangarQuery6            CharactersCharacterIDRolesGetRolesAtHq = "Hangar_Query_6"
	CharactersCharacterIDRolesGetRolesAtHqHangarQuery7            CharactersCharacterIDRolesGetRolesAtHq = "Hangar_Query_7"
	CharactersCharacterIDRolesGetRolesAtHqHangarTake1             CharactersCharacterIDRolesGetRolesAtHq = "Hangar_Take_1"
	CharactersCharacterIDRolesGetRolesAtHqHangarTake2             CharactersCharacterIDRolesGetRolesAtHq = "Hangar_Take_2"
	CharactersCharacterIDRolesGetRolesAtHqHangarTake3             CharactersCharacterIDRolesGetRolesAtHq = "Hangar_Take_3"
	CharactersCharacterIDRolesGetRolesAtHqHangarTake4             CharactersCharacterIDRolesGetRolesAtHq = "Hangar_Take_4"
	CharactersCharacterIDRolesGetRolesAtHqHangarTake5             CharactersCharacterIDRolesGetRolesAtHq = "Hangar_Take_5"
	CharactersCharacterIDRolesGetRolesAtHqHangarTake6             CharactersCharacterIDRolesGetRolesAtHq = "Hangar_Take_6"
	CharactersCharacterIDRolesGetRolesAtHqHangarTake7             CharactersCharacterIDRolesGetRolesAtHq = "Hangar_Take_7"
	CharactersCharacterIDRolesGetRolesAtHqJuniorAccountant        CharactersCharacterIDRolesGetRolesAtHq = "Junior_Accountant"
	CharactersCharacterIDRolesGetRolesAtHqPersonnelManager        CharactersCharacterIDRolesGetRolesAtHq = "Personnel_Manager"
	CharactersCharacterIDRolesGetRolesAtHqProjectManager          CharactersCharacterIDRolesGetRolesAtHq = "Project_Manager"
	CharactersCharacterIDRolesGetRolesAtHqRentFactoryFacility     CharactersCharacterIDRolesGetRolesAtHq = "Rent_Factory_Facility"
	CharactersCharacterIDRolesGetRolesAtHqRentOffice              CharactersCharacterIDRolesGetRolesAtHq = "Rent_Office"
	CharactersCharacterIDRolesGetRolesAtHqRentResearchFacility    CharactersCharacterIDRolesGetRolesAtHq = "Rent_Research_Facility"
	CharactersCharacterIDRolesGetRolesAtHqSecurityOfficer         CharactersCharacterIDRolesGetRolesAtHq = "Security_Officer"
	CharactersCharacterIDRolesGetRolesAtHqSkillPlanManager        CharactersCharacterIDRolesGetRolesAtHq = "Skill_Plan_Manager"
	CharactersCharacterIDRolesGetRolesAtHqStarbaseDefenseOperator CharactersCharacterIDRolesGetRolesAtHq = "Starbase_Defense_Operator"
	CharactersCharacterIDRolesGetRolesAtHqStarbaseFuelTechnician  CharactersCharacterIDRolesGetRolesAtHq = "Starbase_Fuel_Technician"
	CharactersCharacterIDRolesGetRolesAtHqStationManager          CharactersCharacterIDRolesGetRolesAtHq = "Station_Manager"
	CharactersCharacterIDRolesGetRolesAtHqTrader                  CharactersCharacterIDRolesGetRolesAtHq = "Trader"
)

// Defines values for CharactersCharacterIDRolesGetRolesAtOther.
const (
	CharactersCharacterIDRolesGetRolesAtOtherAccountTake1            CharactersCharacterIDRolesGetRolesAtOther = "Account_Take_1"
	CharactersCharacterIDRolesGetRolesAtOtherAccountTake2            CharactersCharacterIDRolesGetRolesAtOther = "Account_Take_2"
	CharactersCharacterIDRolesGetRolesAtOtherAccountTake3            CharactersCharacterIDRolesGetRolesAtOther = "Account_Take_3"
	CharactersCharacterIDRolesGetRolesAtOtherAccountTake4            CharactersCharacterIDRolesGetRolesAtOther = "Account_Take_4"
	CharactersCharacterIDRolesGetRolesAtOtherAccountTake5            CharactersCharacterIDRolesGetRolesAtOther = "Account_Take_5"
	CharactersCharacterIDRolesGetRolesAtOtherAccountTake6            CharactersCharacterIDRolesGetRolesAtOther = "Account_Take_6"
	CharactersCharacterIDRolesGetRolesAtOtherAccountTake7            CharactersCharacterIDRolesGetRolesAtOther = "Account_Take_7"
	CharactersCharacterIDRolesGetRolesAtOtherAccountant              CharactersCharacterIDRolesGetRolesAtOther = "Accountant"
	CharactersCharacterIDRolesGetRolesAtOtherAuditor                 CharactersCharacterIDRolesGetRolesAtOther = "Auditor"
	CharactersCharacterIDRolesGetRolesAtOtherBrandManager            CharactersCharacterIDRolesGetRolesAtOther = "Brand_Manager"
	CharactersCharacterIDRolesGetRolesAtOtherCommunicationsOfficer   CharactersCharacterIDRolesGetRolesAtOther = "Communications_Officer"
	CharactersCharacterIDRolesGetRolesAtOtherConfigEquipment         CharactersCharacterIDRolesGetRolesAtOther = "Config_Equipment"
	CharactersCharacterIDRolesGetRolesAtOtherConfigStarbaseEquipment CharactersCharacterIDRolesGetRolesAtOther = "Config_Starbase_Equipment"
	CharactersCharacterIDRolesGetRolesAtOtherContainerTake1          CharactersCharacterIDRolesGetRolesAtOther = "Container_Take_1"
	CharactersCharacterIDRolesGetRolesAtOtherContainerTake2          CharactersCharacterIDRolesGetRolesAtOther = "Container_Take_2"
	CharactersCharacterIDRolesGetRolesAtOtherContainerTake3          CharactersCharacterIDRolesGetRolesAtOther = "Container_Take_3"
	CharactersCharacterIDRolesGetRolesAtOtherContainerTake4          CharactersCharacterIDRolesGetRolesAtOther = "Container_Take_4"
	CharactersCharacterIDRolesGetRolesAtOtherContainerTake5          CharactersCharacterIDRolesGetRolesAtOther = "Container_Take_5"
	CharactersCharacterIDRolesGetRolesAtOtherContainerTake6          CharactersCharacterIDRolesGetRolesAtOther = "Container_Take_6"
	CharactersCharacterIDRolesGetRolesAtOtherContainerTake7          CharactersCharacterIDRolesGetRolesAtOther = "Container_Take_7"
	CharactersCharacterIDRolesGetRolesAtOtherContractManager         CharactersCharacterIDRolesGetRolesAtOther = "Contract_Manager"
	CharactersCharacterIDRolesGetRolesAtOtherDeliveriesContainerTake CharactersCharacterIDRolesGetRolesAtOther = "Deliveries_Container_Take"
	CharactersCharacterIDRolesGetRolesAtOtherDeliveriesQuery         CharactersCharacterIDRolesGetRolesAtOther = "Deliveries_Query"
	CharactersCharacterIDRolesGetRolesAtOtherDeliveriesTake          CharactersCharacterIDRolesGetRolesAtOther = "Deliveries_Take"
	CharactersCharacterIDRolesGetRolesAtOtherDiplomat                CharactersCharacterIDRolesGetRolesAtOther = "Diplomat"
	CharactersCharacterIDRolesGetRolesAtOtherDirector                CharactersCharacterIDRolesGetRolesAtOther = "Director"
	CharactersCharacterIDRolesGetRolesAtOtherFactoryManager          CharactersCharacterIDRolesGetRolesAtOther = "Factory_Manager"
	CharactersCharacterIDRolesGetRolesAtOtherFittingManager          CharactersCharacterIDRolesGetRolesAtOther = "Fitting_Manager"
	CharactersCharacterIDRolesGetRolesAtOtherHangarQuery1            CharactersCharacterIDRolesGetRolesAtOther = "Hangar_Query_1"
	CharactersCharacterIDRolesGetRolesAtOtherHangarQuery2            CharactersCharacterIDRolesGetRolesAtOther = "Hangar_Query_2"
	CharactersCharacterIDRolesGetRolesAtOtherHangarQuery3            CharactersCharacterIDRolesGetRolesAtOther = "Hangar_Query_3"
	CharactersCharacterIDRolesGetRolesAtOtherHangarQuery4            CharactersCharacterIDRolesGetRolesAtOther = "Hangar_Query_4"
	CharactersCharacterIDRolesGetRolesAtOtherHangarQuery5            CharactersCharacterIDRolesGetRolesAtOther = "Hangar_Query_5"
	CharactersCharacterIDRolesGetRolesAtOtherHangarQuery6            CharactersCharacterIDRolesGetRolesAtOther = "Hangar_Query_6"
	CharactersCharacterIDRolesGetRolesAtOtherHangarQuery7            CharactersCharacterIDRolesGetRolesAtOther = "Hangar_Query_7"
	CharactersCharacterIDRolesGetRolesAtOtherHangarTake1             CharactersCharacterIDRolesGetRolesAtOther = "Hangar_Take_1"
	CharactersCharacterIDRolesGetRolesAtOtherHangarTake2             CharactersCharacterIDRolesGetRolesAtOther = "Hangar_Take_2"
	CharactersCharacterIDRolesGetRolesAtOtherHangarTake3             CharactersCharacterIDRolesGetRolesAtOther = "Hangar_Take_3"
	CharactersCharacterIDRolesGetRolesAtOtherHangarTake4             CharactersCharacterIDRolesGetRolesAtOther = "Hangar_Take_4"
	CharactersCharacterIDRolesGetRolesAtOtherHangarTake5             CharactersCharacterIDRolesGetRolesAtOther = "Hangar_Take_5"
	CharactersCharacterIDRolesGetRolesAtOtherHangarTake6             CharactersCharacterIDRolesGetRolesAtOther = "Hangar_Take_6"
	CharactersCharacterIDRolesGetRolesAtOtherHangarTake7             CharactersCharacterIDRolesGetRolesAtOther = "Hangar_Take_7"
	CharactersCharacterIDRolesGetRolesAtOtherJuniorAccountant        CharactersCharacterIDRolesGetRolesAtOther = "Junior_Accountant"
	CharactersCharacterIDRolesGetRolesAtOtherPersonnelManager        CharactersCharacterIDRolesGetRolesAtOther = "Personnel_Manager"
	CharactersCharacterIDRolesGetRolesAtOtherProjectManager          CharactersCharacterIDRolesGetRolesAtOther = "Project_Manager"
	CharactersCharacterIDRolesGetRolesAtOtherRentFactoryFacility     CharactersCharacterIDRolesGetRolesAtOther = "Rent_Factory_Facility"
	CharactersCharacterIDRolesGetRolesAtOtherRentOffice              CharactersCharacterIDRolesGetRolesAtOther = "Rent_Office"
	CharactersCharacterIDRolesGetRolesAtOtherRentResearchFacility    CharactersCharacterIDRolesGetRolesAtOther = "Rent_Research_Facility"
	CharactersCharacterIDRolesGetRolesAtOtherSecurityOfficer         CharactersCharacterIDRolesGetRolesAtOther = "Security_Officer"
	CharactersCharacterIDRolesGetRolesAtOtherSkillPlanManager        CharactersCharacterIDRolesGetRolesAtOther = "Skill_Plan_Manager"
	CharactersCharacterIDRolesGetRolesAtOtherStarbaseDefenseOperator CharactersCharacterIDRolesGetRolesAtOther = "Starbase_Defense_Operator"
	CharactersCharacterIDRolesGetRolesAtOtherStarbaseFuelTechnician  CharactersCharacterIDRolesGetRolesAtOther = "Starbase_Fuel_Technician"
	CharactersCharacterIDRolesGetRolesAtOtherStationManager          CharactersCharacterIDRolesGetRolesAtOther = "Station_Manager"
	CharactersCharacterIDRolesGetRolesAtOtherTrader                  CharactersCharacterIDRolesGetRolesAtOther = "Trader"
)

// Defines values for CharactersCharacterIDStandingsGetFromType.
const (
	CharactersCharacterIDStandingsGetFromTypeAgent   CharactersCharacterIDStandingsGetFromType = "agent"
	CharactersCharacterIDStandingsGetFromTypeFaction CharactersCharacterIDStandingsGetFromType = "faction"
	CharactersCharacterIDStandingsGetFromTypeNpcCorp CharactersCharacterIDStandingsGetFromType = "npc_corp"
)

// Defines values for CharactersCharacterIDWalletJournalGetContextIDType.
const (
	CharactersCharacterIDWalletJournalGetContextIDTypeAllianceID          CharactersCharacterIDWalletJournalGetContextIDType = "alliance_id"
	CharactersCharacterIDWalletJournalGetContextIDTypeCharacterID         CharactersCharacterIDWalletJournalGetContextIDType = "character_id"
	CharactersCharacterIDWalletJournalGetContextIDTypeContractID          CharactersCharacterIDWalletJournalGetContextIDType = "contract_id"
	CharactersCharacterIDWalletJournalGetContextIDTypeCorporationID       CharactersCharacterIDWalletJournalGetContextIDType = "corporation_id"
	CharactersCharacterIDWalletJournalGetContextIDTypeEveSystem           CharactersCharacterIDWalletJournalGetContextIDType = "eve_system"
	CharactersCharacterIDWalletJournalGetContextIDTypeIndustryJobID       CharactersCharacterIDWalletJournalGetContextIDType = "industry_job_id"
	CharactersCharacterIDWalletJournalGetContextIDTypeMarketTransactionID CharactersCharacterIDWalletJournalGetContextIDType = "market_transaction_id"
	CharactersCharacterIDWalletJournalGetContextIDTypePlanetID            CharactersCharacterIDWalletJournalGetContextIDType = "planet_id"
	CharactersCharacterIDWalletJournalGetContextIDTypeStationID           CharactersCharacterIDWalletJournalGetContextIDType = "station_id"
	CharactersCharacterIDWalletJournalGetContextIDTypeStructureID         CharactersCharacterIDWalletJournalGetContextIDType = "structure_id"
	CharactersCharacterIDWalletJournalGetContextIDTypeSystemID            CharactersCharacterIDWalletJournalGetContextIDType = "system_id"
	CharactersCharacterIDWalletJournalGetContextIDTypeTypeID              CharactersCharacterIDWalletJournalGetContextIDType = "type_id"
)

// Defines values for CharactersCharacterIDWalletJournalGetRefType.
const (
	CharactersCharacterIDWalletJournalGetRefTypeAccelerationGateFee                       CharactersCharacterIDWalletJournalGetRefType = "acceleration_gate_fee"
	CharactersCharacterIDWalletJournalGetRefTypeAdvertisementListingFee                   CharactersCharacterIDWalletJournalGetRefType = "advertisement_listing_fee"
	CharactersCharacterIDWalletJournalGetRefTypeAgentDonation                             CharactersCharacterIDWalletJournalGetRefType = "agent_donation"
	CharactersCharacterIDWalletJournalGetRefTypeAgentLocationServices                     CharactersCharacterIDWalletJournalGetRefType = "agent_location_services"
	CharactersCharacterIDWalletJournalGetRefTypeAgentMiscellaneous                        CharactersCharacterIDWalletJournalGetRefType = "agent_miscellaneous"
	CharactersCharacterIDWalletJournalGetRefTypeAgentMissionCollateralPaid                CharactersCharacterIDWalletJournalGetRefType = "agent_mission_collateral_paid"
	CharactersCharacterIDWalletJournalGetRefTypeAgentMissionCollateralRefunded            CharactersCharacterIDWalletJournalGetRefType = "agent_mission_collateral_refunded"
	CharactersCharacterIDWalletJournalGetRefTypeAgentMissionReward                        CharactersCharacterIDWalletJournalGetRefType = "agent_mission_reward"
	CharactersCharacterIDWalletJournalGetRefTypeAgentMissionRewardCorporationTax          CharactersCharacterIDWalletJournalGetRefType = "agent_mission_reward_corporation_tax"
	CharactersCharacterIDWalletJournalGetRefTypeAgentMissionTimeBonusReward               CharactersCharacterIDWalletJournalGetRefType = "agent_mission_time_bonus_reward"
	CharactersCharacterIDWalletJournalGetRefTypeAgentMissionTimeBonusRewardCorporationTax CharactersCharacterIDWalletJournalGetRefType = "agent_mission_time_bonus_reward_corporation_tax"
	CharactersCharacterIDWalletJournalGetRefTypeAgentSecurityServices                     CharactersCharacterIDWalletJournalGetRefType = "agent_security_services"
	CharactersCharacterIDWalletJournalGetRefTypeAgentServicesRendered                     CharactersCharacterIDWalletJournalGetRefType = "agent_services_rendered"
	CharactersCharacterIDWalletJournalGetRefTypeAgentsPreward                             CharactersCharacterIDWalletJournalGetRefType = "agents_preward"
	CharactersCharacterIDWalletJournalGetRefTypeAirCareerProgramReward                    CharactersCharacterIDWalletJournalGetRefType = "air_career_program_reward"
	CharactersCharacterIDWalletJournalGetRefTypeAllianceMaintainanceFee                   CharactersCharacterIDWalletJournalGetRefType = "alliance_maintainance_fee"
	CharactersCharacterIDWalletJournalGetRefTypeAllianceRegistrationFee                   CharactersCharacterIDWalletJournalGetRefType = "alliance_registration_fee"
	CharactersCharacterIDWalletJournalGetRefTypeAllignmentBasedGateToll                   CharactersCharacterIDWalletJournalGetRefType = "allignment_based_gate_toll"
	CharactersCharacterIDWalletJournalGetRefTypeAssetSafetyRecoveryTax                    CharactersCharacterIDWalletJournalGetRefType = "asset_safety_recovery_tax"
	CharactersCharacterIDWalletJournalGetRefTypeBounty                                    CharactersCharacterIDWalletJournalGetRefType = "bounty"
	CharactersCharacterIDWalletJournalGetRefTypeBountyPrize                               CharactersCharacterIDWalletJournalGetRefType = "bounty_prize"
	CharactersCharacterIDWalletJournalGetRefTypeBountyPrizeCorporationTax                 CharactersCharacterIDWalletJournalGetRefType = "bounty_prize_corporation_tax"
	CharactersCharacterIDWalletJournalGetRefTypeBountyPrizes                              CharactersCharacterIDWalletJournalGetRefType = "bounty_prizes"
	CharactersCharacterIDWalletJournalGetRefTypeBountyReimbursement                       CharactersCharacterIDWalletJournalGetRefType = "bounty_reimbursement"
	CharactersCharacterIDWalletJournalGetRefTypeBountySurcharge                           CharactersCharacterIDWalletJournalGetRefType = "bounty_surcharge"
	CharactersCharacterIDWalletJournalGetRefTypeBrokersFee                                CharactersCharacterIDWalletJournalGetRefType = "brokers_fee"
	CharactersCharacterIDWalletJournalGetRefTypeCloneActivation                           CharactersCharacterIDWalletJournalGetRefType = "clone_activation"
	CharactersCharacterIDWalletJournalGetRefTypeCloneTransfer                             CharactersCharacterIDWalletJournalGetRefType = "clone_transfer"
	CharactersCharacterIDWalletJournalGetRefTypeContrabandFine                            CharactersCharacterIDWalletJournalGetRefType = "contraband_fine"
	CharactersCharacterIDWalletJournalGetRefTypeContractAuctionBid                        CharactersCharacterIDWalletJournalGetRefType = "contract_auction_bid"
	CharactersCharacterIDWalletJournalGetRefTypeContractAuctionBidCorp                    CharactersCharacterIDWalletJournalGetRefType = "contract_auction_bid_corp"
	CharactersCharacterIDWalletJournalGetRefTypeContractAuctionBidRefund                  CharactersCharacterIDWalletJournalGetRefType = "contract_auction_bid_refund"
	CharactersCharacterIDWalletJournalGetRefTypeContractAuctionSold                       CharactersCharacterIDWalletJournalGetRefType = "contract_auction_sold"
	CharactersCharacterIDWalletJournalGetRefTypeContractBrokersFee                        CharactersCharacterIDWalletJournalGetRefType = "contract_brokers_fee"
	CharactersCharacterIDWalletJournalGetRefTypeContractBrokersFeeCorp                    CharactersCharacterIDWalletJournalGetRefType = "contract_brokers_fee_corp"
	CharactersCharacterIDWalletJournalGetRefTypeContractCollateral                        CharactersCharacterIDWalletJournalGetRefType = "contract_collateral"
	CharactersCharacterIDWalletJournalGetRefTypeContractCollateralDepositedCorp           CharactersCharacterIDWalletJournalGetRefType = "contract_collateral_deposited_corp"
	CharactersCharacterIDWalletJournalGetRefTypeContractCollateralPayout                  CharactersCharacterIDWalletJournalGetRefType = "contract_collateral_payout"
	CharactersCharacterIDWalletJournalGetRefTypeContractCollateralRefund                  CharactersCharacterIDWalletJournalGetRefType = "contract_collateral_refund"
	CharactersCharacterIDWalletJournalGetRefTypeContractDeposit                           CharactersCharacterIDWalletJournalGetRefType = "contract_deposit"
	CharactersCharacterIDWalletJournalGetRefTypeContractDepositCorp                       CharactersCharacterIDWalletJournalGetRefType = "contract_deposit_corp"
	CharactersCharacterIDWalletJournalGetRefTypeContractDepositRefund                     CharactersCharacterIDWalletJournalGetRefType = "contract_deposit_refund"
	CharactersCharacterIDWalletJournalGetRefTypeContractDepositSalesTax                   CharactersCharacterIDWalletJournalGetRefType = "contract_deposit_sales_tax"
	CharactersCharacterIDWalletJournalGetRefTypeContractPrice                             CharactersCharacterIDWalletJournalGetRefType = "contract_price"
	CharactersCharacterIDWalletJournalGetRefTypeContractPricePaymentCorp                  CharactersCharacterIDWalletJournalGetRefType = "contract_price_payment_corp"
	CharactersCharacterIDWalletJournalGetRefTypeContractReversal                          CharactersCharacterIDWalletJournalGetRefType = "contract_reversal"
	CharactersCharacterIDWalletJournalGetRefTypeContractReward                            CharactersCharacterIDWalletJournalGetRefType = "contract_reward"
	CharactersCharacterIDWalletJournalGetRefTypeContractRewardDeposited                   CharactersCharacterIDWalletJournalGetRefType = "contract_reward_deposited"
	CharactersCharacterIDWalletJournalGetRefTypeContractRewardDepositedCorp               CharactersCharacterIDWalletJournalGetRefType = "contract_reward_deposited_corp"
	CharactersCharacterIDWalletJournalGetRefTypeContractRewardRefund                      CharactersCharacterIDWalletJournalGetRefType = "contract_reward_refund"
	CharactersCharacterIDWalletJournalGetRefTypeContractSalesTax                          CharactersCharacterIDWalletJournalGetRefType = "contract_sales_tax"
	CharactersCharacterIDWalletJournalGetRefTypeCopying                                   CharactersCharacterIDWalletJournalGetRefType = "copying"
	CharactersCharacterIDWalletJournalGetRefTypeCorporateRewardPayout                     CharactersCharacterIDWalletJournalGetRefType = "corporate_reward_payout"
	CharactersCharacterIDWalletJournalGetRefTypeCorporateRewardTax                        CharactersCharacterIDWalletJournalGetRefType = "corporate_reward_tax"
	CharactersCharacterIDWalletJournalGetRefTypeCorporationAccountWithdrawal              CharactersCharacterIDWalletJournalGetRefType = "corporation_account_withdrawal"
	CharactersCharacterIDWalletJournalGetRefTypeCorporationBulkPayment                    CharactersCharacterIDWalletJournalGetRefType = "corporation_bulk_payment"
	CharactersCharacterIDWalletJournalGetRefTypeCorporationDividendPayment                CharactersCharacterIDWalletJournalGetRefType = "corporation_dividend_payment"
	CharactersCharacterIDWalletJournalGetRefTypeCorporationLiquidation                    CharactersCharacterIDWalletJournalGetRefType = "corporation_liquidation"
	CharactersCharacterIDWalletJournalGetRefTypeCorporationLogoChangeCost                 CharactersCharacterIDWalletJournalGetRefType = "corporation_logo_change_cost"
	CharactersCharacterIDWalletJournalGetRefTypeCorporationPayment                        CharactersCharacterIDWalletJournalGetRefType = "corporation_payment"
	CharactersCharacterIDWalletJournalGetRefTypeCorporationRegistrationFee                CharactersCharacterIDWalletJournalGetRefType = "corporation_registration_fee"
	CharactersCharacterIDWalletJournalGetRefTypeCosmeticMarketComponentItemPurchase       CharactersCharacterIDWalletJournalGetRefType = "cosmetic_market_component_item_purchase"
	CharactersCharacterIDWalletJournalGetRefTypeCosmeticMarketSkinPurchase                CharactersCharacterIDWalletJournalGetRefType = "cosmetic_market_skin_purchase"
	CharactersCharacterIDWalletJournalGetRefTypeCosmeticMarketSkinSale                    CharactersCharacterIDWalletJournalGetRefType = "cosmetic_market_skin_sale"
	CharactersCharacterIDWalletJournalGetRefTypeCosmeticMarketSkinSaleBrokerFee           CharactersCharacterIDWalletJournalGetRefType = "cosmetic_market_skin_sale_broker_fee"
	CharactersCharacterIDWalletJournalGetRefTypeCosmeticMarketSkinSaleTax                 CharactersCharacterIDWalletJournalGetRefType = "cosmetic_market_skin_sale_tax"
	CharactersCharacterIDWalletJournalGetRefTypeCosmeticMarketSkinTransaction             CharactersCharacterIDWalletJournalGetRefType = "cosmetic_market_skin_transaction"
	CharactersCharacterIDWalletJournalGetRefTypeCourierMissionEscrow                      CharactersCharacterIDWalletJournalGetRefType = "courier_mission_escrow"
	CharactersCharacterIDWalletJournalGetRefTypeCspa                                      CharactersCharacterIDWalletJournalGetRefType = "cspa"
	CharactersCharacterIDWalletJournalGetRefTypeCspaofflinerefund                         CharactersCharacterIDWalletJournalGetRefType = "cspaofflinerefund"
	CharactersCharacterIDWalletJournalGetRefTypeDailyChallengeReward                      CharactersCharacterIDWalletJournalGetRefType = "daily_challenge_reward"
	CharactersCharacterIDWalletJournalGetRefTypeDailyGoalPayouts                          CharactersCharacterIDWalletJournalGetRefType = "daily_goal_payouts"
	CharactersCharacterIDWalletJournalGetRefTypeDailyGoalPayoutsTax                       CharactersCharacterIDWalletJournalGetRefType = "daily_goal_payouts_tax"
	CharactersCharacterIDWalletJournalGetRefTypeDatacoreFee                               CharactersCharacterIDWalletJournalGetRefType = "datacore_fee"
	CharactersCharacterIDWalletJournalGetRefTypeDnaModificationFee                        CharactersCharacterIDWalletJournalGetRefType = "dna_modification_fee"
	CharactersCharacterIDWalletJournalGetRefTypeDockingFee                                CharactersCharacterIDWalletJournalGetRefType = "docking_fee"
	CharactersCharacterIDWalletJournalGetRefTypeDuelWagerEscrow                           CharactersCharacterIDWalletJournalGetRefType = "duel_wager_escrow"
	CharactersCharacterIDWalletJournalGetRefTypeDuelWagerPayment                          CharactersCharacterIDWalletJournalGetRefType = "duel_wager_payment"
	CharactersCharacterIDWalletJournalGetRefTypeDuelWagerRefund                           CharactersCharacterIDWalletJournalGetRefType = "duel_wager_refund"
	CharactersCharacterIDWalletJournalGetRefTypeEssEscrowTransfer                         CharactersCharacterIDWalletJournalGetRefType = "ess_escrow_transfer"
	CharactersCharacterIDWalletJournalGetRefTypeExternalTradeDelivery                     CharactersCharacterIDWalletJournalGetRefType = "external_trade_delivery"
	CharactersCharacterIDWalletJournalGetRefTypeExternalTradeFreeze                       CharactersCharacterIDWalletJournalGetRefType = "external_trade_freeze"
	CharactersCharacterIDWalletJournalGetRefTypeExternalTradeThaw                         CharactersCharacterIDWalletJournalGetRefType = "external_trade_thaw"
	CharactersCharacterIDWalletJournalGetRefTypeFactorySlotRentalFee                      CharactersCharacterIDWalletJournalGetRefType = "factory_slot_rental_fee"
	CharactersCharacterIDWalletJournalGetRefTypeFluxPayout                                CharactersCharacterIDWalletJournalGetRefType = "flux_payout"
	CharactersCharacterIDWalletJournalGetRefTypeFluxTax                                   CharactersCharacterIDWalletJournalGetRefType = "flux_tax"
	CharactersCharacterIDWalletJournalGetRefTypeFluxTicketRepayment                       CharactersCharacterIDWalletJournalGetRefType = "flux_ticket_repayment"
	CharactersCharacterIDWalletJournalGetRefTypeFluxTicketSale                            CharactersCharacterIDWalletJournalGetRefType = "flux_ticket_sale"
	CharactersCharacterIDWalletJournalGetRefTypeFreelanceJobsBroadcastingFee              CharactersCharacterIDWalletJournalGetRefType = "freelance_jobs_broadcasting_fee"
	CharactersCharacterIDWalletJournalGetRefTypeFreelanceJobsDurationFee                  CharactersCharacterIDWalletJournalGetRefType = "freelance_jobs_duration_fee"
	CharactersCharacterIDWalletJournalGetRefTypeFreelanceJobsEscrowRefund                 CharactersCharacterIDWalletJournalGetRefType = "freelance_jobs_escrow_refund"
	CharactersCharacterIDWalletJournalGetRefTypeFreelanceJobsReward                       CharactersCharacterIDWalletJournalGetRefType = "freelance_jobs_reward"
	CharactersCharacterIDWalletJournalGetRefTypeFreelanceJobsRewardCorporationTax         CharactersCharacterIDWalletJournalGetRefType = "freelance_jobs_reward_corporation_tax"
	CharactersCharacterIDWalletJournalGetRefTypeFreelanceJobsRewardEscrow                 CharactersCharacterIDWalletJournalGetRefType = "freelance_jobs_reward_escrow"
	CharactersCharacterIDWalletJournalGetRefTypeGmCashTransfer                            CharactersCharacterIDWalletJournalGetRefType = "gm_cash_transfer"
	CharactersCharacterIDWalletJournalGetRefTypeGmPlexFeeRefund                           CharactersCharacterIDWalletJournalGetRefType = "gm_plex_fee_refund"
	CharactersCharacterIDWalletJournalGetRefTypeIndustryJobTax                            CharactersCharacterIDWalletJournalGetRefType = "industry_job_tax"
	CharactersCharacterIDWalletJournalGetRefTypeInfrastructureHubMaintenance              CharactersCharacterIDWalletJournalGetRefType = "infrastructure_hub_maintenance"
	CharactersCharacterIDWalletJournalGetRefTypeInheritance                               CharactersCharacterIDWalletJournalGetRefType = "inheritance"
	CharactersCharacterIDWalletJournalGetRefTypeInsurance                                 CharactersCharacterIDWalletJournalGetRefType = "insurance"
	CharactersCharacterIDWalletJournalGetRefTypeInsurgencyCorruptionContributionReward    CharactersCharacterIDWalletJournalGetRefType = "insurgency_corruption_contribution_reward"
	CharactersCharacterIDWalletJournalGetRefTypeInsurgencySuppressionContributionReward   CharactersCharacterIDWalletJournalGetRefType = "insurgency_suppression_contribution_reward"
	CharactersCharacterIDWalletJournalGetRefTypeItemTraderPayment                         CharactersCharacterIDWalletJournalGetRefType = "item_trader_payment"
	CharactersCharacterIDWalletJournalGetRefTypeJumpCloneActivationFee                    CharactersCharacterIDWalletJournalGetRefType = "jump_clone_activation_fee"
	CharactersCharacterIDWalletJournalGetRefTypeJumpCloneInstallationFee                  CharactersCharacterIDWalletJournalGetRefType = "jump_clone_installation_fee"
	CharactersCharacterIDWalletJournalGetRefTypeKillRightFee                              CharactersCharacterIDWalletJournalGetRefType = "kill_right_fee"
	CharactersCharacterIDWalletJournalGetRefTypeLpStore                                   CharactersCharacterIDWalletJournalGetRefType = "lp_store"
	CharactersCharacterIDWalletJournalGetRefTypeManufacturing                             CharactersCharacterIDWalletJournalGetRefType = "manufacturing"
	CharactersCharacterIDWalletJournalGetRefTypeMarketEscrow                              CharactersCharacterIDWalletJournalGetRefType = "market_escrow"
	CharactersCharacterIDWalletJournalGetRefTypeMarketFinePaid                            CharactersCharacterIDWalletJournalGetRefType = "market_fine_paid"
	CharactersCharacterIDWalletJournalGetRefTypeMarketProviderTax                         CharactersCharacterIDWalletJournalGetRefType = "market_provider_tax"
	CharactersCharacterIDWalletJournalGetRefTypeMarketTransaction                         CharactersCharacterIDWalletJournalGetRefType = "market_transaction"
	CharactersCharacterIDWalletJournalGetRefTypeMedalCreation                             CharactersCharacterIDWalletJournalGetRefType = "medal_creation"
	CharactersCharacterIDWalletJournalGetRefTypeMedalIssued                               CharactersCharacterIDWalletJournalGetRefType = "medal_issued"
	CharactersCharacterIDWalletJournalGetRefTypeMilestoneRewardPayment                    CharactersCharacterIDWalletJournalGetRefType = "milestone_reward_payment"
	CharactersCharacterIDWalletJournalGetRefTypeMissionCompletion                         CharactersCharacterIDWalletJournalGetRefType = "mission_completion"
	CharactersCharacterIDWalletJournalGetRefTypeMissionCost                               CharactersCharacterIDWalletJournalGetRefType = "mission_cost"
	CharactersCharacterIDWalletJournalGetRefTypeMissionExpiration                         CharactersCharacterIDWalletJournalGetRefType = "mission_expiration"
	CharactersCharacterIDWalletJournalGetRefTypeMissionReward                             CharactersCharacterIDWalletJournalGetRefType = "mission_reward"
	CharactersCharacterIDWalletJournalGetRefTypeOfficeRentalFee                           CharactersCharacterIDWalletJournalGetRefType = "office_rental_fee"
	CharactersCharacterIDWalletJournalGetRefTypeOperationBonus                            CharactersCharacterIDWalletJournalGetRefType = "operation_bonus"
	CharactersCharacterIDWalletJournalGetRefTypeOpportunityReward                         CharactersCharacterIDWalletJournalGetRefType = "opportunity_reward"
	CharactersCharacterIDWalletJournalGetRefTypePlanetaryConstruction                     CharactersCharacterIDWalletJournalGetRefType = "planetary_construction"
	CharactersCharacterIDWalletJournalGetRefTypePlanetaryExportTax                        CharactersCharacterIDWalletJournalGetRefType = "planetary_export_tax"
	CharactersCharacterIDWalletJournalGetRefTypePlanetaryImportTax                        CharactersCharacterIDWalletJournalGetRefType = "planetary_import_tax"
	CharactersCharacterIDWalletJournalGetRefTypePlayerDonation                            CharactersCharacterIDWalletJournalGetRefType = "player_donation"
	CharactersCharacterIDWalletJournalGetRefTypePlayerTrading                             CharactersCharacterIDWalletJournalGetRefType = "player_trading"
	CharactersCharacterIDWalletJournalGetRefTypeProjectDiscoveryReward                    CharactersCharacterIDWalletJournalGetRefType = "project_discovery_reward"
	CharactersCharacterIDWalletJournalGetRefTypeProjectDiscoveryTax                       CharactersCharacterIDWalletJournalGetRefType = "project_discovery_tax"
	CharactersCharacterIDWalletJournalGetRefTypeProjectPayouts                            CharactersCharacterIDWalletJournalGetRefType = "project_payouts"
	CharactersCharacterIDWalletJournalGetRefTypeReaction                                  CharactersCharacterIDWalletJournalGetRefType = "reaction"
	CharactersCharacterIDWalletJournalGetRefTypeRedeemedIskToken                          CharactersCharacterIDWalletJournalGetRefType = "redeemed_isk_token"
	CharactersCharacterIDWalletJournalGetRefTypeReleaseOfImpoundedProperty                CharactersCharacterIDWalletJournalGetRefType = "release_of_impounded_property"
	CharactersCharacterIDWalletJournalGetRefTypeRepairBill                                CharactersCharacterIDWalletJournalGetRefType = "repair_bill"
	CharactersCharacterIDWalletJournalGetRefTypeReprocessingTax                           CharactersCharacterIDWalletJournalGetRefType = "reprocessing_tax"
	CharactersCharacterIDWalletJournalGetRefTypeResearchingMaterialProductivity           CharactersCharacterIDWalletJournalGetRefType = "researching_material_productivity"
	CharactersCharacterIDWalletJournalGetRefTypeResearchingTechnology                     CharactersCharacterIDWalletJournalGetRefType = "researching_technology"
	CharactersCharacterIDWalletJournalGetRefTypeResearchingTimeProductivity               CharactersCharacterIDWalletJournalGetRefType = "researching_time_productivity"
	CharactersCharacterIDWalletJournalGetRefTypeResourceWarsReward                        CharactersCharacterIDWalletJournalGetRefType = "resource_wars_reward"
	CharactersCharacterIDWalletJournalGetRefTypeReverseEngineering                        CharactersCharacterIDWalletJournalGetRefType = "reverse_engineering"
	CharactersCharacterIDWalletJournalGetRefTypeSeasonChallengeReward                     CharactersCharacterIDWalletJournalGetRefType = "season_challenge_reward"
	CharactersCharacterIDWalletJournalGetRefTypeSecurityProcessingFee                     CharactersCharacterIDWalletJournalGetRefType = "security_processing_fee"
	CharactersCharacterIDWalletJournalGetRefTypeShares                                    CharactersCharacterIDWalletJournalGetRefType = "shares"
	CharactersCharacterIDWalletJournalGetRefTypeSkillPurchase                             CharactersCharacterIDWalletJournalGetRefType = "skill_purchase"
	CharactersCharacterIDWalletJournalGetRefTypeSkyhookClaimFee                           CharactersCharacterIDWalletJournalGetRefType = "skyhook_claim_fee"
	CharactersCharacterIDWalletJournalGetRefTypeSovereignityBill                          CharactersCharacterIDWalletJournalGetRefType = "sovereignity_bill"
	CharactersCharacterIDWalletJournalGetRefTypeStorePurchase                             CharactersCharacterIDWalletJournalGetRefType = "store_purchase"
	CharactersCharacterIDWalletJournalGetRefTypeStorePurchaseRefund                       CharactersCharacterIDWalletJournalGetRefType = "store_purchase_refund"
	CharactersCharacterIDWalletJournalGetRefTypeStructureGateJump                         CharactersCharacterIDWalletJournalGetRefType = "structure_gate_jump"
	CharactersCharacterIDWalletJournalGetRefTypeTransactionTax                            CharactersCharacterIDWalletJournalGetRefType = "transaction_tax"
	CharactersCharacterIDWalletJournalGetRefTypeUnderConstruction                         CharactersCharacterIDWalletJournalGetRefType = "under_construction"
	CharactersCharacterIDWalletJournalGetRefTypeUpkeepAdjustmentFee                       CharactersCharacterIDWalletJournalGetRefType = "upkeep_adjustment_fee"
	CharactersCharacterIDWalletJournalGetRefTypeWarAllyContract                           CharactersCharacterIDWalletJournalGetRefType = "war_ally_contract"
	CharactersCharacterIDWalletJournalGetRefTypeWarFee                                    CharactersCharacterIDWalletJournalGetRefType = "war_fee"
	CharactersCharacterIDWalletJournalGetRefTypeWarFeeSurrender                           CharactersCharacterIDWalletJournalGetRefType = "war_fee_surrender"
)

// Defines values for ContractsPublicRegionIDGetType.
const (
	ContractsPublicRegionIDGetTypeAuction      ContractsPublicRegionIDGetType = "auction"
	ContractsPublicRegionIDGetTypeCourier      ContractsPublicRegionIDGetType = "courier"
	ContractsPublicRegionIDGetTypeItemExchange ContractsPublicRegionIDGetType = "item_exchange"
	ContractsPublicRegionIDGetTypeLoan         ContractsPublicRegionIDGetType = "loan"
	ContractsPublicRegionIDGetTypeUnknown      ContractsPublicRegionIDGetType = "unknown"
)

// Defines values for CorporationCorporationIDMiningObserversGetObserverType.
const (
	CorporationCorporationIDMiningObserversGetObserverTypeStructure CorporationCorporationIDMiningObserversGetObserverType = "structure"
)

// Defines values for CorporationsCorporationIDAssetsGetLocationFlag.
const (
	CorporationsCorporationIDAssetsGetLocationFlagAssetSafety                         CorporationsCorporationIDAssetsGetLocationFlag = "AssetSafety"
	CorporationsCorporationIDAssetsGetLocationFlagAutoFit                             CorporationsCorporationIDAssetsGetLocationFlag = "AutoFit"
	CorporationsCorporationIDAssetsGetLocationFlagBonus                               CorporationsCorporationIDAssetsGetLocationFlag = "Bonus"
	CorporationsCorporationIDAssetsGetLocationFlagBooster                             CorporationsCorporationIDAssetsGetLocationFlag = "Booster"
	CorporationsCorporationIDAssetsGetLocationFlagBoosterBay                          CorporationsCorporationIDAssetsGetLocationFlag = "BoosterBay"
	CorporationsCorporationIDAssetsGetLocationFlagCapsule                             CorporationsCorporationIDAssetsGetLocationFlag = "Capsule"
	CorporationsCorporationIDAssetsGetLocationFlagCapsuleerDeliveries                 CorporationsCorporationIDAssetsGetLocationFlag = "CapsuleerDeliveries"
	CorporationsCorporationIDAssetsGetLocationFlagCargo                               CorporationsCorporationIDAssetsGetLocationFlag = "Cargo"
	CorporationsCorporationIDAssetsGetLocationFlagCorpDeliveries                      CorporationsCorporationIDAssetsGetLocationFlag = "CorpDeliveries"
	CorporationsCorporationIDAssetsGetLocationFlagCorpSAG1                            CorporationsCorporationIDAssetsGetLocationFlag = "CorpSAG1"
	CorporationsCorporationIDAssetsGetLocationFlagCorpSAG2                            CorporationsCorporationIDAssetsGetLocationFlag = "CorpSAG2"
	CorporationsCorporationIDAssetsGetLocationFlagCorpSAG3                            CorporationsCorporationIDAssetsGetLocationFlag = "CorpSAG3"
	CorporationsCorporationIDAssetsGetLocationFlagCorpSAG4                            CorporationsCorporationIDAssetsGetLocationFlag = "CorpSAG4"
	CorporationsCorporationIDAssetsGetLocationFlagCorpSAG5                            CorporationsCorporationIDAssetsGetLocationFlag = "CorpSAG5"
	CorporationsCorporationIDAssetsGetLocationFlagCorpSAG6                            CorporationsCorporationIDAssetsGetLocationFlag = "CorpSAG6"
	CorporationsCorporationIDAssetsGetLocationFlagCorpSAG7                            CorporationsCorporationIDAssetsGetLocationFlag = "CorpSAG7"
	CorporationsCorporationIDAssetsGetLocationFlagCorporationGoalDeliveries           CorporationsCorporationIDAssetsGetLocationFlag = "CorporationGoalDeliveries"
	CorporationsCorporationIDAssetsGetLocationFlagCrateLoot                           CorporationsCorporationIDAssetsGetLocationFlag = "CrateLoot"
	CorporationsCorporationIDAssetsGetLocationFlagDeliveries                          CorporationsCorporationIDAssetsGetLocationFlag = "Deliveries"
	CorporationsCorporationIDAssetsGetLocationFlagDroneBay                            CorporationsCorporationIDAssetsGetLocationFlag = "DroneBay"
	CorporationsCorporationIDAssetsGetLocationFlagDustBattle                          CorporationsCorporationIDAssetsGetLocationFlag = "DustBattle"
	CorporationsCorporationIDAssetsGetLocationFlagDustDatabank                        CorporationsCorporationIDAssetsGetLocationFlag = "DustDatabank"
	CorporationsCorporationIDAssetsGetLocationFlagFighterBay                          CorporationsCorporationIDAssetsGetLocationFlag = "FighterBay"
	CorporationsCorporationIDAssetsGetLocationFlagFighterTube0                        CorporationsCorporationIDAssetsGetLocationFlag = "FighterTube0"
	CorporationsCorporationIDAssetsGetLocationFlagFighterTube1                        CorporationsCorporationIDAssetsGetLocationFlag = "FighterTube1"
	CorporationsCorporationIDAssetsGetLocationFlagFighterTube2                        CorporationsCorporationIDAssetsGetLocationFlag = "FighterTube2"
	CorporationsCorporationIDAssetsGetLocationFlagFighterTube3                        CorporationsCorporationIDAssetsGetLocationFlag = "FighterTube3"
	CorporationsCorporationIDAssetsGetLocationFlagFighterTube4                        CorporationsCorporationIDAssetsGetLocationFlag = "FighterTube4"
	CorporationsCorporationIDAssetsGetLocationFlagFleetHangar                         CorporationsCorporationIDAssetsGetLocationFlag = "FleetHangar"
	CorporationsCorporationIDAssetsGetLocationFlagFrigateEscapeBay                    CorporationsCorporationIDAssetsGetLocationFlag = "FrigateEscapeBay"
	CorporationsCorporationIDAssetsGetLocationFlagHangar                              CorporationsCorporationIDAssetsGetLocationFlag = "Hangar"
	CorporationsCorporationIDAssetsGetLocationFlagHangarAll                           CorporationsCorporationIDAssetsGetLocationFlag = "HangarAll"
	CorporationsCorporationIDAssetsGetLocationFlagHiSlot0                             CorporationsCorporationIDAssetsGetLocationFlag = "HiSlot0"
	CorporationsCorporationIDAssetsGetLocationFlagHiSlot1                             CorporationsCorporationIDAssetsGetLocationFlag = "HiSlot1"
	CorporationsCorporationIDAssetsGetLocationFlagHiSlot2                             CorporationsCorporationIDAssetsGetLocationFlag = "HiSlot2"
	CorporationsCorporationIDAssetsGetLocationFlagHiSlot3                             CorporationsCorporationIDAssetsGetLocationFlag = "HiSlot3"
	CorporationsCorporationIDAssetsGetLocationFlagHiSlot4                             CorporationsCorporationIDAssetsGetLocationFlag = "HiSlot4"
	CorporationsCorporationIDAssetsGetLocationFlagHiSlot5                             CorporationsCorporationIDAssetsGetLocationFlag = "HiSlot5"
	CorporationsCorporationIDAssetsGetLocationFlagHiSlot6                             CorporationsCorporationIDAssetsGetLocationFlag = "HiSlot6"
	CorporationsCorporationIDAssetsGetLocationFlagHiSlot7                             CorporationsCorporationIDAssetsGetLocationFlag = "HiSlot7"
	CorporationsCorporationIDAssetsGetLocationFlagHiddenModifiers                     CorporationsCorporationIDAssetsGetLocationFlag = "HiddenModifiers"
	CorporationsCorporationIDAssetsGetLocationFlagImplant                             CorporationsCorporationIDAssetsGetLocationFlag = "Implant"
	CorporationsCorporationIDAssetsGetLocationFlagImpounded                           CorporationsCorporationIDAssetsGetLocationFlag = "Impounded"
	CorporationsCorporationIDAssetsGetLocationFlagInfrastructureHangar                CorporationsCorporationIDAssetsGetLocationFlag = "InfrastructureHangar"
	CorporationsCorporationIDAssetsGetLocationFlagJunkyardReprocessed                 CorporationsCorporationIDAssetsGetLocationFlag = "JunkyardReprocessed"
	CorporationsCorporationIDAssetsGetLocationFlagJunkyardTrashed                     CorporationsCorporationIDAssetsGetLocationFlag = "JunkyardTrashed"
	CorporationsCorporationIDAssetsGetLocationFlagLoSlot0                             CorporationsCorporationIDAssetsGetLocationFlag = "LoSlot0"
	CorporationsCorporationIDAssetsGetLocationFlagLoSlot1                             CorporationsCorporationIDAssetsGetLocationFlag = "LoSlot1"
	CorporationsCorporationIDAssetsGetLocationFlagLoSlot2                             CorporationsCorporationIDAssetsGetLocationFlag = "LoSlot2"
	CorporationsCorporationIDAssetsGetLocationFlagLoSlot3                             CorporationsCorporationIDAssetsGetLocationFlag = "LoSlot3"
	CorporationsCorporationIDAssetsGetLocationFlagLoSlot4                             CorporationsCorporationIDAssetsGetLocationFlag = "LoSlot4"
	CorporationsCorporationIDAssetsGetLocationFlagLoSlot5                             CorporationsCorporationIDAssetsGetLocationFlag = "LoSlot5"
	CorporationsCorporationIDAssetsGetLocationFlagLoSlot6                             CorporationsCorporationIDAssetsGetLocationFlag = "LoSlot6"
	CorporationsCorporationIDAssetsGetLocationFlagLoSlot7                             CorporationsCorporationIDAssetsGetLocationFlag = "LoSlot7"
	CorporationsCorporationIDAssetsGetLocationFlagLocked                              CorporationsCorporationIDAssetsGetLocationFlag = "Locked"
	CorporationsCorporationIDAssetsGetLocationFlagMedSlot0                            CorporationsCorporationIDAssetsGetLocationFlag = "MedSlot0"
	CorporationsCorporationIDAssetsGetLocationFlagMedSlot1                            CorporationsCorporationIDAssetsGetLocationFlag = "MedSlot1"
	CorporationsCorporationIDAssetsGetLocationFlagMedSlot2                            CorporationsCorporationIDAssetsGetLocationFlag = "MedSlot2"
	CorporationsCorporationIDAssetsGetLocationFlagMedSlot3                            CorporationsCorporationIDAssetsGetLocationFlag = "MedSlot3"
	CorporationsCorporationIDAssetsGetLocationFlagMedSlot4                            CorporationsCorporationIDAssetsGetLocationFlag = "MedSlot4"
	CorporationsCorporationIDAssetsGetLocationFlagMedSlot5                            CorporationsCorporationIDAssetsGetLocationFlag = "MedSlot5"
	CorporationsCorporationIDAssetsGetLocationFlagMedSlot6                            CorporationsCorporationIDAssetsGetLocationFlag = "MedSlot6"
	CorporationsCorporationIDAssetsGetLocationFlagMedSlot7                            CorporationsCorporationIDAssetsGetLocationFlag = "MedSlot7"
	CorporationsCorporationIDAssetsGetLocationFlagMobileDepotHold                     CorporationsCorporationIDAssetsGetLocationFlag = "MobileDepotHold"
	CorporationsCorporationIDAssetsGetLocationFlagMoonMaterialBay                     CorporationsCorporationIDAssetsGetLocationFlag = "MoonMaterialBay"
	CorporationsCorporationIDAssetsGetLocationFlagOfficeFolder                        CorporationsCorporationIDAssetsGetLocationFlag = "OfficeFolder"
	CorporationsCorporationIDAssetsGetLocationFlagPilot                               CorporationsCorporationIDAssetsGetLocationFlag = "Pilot"
	CorporationsCorporationIDAssetsGetLocationFlagPlanetSurface                       CorporationsCorporationIDAssetsGetLocationFlag = "PlanetSurface"
	CorporationsCorporationIDAssetsGetLocationFlagQuafeBay                            CorporationsCorporationIDAssetsGetLocationFlag = "QuafeBay"
	CorporationsCorporationIDAssetsGetLocationFlagQuantumCoreRoom                     CorporationsCorporationIDAssetsGetLocationFlag = "QuantumCoreRoom"
	CorporationsCorporationIDAssetsGetLocationFlagReward                              CorporationsCorporationIDAssetsGetLocationFlag = "Reward"
	CorporationsCorporationIDAssetsGetLocationFlagRigSlot0                            CorporationsCorporationIDAssetsGetLocationFlag = "RigSlot0"
	CorporationsCorporationIDAssetsGetLocationFlagRigSlot1                            CorporationsCorporationIDAssetsGetLocationFlag = "RigSlot1"
	CorporationsCorporationIDAssetsGetLocationFlagRigSlot2                            CorporationsCorporationIDAssetsGetLocationFlag = "RigSlot2"
	CorporationsCorporationIDAssetsGetLocationFlagRigSlot3                            CorporationsCorporationIDAssetsGetLocationFlag = "RigSlot3"
	CorporationsCorporationIDAssetsGetLocationFlagRigSlot4                            CorporationsCorporationIDAssetsGetLocationFlag = "RigSlot4"
	CorporationsCorporationIDAssetsGetLocationFlagRigSlot5                            CorporationsCorporationIDAssetsGetLocationFlag = "RigSlot5"
	CorporationsCorporationIDAssetsGetLocationFlagRigSlot6                            CorporationsCorporationIDAssetsGetLocationFlag = "RigSlot6"
	CorporationsCorporationIDAssetsGetLocationFlagRigSlot7                            CorporationsCorporationIDAssetsGetLocationFlag = "RigSlot7"
	CorporationsCorporationIDAssetsGetLocationFlagSecondaryStorage                    CorporationsCorporationIDAssetsGetLocationFlag = "SecondaryStorage"
	CorporationsCorporationIDAssetsGetLocationFlagServiceSlot0                        CorporationsCorporationIDAssetsGetLocationFlag = "ServiceSlot0"
	CorporationsCorporationIDAssetsGetLocationFlagServiceSlot1                        CorporationsCorporationIDAssetsGetLocationFlag = "ServiceSlot1"
	CorporationsCorporationIDAssetsGetLocationFlagServiceSlot2                        CorporationsCorporationIDAssetsGetLocationFlag = "ServiceSlot2"
	CorporationsCorporationIDAssetsGetLocationFlagServiceSlot3                        CorporationsCorporationIDAssetsGetLocationFlag = "ServiceSlot3"
	CorporationsCorporationIDAssetsGetLocationFlagServiceSlot4                        CorporationsCorporationIDAssetsGetLocationFlag = "ServiceSlot4"
	CorporationsCorporationIDAssetsGetLocationFlagServiceSlot5                        CorporationsCorporationIDAssetsGetLocationFlag = "ServiceSlot5"
	CorporationsCorporationIDAssetsGetLocationFlagServiceSlot6                        CorporationsCorporationIDAssetsGetLocationFlag = "ServiceSlot6"
	CorporationsCorporationIDAssetsGetLocationFlagServiceSlot7                        CorporationsCorporationIDAssetsGetLocationFlag = "ServiceSlot7"
	CorporationsCorporationIDAssetsGetLocationFlagShipHangar                          CorporationsCorporationIDAssetsGetLocationFlag = "ShipHangar"
	CorporationsCorporationIDAssetsGetLocationFlagShipOffline                         CorporationsCorporationIDAssetsGetLocationFlag = "ShipOffline"
	CorporationsCorporationIDAssetsGetLocationFlagSkill                               CorporationsCorporationIDAssetsGetLocationFlag = "Skill"
	CorporationsCorporationIDAssetsGetLocationFlagSkillInTraining                     CorporationsCorporationIDAssetsGetLocationFlag = "SkillInTraining"
	CorporationsCorporationIDAssetsGetLocationFlagSpecializedAmmoHold                 CorporationsCorporationIDAssetsGetLocationFlag = "SpecializedAmmoHold"
	CorporationsCorporationIDAssetsGetLocationFlagSpecializedAsteroidHold             CorporationsCorporationIDAssetsGetLocationFlag = "SpecializedAsteroidHold"
	CorporationsCorporationIDAssetsGetLocationFlagSpecializedCommandCenterHold        CorporationsCorporationIDAssetsGetLocationFlag = "SpecializedCommandCenterHold"
	CorporationsCorporationIDAssetsGetLocationFlagSpecializedFuelBay                  CorporationsCorporationIDAssetsGetLocationFlag = "SpecializedFuelBay"
	CorporationsCorporationIDAssetsGetLocationFlagSpecializedGasHold                  CorporationsCorporationIDAssetsGetLocationFlag = "SpecializedGasHold"
	CorporationsCorporationIDAssetsGetLocationFlagSpecializedIceHold                  CorporationsCorporationIDAssetsGetLocationFlag = "SpecializedIceHold"
	CorporationsCorporationIDAssetsGetLocationFlagSpecializedIndustrialShipHold       CorporationsCorporationIDAssetsGetLocationFlag = "SpecializedIndustrialShipHold"
	CorporationsCorporationIDAssetsGetLocationFlagSpecializedLargeShipHold            CorporationsCorporationIDAssetsGetLocationFlag = "SpecializedLargeShipHold"
	CorporationsCorporationIDAssetsGetLocationFlagSpecializedMaterialBay              CorporationsCorporationIDAssetsGetLocationFlag = "SpecializedMaterialBay"
	CorporationsCorporationIDAssetsGetLocationFlagSpecializedMediumShipHold           CorporationsCorporationIDAssetsGetLocationFlag = "SpecializedMediumShipHold"
	CorporationsCorporationIDAssetsGetLocationFlagSpecializedMineralHold              CorporationsCorporationIDAssetsGetLocationFlag = "SpecializedMineralHold"
	CorporationsCorporationIDAssetsGetLocationFlagSpecializedOreHold                  CorporationsCorporationIDAssetsGetLocationFlag = "SpecializedOreHold"
	CorporationsCorporationIDAssetsGetLocationFlagSpecializedPlanetaryCommoditiesHold CorporationsCorporationIDAssetsGetLocationFlag = "SpecializedPlanetaryCommoditiesHold"
	CorporationsCorporationIDAssetsGetLocationFlagSpecializedSalvageHold              CorporationsCorporationIDAssetsGetLocationFlag = "SpecializedSalvageHold"
	CorporationsCorporationIDAssetsGetLocationFlagSpecializedShipHold                 CorporationsCorporationIDAssetsGetLocationFlag = "SpecializedShipHold"
	CorporationsCorporationIDAssetsGetLocationFlagSpecializedSmallShipHold            CorporationsCorporationIDAssetsGetLocationFlag = "SpecializedSmallShipHold"
	CorporationsCorporationIDAssetsGetLocationFlagStructureActive                     CorporationsCorporationIDAssetsGetLocationFlag = "StructureActive"
	CorporationsCorporationIDAssetsGetLocationFlagStructureFuel                       CorporationsCorporationIDAssetsGetLocationFlag = "StructureFuel"
	CorporationsCorporationIDAssetsGetLocationFlagStructureInactive                   CorporationsCorporationIDAssetsGetLocationFlag = "StructureInactive"
	CorporationsCorporationIDAssetsGetLocationFlagStructureOffline                    CorporationsCorporationIDAssetsGetLocationFlag = "StructureOffline"
	CorporationsCorporationIDAssetsGetLocationFlagSubSystemBay                        CorporationsCorporationIDAssetsGetLocationFlag = "SubSystemBay"
	CorporationsCorporationIDAssetsGetLocationFlagSubSystemSlot0                      CorporationsCorporationIDAssetsGetLocationFlag = "SubSystemSlot0"
	CorporationsCorporationIDAssetsGetLocationFlagSubSystemSlot1                      CorporationsCorporationIDAssetsGetLocationFlag = "SubSystemSlot1"
	CorporationsCorporationIDAssetsGetLocationFlagSubSystemSlot2                      CorporationsCorporationIDAssetsGetLocationFlag = "SubSystemSlot2"
	CorporationsCorporationIDAssetsGetLocationFlagSubSystemSlot3                      CorporationsCorporationIDAssetsGetLocationFlag = "SubSystemSlot3"
	CorporationsCorporationIDAssetsGetLocationFlagSubSystemSlot4                      CorporationsCorporationIDAssetsGetLocationFlag = "SubSystemSlot4"
	CorporationsCorporationIDAssetsGetLocationFlagSubSystemSlot5                      CorporationsCorporationIDAssetsGetLocationFlag = "SubSystemSlot5"
	CorporationsCorporationIDAssetsGetLocationFlagSubSystemSlot6                      CorporationsCorporationIDAssetsGetLocationFlag = "SubSystemSlot6"
	CorporationsCorporationIDAssetsGetLocationFlagSubSystemSlot7                      CorporationsCorporationIDAssetsGetLocationFlag = "SubSystemSlot7"
	CorporationsCorporationIDAssetsGetLocationFlagUnlocked                            CorporationsCorporationIDAssetsGetLocationFlag = "Unlocked"
	CorporationsCorporationIDAssetsGetLocationFlagWallet                              CorporationsCorporationIDAssetsGetLocationFlag = "Wallet"
	CorporationsCorporationIDAssetsGetLocationFlagWardrobe                            CorporationsCorporationIDAssetsGetLocationFlag = "Wardrobe"
)

// Defines values for CorporationsCorporationIDAssetsGetLocationType.
const (
	CorporationsCorporationIDAssetsGetLocationTypeItem        CorporationsCorporationIDAssetsGetLocationType = "item"
	CorporationsCorporationIDAssetsGetLocationTypeOther       CorporationsCorporationIDAssetsGetLocationType = "other"
	CorporationsCorporationIDAssetsGetLocationTypeSolarSystem CorporationsCorporationIDAssetsGetLocationType = "solar_system"
	CorporationsCorporationIDAssetsGetLocationTypeStation     CorporationsCorporationIDAssetsGetLocationType = "station"
)

// Defines values for CorporationsCorporationIDBlueprintsGetLocationFlag.
const (
	CorporationsCorporationIDBlueprintsGetLocationFlagAssetSafety                         CorporationsCorporationIDBlueprintsGetLocationFlag = "AssetSafety"
	CorporationsCorporationIDBlueprintsGetLocationFlagAutoFit                             CorporationsCorporationIDBlueprintsGetLocationFlag = "AutoFit"
	CorporationsCorporationIDBlueprintsGetLocationFlagBonus                               CorporationsCorporationIDBlueprintsGetLocationFlag = "Bonus"
	CorporationsCorporationIDBlueprintsGetLocationFlagBooster                             CorporationsCorporationIDBlueprintsGetLocationFlag = "Booster"
	CorporationsCorporationIDBlueprintsGetLocationFlagBoosterBay                          CorporationsCorporationIDBlueprintsGetLocationFlag = "BoosterBay"
	CorporationsCorporationIDBlueprintsGetLocationFlagCapsule                             CorporationsCorporationIDBlueprintsGetLocationFlag = "Capsule"
	CorporationsCorporationIDBlueprintsGetLocationFlagCapsuleerDeliveries                 CorporationsCorporationIDBlueprintsGetLocationFlag = "CapsuleerDeliveries"
	CorporationsCorporationIDBlueprintsGetLocationFlagCargo                               CorporationsCorporationIDBlueprintsGetLocationFlag = "Cargo"
	CorporationsCorporationIDBlueprintsGetLocationFlagCorpDeliveries                      CorporationsCorporationIDBlueprintsGetLocationFlag = "CorpDeliveries"
	CorporationsCorporationIDBlueprintsGetLocationFlagCorpSAG1                            CorporationsCorporationIDBlueprintsGetLocationFlag = "CorpSAG1"
	CorporationsCorporationIDBlueprintsGetLocationFlagCorpSAG2                            CorporationsCorporationIDBlueprintsGetLocationFlag = "CorpSAG2"
	CorporationsCorporationIDBlueprintsGetLocationFlagCorpSAG3                            CorporationsCorporationIDBlueprintsGetLocationFlag = "CorpSAG3"
	CorporationsCorporationIDBlueprintsGetLocationFlagCorpSAG4                            CorporationsCorporationIDBlueprintsGetLocationFlag = "CorpSAG4"
	CorporationsCorporationIDBlueprintsGetLocationFlagCorpSAG5                            CorporationsCorporationIDBlueprintsGetLocationFlag = "CorpSAG5"
	CorporationsCorporationIDBlueprintsGetLocationFlagCorpSAG6                            CorporationsCorporationIDBlueprintsGetLocationFlag = "CorpSAG6"
	CorporationsCorporationIDBlueprintsGetLocationFlagCorpSAG7                            CorporationsCorporationIDBlueprintsGetLocationFlag = "CorpSAG7"
	CorporationsCorporationIDBlueprintsGetLocationFlagCorporationGoalDeliveries           CorporationsCorporationIDBlueprintsGetLocationFlag = "CorporationGoalDeliveries"
	CorporationsCorporationIDBlueprintsGetLocationFlagCrateLoot                           CorporationsCorporationIDBlueprintsGetLocationFlag = "CrateLoot"
	CorporationsCorporationIDBlueprintsGetLocationFlagDeliveries                          CorporationsCorporationIDBlueprintsGetLocationFlag = "Deliveries"
	CorporationsCorporationIDBlueprintsGetLocationFlagDroneBay                            CorporationsCorporationIDBlueprintsGetLocationFlag = "DroneBay"
	CorporationsCorporationIDBlueprintsGetLocationFlagDustBattle                          CorporationsCorporationIDBlueprintsGetLocationFlag = "DustBattle"
	CorporationsCorporationIDBlueprintsGetLocationFlagDustDatabank                        CorporationsCorporationIDBlueprintsGetLocationFlag = "DustDatabank"
	CorporationsCorporationIDBlueprintsGetLocationFlagFighterBay                          CorporationsCorporationIDBlueprintsGetLocationFlag = "FighterBay"
	CorporationsCorporationIDBlueprintsGetLocationFlagFighterTube0                        CorporationsCorporationIDBlueprintsGetLocationFlag = "FighterTube0"
	CorporationsCorporationIDBlueprintsGetLocationFlagFighterTube1                        CorporationsCorporationIDBlueprintsGetLocationFlag = "FighterTube1"
	CorporationsCorporationIDBlueprintsGetLocationFlagFighterTube2                        CorporationsCorporationIDBlueprintsGetLocationFlag = "FighterTube2"
	CorporationsCorporationIDBlueprintsGetLocationFlagFighterTube3                        CorporationsCorporationIDBlueprintsGetLocationFlag = "FighterTube3"
	CorporationsCorporationIDBlueprintsGetLocationFlagFighterTube4                        CorporationsCorporationIDBlueprintsGetLocationFlag = "FighterTube4"
	CorporationsCorporationIDBlueprintsGetLocationFlagFleetHangar                         CorporationsCorporationIDBlueprintsGetLocationFlag = "FleetHangar"
	CorporationsCorporationIDBlueprintsGetLocationFlagFrigateEscapeBay                    CorporationsCorporationIDBlueprintsGetLocationFlag = "FrigateEscapeBay"
	CorporationsCorporationIDBlueprintsGetLocationFlagHangar                              CorporationsCorporationIDBlueprintsGetLocationFlag = "Hangar"
	CorporationsCorporationIDBlueprintsGetLocationFlagHangarAll                           CorporationsCorporationIDBlueprintsGetLocationFlag = "HangarAll"
	CorporationsCorporationIDBlueprintsGetLocationFlagHiSlot0                             CorporationsCorporationIDBlueprintsGetLocationFlag = "HiSlot0"
	CorporationsCorporationIDBlueprintsGetLocationFlagHiSlot1                             CorporationsCorporationIDBlueprintsGetLocationFlag = "HiSlot1"
	CorporationsCorporationIDBlueprintsGetLocationFlagHiSlot2                             CorporationsCorporationIDBlueprintsGetLocationFlag = "HiSlot2"
	CorporationsCorporationIDBlueprintsGetLocationFlagHiSlot3                             CorporationsCorporationIDBlueprintsGetLocationFlag = "HiSlot3"
	CorporationsCorporationIDBlueprintsGetLocationFlagHiSlot4                             CorporationsCorporationIDBlueprintsGetLocationFlag = "HiSlot4"
	CorporationsCorporationIDBlueprintsGetLocationFlagHiSlot5                             CorporationsCorporationIDBlueprintsGetLocationFlag = "HiSlot5"
	CorporationsCorporationIDBlueprintsGetLocationFlagHiSlot6                             CorporationsCorporationIDBlueprintsGetLocationFlag = "HiSlot6"
	CorporationsCorporationIDBlueprintsGetLocationFlagHiSlot7                             CorporationsCorporationIDBlueprintsGetLocationFlag = "HiSlot7"
	CorporationsCorporationIDBlueprintsGetLocationFlagHiddenModifiers                     CorporationsCorporationIDBlueprintsGetLocationFlag = "HiddenModifiers"
	CorporationsCorporationIDBlueprintsGetLocationFlagImplant                             CorporationsCorporationIDBlueprintsGetLocationFlag = "Implant"
	CorporationsCorporationIDBlueprintsGetLocationFlagImpounded                           CorporationsCorporationIDBlueprintsGetLocationFlag = "Impounded"
	CorporationsCorporationIDBlueprintsGetLocationFlagInfrastructureHangar                CorporationsCorporationIDBlueprintsGetLocationFlag = "InfrastructureHangar"
	CorporationsCorporationIDBlueprintsGetLocationFlagJunkyardReprocessed                 CorporationsCorporationIDBlueprintsGetLocationFlag = "JunkyardReprocessed"
	CorporationsCorporationIDBlueprintsGetLocationFlagJunkyardTrashed                     CorporationsCorporationIDBlueprintsGetLocationFlag = "JunkyardTrashed"
	CorporationsCorporationIDBlueprintsGetLocationFlagLoSlot0                             CorporationsCorporationIDBlueprintsGetLocationFlag = "LoSlot0"
	CorporationsCorporationIDBlueprintsGetLocationFlagLoSlot1                             CorporationsCorporationIDBlueprintsGetLocationFlag = "LoSlot1"
	CorporationsCorporationIDBlueprintsGetLocationFlagLoSlot2                             CorporationsCorporationIDBlueprintsGetLocationFlag = "LoSlot2"
	CorporationsCorporationIDBlueprintsGetLocationFlagLoSlot3                             CorporationsCorporationIDBlueprintsGetLocationFlag = "LoSlot3"
	CorporationsCorporationIDBlueprintsGetLocationFlagLoSlot4                             CorporationsCorporationIDBlueprintsGetLocationFlag = "LoSlot4"
	CorporationsCorporationIDBlueprintsGetLocationFlagLoSlot5                             CorporationsCorporationIDBlueprintsGetLocationFlag = "LoSlot5"
	CorporationsCorporationIDBlueprintsGetLocationFlagLoSlot6                             CorporationsCorporationIDBlueprintsGetLocationFlag = "LoSlot6"
	CorporationsCorporationIDBlueprintsGetLocationFlagLoSlot7                             CorporationsCorporationIDBlueprintsGetLocationFlag = "LoSlot7"
	CorporationsCorporationIDBlueprintsGetLocationFlagLocked                              CorporationsCorporationIDBlueprintsGetLocationFlag = "Locked"
	CorporationsCorporationIDBlueprintsGetLocationFlagMedSlot0                            CorporationsCorporationIDBlueprintsGetLocationFlag = "MedSlot0"
	CorporationsCorporationIDBlueprintsGetLocationFlagMedSlot1                            CorporationsCorporationIDBlueprintsGetLocationFlag = "MedSlot1"
	CorporationsCorporationIDBlueprintsGetLocationFlagMedSlot2                            CorporationsCorporationIDBlueprintsGetLocationFlag = "MedSlot2"
	CorporationsCorporationIDBlueprintsGetLocationFlagMedSlot3                            CorporationsCorporationIDBlueprintsGetLocationFlag = "MedSlot3"
	CorporationsCorporationIDBlueprintsGetLocationFlagMedSlot4                            CorporationsCorporationIDBlueprintsGetLocationFlag = "MedSlot4"
	CorporationsCorporationIDBlueprintsGetLocationFlagMedSlot5                            CorporationsCorporationIDBlueprintsGetLocationFlag = "MedSlot5"
	CorporationsCorporationIDBlueprintsGetLocationFlagMedSlot6                            CorporationsCorporationIDBlueprintsGetLocationFlag = "MedSlot6"
	CorporationsCorporationIDBlueprintsGetLocationFlagMedSlot7                            CorporationsCorporationIDBlueprintsGetLocationFlag = "MedSlot7"
	CorporationsCorporationIDBlueprintsGetLocationFlagMobileDepotHold                     CorporationsCorporationIDBlueprintsGetLocationFlag = "MobileDepotHold"
	CorporationsCorporationIDBlueprintsGetLocationFlagMoonMaterialBay                     CorporationsCorporationIDBlueprintsGetLocationFlag = "MoonMaterialBay"
	CorporationsCorporationIDBlueprintsGetLocationFlagOfficeFolder                        CorporationsCorporationIDBlueprintsGetLocationFlag = "OfficeFolder"
	CorporationsCorporationIDBlueprintsGetLocationFlagPilot                               CorporationsCorporationIDBlueprintsGetLocationFlag = "Pilot"
	CorporationsCorporationIDBlueprintsGetLocationFlagPlanetSurface                       CorporationsCorporationIDBlueprintsGetLocationFlag = "PlanetSurface"
	CorporationsCorporationIDBlueprintsGetLocationFlagQuafeBay                            CorporationsCorporationIDBlueprintsGetLocationFlag = "QuafeBay"
	CorporationsCorporationIDBlueprintsGetLocationFlagQuantumCoreRoom                     CorporationsCorporationIDBlueprintsGetLocationFlag = "QuantumCoreRoom"
	CorporationsCorporationIDBlueprintsGetLocationFlagReward                              CorporationsCorporationIDBlueprintsGetLocationFlag = "Reward"
	CorporationsCorporationIDBlueprintsGetLocationFlagRigSlot0                            CorporationsCorporationIDBlueprintsGetLocationFlag = "RigSlot0"
	CorporationsCorporationIDBlueprintsGetLocationFlagRigSlot1                            CorporationsCorporationIDBlueprintsGetLocationFlag = "RigSlot1"
	CorporationsCorporationIDBlueprintsGetLocationFlagRigSlot2                            CorporationsCorporationIDBlueprintsGetLocationFlag = "RigSlot2"
	CorporationsCorporationIDBlueprintsGetLocationFlagRigSlot3                            CorporationsCorporationIDBlueprintsGetLocationFlag = "RigSlot3"
	CorporationsCorporationIDBlueprintsGetLocationFlagRigSlot4                            CorporationsCorporationIDBlueprintsGetLocationFlag = "RigSlot4"
	CorporationsCorporationIDBlueprintsGetLocationFlagRigSlot5                            CorporationsCorporationIDBlueprintsGetLocationFlag = "RigSlot5"
	CorporationsCorporationIDBlueprintsGetLocationFlagRigSlot6                            CorporationsCorporationIDBlueprintsGetLocationFlag = "RigSlot6"
	CorporationsCorporationIDBlueprintsGetLocationFlagRigSlot7                            CorporationsCorporationIDBlueprintsGetLocationFlag = "RigSlot7"
	CorporationsCorporationIDBlueprintsGetLocationFlagSecondaryStorage                    CorporationsCorporationIDBlueprintsGetLocationFlag = "SecondaryStorage"
	CorporationsCorporationIDBlueprintsGetLocationFlagServiceSlot0                        CorporationsCorporationIDBlueprintsGetLocationFlag = "ServiceSlot0"
	CorporationsCorporationIDBlueprintsGetLocationFlagServiceSlot1                        CorporationsCorporationIDBlueprintsGetLocationFlag = "ServiceSlot1"
	CorporationsCorporationIDBlueprintsGetLocationFlagServiceSlot2                        CorporationsCorporationIDBlueprintsGetLocationFlag = "ServiceSlot2"
	CorporationsCorporationIDBlueprintsGetLocationFlagServiceSlot3                        CorporationsCorporationIDBlueprintsGetLocationFlag = "ServiceSlot3"
	CorporationsCorporationIDBlueprintsGetLocationFlagServiceSlot4                        CorporationsCorporationIDBlueprintsGetLocationFlag = "ServiceSlot4"
	CorporationsCorporationIDBlueprintsGetLocationFlagServiceSlot5                        CorporationsCorporationIDBlueprintsGetLocationFlag = "ServiceSlot5"
	CorporationsCorporationIDBlueprintsGetLocationFlagServiceSlot6                        CorporationsCorporationIDBlueprintsGetLocationFlag = "ServiceSlot6"
	CorporationsCorporationIDBlueprintsGetLocationFlagServiceSlot7                        CorporationsCorporationIDBlueprintsGetLocationFlag = "ServiceSlot7"
	CorporationsCorporationIDBlueprintsGetLocationFlagShipHangar                          CorporationsCorporationIDBlueprintsGetLocationFlag = "ShipHangar"
	CorporationsCorporationIDBlueprintsGetLocationFlagShipOffline                         CorporationsCorporationIDBlueprintsGetLocationFlag = "ShipOffline"
	CorporationsCorporationIDBlueprintsGetLocationFlagSkill                               CorporationsCorporationIDBlueprintsGetLocationFlag = "Skill"
	CorporationsCorporationIDBlueprintsGetLocationFlagSkillInTraining                     CorporationsCorporationIDBlueprintsGetLocationFlag = "SkillInTraining"
	CorporationsCorporationIDBlueprintsGetLocationFlagSpecializedAmmoHold                 CorporationsCorporationIDBlueprintsGetLocationFlag = "SpecializedAmmoHold"
	CorporationsCorporationIDBlueprintsGetLocationFlagSpecializedAsteroidHold             CorporationsCorporationIDBlueprintsGetLocationFlag = "SpecializedAsteroidHold"
	CorporationsCorporationIDBlueprintsGetLocationFlagSpecializedCommandCenterHold        CorporationsCorporationIDBlueprintsGetLocationFlag = "SpecializedCommandCenterHold"
	CorporationsCorporationIDBlueprintsGetLocationFlagSpecializedFuelBay                  CorporationsCorporationIDBlueprintsGetLocationFlag = "SpecializedFuelBay"
	CorporationsCorporationIDBlueprintsGetLocationFlagSpecializedGasHold                  CorporationsCorporationIDBlueprintsGetLocationFlag = "SpecializedGasHold"
	CorporationsCorporationIDBlueprintsGetLocationFlagSpecializedIceHold                  CorporationsCorporationIDBlueprintsGetLocationFlag = "SpecializedIceHold"
	CorporationsCorporationIDBlueprintsGetLocationFlagSpecializedIndustrialShipHold       CorporationsCorporationIDBlueprintsGetLocationFlag = "SpecializedIndustrialShipHold"
	CorporationsCorporationIDBlueprintsGetLocationFlagSpecializedLargeShipHold            CorporationsCorporationIDBlueprintsGetLocationFlag = "SpecializedLargeShipHold"
	CorporationsCorporationIDBlueprintsGetLocationFlagSpecializedMaterialBay              CorporationsCorporationIDBlueprintsGetLocationFlag = "SpecializedMaterialBay"
	CorporationsCorporationIDBlueprintsGetLocationFlagSpecializedMediumShipHold           CorporationsCorporationIDBlueprintsGetLocationFlag = "SpecializedMediumShipHold"
	CorporationsCorporationIDBlueprintsGetLocationFlagSpecializedMineralHold              CorporationsCorporationIDBlueprintsGetLocationFlag = "SpecializedMineralHold"
	CorporationsCorporationIDBlueprintsGetLocationFlagSpecializedOreHold                  CorporationsCorporationIDBlueprintsGetLocationFlag = "SpecializedOreHold"
	CorporationsCorporationIDBlueprintsGetLocationFlagSpecializedPlanetaryCommoditiesHold CorporationsCorporationIDBlueprintsGetLocationFlag = "SpecializedPlanetaryCommoditiesHold"
	CorporationsCorporationIDBlueprintsGetLocationFlagSpecializedSalvageHold              CorporationsCorporationIDBlueprintsGetLocationFlag = "SpecializedSalvageHold"
	CorporationsCorporationIDBlueprintsGetLocationFlagSpecializedShipHold                 CorporationsCorporationIDBlueprintsGetLocationFlag = "SpecializedShipHold"
	CorporationsCorporationIDBlueprintsGetLocationFlagSpecializedSmallShipHold            CorporationsCorporationIDBlueprintsGetLocationFlag = "SpecializedSmallShipHold"
	CorporationsCorporationIDBlueprintsGetLocationFlagStructureActive                     CorporationsCorporationIDBlueprintsGetLocationFlag = "StructureActive"
	CorporationsCorporationIDBlueprintsGetLocationFlagStructureFuel                       CorporationsCorporationIDBlueprintsGetLocationFlag = "StructureFuel"
	CorporationsCorporationIDBlueprintsGetLocationFlagStructureInactive                   CorporationsCorporationIDBlueprintsGetLocationFlag = "StructureInactive"
	CorporationsCorporationIDBlueprintsGetLocationFlagStructureOffline                    CorporationsCorporationIDBlueprintsGetLocationFlag = "StructureOffline"
	CorporationsCorporationIDBlueprintsGetLocationFlagSubSystemBay                        CorporationsCorporationIDBlueprintsGetLocationFlag = "SubSystemBay"
	CorporationsCorporationIDBlueprintsGetLocationFlagSubSystemSlot0                      CorporationsCorporationIDBlueprintsGetLocationFlag = "SubSystemSlot0"
	CorporationsCorporationIDBlueprintsGetLocationFlagSubSystemSlot1                      CorporationsCorporationIDBlueprintsGetLocationFlag = "SubSystemSlot1"
	CorporationsCorporationIDBlueprintsGetLocationFlagSubSystemSlot2                      CorporationsCorporationIDBlueprintsGetLocationFlag = "SubSystemSlot2"
	CorporationsCorporationIDBlueprintsGetLocationFlagSubSystemSlot3                      CorporationsCorporationIDBlueprintsGetLocationFlag = "SubSystemSlot3"
	CorporationsCorporationIDBlueprintsGetLocationFlagSubSystemSlot4                      CorporationsCorporationIDBlueprintsGetLocationFlag = "SubSystemSlot4"
	CorporationsCorporationIDBlueprintsGetLocationFlagSubSystemSlot5                      CorporationsCorporationIDBlueprintsGetLocationFlag = "SubSystemSlot5"
	CorporationsCorporationIDBlueprintsGetLocationFlagSubSystemSlot6                      CorporationsCorporationIDBlueprintsGetLocationFlag = "SubSystemSlot6"
	CorporationsCorporationIDBlueprintsGetLocationFlagSubSystemSlot7                      CorporationsCorporationIDBlueprintsGetLocationFlag = "SubSystemSlot7"
	CorporationsCorporationIDBlueprintsGetLocationFlagUnlocked                            CorporationsCorporationIDBlueprintsGetLocationFlag = "Unlocked"
	CorporationsCorporationIDBlueprintsGetLocationFlagWallet                              CorporationsCorporationIDBlueprintsGetLocationFlag = "Wallet"
	CorporationsCorporationIDBlueprintsGetLocationFlagWardrobe                            CorporationsCorporationIDBlueprintsGetLocationFlag = "Wardrobe"
)

// Defines values for CorporationsCorporationIDContactsGetContactType.
const (
	CorporationsCorporationIDContactsGetContactTypeAlliance    CorporationsCorporationIDContactsGetContactType = "alliance"
	CorporationsCorporationIDContactsGetContactTypeCharacter   CorporationsCorporationIDContactsGetContactType = "character"
	CorporationsCorporationIDContactsGetContactTypeCorporation CorporationsCorporationIDContactsGetContactType = "corporation"
	CorporationsCorporationIDContactsGetContactTypeFaction     CorporationsCorporationIDContactsGetContactType = "faction"
)

// Defines values for CorporationsCorporationIDContainersLogsGetAction.
const (
	Add           CorporationsCorporationIDContainersLogsGetAction = "add"
	Assemble      CorporationsCorporationIDContainersLogsGetAction = "assemble"
	Configure     CorporationsCorporationIDContainersLogsGetAction = "configure"
	EnterPassword CorporationsCorporationIDContainersLogsGetAction = "enter_password"
	Lock          CorporationsCorporationIDContainersLogsGetAction = "lock"
	Move          CorporationsCorporationIDContainersLogsGetAction = "move"
	Repackage     CorporationsCorporationIDContainersLogsGetAction = "repackage"
	SetName       CorporationsCorporationIDContainersLogsGetAction = "set_name"
	SetPassword   CorporationsCorporationIDContainersLogsGetAction = "set_password"
	Unlock        CorporationsCorporationIDContainersLogsGetAction = "unlock"
)

// Defines values for CorporationsCorporationIDContainersLogsGetLocationFlag.
const (
	CorporationsCorporationIDContainersLogsGetLocationFlagAssetSafety                         CorporationsCorporationIDContainersLogsGetLocationFlag = "AssetSafety"
	CorporationsCorporationIDContainersLogsGetLocationFlagAutoFit                             CorporationsCorporationIDContainersLogsGetLocationFlag = "AutoFit"
	CorporationsCorporationIDContainersLogsGetLocationFlagBonus                               CorporationsCorporationIDContainersLogsGetLocationFlag = "Bonus"
	CorporationsCorporationIDContainersLogsGetLocationFlagBooster                             CorporationsCorporationIDContainersLogsGetLocationFlag = "Booster"
	CorporationsCorporationIDContainersLogsGetLocationFlagBoosterBay                          CorporationsCorporationIDContainersLogsGetLocationFlag = "BoosterBay"
	CorporationsCorporationIDContainersLogsGetLocationFlagCapsule                             CorporationsCorporationIDContainersLogsGetLocationFlag = "Capsule"
	CorporationsCorporationIDContainersLogsGetLocationFlagCapsuleerDeliveries                 CorporationsCorporationIDContainersLogsGetLocationFlag = "CapsuleerDeliveries"
	CorporationsCorporationIDContainersLogsGetLocationFlagCargo                               CorporationsCorporationIDContainersLogsGetLocationFlag = "Cargo"
	CorporationsCorporationIDContainersLogsGetLocationFlagCorpDeliveries                      CorporationsCorporationIDContainersLogsGetLocationFlag = "CorpDeliveries"
	CorporationsCorporationIDContainersLogsGetLocationFlagCorpSAG1                            CorporationsCorporationIDContainersLogsGetLocationFlag = "CorpSAG1"
	CorporationsCorporationIDContainersLogsGetLocationFlagCorpSAG2                            CorporationsCorporationIDContainersLogsGetLocationFlag = "CorpSAG2"
	CorporationsCorporationIDContainersLogsGetLocationFlagCorpSAG3                            CorporationsCorporationIDContainersLogsGetLocationFlag = "CorpSAG3"
	CorporationsCorporationIDContainersLogsGetLocationFlagCorpSAG4                            CorporationsCorporationIDContainersLogsGetLocationFlag = "CorpSAG4"
	CorporationsCorporationIDContainersLogsGetLocationFlagCorpSAG5                            CorporationsCorporationIDContainersLogsGetLocationFlag = "CorpSAG5"
	CorporationsCorporationIDContainersLogsGetLocationFlagCorpSAG6                            CorporationsCorporationIDContainersLogsGetLocationFlag = "CorpSAG6"
	CorporationsCorporationIDContainersLogsGetLocationFlagCorpSAG7                            CorporationsCorporationIDContainersLogsGetLocationFlag = "CorpSAG7"
	CorporationsCorporationIDContainersLogsGetLocationFlagCorporationGoalDeliveries           CorporationsCorporationIDContainersLogsGetLocationFlag = "CorporationGoalDeliveries"
	CorporationsCorporationIDContainersLogsGetLocationFlagCrateLoot                           CorporationsCorporationIDContainersLogsGetLocationFlag = "CrateLoot"
	CorporationsCorporationIDContainersLogsGetLocationFlagDeliveries                          CorporationsCorporationIDContainersLogsGetLocationFlag = "Deliveries"
	CorporationsCorporationIDContainersLogsGetLocationFlagDroneBay                            CorporationsCorporationIDContainersLogsGetLocationFlag = "DroneBay"
	CorporationsCorporationIDContainersLogsGetLocationFlagDustBattle                          CorporationsCorporationIDContainersLogsGetLocationFlag = "DustBattle"
	CorporationsCorporationIDContainersLogsGetLocationFlagDustDatabank                        CorporationsCorporationIDContainersLogsGetLocationFlag = "DustDatabank"
	CorporationsCorporationIDContainersLogsGetLocationFlagFighterBay                          CorporationsCorporationIDContainersLogsGetLocationFlag = "FighterBay"
	CorporationsCorporationIDContainersLogsGetLocationFlagFighterTube0                        CorporationsCorporationIDContainersLogsGetLocationFlag = "FighterTube0"
	CorporationsCorporationIDContainersLogsGetLocationFlagFighterTube1                        CorporationsCorporationIDContainersLogsGetLocationFlag = "FighterTube1"
	CorporationsCorporationIDContainersLogsGetLocationFlagFighterTube2                        CorporationsCorporationIDContainersLogsGetLocationFlag = "FighterTube2"
	CorporationsCorporationIDContainersLogsGetLocationFlagFighterTube3                        CorporationsCorporationIDContainersLogsGetLocationFlag = "FighterTube3"
	CorporationsCorporationIDContainersLogsGetLocationFlagFighterTube4                        CorporationsCorporationIDContainersLogsGetLocationFlag = "FighterTube4"
	CorporationsCorporationIDContainersLogsGetLocationFlagFleetHangar                         CorporationsCorporationIDContainersLogsGetLocationFlag = "FleetHangar"
	CorporationsCorporationIDContainersLogsGetLocationFlagFrigateEscapeBay                    CorporationsCorporationIDContainersLogsGetLocationFlag = "FrigateEscapeBay"
	CorporationsCorporationIDContainersLogsGetLocationFlagHangar                              CorporationsCorporationIDContainersLogsGetLocationFlag = "Hangar"
	CorporationsCorporationIDContainersLogsGetLocationFlagHangarAll                           CorporationsCorporationIDContainersLogsGetLocationFlag = "HangarAll"
	CorporationsCorporationIDContainersLogsGetLocationFlagHiSlot0                             CorporationsCorporationIDContainersLogsGetLocationFlag = "HiSlot0"
	CorporationsCorporationIDContainersLogsGetLocationFlagHiSlot1                             CorporationsCorporationIDContainersLogsGetLocationFlag = "HiSlot1"
	CorporationsCorporationIDContainersLogsGetLocationFlagHiSlot2                             CorporationsCorporationIDContainersLogsGetLocationFlag = "HiSlot2"
	CorporationsCorporationIDContainersLogsGetLocationFlagHiSlot3                             CorporationsCorporationIDContainersLogsGetLocationFlag = "HiSlot3"
	CorporationsCorporationIDContainersLogsGetLocationFlagHiSlot4                             CorporationsCorporationIDContainersLogsGetLocationFlag = "HiSlot4"
	CorporationsCorporationIDContainersLogsGetLocationFlagHiSlot5                             CorporationsCorporationIDContainersLogsGetLocationFlag = "HiSlot5"
	CorporationsCorporationIDContainersLogsGetLocationFlagHiSlot6                             CorporationsCorporationIDContainersLogsGetLocationFlag = "HiSlot6"
	CorporationsCorporationIDContainersLogsGetLocationFlagHiSlot7                             CorporationsCorporationIDContainersLogsGetLocationFlag = "HiSlot7"
	CorporationsCorporationIDContainersLogsGetLocationFlagHiddenModifiers                     CorporationsCorporationIDContainersLogsGetLocationFlag = "HiddenModifiers"
	CorporationsCorporationIDContainersLogsGetLocationFlagImplant                             CorporationsCorporationIDContainersLogsGetLocationFlag = "Implant"
	CorporationsCorporationIDContainersLogsGetLocationFlagImpounded                           CorporationsCorporationIDContainersLogsGetLocationFlag = "Impounded"
	CorporationsCorporationIDContainersLogsGetLocationFlagInfrastructureHangar                CorporationsCorporationIDContainersLogsGetLocationFlag = "InfrastructureHangar"
	CorporationsCorporationIDContainersLogsGetLocationFlagJunkyardReprocessed                 CorporationsCorporationIDContainersLogsGetLocationFlag = "JunkyardReprocessed"
	CorporationsCorporationIDContainersLogsGetLocationFlagJunkyardTrashed                     CorporationsCorporationIDContainersLogsGetLocationFlag = "JunkyardTrashed"
	CorporationsCorporationIDContainersLogsGetLocationFlagLoSlot0                             CorporationsCorporationIDContainersLogsGetLocationFlag = "LoSlot0"
	CorporationsCorporationIDContainersLogsGetLocationFlagLoSlot1                             CorporationsCorporationIDContainersLogsGetLocationFlag = "LoSlot1"
	CorporationsCorporationIDContainersLogsGetLocationFlagLoSlot2                             CorporationsCorporationIDContainersLogsGetLocationFlag = "LoSlot2"
	CorporationsCorporationIDContainersLogsGetLocationFlagLoSlot3                             CorporationsCorporationIDContainersLogsGetLocationFlag = "LoSlot3"
	CorporationsCorporationIDContainersLogsGetLocationFlagLoSlot4                             CorporationsCorporationIDContainersLogsGetLocationFlag = "LoSlot4"
	CorporationsCorporationIDContainersLogsGetLocationFlagLoSlot5                             CorporationsCorporationIDContainersLogsGetLocationFlag = "LoSlot5"
	CorporationsCorporationIDContainersLogsGetLocationFlagLoSlot6                             CorporationsCorporationIDContainersLogsGetLocationFlag = "LoSlot6"
	CorporationsCorporationIDContainersLogsGetLocationFlagLoSlot7                             CorporationsCorporationIDContainersLogsGetLocationFlag = "LoSlot7"
	CorporationsCorporationIDContainersLogsGetLocationFlagLocked                              CorporationsCorporationIDContainersLogsGetLocationFlag = "Locked"
	CorporationsCorporationIDContainersLogsGetLocationFlagMedSlot0                            CorporationsCorporationIDContainersLogsGetLocationFlag = "MedSlot0"
	CorporationsCorporationIDContainersLogsGetLocationFlagMedSlot1                            CorporationsCorporationIDContainersLogsGetLocationFlag = "MedSlot1"
	CorporationsCorporationIDContainersLogsGetLocationFlagMedSlot2                            CorporationsCorporationIDContainersLogsGetLocationFlag = "MedSlot2"
	CorporationsCorporationIDContainersLogsGetLocationFlagMedSlot3                            CorporationsCorporationIDContainersLogsGetLocationFlag = "MedSlot3"
	CorporationsCorporationIDContainersLogsGetLocationFlagMedSlot4                            CorporationsCorporationIDContainersLogsGetLocationFlag = "MedSlot4"
	CorporationsCorporationIDContainersLogsGetLocationFlagMedSlot5                            CorporationsCorporationIDContainersLogsGetLocationFlag = "MedSlot5"
	CorporationsCorporationIDContainersLogsGetLocationFlagMedSlot6                            CorporationsCorporationIDContainersLogsGetLocationFlag = "MedSlot6"
	CorporationsCorporationIDContainersLogsGetLocationFlagMedSlot7                            CorporationsCorporationIDContainersLogsGetLocationFlag = "MedSlot7"
	CorporationsCorporationIDContainersLogsGetLocationFlagMobileDepotHold                     CorporationsCorporationIDContainersLogsGetLocationFlag = "MobileDepotHold"
	CorporationsCorporationIDContainersLogsGetLocationFlagMoonMaterialBay                     CorporationsCorporationIDContainersLogsGetLocationFlag = "MoonMaterialBay"
	CorporationsCorporationIDContainersLogsGetLocationFlagOfficeFolder                        CorporationsCorporationIDContainersLogsGetLocationFlag = "OfficeFolder"
	CorporationsCorporationIDContainersLogsGetLocationFlagPilot                               CorporationsCorporationIDContainersLogsGetLocationFlag = "Pilot"
	CorporationsCorporationIDContainersLogsGetLocationFlagPlanetSurface                       CorporationsCorporationIDContainersLogsGetLocationFlag = "PlanetSurface"
	CorporationsCorporationIDContainersLogsGetLocationFlagQuafeBay                            CorporationsCorporationIDContainersLogsGetLocationFlag = "QuafeBay"
	CorporationsCorporationIDContainersLogsGetLocationFlagQuantumCoreRoom                     CorporationsCorporationIDContainersLogsGetLocationFlag = "QuantumCoreRoom"
	CorporationsCorporationIDContainersLogsGetLocationFlagReward                              CorporationsCorporationIDContainersLogsGetLocationFlag = "Reward"
	CorporationsCorporationIDContainersLogsGetLocationFlagRigSlot0                            CorporationsCorporationIDContainersLogsGetLocationFlag = "RigSlot0"
	CorporationsCorporationIDContainersLogsGetLocationFlagRigSlot1                            CorporationsCorporationIDContainersLogsGetLocationFlag = "RigSlot1"
	CorporationsCorporationIDContainersLogsGetLocationFlagRigSlot2                            CorporationsCorporationIDContainersLogsGetLocationFlag = "RigSlot2"
	CorporationsCorporationIDContainersLogsGetLocationFlagRigSlot3                            CorporationsCorporationIDContainersLogsGetLocationFlag = "RigSlot3"
	CorporationsCorporationIDContainersLogsGetLocationFlagRigSlot4                            CorporationsCorporationIDContainersLogsGetLocationFlag = "RigSlot4"
	CorporationsCorporationIDContainersLogsGetLocationFlagRigSlot5                            CorporationsCorporationIDContainersLogsGetLocationFlag = "RigSlot5"
	CorporationsCorporationIDContainersLogsGetLocationFlagRigSlot6                            CorporationsCorporationIDContainersLogsGetLocationFlag = "RigSlot6"
	CorporationsCorporationIDContainersLogsGetLocationFlagRigSlot7                            CorporationsCorporationIDContainersLogsGetLocationFlag = "RigSlot7"
	CorporationsCorporationIDContainersLogsGetLocationFlagSecondaryStorage                    CorporationsCorporationIDContainersLogsGetLocationFlag = "SecondaryStorage"
	CorporationsCorporationIDContainersLogsGetLocationFlagServiceSlot0                        CorporationsCorporationIDContainersLogsGetLocationFlag = "ServiceSlot0"
	CorporationsCorporationIDContainersLogsGetLocationFlagServiceSlot1                        CorporationsCorporationIDContainersLogsGetLocationFlag = "ServiceSlot1"
	CorporationsCorporationIDContainersLogsGetLocationFlagServiceSlot2                        CorporationsCorporationIDContainersLogsGetLocationFlag = "ServiceSlot2"
	CorporationsCorporationIDContainersLogsGetLocationFlagServiceSlot3                        CorporationsCorporationIDContainersLogsGetLocationFlag = "ServiceSlot3"
	CorporationsCorporationIDContainersLogsGetLocationFlagServiceSlot4                        CorporationsCorporationIDContainersLogsGetLocationFlag = "ServiceSlot4"
	CorporationsCorporationIDContainersLogsGetLocationFlagServiceSlot5                        CorporationsCorporationIDContainersLogsGetLocationFlag = "ServiceSlot5"
	CorporationsCorporationIDContainersLogsGetLocationFlagServiceSlot6                        CorporationsCorporationIDContainersLogsGetLocationFlag = "ServiceSlot6"
	CorporationsCorporationIDContainersLogsGetLocationFlagServiceSlot7                        CorporationsCorporationIDContainersLogsGetLocationFlag = "ServiceSlot7"
	CorporationsCorporationIDContainersLogsGetLocationFlagShipHangar                          CorporationsCorporationIDContainersLogsGetLocationFlag = "ShipHangar"
	CorporationsCorporationIDContainersLogsGetLocationFlagShipOffline                         CorporationsCorporationIDContainersLogsGetLocationFlag = "ShipOffline"
	CorporationsCorporationIDContainersLogsGetLocationFlagSkill                               CorporationsCorporationIDContainersLogsGetLocationFlag = "Skill"
	CorporationsCorporationIDContainersLogsGetLocationFlagSkillInTraining                     CorporationsCorporationIDContainersLogsGetLocationFlag = "SkillInTraining"
	CorporationsCorporationIDContainersLogsGetLocationFlagSpecializedAmmoHold                 CorporationsCorporationIDContainersLogsGetLocationFlag = "SpecializedAmmoHold"
	CorporationsCorporationIDContainersLogsGetLocationFlagSpecializedAsteroidHold             CorporationsCorporationIDContainersLogsGetLocationFlag = "SpecializedAsteroidHold"
	CorporationsCorporationIDContainersLogsGetLocationFlagSpecializedCommandCenterHold        CorporationsCorporationIDContainersLogsGetLocationFlag = "SpecializedCommandCenterHold"
	CorporationsCorporationIDContainersLogsGetLocationFlagSpecializedFuelBay                  CorporationsCorporationIDContainersLogsGetLocationFlag = "SpecializedFuelBay"
	CorporationsCorporationIDContainersLogsGetLocationFlagSpecializedGasHold                  CorporationsCorporationIDContainersLogsGetLocationFlag = "SpecializedGasHold"
	CorporationsCorporationIDContainersLogsGetLocationFlagSpecializedIceHold                  CorporationsCorporationIDContainersLogsGetLocationFlag = "SpecializedIceHold"
	CorporationsCorporationIDContainersLogsGetLocationFlagSpecializedIndustrialShipHold       CorporationsCorporationIDContainersLogsGetLocationFlag = "SpecializedIndustrialShipHold"
	CorporationsCorporationIDContainersLogsGetLocationFlagSpecializedLargeShipHold            CorporationsCorporationIDContainersLogsGetLocationFlag = "SpecializedLargeShipHold"
	CorporationsCorporationIDContainersLogsGetLocationFlagSpecializedMaterialBay              CorporationsCorporationIDContainersLogsGetLocationFlag = "SpecializedMaterialBay"
	CorporationsCorporationIDContainersLogsGetLocationFlagSpecializedMediumShipHold           CorporationsCorporationIDContainersLogsGetLocationFlag = "SpecializedMediumShipHold"
	CorporationsCorporationIDContainersLogsGetLocationFlagSpecializedMineralHold              CorporationsCorporationIDContainersLogsGetLocationFlag = "SpecializedMineralHold"
	CorporationsCorporationIDContainersLogsGetLocationFlagSpecializedOreHold                  CorporationsCorporationIDContainersLogsGetLocationFlag = "SpecializedOreHold"
	CorporationsCorporationIDContainersLogsGetLocationFlagSpecializedPlanetaryCommoditiesHold CorporationsCorporationIDContainersLogsGetLocationFlag = "SpecializedPlanetaryCommoditiesHold"
	CorporationsCorporationIDContainersLogsGetLocationFlagSpecializedSalvageHold              CorporationsCorporationIDContainersLogsGetLocationFlag = "SpecializedSalvageHold"
	CorporationsCorporationIDContainersLogsGetLocationFlagSpecializedShipHold                 CorporationsCorporationIDContainersLogsGetLocationFlag = "SpecializedShipHold"
	CorporationsCorporationIDContainersLogsGetLocationFlagSpecializedSmallShipHold            CorporationsCorporationIDContainersLogsGetLocationFlag = "SpecializedSmallShipHold"
	CorporationsCorporationIDContainersLogsGetLocationFlagStructureActive                     CorporationsCorporationIDContainersLogsGetLocationFlag = "StructureActive"
	CorporationsCorporationIDContainersLogsGetLocationFlagStructureFuel                       CorporationsCorporationIDContainersLogsGetLocationFlag = "StructureFuel"
	CorporationsCorporationIDContainersLogsGetLocationFlagStructureInactive                   CorporationsCorporationIDContainersLogsGetLocationFlag = "StructureInactive"
	CorporationsCorporationIDContainersLogsGetLocationFlagStructureOffline                    CorporationsCorporationIDContainersLogsGetLocationFlag = "StructureOffline"
	CorporationsCorporationIDContainersLogsGetLocationFlagSubSystemBay                        CorporationsCorporationIDContainersLogsGetLocationFlag = "SubSystemBay"
	CorporationsCorporationIDContainersLogsGetLocationFlagSubSystemSlot0                      CorporationsCorporationIDContainersLogsGetLocationFlag = "SubSystemSlot0"
	CorporationsCorporationIDContainersLogsGetLocationFlagSubSystemSlot1                      CorporationsCorporationIDContainersLogsGetLocationFlag = "SubSystemSlot1"
	CorporationsCorporationIDContainersLogsGetLocationFlagSubSystemSlot2                      CorporationsCorporationIDContainersLogsGetLocationFlag = "SubSystemSlot2"
	CorporationsCorporationIDContainersLogsGetLocationFlagSubSystemSlot3                      CorporationsCorporationIDContainersLogsGetLocationFlag = "SubSystemSlot3"
	CorporationsCorporationIDContainersLogsGetLocationFlagSubSystemSlot4                      CorporationsCorporationIDContainersLogsGetLocationFlag = "SubSystemSlot4"
	CorporationsCorporationIDContainersLogsGetLocationFlagSubSystemSlot5                      CorporationsCorporationIDContainersLogsGetLocationFlag = "SubSystemSlot5"
	CorporationsCorporationIDContainersLogsGetLocationFlagSubSystemSlot6                      CorporationsCorporationIDContainersLogsGetLocationFlag = "SubSystemSlot6"
	CorporationsCorporationIDContainersLogsGetLocationFlagSubSystemSlot7                      CorporationsCorporationIDContainersLogsGetLocationFlag = "SubSystemSlot7"
	CorporationsCorporationIDContainersLogsGetLocationFlagUnlocked                            CorporationsCorporationIDContainersLogsGetLocationFlag = "Unlocked"
	CorporationsCorporationIDContainersLogsGetLocationFlagWallet                              CorporationsCorporationIDContainersLogsGetLocationFlag = "Wallet"
	CorporationsCorporationIDContainersLogsGetLocationFlagWardrobe                            CorporationsCorporationIDContainersLogsGetLocationFlag = "Wardrobe"
)

// Defines values for CorporationsCorporationIDContainersLogsGetPasswordType.
const (
	Config  CorporationsCorporationIDContainersLogsGetPasswordType = "config"
	General CorporationsCorporationIDContainersLogsGetPasswordType = "general"
)

// Defines values for CorporationsCorporationIDContractsGetAvailability.
const (
	CorporationsCorporationIDContractsGetAvailabilityAlliance    CorporationsCorporationIDContractsGetAvailability = "alliance"
	CorporationsCorporationIDContractsGetAvailabilityCorporation CorporationsCorporationIDContractsGetAvailability = "corporation"
	CorporationsCorporationIDContractsGetAvailabilityPersonal    CorporationsCorporationIDContractsGetAvailability = "personal"
	CorporationsCorporationIDContractsGetAvailabilityPublic      CorporationsCorporationIDContractsGetAvailability = "public"
)

// Defines values for CorporationsCorporationIDContractsGetStatus.
const (
	CorporationsCorporationIDContractsGetStatusCancelled          CorporationsCorporationIDContractsGetStatus = "cancelled"
	CorporationsCorporationIDContractsGetStatusDeleted            CorporationsCorporationIDContractsGetStatus = "deleted"
	CorporationsCorporationIDContractsGetStatusFailed             CorporationsCorporationIDContractsGetStatus = "failed"
	CorporationsCorporationIDContractsGetStatusFinished           CorporationsCorporationIDContractsGetStatus = "finished"
	CorporationsCorporationIDContractsGetStatusFinishedContractor CorporationsCorporationIDContractsGetStatus = "finished_contractor"
	CorporationsCorporationIDContractsGetStatusFinishedIssuer     CorporationsCorporationIDContractsGetStatus = "finished_issuer"
	CorporationsCorporationIDContractsGetStatusInProgress         CorporationsCorporationIDContractsGetStatus = "in_progress"
	CorporationsCorporationIDContractsGetStatusOutstanding        CorporationsCorporationIDContractsGetStatus = "outstanding"
	CorporationsCorporationIDContractsGetStatusRejected           CorporationsCorporationIDContractsGetStatus = "rejected"
	CorporationsCorporationIDContractsGetStatusReversed           CorporationsCorporationIDContractsGetStatus = "reversed"
)

// Defines values for CorporationsCorporationIDContractsGetType.
const (
	CorporationsCorporationIDContractsGetTypeAuction      CorporationsCorporationIDContractsGetType = "auction"
	CorporationsCorporationIDContractsGetTypeCourier      CorporationsCorporationIDContractsGetType = "courier"
	CorporationsCorporationIDContractsGetTypeItemExchange CorporationsCorporationIDContractsGetType = "item_exchange"
	CorporationsCorporationIDContractsGetTypeLoan         CorporationsCorporationIDContractsGetType = "loan"
	CorporationsCorporationIDContractsGetTypeUnknown      CorporationsCorporationIDContractsGetType = "unknown"
)

// Defines values for CorporationsCorporationIDCustomsOfficesGetStandingLevel.
const (
	Bad       CorporationsCorporationIDCustomsOfficesGetStandingLevel = "bad"
	Excellent CorporationsCorporationIDCustomsOfficesGetStandingLevel = "excellent"
	Good      CorporationsCorporationIDCustomsOfficesGetStandingLevel = "good"
	Neutral   CorporationsCorporationIDCustomsOfficesGetStandingLevel = "neutral"
	Terrible  CorporationsCorporationIDCustomsOfficesGetStandingLevel = "terrible"
)

// Defines values for CorporationsCorporationIDIndustryJobsGetStatus.
const (
	CorporationsCorporationIDIndustryJobsGetStatusActive    CorporationsCorporationIDIndustryJobsGetStatus = "active"
	CorporationsCorporationIDIndustryJobsGetStatusCancelled CorporationsCorporationIDIndustryJobsGetStatus = "cancelled"
	CorporationsCorporationIDIndustryJobsGetStatusDelivered CorporationsCorporationIDIndustryJobsGetStatus = "delivered"
	CorporationsCorporationIDIndustryJobsGetStatusPaused    CorporationsCorporationIDIndustryJobsGetStatus = "paused"
	CorporationsCorporationIDIndustryJobsGetStatusReady     CorporationsCorporationIDIndustryJobsGetStatus = "ready"
	CorporationsCorporationIDIndustryJobsGetStatusReverted  CorporationsCorporationIDIndustryJobsGetStatus = "reverted"
)

// Defines values for CorporationsCorporationIDMedalsIssuedGetStatus.
const (
	Private CorporationsCorporationIDMedalsIssuedGetStatus = "private"
	Public  CorporationsCorporationIDMedalsIssuedGetStatus = "public"
)

// Defines values for CorporationsCorporationIDOrdersGetRange.
const (
	CorporationsCorporationIDOrdersGetRangeN1          CorporationsCorporationIDOrdersGetRange = "1"
	CorporationsCorporationIDOrdersGetRangeN10         CorporationsCorporationIDOrdersGetRange = "10"
	CorporationsCorporationIDOrdersGetRangeN2          CorporationsCorporationIDOrdersGetRange = "2"
	CorporationsCorporationIDOrdersGetRangeN20         CorporationsCorporationIDOrdersGetRange = "20"
	CorporationsCorporationIDOrdersGetRangeN3          CorporationsCorporationIDOrdersGetRange = "3"
	CorporationsCorporationIDOrdersGetRangeN30         CorporationsCorporationIDOrdersGetRange = "30"
	CorporationsCorporationIDOrdersGetRangeN4          CorporationsCorporationIDOrdersGetRange = "4"
	CorporationsCorporationIDOrdersGetRangeN40         CorporationsCorporationIDOrdersGetRange = "40"
	CorporationsCorporationIDOrdersGetRangeN5          CorporationsCorporationIDOrdersGetRange = "5"
	CorporationsCorporationIDOrdersGetRangeRegion      CorporationsCorporationIDOrdersGetRange = "region"
	CorporationsCorporationIDOrdersGetRangeSolarsystem CorporationsCorporationIDOrdersGetRange = "solarsystem"
	CorporationsCorporationIDOrdersGetRangeStation     CorporationsCorporationIDOrdersGetRange = "station"
)

// Defines values for CorporationsCorporationIDOrdersHistoryGetRange.
const (
	CorporationsCorporationIDOrdersHistoryGetRangeN1          CorporationsCorporationIDOrdersHistoryGetRange = "1"
	CorporationsCorporationIDOrdersHistoryGetRangeN10         CorporationsCorporationIDOrdersHistoryGetRange = "10"
	CorporationsCorporationIDOrdersHistoryGetRangeN2          CorporationsCorporationIDOrdersHistoryGetRange = "2"
	CorporationsCorporationIDOrdersHistoryGetRangeN20         CorporationsCorporationIDOrdersHistoryGetRange = "20"
	CorporationsCorporationIDOrdersHistoryGetRangeN3          CorporationsCorporationIDOrdersHistoryGetRange = "3"
	CorporationsCorporationIDOrdersHistoryGetRangeN30         CorporationsCorporationIDOrdersHistoryGetRange = "30"
	CorporationsCorporationIDOrdersHistoryGetRangeN4          CorporationsCorporationIDOrdersHistoryGetRange = "4"
	CorporationsCorporationIDOrdersHistoryGetRangeN40         CorporationsCorporationIDOrdersHistoryGetRange = "40"
	CorporationsCorporationIDOrdersHistoryGetRangeN5          CorporationsCorporationIDOrdersHistoryGetRange = "5"
	CorporationsCorporationIDOrdersHistoryGetRangeRegion      CorporationsCorporationIDOrdersHistoryGetRange = "region"
	CorporationsCorporationIDOrdersHistoryGetRangeSolarsystem CorporationsCorporationIDOrdersHistoryGetRange = "solarsystem"
	CorporationsCorporationIDOrdersHistoryGetRangeStation     CorporationsCorporationIDOrdersHistoryGetRange = "station"
)

// Defines values for CorporationsCorporationIDOrdersHistoryGetState.
const (
	CorporationsCorporationIDOrdersHistoryGetStateCancelled CorporationsCorporationIDOrdersHistoryGetState = "cancelled"
	CorporationsCorporationIDOrdersHistoryGetStateExpired   CorporationsCorporationIDOrdersHistoryGetState = "expired"
)

// Defines values for CorporationsCorporationIDRolesGetGrantableRoles.
const (
	CorporationsCorporationIDRolesGetGrantableRolesAccountTake1            CorporationsCorporationIDRolesGetGrantableRoles = "Account_Take_1"
	CorporationsCorporationIDRolesGetGrantableRolesAccountTake2            CorporationsCorporationIDRolesGetGrantableRoles = "Account_Take_2"
	CorporationsCorporationIDRolesGetGrantableRolesAccountTake3            CorporationsCorporationIDRolesGetGrantableRoles = "Account_Take_3"
	CorporationsCorporationIDRolesGetGrantableRolesAccountTake4            CorporationsCorporationIDRolesGetGrantableRoles = "Account_Take_4"
	CorporationsCorporationIDRolesGetGrantableRolesAccountTake5            CorporationsCorporationIDRolesGetGrantableRoles = "Account_Take_5"
	CorporationsCorporationIDRolesGetGrantableRolesAccountTake6            CorporationsCorporationIDRolesGetGrantableRoles = "Account_Take_6"
	CorporationsCorporationIDRolesGetGrantableRolesAccountTake7            CorporationsCorporationIDRolesGetGrantableRoles = "Account_Take_7"
	CorporationsCorporationIDRolesGetGrantableRolesAccountant              CorporationsCorporationIDRolesGetGrantableRoles = "Accountant"
	CorporationsCorporationIDRolesGetGrantableRolesAuditor                 CorporationsCorporationIDRolesGetGrantableRoles = "Auditor"
	CorporationsCorporationIDRolesGetGrantableRolesBrandManager            CorporationsCorporationIDRolesGetGrantableRoles = "Brand_Manager"
	CorporationsCorporationIDRolesGetGrantableRolesCommunicationsOfficer   CorporationsCorporationIDRolesGetGrantableRoles = "Communications_Officer"
	CorporationsCorporationIDRolesGetGrantableRolesConfigEquipment         CorporationsCorporationIDRolesGetGrantableRoles = "Config_Equipment"
	CorporationsCorporationIDRolesGetGrantableRolesConfigStarbaseEquipment CorporationsCorporationIDRolesGetGrantableRoles = "Config_Starbase_Equipment"
	CorporationsCorporationIDRolesGetGrantableRolesContainerTake1          CorporationsCorporationIDRolesGetGrantableRoles = "Container_Take_1"
	CorporationsCorporationIDRolesGetGrantableRolesContainerTake2          CorporationsCorporationIDRolesGetGrantableRoles = "Container_Take_2"
	CorporationsCorporationIDRolesGetGrantableRolesContainerTake3          CorporationsCorporationIDRolesGetGrantableRoles = "Container_Take_3"
	CorporationsCorporationIDRolesGetGrantableRolesContainerTake4          CorporationsCorporationIDRolesGetGrantableRoles = "Container_Take_4"
	CorporationsCorporationIDRolesGetGrantableRolesContainerTake5          CorporationsCorporationIDRolesGetGrantableRoles = "Container_Take_5"
	CorporationsCorporationIDRolesGetGrantableRolesContainerTake6          CorporationsCorporationIDRolesGetGrantableRoles = "Container_Take_6"
	CorporationsCorporationIDRolesGetGrantableRolesContainerTake7          CorporationsCorporationIDRolesGetGrantableRoles = "Container_Take_7"
	CorporationsCorporationIDRolesGetGrantableRolesContractManager         CorporationsCorporationIDRolesGetGrantableRoles = "Contract_Manager"
	CorporationsCorporationIDRolesGetGrantableRolesDeliveriesContainerTake CorporationsCorporationIDRolesGetGrantableRoles = "Deliveries_Container_Take"
	CorporationsCorporationIDRolesGetGrantableRolesDeliveriesQuery         CorporationsCorporationIDRolesGetGrantableRoles = "Deliveries_Query"
	CorporationsCorporationIDRolesGetGrantableRolesDeliveriesTake          CorporationsCorporationIDRolesGetGrantableRoles = "Deliveries_Take"
	CorporationsCorporationIDRolesGetGrantableRolesDiplomat                CorporationsCorporationIDRolesGetGrantableRoles = "Diplomat"
	CorporationsCorporationIDRolesGetGrantableRolesDirector                CorporationsCorporationIDRolesGetGrantableRoles = "Director"
	CorporationsCorporationIDRolesGetGrantableRolesFactoryManager          CorporationsCorporationIDRolesGetGrantableRoles = "Factory_Manager"
	CorporationsCorporationIDRolesGetGrantableRolesFittingManager          CorporationsCorporationIDRolesGetGrantableRoles = "Fitting_Manager"
	CorporationsCorporationIDRolesGetGrantableRolesHangarQuery1            CorporationsCorporationIDRolesGetGrantableRoles = "Hangar_Query_1"
	CorporationsCorporationIDRolesGetGrantableRolesHangarQuery2            CorporationsCorporationIDRolesGetGrantableRoles = "Hangar_Query_2"
	CorporationsCorporationIDRolesGetGrantableRolesHangarQuery3            CorporationsCorporationIDRolesGetGrantableRoles = "Hangar_Query_3"
	CorporationsCorporationIDRolesGetGrantableRolesHangarQuery4            CorporationsCorporationIDRolesGetGrantableRoles = "Hangar_Query_4"
	CorporationsCorporationIDRolesGetGrantableRolesHangarQuery5            CorporationsCorporationIDRolesGetGrantableRoles = "Hangar_Query_5"
	CorporationsCorporationIDRolesGetGrantableRolesHangarQuery6            CorporationsCorporationIDRolesGetGrantableRoles = "Hangar_Query_6"
	CorporationsCorporationIDRolesGetGrantableRolesHangarQuery7            CorporationsCorporationIDRolesGetGrantableRoles = "Hangar_Query_7"
	CorporationsCorporationIDRolesGetGrantableRolesHangarTake1             CorporationsCorporationIDRolesGetGrantableRoles = "Hangar_Take_1"
	CorporationsCorporationIDRolesGetGrantableRolesHangarTake2             CorporationsCorporationIDRolesGetGrantableRoles = "Hangar_Take_2"
	CorporationsCorporationIDRolesGetGrantableRolesHangarTake3             CorporationsCorporationIDRolesGetGrantableRoles = "Hangar_Take_3"
	CorporationsCorporationIDRolesGetGrantableRolesHangarTake4             CorporationsCorporationIDRolesGetGrantableRoles = "Hangar_Take_4"
	CorporationsCorporationIDRolesGetGrantableRolesHangarTake5             CorporationsCorporationIDRolesGetGrantableRoles = "Hangar_Take_5"
	CorporationsCorporationIDRolesGetGrantableRolesHangarTake6             CorporationsCorporationIDRolesGetGrantableRoles = "Hangar_Take_6"
	CorporationsCorporationIDRolesGetGrantableRolesHangarTake7             CorporationsCorporationIDRolesGetGrantableRoles = "Hangar_Take_7"
	CorporationsCorporationIDRolesGetGrantableRolesJuniorAccountant        CorporationsCorporationIDRolesGetGrantableRoles = "Junior_Accountant"
	CorporationsCorporationIDRolesGetGrantableRolesPersonnelManager        CorporationsCorporationIDRolesGetGrantableRoles = "Personnel_Manager"
	CorporationsCorporationIDRolesGetGrantableRolesProjectManager          CorporationsCorporationIDRolesGetGrantableRoles = "Project_Manager"
	CorporationsCorporationIDRolesGetGrantableRolesRentFactoryFacility     CorporationsCorporationIDRolesGetGrantableRoles = "Rent_Factory_Facility"
	CorporationsCorporationIDRolesGetGrantableRolesRentOffice              CorporationsCorporationIDRolesGetGrantableRoles = "Rent_Office"
	CorporationsCorporationIDRolesGetGrantableRolesRentResearchFacility    CorporationsCorporationIDRolesGetGrantableRoles = "Rent_Research_Facility"
	CorporationsCorporationIDRolesGetGrantableRolesSecurityOfficer         CorporationsCorporationIDRolesGetGrantableRoles = "Security_Officer"
	CorporationsCorporationIDRolesGetGrantableRolesSkillPlanManager        CorporationsCorporationIDRolesGetGrantableRoles = "Skill_Plan_Manager"
	CorporationsCorporationIDRolesGetGrantableRolesStarbaseDefenseOperator CorporationsCorporationIDRolesGetGrantableRoles = "Starbase_Defense_Operator"
	CorporationsCorporationIDRolesGetGrantableRolesStarbaseFuelTechnician  CorporationsCorporationIDRolesGetGrantableRoles = "Starbase_Fuel_Technician"
	CorporationsCorporationIDRolesGetGrantableRolesStationManager          CorporationsCorporationIDRolesGetGrantableRoles = "Station_Manager"
	CorporationsCorporationIDRolesGetGrantableRolesTrader                  CorporationsCorporationIDRolesGetGrantableRoles = "Trader"
)

// Defines values for CorporationsCorporationIDRolesGetGrantableRolesAtBase.
const (
	CorporationsCorporationIDRolesGetGrantableRolesAtBaseAccountTake1            CorporationsCorporationIDRolesGetGrantableRolesAtBase = "Account_Take_1"
	CorporationsCorporationIDRolesGetGrantableRolesAtBaseAccountTake2            CorporationsCorporationIDRolesGetGrantableRolesAtBase = "Account_Take_2"
	CorporationsCorporationIDRolesGetGrantableRolesAtBaseAccountTake3            CorporationsCorporationIDRolesGetGrantableRolesAtBase = "Account_Take_3"
	CorporationsCorporationIDRolesGetGrantableRolesAtBaseAccountTake4            CorporationsCorporationIDRolesGetGrantableRolesAtBase = "Account_Take_4"
	CorporationsCorporationIDRolesGetGrantableRolesAtBaseAccountTake5            CorporationsCorporationIDRolesGetGrantableRolesAtBase = "Account_Take_5"
	CorporationsCorporationIDRolesGetGrantableRolesAtBaseAccountTake6            CorporationsCorporationIDRolesGetGrantableRolesAtBase = "Account_Take_6"
	CorporationsCorporationIDRolesGetGrantableRolesAtBaseAccountTake7            CorporationsCorporationIDRolesGetGrantableRolesAtBase = "Account_Take_7"
	CorporationsCorporationIDRolesGetGrantableRolesAtBaseAccountant              CorporationsCorporationIDRolesGetGrantableRolesAtBase = "Accountant"
	CorporationsCorporationIDRolesGetGrantableRolesAtBaseAuditor                 CorporationsCorporationIDRolesGetGrantableRolesAtBase = "Auditor"
	CorporationsCorporationIDRolesGetGrantableRolesAtBaseBrandManager            CorporationsCorporationIDRolesGetGrantableRolesAtBase = "Brand_Manager"
	CorporationsCorporationIDRolesGetGrantableRolesAtBaseCommunicationsOfficer   CorporationsCorporationIDRolesGetGrantableRolesAtBase = "Communications_Officer"
	CorporationsCorporationIDRolesGetGrantableRolesAtBaseConfigEquipment         CorporationsCorporationIDRolesGetGrantableRolesAtBase = "Config_Equipment"
	CorporationsCorporationIDRolesGetGrantableRolesAtBaseConfigStarbaseEquipment CorporationsCorporationIDRolesGetGrantableRolesAtBase = "Config_Starbase_Equipment"
	CorporationsCorporationIDRolesGetGrantableRolesAtBaseContainerTake1          CorporationsCorporationIDRolesGetGrantableRolesAtBase = "Container_Take_1"
	CorporationsCorporationIDRolesGetGrantableRolesAtBaseContainerTake2          CorporationsCorporationIDRolesGetGrantableRolesAtBase = "Container_Take_2"
	CorporationsCorporationIDRolesGetGrantableRolesAtBaseContainerTake3          CorporationsCorporationIDRolesGetGrantableRolesAtBase = "Container_Take_3"
	CorporationsCorporationIDRolesGetGrantableRolesAtBaseContainerTake4          CorporationsCorporationIDRolesGetGrantableRolesAtBase = "Container_Take_4"
	CorporationsCorporationIDRolesGetGrantableRolesAtBaseContainerTake5          CorporationsCorporationIDRolesGetGrantableRolesAtBase = "Container_Take_5"
	CorporationsCorporationIDRolesGetGrantableRolesAtBaseContainerTake6          CorporationsCorporationIDRolesGetGrantableRolesAtBase = "Container_Take_6"
	CorporationsCorporationIDRolesGetGrantableRolesAtBaseContainerTake7          CorporationsCorporationIDRolesGetGrantableRolesAtBase = "Container_Take_7"
	CorporationsCorporationIDRolesGetGrantableRolesAtBaseContractManager         CorporationsCorporationIDRolesGetGrantableRolesAtBase = "Contract_Manager"
	CorporationsCorporationIDRolesGetGrantableRolesAtBaseDeliveriesContainerTake CorporationsCorporationIDRolesGetGrantableRolesAtBase = "Deliveries_Container_Take"
	CorporationsCorporationIDRolesGetGrantableRolesAtBaseDeliveriesQuery         CorporationsCorporationIDRolesGetGrantableRolesAtBase = "Deliveries_Query"
	CorporationsCorporationIDRolesGetGrantableRolesAtBaseDeliveriesTake          CorporationsCorporationIDRolesGetGrantableRolesAtBase = "Deliveries_Take"
	CorporationsCorporationIDRolesGetGrantableRolesAtBaseDiplomat                CorporationsCorporationIDRolesGetGrantableRolesAtBase = "Diplomat"
	CorporationsCorporationIDRolesGetGrantableRolesAtBaseDirector                CorporationsCorporationIDRolesGetGrantableRolesAtBase = "Director"
	CorporationsCorporationIDRolesGetGrantableRolesAtBaseFactoryManager          CorporationsCorporationIDRolesGetGrantableRolesAtBase = "Factory_Manager"
	CorporationsCorporationIDRolesGetGrantableRolesAtBaseFittingManager          CorporationsCorporationIDRolesGetGrantableRolesAtBase = "Fitting_Manager"
	CorporationsCorporationIDRolesGetGrantableRolesAtBaseHangarQuery1            CorporationsCorporationIDRolesGetGrantableRolesAtBase = "Hangar_Query_1"
	CorporationsCorporationIDRolesGetGrantableRolesAtBaseHangarQuery2            CorporationsCorporationIDRolesGetGrantableRolesAtBase = "Hangar_Query_2"
	CorporationsCorporationIDRolesGetGrantableRolesAtBaseHangarQuery3            CorporationsCorporationIDRolesGetGrantableRolesAtBase = "Hangar_Query_3"
	CorporationsCorporationIDRolesGetGrantableRolesAtBaseHangarQuery4            CorporationsCorporationIDRolesGetGrantableRolesAtBase = "Hangar_Query_4"
	CorporationsCorporationIDRolesGetGrantableRolesAtBaseHangarQuery5            CorporationsCorporationIDRolesGetGrantableRolesAtBase = "Hangar_Query_5"
	CorporationsCorporationIDRolesGetGrantableRolesAtBaseHangarQuery6            CorporationsCorporationIDRolesGetGrantableRolesAtBase = "Hangar_Query_6"
	CorporationsCorporationIDRolesGetGrantableRolesAtBaseHangarQuery7            CorporationsCorporationIDRolesGetGrantableRolesAtBase = "Hangar_Query_7"
	CorporationsCorporationIDRolesGetGrantableRolesAtBaseHangarTake1             CorporationsCorporationIDRolesGetGrantableRolesAtBase = "Hangar_Take_1"
	CorporationsCorporationIDRolesGetGrantableRolesAtBaseHangarTake2             CorporationsCorporationIDRolesGetGrantableRolesAtBase = "Hangar_Take_2"
	CorporationsCorporationIDRolesGetGrantableRolesAtBaseHangarTake3             CorporationsCorporationIDRolesGetGrantableRolesAtBase = "Hangar_Take_3"
	CorporationsCorporationIDRolesGetGrantableRolesAtBaseHangarTake4             CorporationsCorporationIDRolesGetGrantableRolesAtBase = "Hangar_Take_4"
	CorporationsCorporationIDRolesGetGrantableRolesAtBaseHangarTake5             CorporationsCorporationIDRolesGetGrantableRolesAtBase = "Hangar_Take_5"
	CorporationsCorporationIDRolesGetGrantableRolesAtBaseHangarTake6             CorporationsCorporationIDRolesGetGrantableRolesAtBase = "Hangar_Take_6"
	CorporationsCorporationIDRolesGetGrantableRolesAtBaseHangarTake7             CorporationsCorporationIDRolesGetGrantableRolesAtBase = "Hangar_Take_7"
	CorporationsCorporationIDRolesGetGrantableRolesAtBaseJuniorAccountant        CorporationsCorporationIDRolesGetGrantableRolesAtBase = "Junior_Accountant"
	CorporationsCorporationIDRolesGetGrantableRolesAtBasePersonnelManager        CorporationsCorporationIDRolesGetGrantableRolesAtBase = "Personnel_Manager"
	CorporationsCorporationIDRolesGetGrantableRolesAtBaseProjectManager          CorporationsCorporationIDRolesGetGrantableRolesAtBase = "Project_Manager"
	CorporationsCorporationIDRolesGetGrantableRolesAtBaseRentFactoryFacility     CorporationsCorporationIDRolesGetGrantableRolesAtBase = "Rent_Factory_Facility"
	CorporationsCorporationIDRolesGetGrantableRolesAtBaseRentOffice              CorporationsCorporationIDRolesGetGrantableRolesAtBase = "Rent_Office"
	CorporationsCorporationIDRolesGetGrantableRolesAtBaseRentResearchFacility    CorporationsCorporationIDRolesGetGrantableRolesAtBase = "Rent_Research_Facility"
	CorporationsCorporationIDRolesGetGrantableRolesAtBaseSecurityOfficer         CorporationsCorporationIDRolesGetGrantableRolesAtBase = "Security_Officer"
	CorporationsCorporationIDRolesGetGrantableRolesAtBaseSkillPlanManager        CorporationsCorporationIDRolesGetGrantableRolesAtBase = "Skill_Plan_Manager"
	CorporationsCorporationIDRolesGetGrantableRolesAtBaseStarbaseDefenseOperator CorporationsCorporationIDRolesGetGrantableRolesAtBase = "Starbase_Defense_Operator"
	CorporationsCorporationIDRolesGetGrantableRolesAtBaseStarbaseFuelTechnician  CorporationsCorporationIDRolesGetGrantableRolesAtBase = "Starbase_Fuel_Technician"
	CorporationsCorporationIDRolesGetGrantableRolesAtBaseStationManager          CorporationsCorporationIDRolesGetGrantableRolesAtBase = "Station_Manager"
	CorporationsCorporationIDRolesGetGrantableRolesAtBaseTrader                  CorporationsCorporationIDRolesGetGrantableRolesAtBase = "Trader"
)

// Defines values for CorporationsCorporationIDRolesGetGrantableRolesAtHq.
const (
	CorporationsCorporationIDRolesGetGrantableRolesAtHqAccountTake1            CorporationsCorporationIDRolesGetGrantableRolesAtHq = "Account_Take_1"
	CorporationsCorporationIDRolesGetGrantableRolesAtHqAccountTake2            CorporationsCorporationIDRolesGetGrantableRolesAtHq = "Account_Take_2"
	CorporationsCorporationIDRolesGetGrantableRolesAtHqAccountTake3            CorporationsCorporationIDRolesGetGrantableRolesAtHq = "Account_Take_3"
	CorporationsCorporationIDRolesGetGrantableRolesAtHqAccountTake4            CorporationsCorporationIDRolesGetGrantableRolesAtHq = "Account_Take_4"
	CorporationsCorporationIDRolesGetGrantableRolesAtHqAccountTake5            CorporationsCorporationIDRolesGetGrantableRolesAtHq = "Account_Take_5"
	CorporationsCorporationIDRolesGetGrantableRolesAtHqAccountTake6            CorporationsCorporationIDRolesGetGrantableRolesAtHq = "Account_Take_6"
	CorporationsCorporationIDRolesGetGrantableRolesAtHqAccountTake7            CorporationsCorporationIDRolesGetGrantableRolesAtHq = "Account_Take_7"
	CorporationsCorporationIDRolesGetGrantableRolesAtHqAccountant              CorporationsCorporationIDRolesGetGrantableRolesAtHq = "Accountant"
	CorporationsCorporationIDRolesGetGrantableRolesAtHqAuditor                 CorporationsCorporationIDRolesGetGrantableRolesAtHq = "Auditor"
	CorporationsCorporationIDRolesGetGrantableRolesAtHqBrandManager            CorporationsCorporationIDRolesGetGrantableRolesAtHq = "Brand_Manager"
	CorporationsCorporationIDRolesGetGrantableRolesAtHqCommunicationsOfficer   CorporationsCorporationIDRolesGetGrantableRolesAtHq = "Communications_Officer"
	CorporationsCorporationIDRolesGetGrantableRolesAtHqConfigEquipment         CorporationsCorporationIDRolesGetGrantableRolesAtHq = "Config_Equipment"
	CorporationsCorporationIDRolesGetGrantableRolesAtHqConfigStarbaseEquipment CorporationsCorporationIDRolesGetGrantableRolesAtHq = "Config_Starbase_Equipment"
	CorporationsCorporationIDRolesGetGrantableRolesAtHqContainerTake1          CorporationsCorporationIDRolesGetGrantableRolesAtHq = "Container_Take_1"
	CorporationsCorporationIDRolesGetGrantableRolesAtHqContainerTake2          CorporationsCorporationIDRolesGetGrantableRolesAtHq = "Container_Take_2"
	CorporationsCorporationIDRolesGetGrantableRolesAtHqContainerTake3          CorporationsCorporationIDRolesGetGrantableRolesAtHq = "Container_Take_3"
	CorporationsCorporationIDRolesGetGrantableRolesAtHqContainerTake4          CorporationsCorporationIDRolesGetGrantableRolesAtHq = "Container_Take_4"
	CorporationsCorporationIDRolesGetGrantableRolesAtHqContainerTake5          CorporationsCorporationIDRolesGetGrantableRolesAtHq = "Container_Take_5"
	CorporationsCorporationIDRolesGetGrantableRolesAtHqContainerTake6          CorporationsCorporationIDRolesGetGrantableRolesAtHq = "Container_Take_6"
	CorporationsCorporationIDRolesGetGrantableRolesAtHqContainerTake7          CorporationsCorporationIDRolesGetGrantableRolesAtHq = "Container_Take_7"
	CorporationsCorporationIDRolesGetGrantableRolesAtHqContractManager         CorporationsCorporationIDRolesGetGrantableRolesAtHq = "Contract_Manager"
	CorporationsCorporationIDRolesGetGrantableRolesAtHqDeliveriesContainerTake CorporationsCorporationIDRolesGetGrantableRolesAtHq = "Deliveries_Container_Take"
	CorporationsCorporationIDRolesGetGrantableRolesAtHqDeliveriesQuery         CorporationsCorporationIDRolesGetGrantableRolesAtHq = "Deliveries_Query"
	CorporationsCorporationIDRolesGetGrantableRolesAtHqDeliveriesTake          CorporationsCorporationIDRolesGetGrantableRolesAtHq = "Deliveries_Take"
	CorporationsCorporationIDRolesGetGrantableRolesAtHqDiplomat                CorporationsCorporationIDRolesGetGrantableRolesAtHq = "Diplomat"
	CorporationsCorporationIDRolesGetGrantableRolesAtHqDirector                CorporationsCorporationIDRolesGetGrantableRolesAtHq = "Director"
	CorporationsCorporationIDRolesGetGrantableRolesAtHqFactoryManager          CorporationsCorporationIDRolesGetGrantableRolesAtHq = "Factory_Manager"
	CorporationsCorporationIDRolesGetGrantableRolesAtHqFittingManager          CorporationsCorporationIDRolesGetGrantableRolesAtHq = "Fitting_Manager"
	CorporationsCorporationIDRolesGetGrantableRolesAtHqHangarQuery1            CorporationsCorporationIDRolesGetGrantableRolesAtHq = "Hangar_Query_1"
	CorporationsCorporationIDRolesGetGrantableRolesAtHqHangarQuery2            CorporationsCorporationIDRolesGetGrantableRolesAtHq = "Hangar_Query_2"
	CorporationsCorporationIDRolesGetGrantableRolesAtHqHangarQuery3            CorporationsCorporationIDRolesGetGrantableRolesAtHq = "Hangar_Query_3"
	CorporationsCorporationIDRolesGetGrantableRolesAtHqHangarQuery4            CorporationsCorporationIDRolesGetGrantableRolesAtHq = "Hangar_Query_4"
	CorporationsCorporationIDRolesGetGrantableRolesAtHqHangarQuery5            CorporationsCorporationIDRolesGetGrantableRolesAtHq = "Hangar_Query_5"
	CorporationsCorporationIDRolesGetGrantableRolesAtHqHangarQuery6            CorporationsCorporationIDRolesGetGrantableRolesAtHq = "Hangar_Query_6"
	CorporationsCorporationIDRolesGetGrantableRolesAtHqHangarQuery7            CorporationsCorporationIDRolesGetGrantableRolesAtHq = "Hangar_Query_7"
	CorporationsCorporationIDRolesGetGrantableRolesAtHqHangarTake1             CorporationsCorporationIDRolesGetGrantableRolesAtHq = "Hangar_Take_1"
	CorporationsCorporationIDRolesGetGrantableRolesAtHqHangarTake2             CorporationsCorporationIDRolesGetGrantableRolesAtHq = "Hangar_Take_2"
	CorporationsCorporationIDRolesGetGrantableRolesAtHqHangarTake3             CorporationsCorporationIDRolesGetGrantableRolesAtHq = "Hangar_Take_3"
	CorporationsCorporationIDRolesGetGrantableRolesAtHqHangarTake4             CorporationsCorporationIDRolesGetGrantableRolesAtHq = "Hangar_Take_4"
	CorporationsCorporationIDRolesGetGrantableRolesAtHqHangarTake5             CorporationsCorporationIDRolesGetGrantableRolesAtHq = "Hangar_Take_5"
	CorporationsCorporationIDRolesGetGrantableRolesAtHqHangarTake6             CorporationsCorporationIDRolesGetGrantableRolesAtHq = "Hangar_Take_6"
	CorporationsCorporationIDRolesGetGrantableRolesAtHqHangarTake7             CorporationsCorporationIDRolesGetGrantableRolesAtHq = "Hangar_Take_7"
	CorporationsCorporationIDRolesGetGrantableRolesAtHqJuniorAccountant        CorporationsCorporationIDRolesGetGrantableRolesAtHq = "Junior_Accountant"
	CorporationsCorporationIDRolesGetGrantableRolesAtHqPersonnelManager        CorporationsCorporationIDRolesGetGrantableRolesAtHq = "Personnel_Manager"
	CorporationsCorporationIDRolesGetGrantableRolesAtHqProjectManager          CorporationsCorporationIDRolesGetGrantableRolesAtHq = "Project_Manager"
	CorporationsCorporationIDRolesGetGrantableRolesAtHqRentFactoryFacility     CorporationsCorporationIDRolesGetGrantableRolesAtHq = "Rent_Factory_Facility"
	CorporationsCorporationIDRolesGetGrantableRolesAtHqRentOffice              CorporationsCorporationIDRolesGetGrantableRolesAtHq = "Rent_Office"
	CorporationsCorporationIDRolesGetGrantableRolesAtHqRentResearchFacility    CorporationsCorporationIDRolesGetGrantableRolesAtHq = "Rent_Research_Facility"
	CorporationsCorporationIDRolesGetGrantableRolesAtHqSecurityOfficer         CorporationsCorporationIDRolesGetGrantableRolesAtHq = "Security_Officer"
	CorporationsCorporationIDRolesGetGrantableRolesAtHqSkillPlanManager        CorporationsCorporationIDRolesGetGrantableRolesAtHq = "Skill_Plan_Manager"
	CorporationsCorporationIDRolesGetGrantableRolesAtHqStarbaseDefenseOperator CorporationsCorporationIDRolesGetGrantableRolesAtHq = "Starbase_Defense_Operator"
	CorporationsCorporationIDRolesGetGrantableRolesAtHqStarbaseFuelTechnician  CorporationsCorporationIDRolesGetGrantableRolesAtHq = "Starbase_Fuel_Technician"
	CorporationsCorporationIDRolesGetGrantableRolesAtHqStationManager          CorporationsCorporationIDRolesGetGrantableRolesAtHq = "Station_Manager"
	CorporationsCorporationIDRolesGetGrantableRolesAtHqTrader                  CorporationsCorporationIDRolesGetGrantableRolesAtHq = "Trader"
)

// Defines values for CorporationsCorporationIDRolesGetGrantableRolesAtOther.
const (
	CorporationsCorporationIDRolesGetGrantableRolesAtOtherAccountTake1            CorporationsCorporationIDRolesGetGrantableRolesAtOther = "Account_Take_1"
	CorporationsCorporationIDRolesGetGrantableRolesAtOtherAccountTake2            CorporationsCorporationIDRolesGetGrantableRolesAtOther = "Account_Take_2"
	CorporationsCorporationIDRolesGetGrantableRolesAtOtherAccountTake3            CorporationsCorporationIDRolesGetGrantableRolesAtOther = "Account_Take_3"
	CorporationsCorporationIDRolesGetGrantableRolesAtOtherAccountTake4            CorporationsCorporationIDRolesGetGrantableRolesAtOther = "Account_Take_4"
	CorporationsCorporationIDRolesGetGrantableRolesAtOtherAccountTake5            CorporationsCorporationIDRolesGetGrantableRolesAtOther = "Account_Take_5"
	CorporationsCorporationIDRolesGetGrantableRolesAtOtherAccountTake6            CorporationsCorporationIDRolesGetGrantableRolesAtOther = "Account_Take_6"
	CorporationsCorporationIDRolesGetGrantableRolesAtOtherAccountTake7            CorporationsCorporationIDRolesGetGrantableRolesAtOther = "Account_Take_7"
	CorporationsCorporationIDRolesGetGrantableRolesAtOtherAccountant              CorporationsCorporationIDRolesGetGrantableRolesAtOther = "Accountant"
	CorporationsCorporationIDRolesGetGrantableRolesAtOtherAuditor                 CorporationsCorporationIDRolesGetGrantableRolesAtOther = "Auditor"
	CorporationsCorporationIDRolesGetGrantableRolesAtOtherBrandManager            CorporationsCorporationIDRolesGetGrantableRolesAtOther = "Brand_Manager"
	CorporationsCorporationIDRolesGetGrantableRolesAtOtherCommunicationsOfficer   CorporationsCorporationIDRolesGetGrantableRolesAtOther = "Communications_Officer"
	CorporationsCorporationIDRolesGetGrantableRolesAtOtherConfigEquipment         CorporationsCorporationIDRolesGetGrantableRolesAtOther = "Config_Equipment"
	CorporationsCorporationIDRolesGetGrantableRolesAtOtherConfigStarbaseEquipment CorporationsCorporationIDRolesGetGrantableRolesAtOther = "Config_Starbase_Equipment"
	CorporationsCorporationIDRolesGetGrantableRolesAtOtherContainerTake1          CorporationsCorporationIDRolesGetGrantableRolesAtOther = "Container_Take_1"
	CorporationsCorporationIDRolesGetGrantableRolesAtOtherContainerTake2          CorporationsCorporationIDRolesGetGrantableRolesAtOther = "Container_Take_2"
	CorporationsCorporationIDRolesGetGrantableRolesAtOtherContainerTake3          CorporationsCorporationIDRolesGetGrantableRolesAtOther = "Container_Take_3"
	CorporationsCorporationIDRolesGetGrantableRolesAtOtherContainerTake4          CorporationsCorporationIDRolesGetGrantableRolesAtOther = "Container_Take_4"
	CorporationsCorporationIDRolesGetGrantableRolesAtOtherContainerTake5          CorporationsCorporationIDRolesGetGrantableRolesAtOther = "Container_Take_5"
	CorporationsCorporationIDRolesGetGrantableRolesAtOtherContainerTake6          CorporationsCorporationIDRolesGetGrantableRolesAtOther = "Container_Take_6"
	CorporationsCorporationIDRolesGetGrantableRolesAtOtherContainerTake7          CorporationsCorporationIDRolesGetGrantableRolesAtOther = "Container_Take_7"
	CorporationsCorporationIDRolesGetGrantableRolesAtOtherContractManager         CorporationsCorporationIDRolesGetGrantableRolesAtOther = "Contract_Manager"
	CorporationsCorporationIDRolesGetGrantableRolesAtOtherDeliveriesContainerTake CorporationsCorporationIDRolesGetGrantableRolesAtOther = "Deliveries_Container_Take"
	CorporationsCorporationIDRolesGetGrantableRolesAtOtherDeliveriesQuery         CorporationsCorporationIDRolesGetGrantableRolesAtOther = "Deliveries_Query"
	CorporationsCorporationIDRolesGetGrantableRolesAtOtherDeliveriesTake          CorporationsCorporationIDRolesGetGrantableRolesAtOther = "Deliveries_Take"
	CorporationsCorporationIDRolesGetGrantableRolesAtOtherDiplomat                CorporationsCorporationIDRolesGetGrantableRolesAtOther = "Diplomat"
	CorporationsCorporationIDRolesGetGrantableRolesAtOtherDirector                CorporationsCorporationIDRolesGetGrantableRolesAtOther = "Director"
	CorporationsCorporationIDRolesGetGrantableRolesAtOtherFactoryManager          CorporationsCorporationIDRolesGetGrantableRolesAtOther = "Factory_Manager"
	CorporationsCorporationIDRolesGetGrantableRolesAtOtherFittingManager          CorporationsCorporationIDRolesGetGrantableRolesAtOther = "Fitting_Manager"
	CorporationsCorporationIDRolesGetGrantableRolesAtOtherHangarQuery1            CorporationsCorporationIDRolesGetGrantableRolesAtOther = "Hangar_Query_1"
	CorporationsCorporationIDRolesGetGrantableRolesAtOtherHangarQuery2            CorporationsCorporationIDRolesGetGrantableRolesAtOther = "Hangar_Query_2"
	CorporationsCorporationIDRolesGetGrantableRolesAtOtherHangarQuery3            CorporationsCorporationIDRolesGetGrantableRolesAtOther = "Hangar_Query_3"
	CorporationsCorporationIDRolesGetGrantableRolesAtOtherHangarQuery4            CorporationsCorporationIDRolesGetGrantableRolesAtOther = "Hangar_Query_4"
	CorporationsCorporationIDRolesGetGrantableRolesAtOtherHangarQuery5            CorporationsCorporationIDRolesGetGrantableRolesAtOther = "Hangar_Query_5"
	CorporationsCorporationIDRolesGetGrantableRolesAtOtherHangarQuery6            CorporationsCorporationIDRolesGetGrantableRolesAtOther = "Hangar_Query_6"
	CorporationsCorporationIDRolesGetGrantableRolesAtOtherHangarQuery7            CorporationsCorporationIDRolesGetGrantableRolesAtOther = "Hangar_Query_7"
	CorporationsCorporationIDRolesGetGrantableRolesAtOtherHangarTake1             CorporationsCorporationIDRolesGetGrantableRolesAtOther = "Hangar_Take_1"
	CorporationsCorporationIDRolesGetGrantableRolesAtOtherHangarTake2             CorporationsCorporationIDRolesGetGrantableRolesAtOther = "Hangar_Take_2"
	CorporationsCorporationIDRolesGetGrantableRolesAtOtherHangarTake3             CorporationsCorporationIDRolesGetGrantableRolesAtOther = "Hangar_Take_3"
	CorporationsCorporationIDRolesGetGrantableRolesAtOtherHangarTake4             CorporationsCorporationIDRolesGetGrantableRolesAtOther = "Hangar_Take_4"
	CorporationsCorporationIDRolesGetGrantableRolesAtOtherHangarTake5             CorporationsCorporationIDRolesGetGrantableRolesAtOther = "Hangar_Take_5"
	CorporationsCorporationIDRolesGetGrantableRolesAtOtherHangarTake6             CorporationsCorporationIDRolesGetGrantableRolesAtOther = "Hangar_Take_6"
	CorporationsCorporationIDRolesGetGrantableRolesAtOtherHangarTake7             CorporationsCorporationIDRolesGetGrantableRolesAtOther = "Hangar_Take_7"
	CorporationsCorporationIDRolesGetGrantableRolesAtOtherJuniorAccountant        CorporationsCorporationIDRolesGetGrantableRolesAtOther = "Junior_Accountant"
	CorporationsCorporationIDRolesGetGrantableRolesAtOtherPersonnelManager        CorporationsCorporationIDRolesGetGrantableRolesAtOther = "Personnel_Manager"
	CorporationsCorporationIDRolesGetGrantableRolesAtOtherProjectManager          CorporationsCorporationIDRolesGetGrantableRolesAtOther = "Project_Manager"
	CorporationsCorporationIDRolesGetGrantableRolesAtOtherRentFactoryFacility     CorporationsCorporationIDRolesGetGrantableRolesAtOther = "Rent_Factory_Facility"
	CorporationsCorporationIDRolesGetGrantableRolesAtOtherRentOffice              CorporationsCorporationIDRolesGetGrantableRolesAtOther = "Rent_Office"
	CorporationsCorporationIDRolesGetGrantableRolesAtOtherRentResearchFacility    CorporationsCorporationIDRolesGetGrantableRolesAtOther = "Rent_Research_Facility"
	CorporationsCorporationIDRolesGetGrantableRolesAtOtherSecurityOfficer         CorporationsCorporationIDRolesGetGrantableRolesAtOther = "Security_Officer"
	CorporationsCorporationIDRolesGetGrantableRolesAtOtherSkillPlanManager        CorporationsCorporationIDRolesGetGrantableRolesAtOther = "Skill_Plan_Manager"
	CorporationsCorporationIDRolesGetGrantableRolesAtOtherStarbaseDefenseOperator CorporationsCorporationIDRolesGetGrantableRolesAtOther = "Starbase_Defense_Operator"
	CorporationsCorporationIDRolesGetGrantableRolesAtOtherStarbaseFuelTechnician  CorporationsCorporationIDRolesGetGrantableRolesAtOther = "Starbase_Fuel_Technician"
	CorporationsCorporationIDRolesGetGrantableRolesAtOtherStationManager          CorporationsCorporationIDRolesGetGrantableRolesAtOther = "Station_Manager"
	CorporationsCorporationIDRolesGetGrantableRolesAtOtherTrader                  CorporationsCorporationIDRolesGetGrantableRolesAtOther = "Trader"
)

// Defines values for CorporationsCorporationIDRolesGetRoles.
const (
	CorporationsCorporationIDRolesGetRolesAccountTake1            CorporationsCorporationIDRolesGetRoles = "Account_Take_1"
	CorporationsCorporationIDRolesGetRolesAccountTake2            CorporationsCorporationIDRolesGetRoles = "Account_Take_2"
	CorporationsCorporationIDRolesGetRolesAccountTake3            CorporationsCorporationIDRolesGetRoles = "Account_Take_3"
	CorporationsCorporationIDRolesGetRolesAccountTake4            CorporationsCorporationIDRolesGetRoles = "Account_Take_4"
	CorporationsCorporationIDRolesGetRolesAccountTake5            CorporationsCorporationIDRolesGetRoles = "Account_Take_5"
	CorporationsCorporationIDRolesGetRolesAccountTake6            CorporationsCorporationIDRolesGetRoles = "Account_Take_6"
	CorporationsCorporationIDRolesGetRolesAccountTake7            CorporationsCorporationIDRolesGetRoles = "Account_Take_7"
	CorporationsCorporationIDRolesGetRolesAccountant              CorporationsCorporationIDRolesGetRoles = "Accountant"
	CorporationsCorporationIDRolesGetRolesAuditor                 CorporationsCorporationIDRolesGetRoles = "Auditor"
	CorporationsCorporationIDRolesGetRolesBrandManager            CorporationsCorporationIDRolesGetRoles = "Brand_Manager"
	CorporationsCorporationIDRolesGetRolesCommunicationsOfficer   CorporationsCorporationIDRolesGetRoles = "Communications_Officer"
	CorporationsCorporationIDRolesGetRolesConfigEquipment         CorporationsCorporationIDRolesGetRoles = "Config_Equipment"
	CorporationsCorporationIDRolesGetRolesConfigStarbaseEquipment CorporationsCorporationIDRolesGetRoles = "Config_Starbase_Equipment"
	CorporationsCorporationIDRolesGetRolesContainerTake1          CorporationsCorporationIDRolesGetRoles = "Container_Take_1"
	CorporationsCorporationIDRolesGetRolesContainerTake2          CorporationsCorporationIDRolesGetRoles = "Container_Take_2"
	CorporationsCorporationIDRolesGetRolesContainerTake3          CorporationsCorporationIDRolesGetRoles = "Container_Take_3"
	CorporationsCorporationIDRolesGetRolesContainerTake4          CorporationsCorporationIDRolesGetRoles = "Container_Take_4"
	CorporationsCorporationIDRolesGetRolesContainerTake5          CorporationsCorporationIDRolesGetRoles = "Container_Take_5"
	CorporationsCorporationIDRolesGetRolesContainerTake6          CorporationsCorporationIDRolesGetRoles = "Container_Take_6"
	CorporationsCorporationIDRolesGetRolesContainerTake7          CorporationsCorporationIDRolesGetRoles = "Container_Take_7"
	CorporationsCorporationIDRolesGetRolesContractManager         CorporationsCorporationIDRolesGetRoles = "Contract_Manager"
	CorporationsCorporationIDRolesGetRolesDeliveriesContainerTake CorporationsCorporationIDRolesGetRoles = "Deliveries_Container_Take"
	CorporationsCorporationIDRolesGetRolesDeliveriesQuery         CorporationsCorporationIDRolesGetRoles = "Deliveries_Query"
	CorporationsCorporationIDRolesGetRolesDeliveriesTake          CorporationsCorporationIDRolesGetRoles = "Deliveries_Take"
	CorporationsCorporationIDRolesGetRolesDiplomat                CorporationsCorporationIDRolesGetRoles = "Diplomat"
	CorporationsCorporationIDRolesGetRolesDirector                CorporationsCorporationIDRolesGetRoles = "Director"
	CorporationsCorporationIDRolesGetRolesFactoryManager          CorporationsCorporationIDRolesGetRoles = "Factory_Manager"
	CorporationsCorporationIDRolesGetRolesFittingManager          CorporationsCorporationIDRolesGetRoles = "Fitting_Manager"
	CorporationsCorporationIDRolesGetRolesHangarQuery1            CorporationsCorporationIDRolesGetRoles = "Hangar_Query_1"
	CorporationsCorporationIDRolesGetRolesHangarQuery2            CorporationsCorporationIDRolesGetRoles = "Hangar_Query_2"
	CorporationsCorporationIDRolesGetRolesHangarQuery3            CorporationsCorporationIDRolesGetRoles = "Hangar_Query_3"
	CorporationsCorporationIDRolesGetRolesHangarQuery4            CorporationsCorporationIDRolesGetRoles = "Hangar_Query_4"
	CorporationsCorporationIDRolesGetRolesHangarQuery5            CorporationsCorporationIDRolesGetRoles = "Hangar_Query_5"
	CorporationsCorporationIDRolesGetRolesHangarQuery6            CorporationsCorporationIDRolesGetRoles = "Hangar_Query_6"
	CorporationsCorporationIDRolesGetRolesHangarQuery7            CorporationsCorporationIDRolesGetRoles = "Hangar_Query_7"
	CorporationsCorporationIDRolesGetRolesHangarTake1             CorporationsCorporationIDRolesGetRoles = "Hangar_Take_1"
	CorporationsCorporationIDRolesGetRolesHangarTake2             CorporationsCorporationIDRolesGetRoles = "Hangar_Take_2"
	CorporationsCorporationIDRolesGetRolesHangarTake3             CorporationsCorporationIDRolesGetRoles = "Hangar_Take_3"
	CorporationsCorporationIDRolesGetRolesHangarTake4             CorporationsCorporationIDRolesGetRoles = "Hangar_Take_4"
	CorporationsCorporationIDRolesGetRolesHangarTake5             CorporationsCorporationIDRolesGetRoles = "Hangar_Take_5"
	CorporationsCorporationIDRolesGetRolesHangarTake6             CorporationsCorporationIDRolesGetRoles = "Hangar_Take_6"
	CorporationsCorporationIDRolesGetRolesHangarTake7             CorporationsCorporationIDRolesGetRoles = "Hangar_Take_7"
	CorporationsCorporationIDRolesGetRolesJuniorAccountant        CorporationsCorporationIDRolesGetRoles = "Junior_Accountant"
	CorporationsCorporationIDRolesGetRolesPersonnelManager        CorporationsCorporationIDRolesGetRoles = "Personnel_Manager"
	CorporationsCorporationIDRolesGetRolesProjectManager          CorporationsCorporationIDRolesGetRoles = "Project_Manager"
	CorporationsCorporationIDRolesGetRolesRentFactoryFacility     CorporationsCorporationIDRolesGetRoles = "Rent_Factory_Facility"
	CorporationsCorporationIDRolesGetRolesRentOffice              CorporationsCorporationIDRolesGetRoles = "Rent_Office"
	CorporationsCorporationIDRolesGetRolesRentResearchFacility    CorporationsCorporationIDRolesGetRoles = "Rent_Research_Facility"
	CorporationsCorporationIDRolesGetRolesSecurityOfficer         CorporationsCorporationIDRolesGetRoles = "Security_Officer"
	CorporationsCorporationIDRolesGetRolesSkillPlanManager        CorporationsCorporationIDRolesGetRoles = "Skill_Plan_Manager"
	CorporationsCorporationIDRolesGetRolesStarbaseDefenseOperator CorporationsCorporationIDRolesGetRoles = "Starbase_Defense_Operator"
	CorporationsCorporationIDRolesGetRolesStarbaseFuelTechnician  CorporationsCorporationIDRolesGetRoles = "Starbase_Fuel_Technician"
	CorporationsCorporationIDRolesGetRolesStationManager          CorporationsCorporationIDRolesGetRoles = "Station_Manager"
	CorporationsCorporationIDRolesGetRolesTrader                  CorporationsCorporationIDRolesGetRoles = "Trader"
)

// Defines values for CorporationsCorporationIDRolesGetRolesAtBase.
const (
	CorporationsCorporationIDRolesGetRolesAtBaseAccountTake1            CorporationsCorporationIDRolesGetRolesAtBase = "Account_Take_1"
	CorporationsCorporationIDRolesGetRolesAtBaseAccountTake2            CorporationsCorporationIDRolesGetRolesAtBase = "Account_Take_2"
	CorporationsCorporationIDRolesGetRolesAtBaseAccountTake3            CorporationsCorporationIDRolesGetRolesAtBase = "Account_Take_3"
	CorporationsCorporationIDRolesGetRolesAtBaseAccountTake4            CorporationsCorporationIDRolesGetRolesAtBase = "Account_Take_4"
	CorporationsCorporationIDRolesGetRolesAtBaseAccountTake5            CorporationsCorporationIDRolesGetRolesAtBase = "Account_Take_5"
	CorporationsCorporationIDRolesGetRolesAtBaseAccountTake6            CorporationsCorporationIDRolesGetRolesAtBase = "Account_Take_6"
	CorporationsCorporationIDRolesGetRolesAtBaseAccountTake7            CorporationsCorporationIDRolesGetRolesAtBase = "Account_Take_7"
	CorporationsCorporationIDRolesGetRolesAtBaseAccountant              CorporationsCorporationIDRolesGetRolesAtBase = "Accountant"
	CorporationsCorporationIDRolesGetRolesAtBaseAuditor                 CorporationsCorporationIDRolesGetRolesAtBase = "Auditor"
	CorporationsCorporationIDRolesGetRolesAtBaseBrandManager            CorporationsCorporationIDRolesGetRolesAtBase = "Brand_Manager"
	CorporationsCorporationIDRolesGetRolesAtBaseCommunicationsOfficer   CorporationsCorporationIDRolesGetRolesAtBase = "Communications_Officer"
	CorporationsCorporationIDRolesGetRolesAtBaseConfigEquipment         CorporationsCorporationIDRolesGetRolesAtBase = "Config_Equipment"
	CorporationsCorporationIDRolesGetRolesAtBaseConfigStarbaseEquipment CorporationsCorporationIDRolesGetRolesAtBase = "Config_Starbase_Equipment"
	CorporationsCorporationIDRolesGetRolesAtBaseContainerTake1          CorporationsCorporationIDRolesGetRolesAtBase = "Container_Take_1"
	CorporationsCorporationIDRolesGetRolesAtBaseContainerTake2          CorporationsCorporationIDRolesGetRolesAtBase = "Container_Take_2"
	CorporationsCorporationIDRolesGetRolesAtBaseContainerTake3          CorporationsCorporationIDRolesGetRolesAtBase = "Container_Take_3"
	CorporationsCorporationIDRolesGetRolesAtBaseContainerTake4          CorporationsCorporationIDRolesGetRolesAtBase = "Container_Take_4"
	CorporationsCorporationIDRolesGetRolesAtBaseContainerTake5          CorporationsCorporationIDRolesGetRolesAtBase = "Container_Take_5"
	CorporationsCorporationIDRolesGetRolesAtBaseContainerTake6          CorporationsCorporationIDRolesGetRolesAtBase = "Container_Take_6"
	CorporationsCorporationIDRolesGetRolesAtBaseContainerTake7          CorporationsCorporationIDRolesGetRolesAtBase = "Container_Take_7"
	CorporationsCorporationIDRolesGetRolesAtBaseContractManager         CorporationsCorporationIDRolesGetRolesAtBase = "Contract_Manager"
	CorporationsCorporationIDRolesGetRolesAtBaseDeliveriesContainerTake CorporationsCorporationIDRolesGetRolesAtBase = "Deliveries_Container_Take"
	CorporationsCorporationIDRolesGetRolesAtBaseDeliveriesQuery         CorporationsCorporationIDRolesGetRolesAtBase = "Deliveries_Query"
	CorporationsCorporationIDRolesGetRolesAtBaseDeliveriesTake          CorporationsCorporationIDRolesGetRolesAtBase = "Deliveries_Take"
	CorporationsCorporationIDRolesGetRolesAtBaseDiplomat                CorporationsCorporationIDRolesGetRolesAtBase = "Diplomat"
	CorporationsCorporationIDRolesGetRolesAtBaseDirector                CorporationsCorporationIDRolesGetRolesAtBase = "Director"
	CorporationsCorporationIDRolesGetRolesAtBaseFactoryManager          CorporationsCorporationIDRolesGetRolesAtBase = "Factory_Manager"
	CorporationsCorporationIDRolesGetRolesAtBaseFittingManager          CorporationsCorporationIDRolesGetRolesAtBase = "Fitting_Manager"
	CorporationsCorporationIDRolesGetRolesAtBaseHangarQuery1            CorporationsCorporationIDRolesGetRolesAtBase = "Hangar_Query_1"
	CorporationsCorporationIDRolesGetRolesAtBaseHangarQuery2            CorporationsCorporationIDRolesGetRolesAtBase = "Hangar_Query_2"
	CorporationsCorporationIDRolesGetRolesAtBaseHangarQuery3            CorporationsCorporationIDRolesGetRolesAtBase = "Hangar_Query_3"
	CorporationsCorporationIDRolesGetRolesAtBaseHangarQuery4            CorporationsCorporationIDRolesGetRolesAtBase = "Hangar_Query_4"
	CorporationsCorporationIDRolesGetRolesAtBaseHangarQuery5            CorporationsCorporationIDRolesGetRolesAtBase = "Hangar_Query_5"
	CorporationsCorporationIDRolesGetRolesAtBaseHangarQuery6            CorporationsCorporationIDRolesGetRolesAtBase = "Hangar_Query_6"
	CorporationsCorporationIDRolesGetRolesAtBaseHangarQuery7            CorporationsCorporationIDRolesGetRolesAtBase = "Hangar_Query_7"
	CorporationsCorporationIDRolesGetRolesAtBaseHangarTake1             CorporationsCorporationIDRolesGetRolesAtBase = "Hangar_Take_1"
	CorporationsCorporationIDRolesGetRolesAtBaseHangarTake2             CorporationsCorporationIDRolesGetRolesAtBase = "Hangar_Take_2"
	CorporationsCorporationIDRolesGetRolesAtBaseHangarTake3             CorporationsCorporationIDRolesGetRolesAtBase = "Hangar_Take_3"
	CorporationsCorporationIDRolesGetRolesAtBaseHangarTake4             CorporationsCorporationIDRolesGetRolesAtBase = "Hangar_Take_4"
	CorporationsCorporationIDRolesGetRolesAtBaseHangarTake5             CorporationsCorporationIDRolesGetRolesAtBase = "Hangar_Take_5"
	CorporationsCorporationIDRolesGetRolesAtBaseHangarTake6             CorporationsCorporationIDRolesGetRolesAtBase = "Hangar_Take_6"
	CorporationsCorporationIDRolesGetRolesAtBaseHangarTake7             CorporationsCorporationIDRolesGetRolesAtBase = "Hangar_Take_7"
	CorporationsCorporationIDRolesGetRolesAtBaseJuniorAccountant        CorporationsCorporationIDRolesGetRolesAtBase = "Junior_Accountant"
	CorporationsCorporationIDRolesGetRolesAtBasePersonnelManager        CorporationsCorporationIDRolesGetRolesAtBase = "Personnel_Manager"
	CorporationsCorporationIDRolesGetRolesAtBaseProjectManager          CorporationsCorporationIDRolesGetRolesAtBase = "Project_Manager"
	CorporationsCorporationIDRolesGetRolesAtBaseRentFactoryFacility     CorporationsCorporationIDRolesGetRolesAtBase = "Rent_Factory_Facility"
	CorporationsCorporationIDRolesGetRolesAtBaseRentOffice              CorporationsCorporationIDRolesGetRolesAtBase = "Rent_Office"
	CorporationsCorporationIDRolesGetRolesAtBaseRentResearchFacility    CorporationsCorporationIDRolesGetRolesAtBase = "Rent_Research_Facility"
	CorporationsCorporationIDRolesGetRolesAtBaseSecurityOfficer         CorporationsCorporationIDRolesGetRolesAtBase = "Security_Officer"
	CorporationsCorporationIDRolesGetRolesAtBaseSkillPlanManager        CorporationsCorporationIDRolesGetRolesAtBase = "Skill_Plan_Manager"
	CorporationsCorporationIDRolesGetRolesAtBaseStarbaseDefenseOperator CorporationsCorporationIDRolesGetRolesAtBase = "Starbase_Defense_Operator"
	CorporationsCorporationIDRolesGetRolesAtBaseStarbaseFuelTechnician  CorporationsCorporationIDRolesGetRolesAtBase = "Starbase_Fuel_Technician"
	CorporationsCorporationIDRolesGetRolesAtBaseStationManager          CorporationsCorporationIDRolesGetRolesAtBase = "Station_Manager"
	CorporationsCorporationIDRolesGetRolesAtBaseTrader                  CorporationsCorporationIDRolesGetRolesAtBase = "Trader"
)

// Defines values for CorporationsCorporationIDRolesGetRolesAtHq.
const (
	CorporationsCorporationIDRolesGetRolesAtHqAccountTake1            CorporationsCorporationIDRolesGetRolesAtHq = "Account_Take_1"
	CorporationsCorporationIDRolesGetRolesAtHqAccountTake2            CorporationsCorporationIDRolesGetRolesAtHq = "Account_Take_2"
	CorporationsCorporationIDRolesGetRolesAtHqAccountTake3            CorporationsCorporationIDRolesGetRolesAtHq = "Account_Take_3"
	CorporationsCorporationIDRolesGetRolesAtHqAccountTake4            CorporationsCorporationIDRolesGetRolesAtHq = "Account_Take_4"
	CorporationsCorporationIDRolesGetRolesAtHqAccountTake5            CorporationsCorporationIDRolesGetRolesAtHq = "Account_Take_5"
	CorporationsCorporationIDRolesGetRolesAtHqAccountTake6            CorporationsCorporationIDRolesGetRolesAtHq = "Account_Take_6"
	CorporationsCorporationIDRolesGetRolesAtHqAccountTake7            CorporationsCorporationIDRolesGetRolesAtHq = "Account_Take_7"
	CorporationsCorporationIDRolesGetRolesAtHqAccountant              CorporationsCorporationIDRolesGetRolesAtHq = "Accountant"
	CorporationsCorporationIDRolesGetRolesAtHqAuditor                 CorporationsCorporationIDRolesGetRolesAtHq = "Auditor"
	CorporationsCorporationIDRolesGetRolesAtHqBrandManager            CorporationsCorporationIDRolesGetRolesAtHq = "Brand_Manager"
	CorporationsCorporationIDRolesGetRolesAtHqCommunicationsOfficer   CorporationsCorporationIDRolesGetRolesAtHq = "Communications_Officer"
	CorporationsCorporationIDRolesGetRolesAtHqConfigEquipment         CorporationsCorporationIDRolesGetRolesAtHq = "Config_Equipment"
	CorporationsCorporationIDRolesGetRolesAtHqConfigStarbaseEquipment CorporationsCorporationIDRolesGetRolesAtHq = "Config_Starbase_Equipment"
	CorporationsCorporationIDRolesGetRolesAtHqContainerTake1          CorporationsCorporationIDRolesGetRolesAtHq = "Container_Take_1"
	CorporationsCorporationIDRolesGetRolesAtHqContainerTake2          CorporationsCorporationIDRolesGetRolesAtHq = "Container_Take_2"
	CorporationsCorporationIDRolesGetRolesAtHqContainerTake3          CorporationsCorporationIDRolesGetRolesAtHq = "Container_Take_3"
	CorporationsCorporationIDRolesGetRolesAtHqContainerTake4          CorporationsCorporationIDRolesGetRolesAtHq = "Container_Take_4"
	CorporationsCorporationIDRolesGetRolesAtHqContainerTake5          CorporationsCorporationIDRolesGetRolesAtHq = "Container_Take_5"
	CorporationsCorporationIDRolesGetRolesAtHqContainerTake6          CorporationsCorporationIDRolesGetRolesAtHq = "Container_Take_6"
	CorporationsCorporationIDRolesGetRolesAtHqContainerTake7          CorporationsCorporationIDRolesGetRolesAtHq = "Container_Take_7"
	CorporationsCorporationIDRolesGetRolesAtHqContractManager         CorporationsCorporationIDRolesGetRolesAtHq = "Contract_Manager"
	CorporationsCorporationIDRolesGetRolesAtHqDeliveriesContainerTake CorporationsCorporationIDRolesGetRolesAtHq = "Deliveries_Container_Take"
	CorporationsCorporationIDRolesGetRolesAtHqDeliveriesQuery         CorporationsCorporationIDRolesGetRolesAtHq = "Deliveries_Query"
	CorporationsCorporationIDRolesGetRolesAtHqDeliveriesTake          CorporationsCorporationIDRolesGetRolesAtHq = "Deliveries_Take"
	CorporationsCorporationIDRolesGetRolesAtHqDiplomat                CorporationsCorporationIDRolesGetRolesAtHq = "Diplomat"
	CorporationsCorporationIDRolesGetRolesAtHqDirector                CorporationsCorporationIDRolesGetRolesAtHq = "Director"
	CorporationsCorporationIDRolesGetRolesAtHqFactoryManager          CorporationsCorporationIDRolesGetRolesAtHq = "Factory_Manager"
	CorporationsCorporationIDRolesGetRolesAtHqFittingManager          CorporationsCorporationIDRolesGetRolesAtHq = "Fitting_Manager"
	CorporationsCorporationIDRolesGetRolesAtHqHangarQuery1            CorporationsCorporationIDRolesGetRolesAtHq = "Hangar_Query_1"
	CorporationsCorporationIDRolesGetRolesAtHqHangarQuery2            CorporationsCorporationIDRolesGetRolesAtHq = "Hangar_Query_2"
	CorporationsCorporationIDRolesGetRolesAtHqHangarQuery3            CorporationsCorporationIDRolesGetRolesAtHq = "Hangar_Query_3"
	CorporationsCorporationIDRolesGetRolesAtHqHangarQuery4            CorporationsCorporationIDRolesGetRolesAtHq = "Hangar_Query_4"
	CorporationsCorporationIDRolesGetRolesAtHqHangarQuery5            CorporationsCorporationIDRolesGetRolesAtHq = "Hangar_Query_5"
	CorporationsCorporationIDRolesGetRolesAtHqHangarQuery6            CorporationsCorporationIDRolesGetRolesAtHq = "Hangar_Query_6"
	CorporationsCorporationIDRolesGetRolesAtHqHangarQuery7            CorporationsCorporationIDRolesGetRolesAtHq = "Hangar_Query_7"
	CorporationsCorporationIDRolesGetRolesAtHqHangarTake1             CorporationsCorporationIDRolesGetRolesAtHq = "Hangar_Take_1"
	CorporationsCorporationIDRolesGetRolesAtHqHangarTake2             CorporationsCorporationIDRolesGetRolesAtHq = "Hangar_Take_2"
	CorporationsCorporationIDRolesGetRolesAtHqHangarTake3             CorporationsCorporationIDRolesGetRolesAtHq = "Hangar_Take_3"
	CorporationsCorporationIDRolesGetRolesAtHqHangarTake4             CorporationsCorporationIDRolesGetRolesAtHq = "Hangar_Take_4"
	CorporationsCorporationIDRolesGetRolesAtHqHangarTake5             CorporationsCorporationIDRolesGetRolesAtHq = "Hangar_Take_5"
	CorporationsCorporationIDRolesGetRolesAtHqHangarTake6             CorporationsCorporationIDRolesGetRolesAtHq = "Hangar_Take_6"
	CorporationsCorporationIDRolesGetRolesAtHqHangarTake7             CorporationsCorporationIDRolesGetRolesAtHq = "Hangar_Take_7"
	CorporationsCorporationIDRolesGetRolesAtHqJuniorAccountant        CorporationsCorporationIDRolesGetRolesAtHq = "Junior_Accountant"
	CorporationsCorporationIDRolesGetRolesAtHqPersonnelManager        CorporationsCorporationIDRolesGetRolesAtHq = "Personnel_Manager"
	CorporationsCorporationIDRolesGetRolesAtHqProjectManager          CorporationsCorporationIDRolesGetRolesAtHq = "Project_Manager"
	CorporationsCorporationIDRolesGetRolesAtHqRentFactoryFacility     CorporationsCorporationIDRolesGetRolesAtHq = "Rent_Factory_Facility"
	CorporationsCorporationIDRolesGetRolesAtHqRentOffice              CorporationsCorporationIDRolesGetRolesAtHq = "Rent_Office"
	CorporationsCorporationIDRolesGetRolesAtHqRentResearchFacility    CorporationsCorporationIDRolesGetRolesAtHq = "Rent_Research_Facility"
	CorporationsCorporationIDRolesGetRolesAtHqSecurityOfficer         CorporationsCorporationIDRolesGetRolesAtHq = "Security_Officer"
	CorporationsCorporationIDRolesGetRolesAtHqSkillPlanManager        CorporationsCorporationIDRolesGetRolesAtHq = "Skill_Plan_Manager"
	CorporationsCorporationIDRolesGetRolesAtHqStarbaseDefenseOperator CorporationsCorporationIDRolesGetRolesAtHq = "Starbase_Defense_Operator"
	CorporationsCorporationIDRolesGetRolesAtHqStarbaseFuelTechnician  CorporationsCorporationIDRolesGetRolesAtHq = "Starbase_Fuel_Technician"
	CorporationsCorporationIDRolesGetRolesAtHqStationManager          CorporationsCorporationIDRolesGetRolesAtHq = "Station_Manager"
	CorporationsCorporationIDRolesGetRolesAtHqTrader                  CorporationsCorporationIDRolesGetRolesAtHq = "Trader"
)

// Defines values for CorporationsCorporationIDRolesGetRolesAtOther.
const (
	CorporationsCorporationIDRolesGetRolesAtOtherAccountTake1            CorporationsCorporationIDRolesGetRolesAtOther = "Account_Take_1"
	CorporationsCorporationIDRolesGetRolesAtOtherAccountTake2            CorporationsCorporationIDRolesGetRolesAtOther = "Account_Take_2"
	CorporationsCorporationIDRolesGetRolesAtOtherAccountTake3            CorporationsCorporationIDRolesGetRolesAtOther = "Account_Take_3"
	CorporationsCorporationIDRolesGetRolesAtOtherAccountTake4            CorporationsCorporationIDRolesGetRolesAtOther = "Account_Take_4"
	CorporationsCorporationIDRolesGetRolesAtOtherAccountTake5            CorporationsCorporationIDRolesGetRolesAtOther = "Account_Take_5"
	CorporationsCorporationIDRolesGetRolesAtOtherAccountTake6            CorporationsCorporationIDRolesGetRolesAtOther = "Account_Take_6"
	CorporationsCorporationIDRolesGetRolesAtOtherAccountTake7            CorporationsCorporationIDRolesGetRolesAtOther = "Account_Take_7"
	CorporationsCorporationIDRolesGetRolesAtOtherAccountant              CorporationsCorporationIDRolesGetRolesAtOther = "Accountant"
	CorporationsCorporationIDRolesGetRolesAtOtherAuditor                 CorporationsCorporationIDRolesGetRolesAtOther = "Auditor"
	CorporationsCorporationIDRolesGetRolesAtOtherBrandManager            CorporationsCorporationIDRolesGetRolesAtOther = "Brand_Manager"
	CorporationsCorporationIDRolesGetRolesAtOtherCommunicationsOfficer   CorporationsCorporationIDRolesGetRolesAtOther = "Communications_Officer"
	CorporationsCorporationIDRolesGetRolesAtOtherConfigEquipment         CorporationsCorporationIDRolesGetRolesAtOther = "Config_Equipment"
	CorporationsCorporationIDRolesGetRolesAtOtherConfigStarbaseEquipment CorporationsCorporationIDRolesGetRolesAtOther = "Config_Starbase_Equipment"
	CorporationsCorporationIDRolesGetRolesAtOtherContainerTake1          CorporationsCorporationIDRolesGetRolesAtOther = "Container_Take_1"
	CorporationsCorporationIDRolesGetRolesAtOtherContainerTake2          CorporationsCorporationIDRolesGetRolesAtOther = "Container_Take_2"
	CorporationsCorporationIDRolesGetRolesAtOtherContainerTake3          CorporationsCorporationIDRolesGetRolesAtOther = "Container_Take_3"
	CorporationsCorporationIDRolesGetRolesAtOtherContainerTake4          CorporationsCorporationIDRolesGetRolesAtOther = "Container_Take_4"
	CorporationsCorporationIDRolesGetRolesAtOtherContainerTake5          CorporationsCorporationIDRolesGetRolesAtOther = "Container_Take_5"
	CorporationsCorporationIDRolesGetRolesAtOtherContainerTake6          CorporationsCorporationIDRolesGetRolesAtOther = "Container_Take_6"
	CorporationsCorporationIDRolesGetRolesAtOtherContainerTake7          CorporationsCorporationIDRolesGetRolesAtOther = "Container_Take_7"
	CorporationsCorporationIDRolesGetRolesAtOtherContractManager         CorporationsCorporationIDRolesGetRolesAtOther = "Contract_Manager"
	CorporationsCorporationIDRolesGetRolesAtOtherDeliveriesContainerTake CorporationsCorporationIDRolesGetRolesAtOther = "Deliveries_Container_Take"
	CorporationsCorporationIDRolesGetRolesAtOtherDeliveriesQuery         CorporationsCorporationIDRolesGetRolesAtOther = "Deliveries_Query"
	CorporationsCorporationIDRolesGetRolesAtOtherDeliveriesTake          CorporationsCorporationIDRolesGetRolesAtOther = "Deliveries_Take"
	CorporationsCorporationIDRolesGetRolesAtOtherDiplomat                CorporationsCorporationIDRolesGetRolesAtOther = "Diplomat"
	CorporationsCorporationIDRolesGetRolesAtOtherDirector                CorporationsCorporationIDRolesGetRolesAtOther = "Director"
	CorporationsCorporationIDRolesGetRolesAtOtherFactoryManager          CorporationsCorporationIDRolesGetRolesAtOther = "Factory_Manager"
	CorporationsCorporationIDRolesGetRolesAtOtherFittingManager          CorporationsCorporationIDRolesGetRolesAtOther = "Fitting_Manager"
	CorporationsCorporationIDRolesGetRolesAtOtherHangarQuery1            CorporationsCorporationIDRolesGetRolesAtOther = "Hangar_Query_1"
	CorporationsCorporationIDRolesGetRolesAtOtherHangarQuery2            CorporationsCorporationIDRolesGetRolesAtOther = "Hangar_Query_2"
	CorporationsCorporationIDRolesGetRolesAtOtherHangarQuery3            CorporationsCorporationIDRolesGetRolesAtOther = "Hangar_Query_3"
	CorporationsCorporationIDRolesGetRolesAtOtherHangarQuery4            CorporationsCorporationIDRolesGetRolesAtOther = "Hangar_Query_4"
	CorporationsCorporationIDRolesGetRolesAtOtherHangarQuery5            CorporationsCorporationIDRolesGetRolesAtOther = "Hangar_Query_5"
	CorporationsCorporationIDRolesGetRolesAtOtherHangarQuery6            CorporationsCorporationIDRolesGetRolesAtOther = "Hangar_Query_6"
	CorporationsCorporationIDRolesGetRolesAtOtherHangarQuery7            CorporationsCorporationIDRolesGetRolesAtOther = "Hangar_Query_7"
	CorporationsCorporationIDRolesGetRolesAtOtherHangarTake1             CorporationsCorporationIDRolesGetRolesAtOther = "Hangar_Take_1"
	CorporationsCorporationIDRolesGetRolesAtOtherHangarTake2             CorporationsCorporationIDRolesGetRolesAtOther = "Hangar_Take_2"
	CorporationsCorporationIDRolesGetRolesAtOtherHangarTake3             CorporationsCorporationIDRolesGetRolesAtOther = "Hangar_Take_3"
	CorporationsCorporationIDRolesGetRolesAtOtherHangarTake4             CorporationsCorporationIDRolesGetRolesAtOther = "Hangar_Take_4"
	CorporationsCorporationIDRolesGetRolesAtOtherHangarTake5             CorporationsCorporationIDRolesGetRolesAtOther = "Hangar_Take_5"
	CorporationsCorporationIDRolesGetRolesAtOtherHangarTake6             CorporationsCorporationIDRolesGetRolesAtOther = "Hangar_Take_6"
	CorporationsCorporationIDRolesGetRolesAtOtherHangarTake7             CorporationsCorporationIDRolesGetRolesAtOther = "Hangar_Take_7"
	CorporationsCorporationIDRolesGetRolesAtOtherJuniorAccountant        CorporationsCorporationIDRolesGetRolesAtOther = "Junior_Accountant"
	CorporationsCorporationIDRolesGetRolesAtOtherPersonnelManager        CorporationsCorporationIDRolesGetRolesAtOther = "Personnel_Manager"
	CorporationsCorporationIDRolesGetRolesAtOtherProjectManager          CorporationsCorporationIDRolesGetRolesAtOther = "Project_Manager"
	CorporationsCorporationIDRolesGetRolesAtOtherRentFactoryFacility     CorporationsCorporationIDRolesGetRolesAtOther = "Rent_Factory_Facility"
	CorporationsCorporationIDRolesGetRolesAtOtherRentOffice              CorporationsCorporationIDRolesGetRolesAtOther = "Rent_Office"
	CorporationsCorporationIDRolesGetRolesAtOtherRentResearchFacility    CorporationsCorporationIDRolesGetRolesAtOther = "Rent_Research_Facility"
	CorporationsCorporationIDRolesGetRolesAtOtherSecurityOfficer         CorporationsCorporationIDRolesGetRolesAtOther = "Security_Officer"
	CorporationsCorporationIDRolesGetRolesAtOtherSkillPlanManager        CorporationsCorporationIDRolesGetRolesAtOther = "Skill_Plan_Manager"
	CorporationsCorporationIDRolesGetRolesAtOtherStarbaseDefenseOperator CorporationsCorporationIDRolesGetRolesAtOther = "Starbase_Defense_Operator"
	CorporationsCorporationIDRolesGetRolesAtOtherStarbaseFuelTechnician  CorporationsCorporationIDRolesGetRolesAtOther = "Starbase_Fuel_Technician"
	CorporationsCorporationIDRolesGetRolesAtOtherStationManager          CorporationsCorporationIDRolesGetRolesAtOther = "Station_Manager"
	CorporationsCorporationIDRolesGetRolesAtOtherTrader                  CorporationsCorporationIDRolesGetRolesAtOther = "Trader"
)

// Defines values for CorporationsCorporationIDRolesHistoryGetNewRoles.
const (
	CorporationsCorporationIDRolesHistoryGetNewRolesAccountTake1            CorporationsCorporationIDRolesHistoryGetNewRoles = "Account_Take_1"
	CorporationsCorporationIDRolesHistoryGetNewRolesAccountTake2            CorporationsCorporationIDRolesHistoryGetNewRoles = "Account_Take_2"
	CorporationsCorporationIDRolesHistoryGetNewRolesAccountTake3            CorporationsCorporationIDRolesHistoryGetNewRoles = "Account_Take_3"
	CorporationsCorporationIDRolesHistoryGetNewRolesAccountTake4            CorporationsCorporationIDRolesHistoryGetNewRoles = "Account_Take_4"
	CorporationsCorporationIDRolesHistoryGetNewRolesAccountTake5            CorporationsCorporationIDRolesHistoryGetNewRoles = "Account_Take_5"
	CorporationsCorporationIDRolesHistoryGetNewRolesAccountTake6            CorporationsCorporationIDRolesHistoryGetNewRoles = "Account_Take_6"
	CorporationsCorporationIDRolesHistoryGetNewRolesAccountTake7            CorporationsCorporationIDRolesHistoryGetNewRoles = "Account_Take_7"
	CorporationsCorporationIDRolesHistoryGetNewRolesAccountant              CorporationsCorporationIDRolesHistoryGetNewRoles = "Accountant"
	CorporationsCorporationIDRolesHistoryGetNewRolesAuditor                 CorporationsCorporationIDRolesHistoryGetNewRoles = "Auditor"
	CorporationsCorporationIDRolesHistoryGetNewRolesBrandManager            CorporationsCorporationIDRolesHistoryGetNewRoles = "Brand_Manager"
	CorporationsCorporationIDRolesHistoryGetNewRolesCommunicationsOfficer   CorporationsCorporationIDRolesHistoryGetNewRoles = "Communications_Officer"
	CorporationsCorporationIDRolesHistoryGetNewRolesConfigEquipment         CorporationsCorporationIDRolesHistoryGetNewRoles = "Config_Equipment"
	CorporationsCorporationIDRolesHistoryGetNewRolesConfigStarbaseEquipment CorporationsCorporationIDRolesHistoryGetNewRoles = "Config_Starbase_Equipment"
	CorporationsCorporationIDRolesHistoryGetNewRolesContainerTake1          CorporationsCorporationIDRolesHistoryGetNewRoles = "Container_Take_1"
	CorporationsCorporationIDRolesHistoryGetNewRolesContainerTake2          CorporationsCorporationIDRolesHistoryGetNewRoles = "Container_Take_2"
	CorporationsCorporationIDRolesHistoryGetNewRolesContainerTake3          CorporationsCorporationIDRolesHistoryGetNewRoles = "Container_Take_3"
	CorporationsCorporationIDRolesHistoryGetNewRolesContainerTake4          CorporationsCorporationIDRolesHistoryGetNewRoles = "Container_Take_4"
	CorporationsCorporationIDRolesHistoryGetNewRolesContainerTake5          CorporationsCorporationIDRolesHistoryGetNewRoles = "Container_Take_5"
	CorporationsCorporationIDRolesHistoryGetNewRolesContainerTake6          CorporationsCorporationIDRolesHistoryGetNewRoles = "Container_Take_6"
	CorporationsCorporationIDRolesHistoryGetNewRolesContainerTake7          CorporationsCorporationIDRolesHistoryGetNewRoles = "Container_Take_7"
	CorporationsCorporationIDRolesHistoryGetNewRolesContractManager         CorporationsCorporationIDRolesHistoryGetNewRoles = "Contract_Manager"
	CorporationsCorporationIDRolesHistoryGetNewRolesDeliveriesContainerTake CorporationsCorporationIDRolesHistoryGetNewRoles = "Deliveries_Container_Take"
	CorporationsCorporationIDRolesHistoryGetNewRolesDeliveriesQuery         CorporationsCorporationIDRolesHistoryGetNewRoles = "Deliveries_Query"
	CorporationsCorporationIDRolesHistoryGetNewRolesDeliveriesTake          CorporationsCorporationIDRolesHistoryGetNewRoles = "Deliveries_Take"
	CorporationsCorporationIDRolesHistoryGetNewRolesDiplomat                CorporationsCorporationIDRolesHistoryGetNewRoles = "Diplomat"
	CorporationsCorporationIDRolesHistoryGetNewRolesDirector                CorporationsCorporationIDRolesHistoryGetNewRoles = "Director"
	CorporationsCorporationIDRolesHistoryGetNewRolesFactoryManager          CorporationsCorporationIDRolesHistoryGetNewRoles = "Factory_Manager"
	CorporationsCorporationIDRolesHistoryGetNewRolesFittingManager          CorporationsCorporationIDRolesHistoryGetNewRoles = "Fitting_Manager"
	CorporationsCorporationIDRolesHistoryGetNewRolesHangarQuery1            CorporationsCorporationIDRolesHistoryGetNewRoles = "Hangar_Query_1"
	CorporationsCorporationIDRolesHistoryGetNewRolesHangarQuery2            CorporationsCorporationIDRolesHistoryGetNewRoles = "Hangar_Query_2"
	CorporationsCorporationIDRolesHistoryGetNewRolesHangarQuery3            CorporationsCorporationIDRolesHistoryGetNewRoles = "Hangar_Query_3"
	CorporationsCorporationIDRolesHistoryGetNewRolesHangarQuery4            CorporationsCorporationIDRolesHistoryGetNewRoles = "Hangar_Query_4"
	CorporationsCorporationIDRolesHistoryGetNewRolesHangarQuery5            CorporationsCorporationIDRolesHistoryGetNewRoles = "Hangar_Query_5"
	CorporationsCorporationIDRolesHistoryGetNewRolesHangarQuery6            CorporationsCorporationIDRolesHistoryGetNewRoles = "Hangar_Query_6"
	CorporationsCorporationIDRolesHistoryGetNewRolesHangarQuery7            CorporationsCorporationIDRolesHistoryGetNewRoles = "Hangar_Query_7"
	CorporationsCorporationIDRolesHistoryGetNewRolesHangarTake1             CorporationsCorporationIDRolesHistoryGetNewRoles = "Hangar_Take_1"
	CorporationsCorporationIDRolesHistoryGetNewRolesHangarTake2             CorporationsCorporationIDRolesHistoryGetNewRoles = "Hangar_Take_2"
	CorporationsCorporationIDRolesHistoryGetNewRolesHangarTake3             CorporationsCorporationIDRolesHistoryGetNewRoles = "Hangar_Take_3"
	CorporationsCorporationIDRolesHistoryGetNewRolesHangarTake4             CorporationsCorporationIDRolesHistoryGetNewRoles = "Hangar_Take_4"
	CorporationsCorporationIDRolesHistoryGetNewRolesHangarTake5             CorporationsCorporationIDRolesHistoryGetNewRoles = "Hangar_Take_5"
	CorporationsCorporationIDRolesHistoryGetNewRolesHangarTake6             CorporationsCorporationIDRolesHistoryGetNewRoles = "Hangar_Take_6"
	CorporationsCorporationIDRolesHistoryGetNewRolesHangarTake7             CorporationsCorporationIDRolesHistoryGetNewRoles = "Hangar_Take_7"
	CorporationsCorporationIDRolesHistoryGetNewRolesJuniorAccountant        CorporationsCorporationIDRolesHistoryGetNewRoles = "Junior_Accountant"
	CorporationsCorporationIDRolesHistoryGetNewRolesPersonnelManager        CorporationsCorporationIDRolesHistoryGetNewRoles = "Personnel_Manager"
	CorporationsCorporationIDRolesHistoryGetNewRolesProjectManager          CorporationsCorporationIDRolesHistoryGetNewRoles = "Project_Manager"
	CorporationsCorporationIDRolesHistoryGetNewRolesRentFactoryFacility     CorporationsCorporationIDRolesHistoryGetNewRoles = "Rent_Factory_Facility"
	CorporationsCorporationIDRolesHistoryGetNewRolesRentOffice              CorporationsCorporationIDRolesHistoryGetNewRoles = "Rent_Office"
	CorporationsCorporationIDRolesHistoryGetNewRolesRentResearchFacility    CorporationsCorporationIDRolesHistoryGetNewRoles = "Rent_Research_Facility"
	CorporationsCorporationIDRolesHistoryGetNewRolesSecurityOfficer         CorporationsCorporationIDRolesHistoryGetNewRoles = "Security_Officer"
	CorporationsCorporationIDRolesHistoryGetNewRolesSkillPlanManager        CorporationsCorporationIDRolesHistoryGetNewRoles = "Skill_Plan_Manager"
	CorporationsCorporationIDRolesHistoryGetNewRolesStarbaseDefenseOperator CorporationsCorporationIDRolesHistoryGetNewRoles = "Starbase_Defense_Operator"
	CorporationsCorporationIDRolesHistoryGetNewRolesStarbaseFuelTechnician  CorporationsCorporationIDRolesHistoryGetNewRoles = "Starbase_Fuel_Technician"
	CorporationsCorporationIDRolesHistoryGetNewRolesStationManager          CorporationsCorporationIDRolesHistoryGetNewRoles = "Station_Manager"
	CorporationsCorporationIDRolesHistoryGetNewRolesTrader                  CorporationsCorporationIDRolesHistoryGetNewRoles = "Trader"
)

// Defines values for CorporationsCorporationIDRolesHistoryGetOldRoles.
const (
	CorporationsCorporationIDRolesHistoryGetOldRolesAccountTake1            CorporationsCorporationIDRolesHistoryGetOldRoles = "Account_Take_1"
	CorporationsCorporationIDRolesHistoryGetOldRolesAccountTake2            CorporationsCorporationIDRolesHistoryGetOldRoles = "Account_Take_2"
	CorporationsCorporationIDRolesHistoryGetOldRolesAccountTake3            CorporationsCorporationIDRolesHistoryGetOldRoles = "Account_Take_3"
	CorporationsCorporationIDRolesHistoryGetOldRolesAccountTake4            CorporationsCorporationIDRolesHistoryGetOldRoles = "Account_Take_4"
	CorporationsCorporationIDRolesHistoryGetOldRolesAccountTake5            CorporationsCorporationIDRolesHistoryGetOldRoles = "Account_Take_5"
	CorporationsCorporationIDRolesHistoryGetOldRolesAccountTake6            CorporationsCorporationIDRolesHistoryGetOldRoles = "Account_Take_6"
	CorporationsCorporationIDRolesHistoryGetOldRolesAccountTake7            CorporationsCorporationIDRolesHistoryGetOldRoles = "Account_Take_7"
	CorporationsCorporationIDRolesHistoryGetOldRolesAccountant              CorporationsCorporationIDRolesHistoryGetOldRoles = "Accountant"
	CorporationsCorporationIDRolesHistoryGetOldRolesAuditor                 CorporationsCorporationIDRolesHistoryGetOldRoles = "Auditor"
	CorporationsCorporationIDRolesHistoryGetOldRolesBrandManager            CorporationsCorporationIDRolesHistoryGetOldRoles = "Brand_Manager"
	CorporationsCorporationIDRolesHistoryGetOldRolesCommunicationsOfficer   CorporationsCorporationIDRolesHistoryGetOldRoles = "Communications_Officer"
	CorporationsCorporationIDRolesHistoryGetOldRolesConfigEquipment         CorporationsCorporationIDRolesHistoryGetOldRoles = "Config_Equipment"
	CorporationsCorporationIDRolesHistoryGetOldRolesConfigStarbaseEquipment CorporationsCorporationIDRolesHistoryGetOldRoles = "Config_Starbase_Equipment"
	CorporationsCorporationIDRolesHistoryGetOldRolesContainerTake1          CorporationsCorporationIDRolesHistoryGetOldRoles = "Container_Take_1"
	CorporationsCorporationIDRolesHistoryGetOldRolesContainerTake2          CorporationsCorporationIDRolesHistoryGetOldRoles = "Container_Take_2"
	CorporationsCorporationIDRolesHistoryGetOldRolesContainerTake3          CorporationsCorporationIDRolesHistoryGetOldRoles = "Container_Take_3"
	CorporationsCorporationIDRolesHistoryGetOldRolesContainerTake4          CorporationsCorporationIDRolesHistoryGetOldRoles = "Container_Take_4"
	CorporationsCorporationIDRolesHistoryGetOldRolesContainerTake5          CorporationsCorporationIDRolesHistoryGetOldRoles = "Container_Take_5"
	CorporationsCorporationIDRolesHistoryGetOldRolesContainerTake6          CorporationsCorporationIDRolesHistoryGetOldRoles = "Container_Take_6"
	CorporationsCorporationIDRolesHistoryGetOldRolesContainerTake7          CorporationsCorporationIDRolesHistoryGetOldRoles = "Container_Take_7"
	CorporationsCorporationIDRolesHistoryGetOldRolesContractManager         CorporationsCorporationIDRolesHistoryGetOldRoles = "Contract_Manager"
	CorporationsCorporationIDRolesHistoryGetOldRolesDeliveriesContainerTake CorporationsCorporationIDRolesHistoryGetOldRoles = "Deliveries_Container_Take"
	CorporationsCorporationIDRolesHistoryGetOldRolesDeliveriesQuery         CorporationsCorporationIDRolesHistoryGetOldRoles = "Deliveries_Query"
	CorporationsCorporationIDRolesHistoryGetOldRolesDeliveriesTake          CorporationsCorporationIDRolesHistoryGetOldRoles = "Deliveries_Take"
	CorporationsCorporationIDRolesHistoryGetOldRolesDiplomat                CorporationsCorporationIDRolesHistoryGetOldRoles = "Diplomat"
	CorporationsCorporationIDRolesHistoryGetOldRolesDirector                CorporationsCorporationIDRolesHistoryGetOldRoles = "Director"
	CorporationsCorporationIDRolesHistoryGetOldRolesFactoryManager          CorporationsCorporationIDRolesHistoryGetOldRoles = "Factory_Manager"
	CorporationsCorporationIDRolesHistoryGetOldRolesFittingManager          CorporationsCorporationIDRolesHistoryGetOldRoles = "Fitting_Manager"
	CorporationsCorporationIDRolesHistoryGetOldRolesHangarQuery1            CorporationsCorporationIDRolesHistoryGetOldRoles = "Hangar_Query_1"
	CorporationsCorporationIDRolesHistoryGetOldRolesHangarQuery2            CorporationsCorporationIDRolesHistoryGetOldRoles = "Hangar_Query_2"
	CorporationsCorporationIDRolesHistoryGetOldRolesHangarQuery3            CorporationsCorporationIDRolesHistoryGetOldRoles = "Hangar_Query_3"
	CorporationsCorporationIDRolesHistoryGetOldRolesHangarQuery4            CorporationsCorporationIDRolesHistoryGetOldRoles = "Hangar_Query_4"
	CorporationsCorporationIDRolesHistoryGetOldRolesHangarQuery5            CorporationsCorporationIDRolesHistoryGetOldRoles = "Hangar_Query_5"
	CorporationsCorporationIDRolesHistoryGetOldRolesHangarQuery6            CorporationsCorporationIDRolesHistoryGetOldRoles = "Hangar_Query_6"
	CorporationsCorporationIDRolesHistoryGetOldRolesHangarQuery7            CorporationsCorporationIDRolesHistoryGetOldRoles = "Hangar_Query_7"
	CorporationsCorporationIDRolesHistoryGetOldRolesHangarTake1             CorporationsCorporationIDRolesHistoryGetOldRoles = "Hangar_Take_1"
	CorporationsCorporationIDRolesHistoryGetOldRolesHangarTake2             CorporationsCorporationIDRolesHistoryGetOldRoles = "Hangar_Take_2"
	CorporationsCorporationIDRolesHistoryGetOldRolesHangarTake3             CorporationsCorporationIDRolesHistoryGetOldRoles = "Hangar_Take_3"
	CorporationsCorporationIDRolesHistoryGetOldRolesHangarTake4             CorporationsCorporationIDRolesHistoryGetOldRoles = "Hangar_Take_4"
	CorporationsCorporationIDRolesHistoryGetOldRolesHangarTake5             CorporationsCorporationIDRolesHistoryGetOldRoles = "Hangar_Take_5"
	CorporationsCorporationIDRolesHistoryGetOldRolesHangarTake6             CorporationsCorporationIDRolesHistoryGetOldRoles = "Hangar_Take_6"
	CorporationsCorporationIDRolesHistoryGetOldRolesHangarTake7             CorporationsCorporationIDRolesHistoryGetOldRoles = "Hangar_Take_7"
	CorporationsCorporationIDRolesHistoryGetOldRolesJuniorAccountant        CorporationsCorporationIDRolesHistoryGetOldRoles = "Junior_Accountant"
	CorporationsCorporationIDRolesHistoryGetOldRolesPersonnelManager        CorporationsCorporationIDRolesHistoryGetOldRoles = "Personnel_Manager"
	CorporationsCorporationIDRolesHistoryGetOldRolesProjectManager          CorporationsCorporationIDRolesHistoryGetOldRoles = "Project_Manager"
	CorporationsCorporationIDRolesHistoryGetOldRolesRentFactoryFacility     CorporationsCorporationIDRolesHistoryGetOldRoles = "Rent_Factory_Facility"
	CorporationsCorporationIDRolesHistoryGetOldRolesRentOffice              CorporationsCorporationIDRolesHistoryGetOldRoles = "Rent_Office"
	CorporationsCorporationIDRolesHistoryGetOldRolesRentResearchFacility    CorporationsCorporationIDRolesHistoryGetOldRoles = "Rent_Research_Facility"
	CorporationsCorporationIDRolesHistoryGetOldRolesSecurityOfficer         CorporationsCorporationIDRolesHistoryGetOldRoles = "Security_Officer"
	CorporationsCorporationIDRolesHistoryGetOldRolesSkillPlanManager        CorporationsCorporationIDRolesHistoryGetOldRoles = "Skill_Plan_Manager"
	CorporationsCorporationIDRolesHistoryGetOldRolesStarbaseDefenseOperator CorporationsCorporationIDRolesHistoryGetOldRoles = "Starbase_Defense_Operator"
	CorporationsCorporationIDRolesHistoryGetOldRolesStarbaseFuelTechnician  CorporationsCorporationIDRolesHistoryGetOldRoles = "Starbase_Fuel_Technician"
	CorporationsCorporationIDRolesHistoryGetOldRolesStationManager          CorporationsCorporationIDRolesHistoryGetOldRoles = "Station_Manager"
	CorporationsCorporationIDRolesHistoryGetOldRolesTrader                  CorporationsCorporationIDRolesHistoryGetOldRoles = "Trader"
)

// Defines values for CorporationsCorporationIDRolesHistoryGetRoleType.
const (
	GrantableRoles        CorporationsCorporationIDRolesHistoryGetRoleType = "grantable_roles"
	GrantableRolesAtBase  CorporationsCorporationIDRolesHistoryGetRoleType = "grantable_roles_at_base"
	GrantableRolesAtHq    CorporationsCorporationIDRolesHistoryGetRoleType = "grantable_roles_at_hq"
	GrantableRolesAtOther CorporationsCorporationIDRolesHistoryGetRoleType = "grantable_roles_at_other"
	Roles                 CorporationsCorporationIDRolesHistoryGetRoleType = "roles"
	RolesAtBase           CorporationsCorporationIDRolesHistoryGetRoleType = "roles_at_base"
	RolesAtHq             CorporationsCorporationIDRolesHistoryGetRoleType = "roles_at_hq"
	RolesAtOther          CorporationsCorporationIDRolesHistoryGetRoleType = "roles_at_other"
)

// Defines values for CorporationsCorporationIDShareholdersGetShareholderType.
const (
	CorporationsCorporationIDShareholdersGetShareholderTypeCharacter   CorporationsCorporationIDShareholdersGetShareholderType = "character"
	CorporationsCorporationIDShareholdersGetShareholderTypeCorporation CorporationsCorporationIDShareholdersGetShareholderType = "corporation"
)

// Defines values for CorporationsCorporationIDStandingsGetFromType.
const (
	CorporationsCorporationIDStandingsGetFromTypeAgent   CorporationsCorporationIDStandingsGetFromType = "agent"
	CorporationsCorporationIDStandingsGetFromTypeFaction CorporationsCorporationIDStandingsGetFromType = "faction"
	CorporationsCorporationIDStandingsGetFromTypeNpcCorp CorporationsCorporationIDStandingsGetFromType = "npc_corp"
)

// Defines values for CorporationsCorporationIDStarbasesGetState.
const (
	CorporationsCorporationIDStarbasesGetStateOffline     CorporationsCorporationIDStarbasesGetState = "offline"
	CorporationsCorporationIDStarbasesGetStateOnline      CorporationsCorporationIDStarbasesGetState = "online"
	CorporationsCorporationIDStarbasesGetStateOnlining    CorporationsCorporationIDStarbasesGetState = "onlining"
	CorporationsCorporationIDStarbasesGetStateReinforced  CorporationsCorporationIDStarbasesGetState = "reinforced"
	CorporationsCorporationIDStarbasesGetStateUnanchoring CorporationsCorporationIDStarbasesGetState = "unanchoring"
)

// Defines values for CorporationsCorporationIDStarbasesStarbaseIDGetAnchor.
const (
	CorporationsCorporationIDStarbasesStarbaseIDGetAnchorAllianceMember              CorporationsCorporationIDStarbasesStarbaseIDGetAnchor = "alliance_member"
	CorporationsCorporationIDStarbasesStarbaseIDGetAnchorConfigStarbaseEquipmentRole CorporationsCorporationIDStarbasesStarbaseIDGetAnchor = "config_starbase_equipment_role"
	CorporationsCorporationIDStarbasesStarbaseIDGetAnchorCorporationMember           CorporationsCorporationIDStarbasesStarbaseIDGetAnchor = "corporation_member"
	CorporationsCorporationIDStarbasesStarbaseIDGetAnchorStarbaseFuelTechnicianRole  CorporationsCorporationIDStarbasesStarbaseIDGetAnchor = "starbase_fuel_technician_role"
)

// Defines values for CorporationsCorporationIDStarbasesStarbaseIDGetFuelBayTake.
const (
	CorporationsCorporationIDStarbasesStarbaseIDGetFuelBayTakeAllianceMember              CorporationsCorporationIDStarbasesStarbaseIDGetFuelBayTake = "alliance_member"
	CorporationsCorporationIDStarbasesStarbaseIDGetFuelBayTakeConfigStarbaseEquipmentRole CorporationsCorporationIDStarbasesStarbaseIDGetFuelBayTake = "config_starbase_equipment_role"
	CorporationsCorporationIDStarbasesStarbaseIDGetFuelBayTakeCorporationMember           CorporationsCorporationIDStarbasesStarbaseIDGetFuelBayTake = "corporation_member"
	CorporationsCorporationIDStarbasesStarbaseIDGetFuelBayTakeStarbaseFuelTechnicianRole  CorporationsCorporationIDStarbasesStarbaseIDGetFuelBayTake = "starbase_fuel_technician_role"
)

// Defines values for CorporationsCorporationIDStarbasesStarbaseIDGetFuelBayView.
const (
	CorporationsCorporationIDStarbasesStarbaseIDGetFuelBayViewAllianceMember              CorporationsCorporationIDStarbasesStarbaseIDGetFuelBayView = "alliance_member"
	CorporationsCorporationIDStarbasesStarbaseIDGetFuelBayViewConfigStarbaseEquipmentRole CorporationsCorporationIDStarbasesStarbaseIDGetFuelBayView = "config_starbase_equipment_role"
	CorporationsCorporationIDStarbasesStarbaseIDGetFuelBayViewCorporationMember           CorporationsCorporationIDStarbasesStarbaseIDGetFuelBayView = "corporation_member"
	CorporationsCorporationIDStarbasesStarbaseIDGetFuelBayViewStarbaseFuelTechnicianRole  CorporationsCorporationIDStarbasesStarbaseIDGetFuelBayView = "starbase_fuel_technician_role"
)

// Defines values for CorporationsCorporationIDStarbasesStarbaseIDGetOffline.
const (
	CorporationsCorporationIDStarbasesStarbaseIDGetOfflineAllianceMember              CorporationsCorporationIDStarbasesStarbaseIDGetOffline = "alliance_member"
	CorporationsCorporationIDStarbasesStarbaseIDGetOfflineConfigStarbaseEquipmentRole CorporationsCorporationIDStarbasesStarbaseIDGetOffline = "config_starbase_equipment_role"
	CorporationsCorporationIDStarbasesStarbaseIDGetOfflineCorporationMember           CorporationsCorporationIDStarbasesStarbaseIDGetOffline = "corporation_member"
	CorporationsCorporationIDStarbasesStarbaseIDGetOfflineStarbaseFuelTechnicianRole  CorporationsCorporationIDStarbasesStarbaseIDGetOffline = "starbase_fuel_technician_role"
)

// Defines values for CorporationsCorporationIDStarbasesStarbaseIDGetOnline.
const (
	CorporationsCorporationIDStarbasesStarbaseIDGetOnlineAllianceMember              CorporationsCorporationIDStarbasesStarbaseIDGetOnline = "alliance_member"
	CorporationsCorporationIDStarbasesStarbaseIDGetOnlineConfigStarbaseEquipmentRole CorporationsCorporationIDStarbasesStarbaseIDGetOnline = "config_starbase_equipment_role"
	CorporationsCorporationIDStarbasesStarbaseIDGetOnlineCorporationMember           CorporationsCorporationIDStarbasesStarbaseIDGetOnline = "corporation_member"
	CorporationsCorporationIDStarbasesStarbaseIDGetOnlineStarbaseFuelTechnicianRole  CorporationsCorporationIDStarbasesStarbaseIDGetOnline = "starbase_fuel_technician_role"
)

// Defines values for CorporationsCorporationIDStarbasesStarbaseIDGetUnanchor.
const (
	CorporationsCorporationIDStarbasesStarbaseIDGetUnanchorAllianceMember              CorporationsCorporationIDStarbasesStarbaseIDGetUnanchor = "alliance_member"
	CorporationsCorporationIDStarbasesStarbaseIDGetUnanchorConfigStarbaseEquipmentRole CorporationsCorporationIDStarbasesStarbaseIDGetUnanchor = "config_starbase_equipment_role"
	CorporationsCorporationIDStarbasesStarbaseIDGetUnanchorCorporationMember           CorporationsCorporationIDStarbasesStarbaseIDGetUnanchor = "corporation_member"
	CorporationsCorporationIDStarbasesStarbaseIDGetUnanchorStarbaseFuelTechnicianRole  CorporationsCorporationIDStarbasesStarbaseIDGetUnanchor = "starbase_fuel_technician_role"
)

// Defines values for CorporationsCorporationIDStructuresGetServicesState.
const (
	CorporationsCorporationIDStructuresGetServicesStateCleanup CorporationsCorporationIDStructuresGetServicesState = "cleanup"
	CorporationsCorporationIDStructuresGetServicesStateOffline CorporationsCorporationIDStructuresGetServicesState = "offline"
	CorporationsCorporationIDStructuresGetServicesStateOnline  CorporationsCorporationIDStructuresGetServicesState = "online"
)

// Defines values for CorporationsCorporationIDStructuresGetState.
const (
	CorporationsCorporationIDStructuresGetStateAnchorVulnerable    CorporationsCorporationIDStructuresGetState = "anchor_vulnerable"
	CorporationsCorporationIDStructuresGetStateAnchoring           CorporationsCorporationIDStructuresGetState = "anchoring"
	CorporationsCorporationIDStructuresGetStateArmorReinforce      CorporationsCorporationIDStructuresGetState = "armor_reinforce"
	CorporationsCorporationIDStructuresGetStateArmorVulnerable     CorporationsCorporationIDStructuresGetState = "armor_vulnerable"
	CorporationsCorporationIDStructuresGetStateDeployVulnerable    CorporationsCorporationIDStructuresGetState = "deploy_vulnerable"
	CorporationsCorporationIDStructuresGetStateFittingInvulnerable CorporationsCorporationIDStructuresGetState = "fitting_invulnerable"
	CorporationsCorporationIDStructuresGetStateHullReinforce       CorporationsCorporationIDStructuresGetState = "hull_reinforce"
	CorporationsCorporationIDStructuresGetStateHullVulnerable      CorporationsCorporationIDStructuresGetState = "hull_vulnerable"
	CorporationsCorporationIDStructuresGetStateOnlineDeprecated    CorporationsCorporationIDStructuresGetState = "online_deprecated"
	CorporationsCorporationIDStructuresGetStateOnliningVulnerable  CorporationsCorporationIDStructuresGetState = "onlining_vulnerable"
	CorporationsCorporationIDStructuresGetStateShieldVulnerable    CorporationsCorporationIDStructuresGetState = "shield_vulnerable"
	CorporationsCorporationIDStructuresGetStateUnanchored          CorporationsCorporationIDStructuresGetState = "unanchored"
	CorporationsCorporationIDStructuresGetStateUnknown             CorporationsCorporationIDStructuresGetState = "unknown"
)

// Defines values for CorporationsCorporationIDTitlesGetGrantableRoles.
const (
	CorporationsCorporationIDTitlesGetGrantableRolesAccountTake1            CorporationsCorporationIDTitlesGetGrantableRoles = "Account_Take_1"
	CorporationsCorporationIDTitlesGetGrantableRolesAccountTake2            CorporationsCorporationIDTitlesGetGrantableRoles = "Account_Take_2"
	CorporationsCorporationIDTitlesGetGrantableRolesAccountTake3            CorporationsCorporationIDTitlesGetGrantableRoles = "Account_Take_3"
	CorporationsCorporationIDTitlesGetGrantableRolesAccountTake4            CorporationsCorporationIDTitlesGetGrantableRoles = "Account_Take_4"
	CorporationsCorporationIDTitlesGetGrantableRolesAccountTake5            CorporationsCorporationIDTitlesGetGrantableRoles = "Account_Take_5"
	CorporationsCorporationIDTitlesGetGrantableRolesAccountTake6            CorporationsCorporationIDTitlesGetGrantableRoles = "Account_Take_6"
	CorporationsCorporationIDTitlesGetGrantableRolesAccountTake7            CorporationsCorporationIDTitlesGetGrantableRoles = "Account_Take_7"
	CorporationsCorporationIDTitlesGetGrantableRolesAccountant              CorporationsCorporationIDTitlesGetGrantableRoles = "Accountant"
	CorporationsCorporationIDTitlesGetGrantableRolesAuditor                 CorporationsCorporationIDTitlesGetGrantableRoles = "Auditor"
	CorporationsCorporationIDTitlesGetGrantableRolesBrandManager            CorporationsCorporationIDTitlesGetGrantableRoles = "Brand_Manager"
	CorporationsCorporationIDTitlesGetGrantableRolesCommunicationsOfficer   CorporationsCorporationIDTitlesGetGrantableRoles = "Communications_Officer"
	CorporationsCorporationIDTitlesGetGrantableRolesConfigEquipment         CorporationsCorporationIDTitlesGetGrantableRoles = "Config_Equipment"
	CorporationsCorporationIDTitlesGetGrantableRolesConfigStarbaseEquipment CorporationsCorporationIDTitlesGetGrantableRoles = "Config_Starbase_Equipment"
	CorporationsCorporationIDTitlesGetGrantableRolesContainerTake1          CorporationsCorporationIDTitlesGetGrantableRoles = "Container_Take_1"
	CorporationsCorporationIDTitlesGetGrantableRolesContainerTake2          CorporationsCorporationIDTitlesGetGrantableRoles = "Container_Take_2"
	CorporationsCorporationIDTitlesGetGrantableRolesContainerTake3          CorporationsCorporationIDTitlesGetGrantableRoles = "Container_Take_3"
	CorporationsCorporationIDTitlesGetGrantableRolesContainerTake4          CorporationsCorporationIDTitlesGetGrantableRoles = "Container_Take_4"
	CorporationsCorporationIDTitlesGetGrantableRolesContainerTake5          CorporationsCorporationIDTitlesGetGrantableRoles = "Container_Take_5"
	CorporationsCorporationIDTitlesGetGrantableRolesContainerTake6          CorporationsCorporationIDTitlesGetGrantableRoles = "Container_Take_6"
	CorporationsCorporationIDTitlesGetGrantableRolesContainerTake7          CorporationsCorporationIDTitlesGetGrantableRoles = "Container_Take_7"
	CorporationsCorporationIDTitlesGetGrantableRolesContractManager         CorporationsCorporationIDTitlesGetGrantableRoles = "Contract_Manager"
	CorporationsCorporationIDTitlesGetGrantableRolesDeliveriesContainerTake CorporationsCorporationIDTitlesGetGrantableRoles = "Deliveries_Container_Take"
	CorporationsCorporationIDTitlesGetGrantableRolesDeliveriesQuery         CorporationsCorporationIDTitlesGetGrantableRoles = "Deliveries_Query"
	CorporationsCorporationIDTitlesGetGrantableRolesDeliveriesTake          CorporationsCorporationIDTitlesGetGrantableRoles = "Deliveries_Take"
	CorporationsCorporationIDTitlesGetGrantableRolesDiplomat                CorporationsCorporationIDTitlesGetGrantableRoles = "Diplomat"
	CorporationsCorporationIDTitlesGetGrantableRolesDirector                CorporationsCorporationIDTitlesGetGrantableRoles = "Director"
	CorporationsCorporationIDTitlesGetGrantableRolesFactoryManager          CorporationsCorporationIDTitlesGetGrantableRoles = "Factory_Manager"
	CorporationsCorporationIDTitlesGetGrantableRolesFittingManager          CorporationsCorporationIDTitlesGetGrantableRoles = "Fitting_Manager"
	CorporationsCorporationIDTitlesGetGrantableRolesHangarQuery1            CorporationsCorporationIDTitlesGetGrantableRoles = "Hangar_Query_1"
	CorporationsCorporationIDTitlesGetGrantableRolesHangarQuery2            CorporationsCorporationIDTitlesGetGrantableRoles = "Hangar_Query_2"
	CorporationsCorporationIDTitlesGetGrantableRolesHangarQuery3            CorporationsCorporationIDTitlesGetGrantableRoles = "Hangar_Query_3"
	CorporationsCorporationIDTitlesGetGrantableRolesHangarQuery4            CorporationsCorporationIDTitlesGetGrantableRoles = "Hangar_Query_4"
	CorporationsCorporationIDTitlesGetGrantableRolesHangarQuery5            CorporationsCorporationIDTitlesGetGrantableRoles = "Hangar_Query_5"
	CorporationsCorporationIDTitlesGetGrantableRolesHangarQuery6            CorporationsCorporationIDTitlesGetGrantableRoles = "Hangar_Query_6"
	CorporationsCorporationIDTitlesGetGrantableRolesHangarQuery7            CorporationsCorporationIDTitlesGetGrantableRoles = "Hangar_Query_7"
	CorporationsCorporationIDTitlesGetGrantableRolesHangarTake1             CorporationsCorporationIDTitlesGetGrantableRoles = "Hangar_Take_1"
	CorporationsCorporationIDTitlesGetGrantableRolesHangarTake2             CorporationsCorporationIDTitlesGetGrantableRoles = "Hangar_Take_2"
	CorporationsCorporationIDTitlesGetGrantableRolesHangarTake3             CorporationsCorporationIDTitlesGetGrantableRoles = "Hangar_Take_3"
	CorporationsCorporationIDTitlesGetGrantableRolesHangarTake4             CorporationsCorporationIDTitlesGetGrantableRoles = "Hangar_Take_4"
	CorporationsCorporationIDTitlesGetGrantableRolesHangarTake5             CorporationsCorporationIDTitlesGetGrantableRoles = "Hangar_Take_5"
	CorporationsCorporationIDTitlesGetGrantableRolesHangarTake6             CorporationsCorporationIDTitlesGetGrantableRoles = "Hangar_Take_6"
	CorporationsCorporationIDTitlesGetGrantableRolesHangarTake7             CorporationsCorporationIDTitlesGetGrantableRoles = "Hangar_Take_7"
	CorporationsCorporationIDTitlesGetGrantableRolesJuniorAccountant        CorporationsCorporationIDTitlesGetGrantableRoles = "Junior_Accountant"
	CorporationsCorporationIDTitlesGetGrantableRolesPersonnelManager        CorporationsCorporationIDTitlesGetGrantableRoles = "Personnel_Manager"
	CorporationsCorporationIDTitlesGetGrantableRolesProjectManager          CorporationsCorporationIDTitlesGetGrantableRoles = "Project_Manager"
	CorporationsCorporationIDTitlesGetGrantableRolesRentFactoryFacility     CorporationsCorporationIDTitlesGetGrantableRoles = "Rent_Factory_Facility"
	CorporationsCorporationIDTitlesGetGrantableRolesRentOffice              CorporationsCorporationIDTitlesGetGrantableRoles = "Rent_Office"
	CorporationsCorporationIDTitlesGetGrantableRolesRentResearchFacility    CorporationsCorporationIDTitlesGetGrantableRoles = "Rent_Research_Facility"
	CorporationsCorporationIDTitlesGetGrantableRolesSecurityOfficer         CorporationsCorporationIDTitlesGetGrantableRoles = "Security_Officer"
	CorporationsCorporationIDTitlesGetGrantableRolesSkillPlanManager        CorporationsCorporationIDTitlesGetGrantableRoles = "Skill_Plan_Manager"
	CorporationsCorporationIDTitlesGetGrantableRolesStarbaseDefenseOperator CorporationsCorporationIDTitlesGetGrantableRoles = "Starbase_Defense_Operator"
	CorporationsCorporationIDTitlesGetGrantableRolesStarbaseFuelTechnician  CorporationsCorporationIDTitlesGetGrantableRoles = "Starbase_Fuel_Technician"
	CorporationsCorporationIDTitlesGetGrantableRolesStationManager          CorporationsCorporationIDTitlesGetGrantableRoles = "Station_Manager"
	CorporationsCorporationIDTitlesGetGrantableRolesTrader                  CorporationsCorporationIDTitlesGetGrantableRoles = "Trader"
)

// Defines values for CorporationsCorporationIDTitlesGetGrantableRolesAtBase.
const (
	CorporationsCorporationIDTitlesGetGrantableRolesAtBaseAccountTake1            CorporationsCorporationIDTitlesGetGrantableRolesAtBase = "Account_Take_1"
	CorporationsCorporationIDTitlesGetGrantableRolesAtBaseAccountTake2            CorporationsCorporationIDTitlesGetGrantableRolesAtBase = "Account_Take_2"
	CorporationsCorporationIDTitlesGetGrantableRolesAtBaseAccountTake3            CorporationsCorporationIDTitlesGetGrantableRolesAtBase = "Account_Take_3"
	CorporationsCorporationIDTitlesGetGrantableRolesAtBaseAccountTake4            CorporationsCorporationIDTitlesGetGrantableRolesAtBase = "Account_Take_4"
	CorporationsCorporationIDTitlesGetGrantableRolesAtBaseAccountTake5            CorporationsCorporationIDTitlesGetGrantableRolesAtBase = "Account_Take_5"
	CorporationsCorporationIDTitlesGetGrantableRolesAtBaseAccountTake6            CorporationsCorporationIDTitlesGetGrantableRolesAtBase = "Account_Take_6"
	CorporationsCorporationIDTitlesGetGrantableRolesAtBaseAccountTake7            CorporationsCorporationIDTitlesGetGrantableRolesAtBase = "Account_Take_7"
	CorporationsCorporationIDTitlesGetGrantableRolesAtBaseAccountant              CorporationsCorporationIDTitlesGetGrantableRolesAtBase = "Accountant"
	CorporationsCorporationIDTitlesGetGrantableRolesAtBaseAuditor                 CorporationsCorporationIDTitlesGetGrantableRolesAtBase = "Auditor"
	CorporationsCorporationIDTitlesGetGrantableRolesAtBaseBrandManager            CorporationsCorporationIDTitlesGetGrantableRolesAtBase = "Brand_Manager"
	CorporationsCorporationIDTitlesGetGrantableRolesAtBaseCommunicationsOfficer   CorporationsCorporationIDTitlesGetGrantableRolesAtBase = "Communications_Officer"
	CorporationsCorporationIDTitlesGetGrantableRolesAtBaseConfigEquipment         CorporationsCorporationIDTitlesGetGrantableRolesAtBase = "Config_Equipment"
	CorporationsCorporationIDTitlesGetGrantableRolesAtBaseConfigStarbaseEquipment CorporationsCorporationIDTitlesGetGrantableRolesAtBase = "Config_Starbase_Equipment"
	CorporationsCorporationIDTitlesGetGrantableRolesAtBaseContainerTake1          CorporationsCorporationIDTitlesGetGrantableRolesAtBase = "Container_Take_1"
	CorporationsCorporationIDTitlesGetGrantableRolesAtBaseContainerTake2          CorporationsCorporationIDTitlesGetGrantableRolesAtBase = "Container_Take_2"
	CorporationsCorporationIDTitlesGetGrantableRolesAtBaseContainerTake3          CorporationsCorporationIDTitlesGetGrantableRolesAtBase = "Container_Take_3"
	CorporationsCorporationIDTitlesGetGrantableRolesAtBaseContainerTake4          CorporationsCorporationIDTitlesGetGrantableRolesAtBase = "Container_Take_4"
	CorporationsCorporationIDTitlesGetGrantableRolesAtBaseContainerTake5          CorporationsCorporationIDTitlesGetGrantableRolesAtBase = "Container_Take_5"
	CorporationsCorporationIDTitlesGetGrantableRolesAtBaseContainerTake6          CorporationsCorporationIDTitlesGetGrantableRolesAtBase = "Container_Take_6"
	CorporationsCorporationIDTitlesGetGrantableRolesAtBaseContainerTake7          CorporationsCorporationIDTitlesGetGrantableRolesAtBase = "Container_Take_7"
	CorporationsCorporationIDTitlesGetGrantableRolesAtBaseContractManager         CorporationsCorporationIDTitlesGetGrantableRolesAtBase = "Contract_Manager"
	CorporationsCorporationIDTitlesGetGrantableRolesAtBaseDeliveriesContainerTake CorporationsCorporationIDTitlesGetGrantableRolesAtBase = "Deliveries_Container_Take"
	CorporationsCorporationIDTitlesGetGrantableRolesAtBaseDeliveriesQuery         CorporationsCorporationIDTitlesGetGrantableRolesAtBase = "Deliveries_Query"
	CorporationsCorporationIDTitlesGetGrantableRolesAtBaseDeliveriesTake          CorporationsCorporationIDTitlesGetGrantableRolesAtBase = "Deliveries_Take"
	CorporationsCorporationIDTitlesGetGrantableRolesAtBaseDiplomat                CorporationsCorporationIDTitlesGetGrantableRolesAtBase = "Diplomat"
	CorporationsCorporationIDTitlesGetGrantableRolesAtBaseDirector                CorporationsCorporationIDTitlesGetGrantableRolesAtBase = "Director"
	CorporationsCorporationIDTitlesGetGrantableRolesAtBaseFactoryManager          CorporationsCorporationIDTitlesGetGrantableRolesAtBase = "Factory_Manager"
	CorporationsCorporationIDTitlesGetGrantableRolesAtBaseFittingManager          CorporationsCorporationIDTitlesGetGrantableRolesAtBase = "Fitting_Manager"
	CorporationsCorporationIDTitlesGetGrantableRolesAtBaseHangarQuery1            CorporationsCorporationIDTitlesGetGrantableRolesAtBase = "Hangar_Query_1"
	CorporationsCorporationIDTitlesGetGrantableRolesAtBaseHangarQuery2            CorporationsCorporationIDTitlesGetGrantableRolesAtBase = "Hangar_Query_2"
	CorporationsCorporationIDTitlesGetGrantableRolesAtBaseHangarQuery3            CorporationsCorporationIDTitlesGetGrantableRolesAtBase = "Hangar_Query_3"
	CorporationsCorporationIDTitlesGetGrantableRolesAtBaseHangarQuery4            CorporationsCorporationIDTitlesGetGrantableRolesAtBase = "Hangar_Query_4"
	CorporationsCorporationIDTitlesGetGrantableRolesAtBaseHangarQuery5            CorporationsCorporationIDTitlesGetGrantableRolesAtBase = "Hangar_Query_5"
	CorporationsCorporationIDTitlesGetGrantableRolesAtBaseHangarQuery6            CorporationsCorporationIDTitlesGetGrantableRolesAtBase = "Hangar_Query_6"
	CorporationsCorporationIDTitlesGetGrantableRolesAtBaseHangarQuery7            CorporationsCorporationIDTitlesGetGrantableRolesAtBase = "Hangar_Query_7"
	CorporationsCorporationIDTitlesGetGrantableRolesAtBaseHangarTake1             CorporationsCorporationIDTitlesGetGrantableRolesAtBase = "Hangar_Take_1"
	CorporationsCorporationIDTitlesGetGrantableRolesAtBaseHangarTake2             CorporationsCorporationIDTitlesGetGrantableRolesAtBase = "Hangar_Take_2"
	CorporationsCorporationIDTitlesGetGrantableRolesAtBaseHangarTake3             CorporationsCorporationIDTitlesGetGrantableRolesAtBase = "Hangar_Take_3"
	CorporationsCorporationIDTitlesGetGrantableRolesAtBaseHangarTake4             CorporationsCorporationIDTitlesGetGrantableRolesAtBase = "Hangar_Take_4"
	CorporationsCorporationIDTitlesGetGrantableRolesAtBaseHangarTake5             CorporationsCorporationIDTitlesGetGrantableRolesAtBase = "Hangar_Take_5"
	CorporationsCorporationIDTitlesGetGrantableRolesAtBaseHangarTake6             CorporationsCorporationIDTitlesGetGrantableRolesAtBase = "Hangar_Take_6"
	CorporationsCorporationIDTitlesGetGrantableRolesAtBaseHangarTake7             CorporationsCorporationIDTitlesGetGrantableRolesAtBase = "Hangar_Take_7"
	CorporationsCorporationIDTitlesGetGrantableRolesAtBaseJuniorAccountant        CorporationsCorporationIDTitlesGetGrantableRolesAtBase = "Junior_Accountant"
	CorporationsCorporationIDTitlesGetGrantableRolesAtBasePersonnelManager        CorporationsCorporationIDTitlesGetGrantableRolesAtBase = "Personnel_Manager"
	CorporationsCorporationIDTitlesGetGrantableRolesAtBaseProjectManager          CorporationsCorporationIDTitlesGetGrantableRolesAtBase = "Project_Manager"
	CorporationsCorporationIDTitlesGetGrantableRolesAtBaseRentFactoryFacility     CorporationsCorporationIDTitlesGetGrantableRolesAtBase = "Rent_Factory_Facility"
	CorporationsCorporationIDTitlesGetGrantableRolesAtBaseRentOffice              CorporationsCorporationIDTitlesGetGrantableRolesAtBase = "Rent_Office"
	CorporationsCorporationIDTitlesGetGrantableRolesAtBaseRentResearchFacility    CorporationsCorporationIDTitlesGetGrantableRolesAtBase = "Rent_Research_Facility"
	CorporationsCorporationIDTitlesGetGrantableRolesAtBaseSecurityOfficer         CorporationsCorporationIDTitlesGetGrantableRolesAtBase = "Security_Officer"
	CorporationsCorporationIDTitlesGetGrantableRolesAtBaseSkillPlanManager        CorporationsCorporationIDTitlesGetGrantableRolesAtBase = "Skill_Plan_Manager"
	CorporationsCorporationIDTitlesGetGrantableRolesAtBaseStarbaseDefenseOperator CorporationsCorporationIDTitlesGetGrantableRolesAtBase = "Starbase_Defense_Operator"
	CorporationsCorporationIDTitlesGetGrantableRolesAtBaseStarbaseFuelTechnician  CorporationsCorporationIDTitlesGetGrantableRolesAtBase = "Starbase_Fuel_Technician"
	CorporationsCorporationIDTitlesGetGrantableRolesAtBaseStationManager          CorporationsCorporationIDTitlesGetGrantableRolesAtBase = "Station_Manager"
	CorporationsCorporationIDTitlesGetGrantableRolesAtBaseTrader                  CorporationsCorporationIDTitlesGetGrantableRolesAtBase = "Trader"
)

// Defines values for CorporationsCorporationIDTitlesGetGrantableRolesAtHq.
const (
	CorporationsCorporationIDTitlesGetGrantableRolesAtHqAccountTake1            CorporationsCorporationIDTitlesGetGrantableRolesAtHq = "Account_Take_1"
	CorporationsCorporationIDTitlesGetGrantableRolesAtHqAccountTake2            CorporationsCorporationIDTitlesGetGrantableRolesAtHq = "Account_Take_2"
	CorporationsCorporationIDTitlesGetGrantableRolesAtHqAccountTake3            CorporationsCorporationIDTitlesGetGrantableRolesAtHq = "Account_Take_3"
	CorporationsCorporationIDTitlesGetGrantableRolesAtHqAccountTake4            CorporationsCorporationIDTitlesGetGrantableRolesAtHq = "Account_Take_4"
	CorporationsCorporationIDTitlesGetGrantableRolesAtHqAccountTake5            CorporationsCorporationIDTitlesGetGrantableRolesAtHq = "Account_Take_5"
	CorporationsCorporationIDTitlesGetGrantableRolesAtHqAccountTake6            CorporationsCorporationIDTitlesGetGrantableRolesAtHq = "Account_Take_6"
	CorporationsCorporationIDTitlesGetGrantableRolesAtHqAccountTake7            CorporationsCorporationIDTitlesGetGrantableRolesAtHq = "Account_Take_7"
	CorporationsCorporationIDTitlesGetGrantableRolesAtHqAccountant              CorporationsCorporationIDTitlesGetGrantableRolesAtHq = "Accountant"
	CorporationsCorporationIDTitlesGetGrantableRolesAtHqAuditor                 CorporationsCorporationIDTitlesGetGrantableRolesAtHq = "Auditor"
	CorporationsCorporationIDTitlesGetGrantableRolesAtHqBrandManager            CorporationsCorporationIDTitlesGetGrantableRolesAtHq = "Brand_Manager"
	CorporationsCorporationIDTitlesGetGrantableRolesAtHqCommunicationsOfficer   CorporationsCorporationIDTitlesGetGrantableRolesAtHq = "Communications_Officer"
	CorporationsCorporationIDTitlesGetGrantableRolesAtHqConfigEquipment         CorporationsCorporationIDTitlesGetGrantableRolesAtHq = "Config_Equipment"
	CorporationsCorporationIDTitlesGetGrantableRolesAtHqConfigStarbaseEquipment CorporationsCorporationIDTitlesGetGrantableRolesAtHq = "Config_Starbase_Equipment"
	CorporationsCorporationIDTitlesGetGrantableRolesAtHqContainerTake1          CorporationsCorporationIDTitlesGetGrantableRolesAtHq = "Container_Take_1"
	CorporationsCorporationIDTitlesGetGrantableRolesAtHqContainerTake2          CorporationsCorporationIDTitlesGetGrantableRolesAtHq = "Container_Take_2"
	CorporationsCorporationIDTitlesGetGrantableRolesAtHqContainerTake3          CorporationsCorporationIDTitlesGetGrantableRolesAtHq = "Container_Take_3"
	CorporationsCorporationIDTitlesGetGrantableRolesAtHqContainerTake4          CorporationsCorporationIDTitlesGetGrantableRolesAtHq = "Container_Take_4"
	CorporationsCorporationIDTitlesGetGrantableRolesAtHqContainerTake5          CorporationsCorporationIDTitlesGetGrantableRolesAtHq = "Container_Take_5"
	CorporationsCorporationIDTitlesGetGrantableRolesAtHqContainerTake6          CorporationsCorporationIDTitlesGetGrantableRolesAtHq = "Container_Take_6"
	CorporationsCorporationIDTitlesGetGrantableRolesAtHqContainerTake7          CorporationsCorporationIDTitlesGetGrantableRolesAtHq = "Container_Take_7"
	CorporationsCorporationIDTitlesGetGrantableRolesAtHqContractManager         CorporationsCorporationIDTitlesGetGrantableRolesAtHq = "Contract_Manager"
	CorporationsCorporationIDTitlesGetGrantableRolesAtHqDeliveriesContainerTake CorporationsCorporationIDTitlesGetGrantableRolesAtHq = "Deliveries_Container_Take"
	CorporationsCorporationIDTitlesGetGrantableRolesAtHqDeliveriesQuery         CorporationsCorporationIDTitlesGetGrantableRolesAtHq = "Deliveries_Query"
	CorporationsCorporationIDTitlesGetGrantableRolesAtHqDeliveriesTake          CorporationsCorporationIDTitlesGetGrantableRolesAtHq = "Deliveries_Take"
	CorporationsCorporationIDTitlesGetGrantableRolesAtHqDiplomat                CorporationsCorporationIDTitlesGetGrantableRolesAtHq = "Diplomat"
	CorporationsCorporationIDTitlesGetGrantableRolesAtHqDirector                CorporationsCorporationIDTitlesGetGrantableRolesAtHq = "Director"
	CorporationsCorporationIDTitlesGetGrantableRolesAtHqFactoryManager          CorporationsCorporationIDTitlesGetGrantableRolesAtHq = "Factory_Manager"
	CorporationsCorporationIDTitlesGetGrantableRolesAtHqFittingManager          CorporationsCorporationIDTitlesGetGrantableRolesAtHq = "Fitting_Manager"
	CorporationsCorporationIDTitlesGetGrantableRolesAtHqHangarQuery1            CorporationsCorporationIDTitlesGetGrantableRolesAtHq = "Hangar_Query_1"
	CorporationsCorporationIDTitlesGetGrantableRolesAtHqHangarQuery2            CorporationsCorporationIDTitlesGetGrantableRolesAtHq = "Hangar_Query_2"
	CorporationsCorporationIDTitlesGetGrantableRolesAtHqHangarQuery3            CorporationsCorporationIDTitlesGetGrantableRolesAtHq = "Hangar_Query_3"
	CorporationsCorporationIDTitlesGetGrantableRolesAtHqHangarQuery4            CorporationsCorporationIDTitlesGetGrantableRolesAtHq = "Hangar_Query_4"
	CorporationsCorporationIDTitlesGetGrantableRolesAtHqHangarQuery5            CorporationsCorporationIDTitlesGetGrantableRolesAtHq = "Hangar_Query_5"
	CorporationsCorporationIDTitlesGetGrantableRolesAtHqHangarQuery6            CorporationsCorporationIDTitlesGetGrantableRolesAtHq = "Hangar_Query_6"
	CorporationsCorporationIDTitlesGetGrantableRolesAtHqHangarQuery7            CorporationsCorporationIDTitlesGetGrantableRolesAtHq = "Hangar_Query_7"
	CorporationsCorporationIDTitlesGetGrantableRolesAtHqHangarTake1             CorporationsCorporationIDTitlesGetGrantableRolesAtHq = "Hangar_Take_1"
	CorporationsCorporationIDTitlesGetGrantableRolesAtHqHangarTake2             CorporationsCorporationIDTitlesGetGrantableRolesAtHq = "Hangar_Take_2"
	CorporationsCorporationIDTitlesGetGrantableRolesAtHqHangarTake3             CorporationsCorporationIDTitlesGetGrantableRolesAtHq = "Hangar_Take_3"
	CorporationsCorporationIDTitlesGetGrantableRolesAtHqHangarTake4             CorporationsCorporationIDTitlesGetGrantableRolesAtHq = "Hangar_Take_4"
	CorporationsCorporationIDTitlesGetGrantableRolesAtHqHangarTake5             CorporationsCorporationIDTitlesGetGrantableRolesAtHq = "Hangar_Take_5"
	CorporationsCorporationIDTitlesGetGrantableRolesAtHqHangarTake6             CorporationsCorporationIDTitlesGetGrantableRolesAtHq = "Hangar_Take_6"
	CorporationsCorporationIDTitlesGetGrantableRolesAtHqHangarTake7             CorporationsCorporationIDTitlesGetGrantableRolesAtHq = "Hangar_Take_7"
	CorporationsCorporationIDTitlesGetGrantableRolesAtHqJuniorAccountant        CorporationsCorporationIDTitlesGetGrantableRolesAtHq = "Junior_Accountant"
	CorporationsCorporationIDTitlesGetGrantableRolesAtHqPersonnelManager        CorporationsCorporationIDTitlesGetGrantableRolesAtHq = "Personnel_Manager"
	CorporationsCorporationIDTitlesGetGrantableRolesAtHqProjectManager          CorporationsCorporationIDTitlesGetGrantableRolesAtHq = "Project_Manager"
	CorporationsCorporationIDTitlesGetGrantableRolesAtHqRentFactoryFacility     CorporationsCorporationIDTitlesGetGrantableRolesAtHq = "Rent_Factory_Facility"
	CorporationsCorporationIDTitlesGetGrantableRolesAtHqRentOffice              CorporationsCorporationIDTitlesGetGrantableRolesAtHq = "Rent_Office"
	CorporationsCorporationIDTitlesGetGrantableRolesAtHqRentResearchFacility    CorporationsCorporationIDTitlesGetGrantableRolesAtHq = "Rent_Research_Facility"
	CorporationsCorporationIDTitlesGetGrantableRolesAtHqSecurityOfficer         CorporationsCorporationIDTitlesGetGrantableRolesAtHq = "Security_Officer"
	CorporationsCorporationIDTitlesGetGrantableRolesAtHqSkillPlanManager        CorporationsCorporationIDTitlesGetGrantableRolesAtHq = "Skill_Plan_Manager"
	CorporationsCorporationIDTitlesGetGrantableRolesAtHqStarbaseDefenseOperator CorporationsCorporationIDTitlesGetGrantableRolesAtHq = "Starbase_Defense_Operator"
	CorporationsCorporationIDTitlesGetGrantableRolesAtHqStarbaseFuelTechnician  CorporationsCorporationIDTitlesGetGrantableRolesAtHq = "Starbase_Fuel_Technician"
	CorporationsCorporationIDTitlesGetGrantableRolesAtHqStationManager          CorporationsCorporationIDTitlesGetGrantableRolesAtHq = "Station_Manager"
	CorporationsCorporationIDTitlesGetGrantableRolesAtHqTrader                  CorporationsCorporationIDTitlesGetGrantableRolesAtHq = "Trader"
)

// Defines values for CorporationsCorporationIDTitlesGetGrantableRolesAtOther.
const (
	CorporationsCorporationIDTitlesGetGrantableRolesAtOtherAccountTake1            CorporationsCorporationIDTitlesGetGrantableRolesAtOther = "Account_Take_1"
	CorporationsCorporationIDTitlesGetGrantableRolesAtOtherAccountTake2            CorporationsCorporationIDTitlesGetGrantableRolesAtOther = "Account_Take_2"
	CorporationsCorporationIDTitlesGetGrantableRolesAtOtherAccountTake3            CorporationsCorporationIDTitlesGetGrantableRolesAtOther = "Account_Take_3"
	CorporationsCorporationIDTitlesGetGrantableRolesAtOtherAccountTake4            CorporationsCorporationIDTitlesGetGrantableRolesAtOther = "Account_Take_4"
	CorporationsCorporationIDTitlesGetGrantableRolesAtOtherAccountTake5            CorporationsCorporationIDTitlesGetGrantableRolesAtOther = "Account_Take_5"
	CorporationsCorporationIDTitlesGetGrantableRolesAtOtherAccountTake6            CorporationsCorporationIDTitlesGetGrantableRolesAtOther = "Account_Take_6"
	CorporationsCorporationIDTitlesGetGrantableRolesAtOtherAccountTake7            CorporationsCorporationIDTitlesGetGrantableRolesAtOther = "Account_Take_7"
	CorporationsCorporationIDTitlesGetGrantableRolesAtOtherAccountant              CorporationsCorporationIDTitlesGetGrantableRolesAtOther = "Accountant"
	CorporationsCorporationIDTitlesGetGrantableRolesAtOtherAuditor                 CorporationsCorporationIDTitlesGetGrantableRolesAtOther = "Auditor"
	CorporationsCorporationIDTitlesGetGrantableRolesAtOtherBrandManager            CorporationsCorporationIDTitlesGetGrantableRolesAtOther = "Brand_Manager"
	CorporationsCorporationIDTitlesGetGrantableRolesAtOtherCommunicationsOfficer   CorporationsCorporationIDTitlesGetGrantableRolesAtOther = "Communications_Officer"
	CorporationsCorporationIDTitlesGetGrantableRolesAtOtherConfigEquipment         CorporationsCorporationIDTitlesGetGrantableRolesAtOther = "Config_Equipment"
	CorporationsCorporationIDTitlesGetGrantableRolesAtOtherConfigStarbaseEquipment CorporationsCorporationIDTitlesGetGrantableRolesAtOther = "Config_Starbase_Equipment"
	CorporationsCorporationIDTitlesGetGrantableRolesAtOtherContainerTake1          CorporationsCorporationIDTitlesGetGrantableRolesAtOther = "Container_Take_1"
	CorporationsCorporationIDTitlesGetGrantableRolesAtOtherContainerTake2          CorporationsCorporationIDTitlesGetGrantableRolesAtOther = "Container_Take_2"
	CorporationsCorporationIDTitlesGetGrantableRolesAtOtherContainerTake3          CorporationsCorporationIDTitlesGetGrantableRolesAtOther = "Container_Take_3"
	CorporationsCorporationIDTitlesGetGrantableRolesAtOtherContainerTake4          CorporationsCorporationIDTitlesGetGrantableRolesAtOther = "Container_Take_4"
	CorporationsCorporationIDTitlesGetGrantableRolesAtOtherContainerTake5          CorporationsCorporationIDTitlesGetGrantableRolesAtOther = "Container_Take_5"
	CorporationsCorporationIDTitlesGetGrantableRolesAtOtherContainerTake6          CorporationsCorporationIDTitlesGetGrantableRolesAtOther = "Container_Take_6"
	CorporationsCorporationIDTitlesGetGrantableRolesAtOtherContainerTake7          CorporationsCorporationIDTitlesGetGrantableRolesAtOther = "Container_Take_7"
	CorporationsCorporationIDTitlesGetGrantableRolesAtOtherContractManager         CorporationsCorporationIDTitlesGetGrantableRolesAtOther = "Contract_Manager"
	CorporationsCorporationIDTitlesGetGrantableRolesAtOtherDeliveriesContainerTake CorporationsCorporationIDTitlesGetGrantableRolesAtOther = "Deliveries_Container_Take"
	CorporationsCorporationIDTitlesGetGrantableRolesAtOtherDeliveriesQuery         CorporationsCorporationIDTitlesGetGrantableRolesAtOther = "Deliveries_Query"
	CorporationsCorporationIDTitlesGetGrantableRolesAtOtherDeliveriesTake          CorporationsCorporationIDTitlesGetGrantableRolesAtOther = "Deliveries_Take"
	CorporationsCorporationIDTitlesGetGrantableRolesAtOtherDiplomat                CorporationsCorporationIDTitlesGetGrantableRolesAtOther = "Diplomat"
	CorporationsCorporationIDTitlesGetGrantableRolesAtOtherDirector                CorporationsCorporationIDTitlesGetGrantableRolesAtOther = "Director"
	CorporationsCorporationIDTitlesGetGrantableRolesAtOtherFactoryManager          CorporationsCorporationIDTitlesGetGrantableRolesAtOther = "Factory_Manager"
	CorporationsCorporationIDTitlesGetGrantableRolesAtOtherFittingManager          CorporationsCorporationIDTitlesGetGrantableRolesAtOther = "Fitting_Manager"
	CorporationsCorporationIDTitlesGetGrantableRolesAtOtherHangarQuery1            CorporationsCorporationIDTitlesGetGrantableRolesAtOther = "Hangar_Query_1"
	CorporationsCorporationIDTitlesGetGrantableRolesAtOtherHangarQuery2            CorporationsCorporationIDTitlesGetGrantableRolesAtOther = "Hangar_Query_2"
	CorporationsCorporationIDTitlesGetGrantableRolesAtOtherHangarQuery3            CorporationsCorporationIDTitlesGetGrantableRolesAtOther = "Hangar_Query_3"
	CorporationsCorporationIDTitlesGetGrantableRolesAtOtherHangarQuery4            CorporationsCorporationIDTitlesGetGrantableRolesAtOther = "Hangar_Query_4"
	CorporationsCorporationIDTitlesGetGrantableRolesAtOtherHangarQuery5            CorporationsCorporationIDTitlesGetGrantableRolesAtOther = "Hangar_Query_5"
	CorporationsCorporationIDTitlesGetGrantableRolesAtOtherHangarQuery6            CorporationsCorporationIDTitlesGetGrantableRolesAtOther = "Hangar_Query_6"
	CorporationsCorporationIDTitlesGetGrantableRolesAtOtherHangarQuery7            CorporationsCorporationIDTitlesGetGrantableRolesAtOther = "Hangar_Query_7"
	CorporationsCorporationIDTitlesGetGrantableRolesAtOtherHangarTake1             CorporationsCorporationIDTitlesGetGrantableRolesAtOther = "Hangar_Take_1"
	CorporationsCorporationIDTitlesGetGrantableRolesAtOtherHangarTake2             CorporationsCorporationIDTitlesGetGrantableRolesAtOther = "Hangar_Take_2"
	CorporationsCorporationIDTitlesGetGrantableRolesAtOtherHangarTake3             CorporationsCorporationIDTitlesGetGrantableRolesAtOther = "Hangar_Take_3"
	CorporationsCorporationIDTitlesGetGrantableRolesAtOtherHangarTake4             CorporationsCorporationIDTitlesGetGrantableRolesAtOther = "Hangar_Take_4"
	CorporationsCorporationIDTitlesGetGrantableRolesAtOtherHangarTake5             CorporationsCorporationIDTitlesGetGrantableRolesAtOther = "Hangar_Take_5"
	CorporationsCorporationIDTitlesGetGrantableRolesAtOtherHangarTake6             CorporationsCorporationIDTitlesGetGrantableRolesAtOther = "Hangar_Take_6"
	CorporationsCorporationIDTitlesGetGrantableRolesAtOtherHangarTake7             CorporationsCorporationIDTitlesGetGrantableRolesAtOther = "Hangar_Take_7"
	CorporationsCorporationIDTitlesGetGrantableRolesAtOtherJuniorAccountant        CorporationsCorporationIDTitlesGetGrantableRolesAtOther = "Junior_Accountant"
	CorporationsCorporationIDTitlesGetGrantableRolesAtOtherPersonnelManager        CorporationsCorporationIDTitlesGetGrantableRolesAtOther = "Personnel_Manager"
	CorporationsCorporationIDTitlesGetGrantableRolesAtOtherProjectManager          CorporationsCorporationIDTitlesGetGrantableRolesAtOther = "Project_Manager"
	CorporationsCorporationIDTitlesGetGrantableRolesAtOtherRentFactoryFacility     CorporationsCorporationIDTitlesGetGrantableRolesAtOther = "Rent_Factory_Facility"
	CorporationsCorporationIDTitlesGetGrantableRolesAtOtherRentOffice              CorporationsCorporationIDTitlesGetGrantableRolesAtOther = "Rent_Office"
	CorporationsCorporationIDTitlesGetGrantableRolesAtOtherRentResearchFacility    CorporationsCorporationIDTitlesGetGrantableRolesAtOther = "Rent_Research_Facility"
	CorporationsCorporationIDTitlesGetGrantableRolesAtOtherSecurityOfficer         CorporationsCorporationIDTitlesGetGrantableRolesAtOther = "Security_Officer"
	CorporationsCorporationIDTitlesGetGrantableRolesAtOtherSkillPlanManager        CorporationsCorporationIDTitlesGetGrantableRolesAtOther = "Skill_Plan_Manager"
	CorporationsCorporationIDTitlesGetGrantableRolesAtOtherStarbaseDefenseOperator CorporationsCorporationIDTitlesGetGrantableRolesAtOther = "Starbase_Defense_Operator"
	CorporationsCorporationIDTitlesGetGrantableRolesAtOtherStarbaseFuelTechnician  CorporationsCorporationIDTitlesGetGrantableRolesAtOther = "Starbase_Fuel_Technician"
	CorporationsCorporationIDTitlesGetGrantableRolesAtOtherStationManager          CorporationsCorporationIDTitlesGetGrantableRolesAtOther = "Station_Manager"
	CorporationsCorporationIDTitlesGetGrantableRolesAtOtherTrader                  CorporationsCorporationIDTitlesGetGrantableRolesAtOther = "Trader"
)

// Defines values for CorporationsCorporationIDTitlesGetRoles.
const (
	CorporationsCorporationIDTitlesGetRolesAccountTake1            CorporationsCorporationIDTitlesGetRoles = "Account_Take_1"
	CorporationsCorporationIDTitlesGetRolesAccountTake2            CorporationsCorporationIDTitlesGetRoles = "Account_Take_2"
	CorporationsCorporationIDTitlesGetRolesAccountTake3            CorporationsCorporationIDTitlesGetRoles = "Account_Take_3"
	CorporationsCorporationIDTitlesGetRolesAccountTake4            CorporationsCorporationIDTitlesGetRoles = "Account_Take_4"
	CorporationsCorporationIDTitlesGetRolesAccountTake5            CorporationsCorporationIDTitlesGetRoles = "Account_Take_5"
	CorporationsCorporationIDTitlesGetRolesAccountTake6            CorporationsCorporationIDTitlesGetRoles = "Account_Take_6"
	CorporationsCorporationIDTitlesGetRolesAccountTake7            CorporationsCorporationIDTitlesGetRoles = "Account_Take_7"
	CorporationsCorporationIDTitlesGetRolesAccountant              CorporationsCorporationIDTitlesGetRoles = "Accountant"
	CorporationsCorporationIDTitlesGetRolesAuditor                 CorporationsCorporationIDTitlesGetRoles = "Auditor"
	CorporationsCorporationIDTitlesGetRolesBrandManager            CorporationsCorporationIDTitlesGetRoles = "Brand_Manager"
	CorporationsCorporationIDTitlesGetRolesCommunicationsOfficer   CorporationsCorporationIDTitlesGetRoles = "Communications_Officer"
	CorporationsCorporationIDTitlesGetRolesConfigEquipment         CorporationsCorporationIDTitlesGetRoles = "Config_Equipment"
	CorporationsCorporationIDTitlesGetRolesConfigStarbaseEquipment CorporationsCorporationIDTitlesGetRoles = "Config_Starbase_Equipment"
	CorporationsCorporationIDTitlesGetRolesContainerTake1          CorporationsCorporationIDTitlesGetRoles = "Container_Take_1"
	CorporationsCorporationIDTitlesGetRolesContainerTake2          CorporationsCorporationIDTitlesGetRoles = "Container_Take_2"
	CorporationsCorporationIDTitlesGetRolesContainerTake3          CorporationsCorporationIDTitlesGetRoles = "Container_Take_3"
	CorporationsCorporationIDTitlesGetRolesContainerTake4          CorporationsCorporationIDTitlesGetRoles = "Container_Take_4"
	CorporationsCorporationIDTitlesGetRolesContainerTake5          CorporationsCorporationIDTitlesGetRoles = "Container_Take_5"
	CorporationsCorporationIDTitlesGetRolesContainerTake6          CorporationsCorporationIDTitlesGetRoles = "Container_Take_6"
	CorporationsCorporationIDTitlesGetRolesContainerTake7          CorporationsCorporationIDTitlesGetRoles = "Container_Take_7"
	CorporationsCorporationIDTitlesGetRolesContractManager         CorporationsCorporationIDTitlesGetRoles = "Contract_Manager"
	CorporationsCorporationIDTitlesGetRolesDeliveriesContainerTake CorporationsCorporationIDTitlesGetRoles = "Deliveries_Container_Take"
	CorporationsCorporationIDTitlesGetRolesDeliveriesQuery         CorporationsCorporationIDTitlesGetRoles = "Deliveries_Query"
	CorporationsCorporationIDTitlesGetRolesDeliveriesTake          CorporationsCorporationIDTitlesGetRoles = "Deliveries_Take"
	CorporationsCorporationIDTitlesGetRolesDiplomat                CorporationsCorporationIDTitlesGetRoles = "Diplomat"
	CorporationsCorporationIDTitlesGetRolesDirector                CorporationsCorporationIDTitlesGetRoles = "Director"
	CorporationsCorporationIDTitlesGetRolesFactoryManager          CorporationsCorporationIDTitlesGetRoles = "Factory_Manager"
	CorporationsCorporationIDTitlesGetRolesFittingManager          CorporationsCorporationIDTitlesGetRoles = "Fitting_Manager"
	CorporationsCorporationIDTitlesGetRolesHangarQuery1            CorporationsCorporationIDTitlesGetRoles = "Hangar_Query_1"
	CorporationsCorporationIDTitlesGetRolesHangarQuery2            CorporationsCorporationIDTitlesGetRoles = "Hangar_Query_2"
	CorporationsCorporationIDTitlesGetRolesHangarQuery3            CorporationsCorporationIDTitlesGetRoles = "Hangar_Query_3"
	CorporationsCorporationIDTitlesGetRolesHangarQuery4            CorporationsCorporationIDTitlesGetRoles = "Hangar_Query_4"
	CorporationsCorporationIDTitlesGetRolesHangarQuery5            CorporationsCorporationIDTitlesGetRoles = "Hangar_Query_5"
	CorporationsCorporationIDTitlesGetRolesHangarQuery6            CorporationsCorporationIDTitlesGetRoles = "Hangar_Query_6"
	CorporationsCorporationIDTitlesGetRolesHangarQuery7            CorporationsCorporationIDTitlesGetRoles = "Hangar_Query_7"
	CorporationsCorporationIDTitlesGetRolesHangarTake1             CorporationsCorporationIDTitlesGetRoles = "Hangar_Take_1"
	CorporationsCorporationIDTitlesGetRolesHangarTake2             CorporationsCorporationIDTitlesGetRoles = "Hangar_Take_2"
	CorporationsCorporationIDTitlesGetRolesHangarTake3             CorporationsCorporationIDTitlesGetRoles = "Hangar_Take_3"
	CorporationsCorporationIDTitlesGetRolesHangarTake4             CorporationsCorporationIDTitlesGetRoles = "Hangar_Take_4"
	CorporationsCorporationIDTitlesGetRolesHangarTake5             CorporationsCorporationIDTitlesGetRoles = "Hangar_Take_5"
	CorporationsCorporationIDTitlesGetRolesHangarTake6             CorporationsCorporationIDTitlesGetRoles = "Hangar_Take_6"
	CorporationsCorporationIDTitlesGetRolesHangarTake7             CorporationsCorporationIDTitlesGetRoles = "Hangar_Take_7"
	CorporationsCorporationIDTitlesGetRolesJuniorAccountant        CorporationsCorporationIDTitlesGetRoles = "Junior_Accountant"
	CorporationsCorporationIDTitlesGetRolesPersonnelManager        CorporationsCorporationIDTitlesGetRoles = "Personnel_Manager"
	CorporationsCorporationIDTitlesGetRolesProjectManager          CorporationsCorporationIDTitlesGetRoles = "Project_Manager"
	CorporationsCorporationIDTitlesGetRolesRentFactoryFacility     CorporationsCorporationIDTitlesGetRoles = "Rent_Factory_Facility"
	CorporationsCorporationIDTitlesGetRolesRentOffice              CorporationsCorporationIDTitlesGetRoles = "Rent_Office"
	CorporationsCorporationIDTitlesGetRolesRentResearchFacility    CorporationsCorporationIDTitlesGetRoles = "Rent_Research_Facility"
	CorporationsCorporationIDTitlesGetRolesSecurityOfficer         CorporationsCorporationIDTitlesGetRoles = "Security_Officer"
	CorporationsCorporationIDTitlesGetRolesSkillPlanManager        CorporationsCorporationIDTitlesGetRoles = "Skill_Plan_Manager"
	CorporationsCorporationIDTitlesGetRolesStarbaseDefenseOperator CorporationsCorporationIDTitlesGetRoles = "Starbase_Defense_Operator"
	CorporationsCorporationIDTitlesGetRolesStarbaseFuelTechnician  CorporationsCorporationIDTitlesGetRoles = "Starbase_Fuel_Technician"
	CorporationsCorporationIDTitlesGetRolesStationManager          CorporationsCorporationIDTitlesGetRoles = "Station_Manager"
	CorporationsCorporationIDTitlesGetRolesTrader                  CorporationsCorporationIDTitlesGetRoles = "Trader"
)

// Defines values for CorporationsCorporationIDTitlesGetRolesAtBase.
const (
	CorporationsCorporationIDTitlesGetRolesAtBaseAccountTake1            CorporationsCorporationIDTitlesGetRolesAtBase = "Account_Take_1"
	CorporationsCorporationIDTitlesGetRolesAtBaseAccountTake2            CorporationsCorporationIDTitlesGetRolesAtBase = "Account_Take_2"
	CorporationsCorporationIDTitlesGetRolesAtBaseAccountTake3            CorporationsCorporationIDTitlesGetRolesAtBase = "Account_Take_3"
	CorporationsCorporationIDTitlesGetRolesAtBaseAccountTake4            CorporationsCorporationIDTitlesGetRolesAtBase = "Account_Take_4"
	CorporationsCorporationIDTitlesGetRolesAtBaseAccountTake5            CorporationsCorporationIDTitlesGetRolesAtBase = "Account_Take_5"
	CorporationsCorporationIDTitlesGetRolesAtBaseAccountTake6            CorporationsCorporationIDTitlesGetRolesAtBase = "Account_Take_6"
	CorporationsCorporationIDTitlesGetRolesAtBaseAccountTake7            CorporationsCorporationIDTitlesGetRolesAtBase = "Account_Take_7"
	CorporationsCorporationIDTitlesGetRolesAtBaseAccountant              CorporationsCorporationIDTitlesGetRolesAtBase = "Accountant"
	CorporationsCorporationIDTitlesGetRolesAtBaseAuditor                 CorporationsCorporationIDTitlesGetRolesAtBase = "Auditor"
	CorporationsCorporationIDTitlesGetRolesAtBaseBrandManager            CorporationsCorporationIDTitlesGetRolesAtBase = "Brand_Manager"
	CorporationsCorporationIDTitlesGetRolesAtBaseCommunicationsOfficer   CorporationsCorporationIDTitlesGetRolesAtBase = "Communications_Officer"
	CorporationsCorporationIDTitlesGetRolesAtBaseConfigEquipment         CorporationsCorporationIDTitlesGetRolesAtBase = "Config_Equipment"
	CorporationsCorporationIDTitlesGetRolesAtBaseConfigStarbaseEquipment CorporationsCorporationIDTitlesGetRolesAtBase = "Config_Starbase_Equipment"
	CorporationsCorporationIDTitlesGetRolesAtBaseContainerTake1          CorporationsCorporationIDTitlesGetRolesAtBase = "Container_Take_1"
	CorporationsCorporationIDTitlesGetRolesAtBaseContainerTake2          CorporationsCorporationIDTitlesGetRolesAtBase = "Container_Take_2"
	CorporationsCorporationIDTitlesGetRolesAtBaseContainerTake3          CorporationsCorporationIDTitlesGetRolesAtBase = "Container_Take_3"
	CorporationsCorporationIDTitlesGetRolesAtBaseContainerTake4          CorporationsCorporationIDTitlesGetRolesAtBase = "Container_Take_4"
	CorporationsCorporationIDTitlesGetRolesAtBaseContainerTake5          CorporationsCorporationIDTitlesGetRolesAtBase = "Container_Take_5"
	CorporationsCorporationIDTitlesGetRolesAtBaseContainerTake6          CorporationsCorporationIDTitlesGetRolesAtBase = "Container_Take_6"
	CorporationsCorporationIDTitlesGetRolesAtBaseContainerTake7          CorporationsCorporationIDTitlesGetRolesAtBase = "Container_Take_7"
	CorporationsCorporationIDTitlesGetRolesAtBaseContractManager         CorporationsCorporationIDTitlesGetRolesAtBase = "Contract_Manager"
	CorporationsCorporationIDTitlesGetRolesAtBaseDeliveriesContainerTake CorporationsCorporationIDTitlesGetRolesAtBase = "Deliveries_Container_Take"
	CorporationsCorporationIDTitlesGetRolesAtBaseDeliveriesQuery         CorporationsCorporationIDTitlesGetRolesAtBase = "Deliveries_Query"
	CorporationsCorporationIDTitlesGetRolesAtBaseDeliveriesTake          CorporationsCorporationIDTitlesGetRolesAtBase = "Deliveries_Take"
	CorporationsCorporationIDTitlesGetRolesAtBaseDiplomat                CorporationsCorporationIDTitlesGetRolesAtBase = "Diplomat"
	CorporationsCorporationIDTitlesGetRolesAtBaseDirector                CorporationsCorporationIDTitlesGetRolesAtBase = "Director"
	CorporationsCorporationIDTitlesGetRolesAtBaseFactoryManager          CorporationsCorporationIDTitlesGetRolesAtBase = "Factory_Manager"
	CorporationsCorporationIDTitlesGetRolesAtBaseFittingManager          CorporationsCorporationIDTitlesGetRolesAtBase = "Fitting_Manager"
	CorporationsCorporationIDTitlesGetRolesAtBaseHangarQuery1            CorporationsCorporationIDTitlesGetRolesAtBase = "Hangar_Query_1"
	CorporationsCorporationIDTitlesGetRolesAtBaseHangarQuery2            CorporationsCorporationIDTitlesGetRolesAtBase = "Hangar_Query_2"
	CorporationsCorporationIDTitlesGetRolesAtBaseHangarQuery3            CorporationsCorporationIDTitlesGetRolesAtBase = "Hangar_Query_3"
	CorporationsCorporationIDTitlesGetRolesAtBaseHangarQuery4            CorporationsCorporationIDTitlesGetRolesAtBase = "Hangar_Query_4"
	CorporationsCorporationIDTitlesGetRolesAtBaseHangarQuery5            CorporationsCorporationIDTitlesGetRolesAtBase = "Hangar_Query_5"
	CorporationsCorporationIDTitlesGetRolesAtBaseHangarQuery6            CorporationsCorporationIDTitlesGetRolesAtBase = "Hangar_Query_6"
	CorporationsCorporationIDTitlesGetRolesAtBaseHangarQuery7            CorporationsCorporationIDTitlesGetRolesAtBase = "Hangar_Query_7"
	CorporationsCorporationIDTitlesGetRolesAtBaseHangarTake1             CorporationsCorporationIDTitlesGetRolesAtBase = "Hangar_Take_1"
	CorporationsCorporationIDTitlesGetRolesAtBaseHangarTake2             CorporationsCorporationIDTitlesGetRolesAtBase = "Hangar_Take_2"
	CorporationsCorporationIDTitlesGetRolesAtBaseHangarTake3             CorporationsCorporationIDTitlesGetRolesAtBase = "Hangar_Take_3"
	CorporationsCorporationIDTitlesGetRolesAtBaseHangarTake4             CorporationsCorporationIDTitlesGetRolesAtBase = "Hangar_Take_4"
	CorporationsCorporationIDTitlesGetRolesAtBaseHangarTake5             CorporationsCorporationIDTitlesGetRolesAtBase = "Hangar_Take_5"
	CorporationsCorporationIDTitlesGetRolesAtBaseHangarTake6             CorporationsCorporationIDTitlesGetRolesAtBase = "Hangar_Take_6"
	CorporationsCorporationIDTitlesGetRolesAtBaseHangarTake7             CorporationsCorporationIDTitlesGetRolesAtBase = "Hangar_Take_7"
	CorporationsCorporationIDTitlesGetRolesAtBaseJuniorAccountant        CorporationsCorporationIDTitlesGetRolesAtBase = "Junior_Accountant"
	CorporationsCorporationIDTitlesGetRolesAtBasePersonnelManager        CorporationsCorporationIDTitlesGetRolesAtBase = "Personnel_Manager"
	CorporationsCorporationIDTitlesGetRolesAtBaseProjectManager          CorporationsCorporationIDTitlesGetRolesAtBase = "Project_Manager"
	CorporationsCorporationIDTitlesGetRolesAtBaseRentFactoryFacility     CorporationsCorporationIDTitlesGetRolesAtBase = "Rent_Factory_Facility"
	CorporationsCorporationIDTitlesGetRolesAtBaseRentOffice              CorporationsCorporationIDTitlesGetRolesAtBase = "Rent_Office"
	CorporationsCorporationIDTitlesGetRolesAtBaseRentResearchFacility    CorporationsCorporationIDTitlesGetRolesAtBase = "Rent_Research_Facility"
	CorporationsCorporationIDTitlesGetRolesAtBaseSecurityOfficer         CorporationsCorporationIDTitlesGetRolesAtBase = "Security_Officer"
	CorporationsCorporationIDTitlesGetRolesAtBaseSkillPlanManager        CorporationsCorporationIDTitlesGetRolesAtBase = "Skill_Plan_Manager"
	CorporationsCorporationIDTitlesGetRolesAtBaseStarbaseDefenseOperator CorporationsCorporationIDTitlesGetRolesAtBase = "Starbase_Defense_Operator"
	CorporationsCorporationIDTitlesGetRolesAtBaseStarbaseFuelTechnician  CorporationsCorporationIDTitlesGetRolesAtBase = "Starbase_Fuel_Technician"
	CorporationsCorporationIDTitlesGetRolesAtBaseStationManager          CorporationsCorporationIDTitlesGetRolesAtBase = "Station_Manager"
	CorporationsCorporationIDTitlesGetRolesAtBaseTrader                  CorporationsCorporationIDTitlesGetRolesAtBase = "Trader"
)

// Defines values for CorporationsCorporationIDTitlesGetRolesAtHq.
const (
	CorporationsCorporationIDTitlesGetRolesAtHqAccountTake1            CorporationsCorporationIDTitlesGetRolesAtHq = "Account_Take_1"
	CorporationsCorporationIDTitlesGetRolesAtHqAccountTake2            CorporationsCorporationIDTitlesGetRolesAtHq = "Account_Take_2"
	CorporationsCorporationIDTitlesGetRolesAtHqAccountTake3            CorporationsCorporationIDTitlesGetRolesAtHq = "Account_Take_3"
	CorporationsCorporationIDTitlesGetRolesAtHqAccountTake4            CorporationsCorporationIDTitlesGetRolesAtHq = "Account_Take_4"
	CorporationsCorporationIDTitlesGetRolesAtHqAccountTake5            CorporationsCorporationIDTitlesGetRolesAtHq = "Account_Take_5"
	CorporationsCorporationIDTitlesGetRolesAtHqAccountTake6            CorporationsCorporationIDTitlesGetRolesAtHq = "Account_Take_6"
	CorporationsCorporationIDTitlesGetRolesAtHqAccountTake7            CorporationsCorporationIDTitlesGetRolesAtHq = "Account_Take_7"
	CorporationsCorporationIDTitlesGetRolesAtHqAccountant              CorporationsCorporationIDTitlesGetRolesAtHq = "Accountant"
	CorporationsCorporationIDTitlesGetRolesAtHqAuditor                 CorporationsCorporationIDTitlesGetRolesAtHq = "Auditor"
	CorporationsCorporationIDTitlesGetRolesAtHqBrandManager            CorporationsCorporationIDTitlesGetRolesAtHq = "Brand_Manager"
	CorporationsCorporationIDTitlesGetRolesAtHqCommunicationsOfficer   CorporationsCorporationIDTitlesGetRolesAtHq = "Communications_Officer"
	CorporationsCorporationIDTitlesGetRolesAtHqConfigEquipment         CorporationsCorporationIDTitlesGetRolesAtHq = "Config_Equipment"
	CorporationsCorporationIDTitlesGetRolesAtHqConfigStarbaseEquipment CorporationsCorporationIDTitlesGetRolesAtHq = "Config_Starbase_Equipment"
	CorporationsCorporationIDTitlesGetRolesAtHqContainerTake1          CorporationsCorporationIDTitlesGetRolesAtHq = "Container_Take_1"
	CorporationsCorporationIDTitlesGetRolesAtHqContainerTake2          CorporationsCorporationIDTitlesGetRolesAtHq = "Container_Take_2"
	CorporationsCorporationIDTitlesGetRolesAtHqContainerTake3          CorporationsCorporationIDTitlesGetRolesAtHq = "Container_Take_3"
	CorporationsCorporationIDTitlesGetRolesAtHqContainerTake4          CorporationsCorporationIDTitlesGetRolesAtHq = "Container_Take_4"
	CorporationsCorporationIDTitlesGetRolesAtHqContainerTake5          CorporationsCorporationIDTitlesGetRolesAtHq = "Container_Take_5"
	CorporationsCorporationIDTitlesGetRolesAtHqContainerTake6          CorporationsCorporationIDTitlesGetRolesAtHq = "Container_Take_6"
	CorporationsCorporationIDTitlesGetRolesAtHqContainerTake7          CorporationsCorporationIDTitlesGetRolesAtHq = "Container_Take_7"
	CorporationsCorporationIDTitlesGetRolesAtHqContractManager         CorporationsCorporationIDTitlesGetRolesAtHq = "Contract_Manager"
	CorporationsCorporationIDTitlesGetRolesAtHqDeliveriesContainerTake CorporationsCorporationIDTitlesGetRolesAtHq = "Deliveries_Container_Take"
	CorporationsCorporationIDTitlesGetRolesAtHqDeliveriesQuery         CorporationsCorporationIDTitlesGetRolesAtHq = "Deliveries_Query"
	CorporationsCorporationIDTitlesGetRolesAtHqDeliveriesTake          CorporationsCorporationIDTitlesGetRolesAtHq = "Deliveries_Take"
	CorporationsCorporationIDTitlesGetRolesAtHqDiplomat                CorporationsCorporationIDTitlesGetRolesAtHq = "Diplomat"
	CorporationsCorporationIDTitlesGetRolesAtHqDirector                CorporationsCorporationIDTitlesGetRolesAtHq = "Director"
	CorporationsCorporationIDTitlesGetRolesAtHqFactoryManager          CorporationsCorporationIDTitlesGetRolesAtHq = "Factory_Manager"
	CorporationsCorporationIDTitlesGetRolesAtHqFittingManager          CorporationsCorporationIDTitlesGetRolesAtHq = "Fitting_Manager"
	CorporationsCorporationIDTitlesGetRolesAtHqHangarQuery1            CorporationsCorporationIDTitlesGetRolesAtHq = "Hangar_Query_1"
	CorporationsCorporationIDTitlesGetRolesAtHqHangarQuery2            CorporationsCorporationIDTitlesGetRolesAtHq = "Hangar_Query_2"
	CorporationsCorporationIDTitlesGetRolesAtHqHangarQuery3            CorporationsCorporationIDTitlesGetRolesAtHq = "Hangar_Query_3"
	CorporationsCorporationIDTitlesGetRolesAtHqHangarQuery4            CorporationsCorporationIDTitlesGetRolesAtHq = "Hangar_Query_4"
	CorporationsCorporationIDTitlesGetRolesAtHqHangarQuery5            CorporationsCorporationIDTitlesGetRolesAtHq = "Hangar_Query_5"
	CorporationsCorporationIDTitlesGetRolesAtHqHangarQuery6            CorporationsCorporationIDTitlesGetRolesAtHq = "Hangar_Query_6"
	CorporationsCorporationIDTitlesGetRolesAtHqHangarQuery7            CorporationsCorporationIDTitlesGetRolesAtHq = "Hangar_Query_7"
	CorporationsCorporationIDTitlesGetRolesAtHqHangarTake1             CorporationsCorporationIDTitlesGetRolesAtHq = "Hangar_Take_1"
	CorporationsCorporationIDTitlesGetRolesAtHqHangarTake2             CorporationsCorporationIDTitlesGetRolesAtHq = "Hangar_Take_2"
	CorporationsCorporationIDTitlesGetRolesAtHqHangarTake3             CorporationsCorporationIDTitlesGetRolesAtHq = "Hangar_Take_3"
	CorporationsCorporationIDTitlesGetRolesAtHqHangarTake4             CorporationsCorporationIDTitlesGetRolesAtHq = "Hangar_Take_4"
	CorporationsCorporationIDTitlesGetRolesAtHqHangarTake5             CorporationsCorporationIDTitlesGetRolesAtHq = "Hangar_Take_5"
	CorporationsCorporationIDTitlesGetRolesAtHqHangarTake6             CorporationsCorporationIDTitlesGetRolesAtHq = "Hangar_Take_6"
	CorporationsCorporationIDTitlesGetRolesAtHqHangarTake7             CorporationsCorporationIDTitlesGetRolesAtHq = "Hangar_Take_7"
	CorporationsCorporationIDTitlesGetRolesAtHqJuniorAccountant        CorporationsCorporationIDTitlesGetRolesAtHq = "Junior_Accountant"
	CorporationsCorporationIDTitlesGetRolesAtHqPersonnelManager        CorporationsCorporationIDTitlesGetRolesAtHq = "Personnel_Manager"
	CorporationsCorporationIDTitlesGetRolesAtHqProjectManager          CorporationsCorporationIDTitlesGetRolesAtHq = "Project_Manager"
	CorporationsCorporationIDTitlesGetRolesAtHqRentFactoryFacility     CorporationsCorporationIDTitlesGetRolesAtHq = "Rent_Factory_Facility"
	CorporationsCorporationIDTitlesGetRolesAtHqRentOffice              CorporationsCorporationIDTitlesGetRolesAtHq = "Rent_Office"
	CorporationsCorporationIDTitlesGetRolesAtHqRentResearchFacility    CorporationsCorporationIDTitlesGetRolesAtHq = "Rent_Research_Facility"
	CorporationsCorporationIDTitlesGetRolesAtHqSecurityOfficer         CorporationsCorporationIDTitlesGetRolesAtHq = "Security_Officer"
	CorporationsCorporationIDTitlesGetRolesAtHqSkillPlanManager        CorporationsCorporationIDTitlesGetRolesAtHq = "Skill_Plan_Manager"
	CorporationsCorporationIDTitlesGetRolesAtHqStarbaseDefenseOperator CorporationsCorporationIDTitlesGetRolesAtHq = "Starbase_Defense_Operator"
	CorporationsCorporationIDTitlesGetRolesAtHqStarbaseFuelTechnician  CorporationsCorporationIDTitlesGetRolesAtHq = "Starbase_Fuel_Technician"
	CorporationsCorporationIDTitlesGetRolesAtHqStationManager          CorporationsCorporationIDTitlesGetRolesAtHq = "Station_Manager"
	CorporationsCorporationIDTitlesGetRolesAtHqTrader                  CorporationsCorporationIDTitlesGetRolesAtHq = "Trader"
)

// Defines values for CorporationsCorporationIDTitlesGetRolesAtOther.
const (
	CorporationsCorporationIDTitlesGetRolesAtOtherAccountTake1            CorporationsCorporationIDTitlesGetRolesAtOther = "Account_Take_1"
	CorporationsCorporationIDTitlesGetRolesAtOtherAccountTake2            CorporationsCorporationIDTitlesGetRolesAtOther = "Account_Take_2"
	CorporationsCorporationIDTitlesGetRolesAtOtherAccountTake3            CorporationsCorporationIDTitlesGetRolesAtOther = "Account_Take_3"
	CorporationsCorporationIDTitlesGetRolesAtOtherAccountTake4            CorporationsCorporationIDTitlesGetRolesAtOther = "Account_Take_4"
	CorporationsCorporationIDTitlesGetRolesAtOtherAccountTake5            CorporationsCorporationIDTitlesGetRolesAtOther = "Account_Take_5"
	CorporationsCorporationIDTitlesGetRolesAtOtherAccountTake6            CorporationsCorporationIDTitlesGetRolesAtOther = "Account_Take_6"
	CorporationsCorporationIDTitlesGetRolesAtOtherAccountTake7            CorporationsCorporationIDTitlesGetRolesAtOther = "Account_Take_7"
	CorporationsCorporationIDTitlesGetRolesAtOtherAccountant              CorporationsCorporationIDTitlesGetRolesAtOther = "Accountant"
	CorporationsCorporationIDTitlesGetRolesAtOtherAuditor                 CorporationsCorporationIDTitlesGetRolesAtOther = "Auditor"
	CorporationsCorporationIDTitlesGetRolesAtOtherBrandManager            CorporationsCorporationIDTitlesGetRolesAtOther = "Brand_Manager"
	CorporationsCorporationIDTitlesGetRolesAtOtherCommunicationsOfficer   CorporationsCorporationIDTitlesGetRolesAtOther = "Communications_Officer"
	CorporationsCorporationIDTitlesGetRolesAtOtherConfigEquipment         CorporationsCorporationIDTitlesGetRolesAtOther = "Config_Equipment"
	CorporationsCorporationIDTitlesGetRolesAtOtherConfigStarbaseEquipment CorporationsCorporationIDTitlesGetRolesAtOther = "Config_Starbase_Equipment"
	CorporationsCorporationIDTitlesGetRolesAtOtherContainerTake1          CorporationsCorporationIDTitlesGetRolesAtOther = "Container_Take_1"
	CorporationsCorporationIDTitlesGetRolesAtOtherContainerTake2          CorporationsCorporationIDTitlesGetRolesAtOther = "Container_Take_2"
	CorporationsCorporationIDTitlesGetRolesAtOtherContainerTake3          CorporationsCorporationIDTitlesGetRolesAtOther = "Container_Take_3"
	CorporationsCorporationIDTitlesGetRolesAtOtherContainerTake4          CorporationsCorporationIDTitlesGetRolesAtOther = "Container_Take_4"
	CorporationsCorporationIDTitlesGetRolesAtOtherContainerTake5          CorporationsCorporationIDTitlesGetRolesAtOther = "Container_Take_5"
	CorporationsCorporationIDTitlesGetRolesAtOtherContainerTake6          CorporationsCorporationIDTitlesGetRolesAtOther = "Container_Take_6"
	CorporationsCorporationIDTitlesGetRolesAtOtherContainerTake7          CorporationsCorporationIDTitlesGetRolesAtOther = "Container_Take_7"
	CorporationsCorporationIDTitlesGetRolesAtOtherContractManager         CorporationsCorporationIDTitlesGetRolesAtOther = "Contract_Manager"
	CorporationsCorporationIDTitlesGetRolesAtOtherDeliveriesContainerTake CorporationsCorporationIDTitlesGetRolesAtOther = "Deliveries_Container_Take"
	CorporationsCorporationIDTitlesGetRolesAtOtherDeliveriesQuery         CorporationsCorporationIDTitlesGetRolesAtOther = "Deliveries_Query"
	CorporationsCorporationIDTitlesGetRolesAtOtherDeliveriesTake          CorporationsCorporationIDTitlesGetRolesAtOther = "Deliveries_Take"
	CorporationsCorporationIDTitlesGetRolesAtOtherDiplomat                CorporationsCorporationIDTitlesGetRolesAtOther = "Diplomat"
	CorporationsCorporationIDTitlesGetRolesAtOtherDirector                CorporationsCorporationIDTitlesGetRolesAtOther = "Director"
	CorporationsCorporationIDTitlesGetRolesAtOtherFactoryManager          CorporationsCorporationIDTitlesGetRolesAtOther = "Factory_Manager"
	CorporationsCorporationIDTitlesGetRolesAtOtherFittingManager          CorporationsCorporationIDTitlesGetRolesAtOther = "Fitting_Manager"
	CorporationsCorporationIDTitlesGetRolesAtOtherHangarQuery1            CorporationsCorporationIDTitlesGetRolesAtOther = "Hangar_Query_1"
	CorporationsCorporationIDTitlesGetRolesAtOtherHangarQuery2            CorporationsCorporationIDTitlesGetRolesAtOther = "Hangar_Query_2"
	CorporationsCorporationIDTitlesGetRolesAtOtherHangarQuery3            CorporationsCorporationIDTitlesGetRolesAtOther = "Hangar_Query_3"
	CorporationsCorporationIDTitlesGetRolesAtOtherHangarQuery4            CorporationsCorporationIDTitlesGetRolesAtOther = "Hangar_Query_4"
	CorporationsCorporationIDTitlesGetRolesAtOtherHangarQuery5            CorporationsCorporationIDTitlesGetRolesAtOther = "Hangar_Query_5"
	CorporationsCorporationIDTitlesGetRolesAtOtherHangarQuery6            CorporationsCorporationIDTitlesGetRolesAtOther = "Hangar_Query_6"
	CorporationsCorporationIDTitlesGetRolesAtOtherHangarQuery7            CorporationsCorporationIDTitlesGetRolesAtOther = "Hangar_Query_7"
	CorporationsCorporationIDTitlesGetRolesAtOtherHangarTake1             CorporationsCorporationIDTitlesGetRolesAtOther = "Hangar_Take_1"
	CorporationsCorporationIDTitlesGetRolesAtOtherHangarTake2             CorporationsCorporationIDTitlesGetRolesAtOther = "Hangar_Take_2"
	CorporationsCorporationIDTitlesGetRolesAtOtherHangarTake3             CorporationsCorporationIDTitlesGetRolesAtOther = "Hangar_Take_3"
	CorporationsCorporationIDTitlesGetRolesAtOtherHangarTake4             CorporationsCorporationIDTitlesGetRolesAtOther = "Hangar_Take_4"
	CorporationsCorporationIDTitlesGetRolesAtOtherHangarTake5             CorporationsCorporationIDTitlesGetRolesAtOther = "Hangar_Take_5"
	CorporationsCorporationIDTitlesGetRolesAtOtherHangarTake6             CorporationsCorporationIDTitlesGetRolesAtOther = "Hangar_Take_6"
	CorporationsCorporationIDTitlesGetRolesAtOtherHangarTake7             CorporationsCorporationIDTitlesGetRolesAtOther = "Hangar_Take_7"
	CorporationsCorporationIDTitlesGetRolesAtOtherJuniorAccountant        CorporationsCorporationIDTitlesGetRolesAtOther = "Junior_Accountant"
	CorporationsCorporationIDTitlesGetRolesAtOtherPersonnelManager        CorporationsCorporationIDTitlesGetRolesAtOther = "Personnel_Manager"
	CorporationsCorporationIDTitlesGetRolesAtOtherProjectManager          CorporationsCorporationIDTitlesGetRolesAtOther = "Project_Manager"
	CorporationsCorporationIDTitlesGetRolesAtOtherRentFactoryFacility     CorporationsCorporationIDTitlesGetRolesAtOther = "Rent_Factory_Facility"
	CorporationsCorporationIDTitlesGetRolesAtOtherRentOffice              CorporationsCorporationIDTitlesGetRolesAtOther = "Rent_Office"
	CorporationsCorporationIDTitlesGetRolesAtOtherRentResearchFacility    CorporationsCorporationIDTitlesGetRolesAtOther = "Rent_Research_Facility"
	CorporationsCorporationIDTitlesGetRolesAtOtherSecurityOfficer         CorporationsCorporationIDTitlesGetRolesAtOther = "Security_Officer"
	CorporationsCorporationIDTitlesGetRolesAtOtherSkillPlanManager        CorporationsCorporationIDTitlesGetRolesAtOther = "Skill_Plan_Manager"
	CorporationsCorporationIDTitlesGetRolesAtOtherStarbaseDefenseOperator CorporationsCorporationIDTitlesGetRolesAtOther = "Starbase_Defense_Operator"
	CorporationsCorporationIDTitlesGetRolesAtOtherStarbaseFuelTechnician  CorporationsCorporationIDTitlesGetRolesAtOther = "Starbase_Fuel_Technician"
	CorporationsCorporationIDTitlesGetRolesAtOtherStationManager          CorporationsCorporationIDTitlesGetRolesAtOther = "Station_Manager"
	CorporationsCorporationIDTitlesGetRolesAtOtherTrader                  CorporationsCorporationIDTitlesGetRolesAtOther = "Trader"
)

// Defines values for CorporationsCorporationIDWalletsDivisionJournalGetContextIDType.
const (
	CorporationsCorporationIDWalletsDivisionJournalGetContextIDTypeAllianceID          CorporationsCorporationIDWalletsDivisionJournalGetContextIDType = "alliance_id"
	CorporationsCorporationIDWalletsDivisionJournalGetContextIDTypeCharacterID         CorporationsCorporationIDWalletsDivisionJournalGetContextIDType = "character_id"
	CorporationsCorporationIDWalletsDivisionJournalGetContextIDTypeContractID          CorporationsCorporationIDWalletsDivisionJournalGetContextIDType = "contract_id"
	CorporationsCorporationIDWalletsDivisionJournalGetContextIDTypeCorporationID       CorporationsCorporationIDWalletsDivisionJournalGetContextIDType = "corporation_id"
	CorporationsCorporationIDWalletsDivisionJournalGetContextIDTypeEveSystem           CorporationsCorporationIDWalletsDivisionJournalGetContextIDType = "eve_system"
	CorporationsCorporationIDWalletsDivisionJournalGetContextIDTypeIndustryJobID       CorporationsCorporationIDWalletsDivisionJournalGetContextIDType = "industry_job_id"
	CorporationsCorporationIDWalletsDivisionJournalGetContextIDTypeMarketTransactionID CorporationsCorporationIDWalletsDivisionJournalGetContextIDType = "market_transaction_id"
	CorporationsCorporationIDWalletsDivisionJournalGetContextIDTypePlanetID            CorporationsCorporationIDWalletsDivisionJournalGetContextIDType = "planet_id"
	CorporationsCorporationIDWalletsDivisionJournalGetContextIDTypeStationID           CorporationsCorporationIDWalletsDivisionJournalGetContextIDType = "station_id"
	CorporationsCorporationIDWalletsDivisionJournalGetContextIDTypeStructureID         CorporationsCorporationIDWalletsDivisionJournalGetContextIDType = "structure_id"
	CorporationsCorporationIDWalletsDivisionJournalGetContextIDTypeSystemID            CorporationsCorporationIDWalletsDivisionJournalGetContextIDType = "system_id"
	CorporationsCorporationIDWalletsDivisionJournalGetContextIDTypeTypeID              CorporationsCorporationIDWalletsDivisionJournalGetContextIDType = "type_id"
)

// Defines values for CorporationsCorporationIDWalletsDivisionJournalGetRefType.
const (
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeAccelerationGateFee                       CorporationsCorporationIDWalletsDivisionJournalGetRefType = "acceleration_gate_fee"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeAdvertisementListingFee                   CorporationsCorporationIDWalletsDivisionJournalGetRefType = "advertisement_listing_fee"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeAgentDonation                             CorporationsCorporationIDWalletsDivisionJournalGetRefType = "agent_donation"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeAgentLocationServices                     CorporationsCorporationIDWalletsDivisionJournalGetRefType = "agent_location_services"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeAgentMiscellaneous                        CorporationsCorporationIDWalletsDivisionJournalGetRefType = "agent_miscellaneous"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeAgentMissionCollateralPaid                CorporationsCorporationIDWalletsDivisionJournalGetRefType = "agent_mission_collateral_paid"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeAgentMissionCollateralRefunded            CorporationsCorporationIDWalletsDivisionJournalGetRefType = "agent_mission_collateral_refunded"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeAgentMissionReward                        CorporationsCorporationIDWalletsDivisionJournalGetRefType = "agent_mission_reward"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeAgentMissionRewardCorporationTax          CorporationsCorporationIDWalletsDivisionJournalGetRefType = "agent_mission_reward_corporation_tax"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeAgentMissionTimeBonusReward               CorporationsCorporationIDWalletsDivisionJournalGetRefType = "agent_mission_time_bonus_reward"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeAgentMissionTimeBonusRewardCorporationTax CorporationsCorporationIDWalletsDivisionJournalGetRefType = "agent_mission_time_bonus_reward_corporation_tax"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeAgentSecurityServices                     CorporationsCorporationIDWalletsDivisionJournalGetRefType = "agent_security_services"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeAgentServicesRendered                     CorporationsCorporationIDWalletsDivisionJournalGetRefType = "agent_services_rendered"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeAgentsPreward                             CorporationsCorporationIDWalletsDivisionJournalGetRefType = "agents_preward"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeAirCareerProgramReward                    CorporationsCorporationIDWalletsDivisionJournalGetRefType = "air_career_program_reward"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeAllianceMaintainanceFee                   CorporationsCorporationIDWalletsDivisionJournalGetRefType = "alliance_maintainance_fee"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeAllianceRegistrationFee                   CorporationsCorporationIDWalletsDivisionJournalGetRefType = "alliance_registration_fee"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeAllignmentBasedGateToll                   CorporationsCorporationIDWalletsDivisionJournalGetRefType = "allignment_based_gate_toll"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeAssetSafetyRecoveryTax                    CorporationsCorporationIDWalletsDivisionJournalGetRefType = "asset_safety_recovery_tax"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeBounty                                    CorporationsCorporationIDWalletsDivisionJournalGetRefType = "bounty"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeBountyPrize                               CorporationsCorporationIDWalletsDivisionJournalGetRefType = "bounty_prize"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeBountyPrizeCorporationTax                 CorporationsCorporationIDWalletsDivisionJournalGetRefType = "bounty_prize_corporation_tax"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeBountyPrizes                              CorporationsCorporationIDWalletsDivisionJournalGetRefType = "bounty_prizes"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeBountyReimbursement                       CorporationsCorporationIDWalletsDivisionJournalGetRefType = "bounty_reimbursement"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeBountySurcharge                           CorporationsCorporationIDWalletsDivisionJournalGetRefType = "bounty_surcharge"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeBrokersFee                                CorporationsCorporationIDWalletsDivisionJournalGetRefType = "brokers_fee"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeCloneActivation                           CorporationsCorporationIDWalletsDivisionJournalGetRefType = "clone_activation"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeCloneTransfer                             CorporationsCorporationIDWalletsDivisionJournalGetRefType = "clone_transfer"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeContrabandFine                            CorporationsCorporationIDWalletsDivisionJournalGetRefType = "contraband_fine"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeContractAuctionBid                        CorporationsCorporationIDWalletsDivisionJournalGetRefType = "contract_auction_bid"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeContractAuctionBidCorp                    CorporationsCorporationIDWalletsDivisionJournalGetRefType = "contract_auction_bid_corp"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeContractAuctionBidRefund                  CorporationsCorporationIDWalletsDivisionJournalGetRefType = "contract_auction_bid_refund"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeContractAuctionSold                       CorporationsCorporationIDWalletsDivisionJournalGetRefType = "contract_auction_sold"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeContractBrokersFee                        CorporationsCorporationIDWalletsDivisionJournalGetRefType = "contract_brokers_fee"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeContractBrokersFeeCorp                    CorporationsCorporationIDWalletsDivisionJournalGetRefType = "contract_brokers_fee_corp"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeContractCollateral                        CorporationsCorporationIDWalletsDivisionJournalGetRefType = "contract_collateral"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeContractCollateralDepositedCorp           CorporationsCorporationIDWalletsDivisionJournalGetRefType = "contract_collateral_deposited_corp"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeContractCollateralPayout                  CorporationsCorporationIDWalletsDivisionJournalGetRefType = "contract_collateral_payout"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeContractCollateralRefund                  CorporationsCorporationIDWalletsDivisionJournalGetRefType = "contract_collateral_refund"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeContractDeposit                           CorporationsCorporationIDWalletsDivisionJournalGetRefType = "contract_deposit"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeContractDepositCorp                       CorporationsCorporationIDWalletsDivisionJournalGetRefType = "contract_deposit_corp"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeContractDepositRefund                     CorporationsCorporationIDWalletsDivisionJournalGetRefType = "contract_deposit_refund"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeContractDepositSalesTax                   CorporationsCorporationIDWalletsDivisionJournalGetRefType = "contract_deposit_sales_tax"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeContractPrice                             CorporationsCorporationIDWalletsDivisionJournalGetRefType = "contract_price"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeContractPricePaymentCorp                  CorporationsCorporationIDWalletsDivisionJournalGetRefType = "contract_price_payment_corp"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeContractReversal                          CorporationsCorporationIDWalletsDivisionJournalGetRefType = "contract_reversal"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeContractReward                            CorporationsCorporationIDWalletsDivisionJournalGetRefType = "contract_reward"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeContractRewardDeposited                   CorporationsCorporationIDWalletsDivisionJournalGetRefType = "contract_reward_deposited"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeContractRewardDepositedCorp               CorporationsCorporationIDWalletsDivisionJournalGetRefType = "contract_reward_deposited_corp"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeContractRewardRefund                      CorporationsCorporationIDWalletsDivisionJournalGetRefType = "contract_reward_refund"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeContractSalesTax                          CorporationsCorporationIDWalletsDivisionJournalGetRefType = "contract_sales_tax"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeCopying                                   CorporationsCorporationIDWalletsDivisionJournalGetRefType = "copying"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeCorporateRewardPayout                     CorporationsCorporationIDWalletsDivisionJournalGetRefType = "corporate_reward_payout"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeCorporateRewardTax                        CorporationsCorporationIDWalletsDivisionJournalGetRefType = "corporate_reward_tax"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeCorporationAccountWithdrawal              CorporationsCorporationIDWalletsDivisionJournalGetRefType = "corporation_account_withdrawal"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeCorporationBulkPayment                    CorporationsCorporationIDWalletsDivisionJournalGetRefType = "corporation_bulk_payment"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeCorporationDividendPayment                CorporationsCorporationIDWalletsDivisionJournalGetRefType = "corporation_dividend_payment"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeCorporationLiquidation                    CorporationsCorporationIDWalletsDivisionJournalGetRefType = "corporation_liquidation"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeCorporationLogoChangeCost                 CorporationsCorporationIDWalletsDivisionJournalGetRefType = "corporation_logo_change_cost"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeCorporationPayment                        CorporationsCorporationIDWalletsDivisionJournalGetRefType = "corporation_payment"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeCorporationRegistrationFee                CorporationsCorporationIDWalletsDivisionJournalGetRefType = "corporation_registration_fee"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeCosmeticMarketComponentItemPurchase       CorporationsCorporationIDWalletsDivisionJournalGetRefType = "cosmetic_market_component_item_purchase"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeCosmeticMarketSkinPurchase                CorporationsCorporationIDWalletsDivisionJournalGetRefType = "cosmetic_market_skin_purchase"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeCosmeticMarketSkinSale                    CorporationsCorporationIDWalletsDivisionJournalGetRefType = "cosmetic_market_skin_sale"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeCosmeticMarketSkinSaleBrokerFee           CorporationsCorporationIDWalletsDivisionJournalGetRefType = "cosmetic_market_skin_sale_broker_fee"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeCosmeticMarketSkinSaleTax                 CorporationsCorporationIDWalletsDivisionJournalGetRefType = "cosmetic_market_skin_sale_tax"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeCosmeticMarketSkinTransaction             CorporationsCorporationIDWalletsDivisionJournalGetRefType = "cosmetic_market_skin_transaction"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeCourierMissionEscrow                      CorporationsCorporationIDWalletsDivisionJournalGetRefType = "courier_mission_escrow"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeCspa                                      CorporationsCorporationIDWalletsDivisionJournalGetRefType = "cspa"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeCspaofflinerefund                         CorporationsCorporationIDWalletsDivisionJournalGetRefType = "cspaofflinerefund"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeDailyChallengeReward                      CorporationsCorporationIDWalletsDivisionJournalGetRefType = "daily_challenge_reward"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeDailyGoalPayouts                          CorporationsCorporationIDWalletsDivisionJournalGetRefType = "daily_goal_payouts"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeDailyGoalPayoutsTax                       CorporationsCorporationIDWalletsDivisionJournalGetRefType = "daily_goal_payouts_tax"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeDatacoreFee                               CorporationsCorporationIDWalletsDivisionJournalGetRefType = "datacore_fee"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeDnaModificationFee                        CorporationsCorporationIDWalletsDivisionJournalGetRefType = "dna_modification_fee"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeDockingFee                                CorporationsCorporationIDWalletsDivisionJournalGetRefType = "docking_fee"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeDuelWagerEscrow                           CorporationsCorporationIDWalletsDivisionJournalGetRefType = "duel_wager_escrow"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeDuelWagerPayment                          CorporationsCorporationIDWalletsDivisionJournalGetRefType = "duel_wager_payment"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeDuelWagerRefund                           CorporationsCorporationIDWalletsDivisionJournalGetRefType = "duel_wager_refund"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeEssEscrowTransfer                         CorporationsCorporationIDWalletsDivisionJournalGetRefType = "ess_escrow_transfer"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeExternalTradeDelivery                     CorporationsCorporationIDWalletsDivisionJournalGetRefType = "external_trade_delivery"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeExternalTradeFreeze                       CorporationsCorporationIDWalletsDivisionJournalGetRefType = "external_trade_freeze"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeExternalTradeThaw                         CorporationsCorporationIDWalletsDivisionJournalGetRefType = "external_trade_thaw"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeFactorySlotRentalFee                      CorporationsCorporationIDWalletsDivisionJournalGetRefType = "factory_slot_rental_fee"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeFluxPayout                                CorporationsCorporationIDWalletsDivisionJournalGetRefType = "flux_payout"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeFluxTax                                   CorporationsCorporationIDWalletsDivisionJournalGetRefType = "flux_tax"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeFluxTicketRepayment                       CorporationsCorporationIDWalletsDivisionJournalGetRefType = "flux_ticket_repayment"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeFluxTicketSale                            CorporationsCorporationIDWalletsDivisionJournalGetRefType = "flux_ticket_sale"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeFreelanceJobsBroadcastingFee              CorporationsCorporationIDWalletsDivisionJournalGetRefType = "freelance_jobs_broadcasting_fee"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeFreelanceJobsDurationFee                  CorporationsCorporationIDWalletsDivisionJournalGetRefType = "freelance_jobs_duration_fee"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeFreelanceJobsEscrowRefund                 CorporationsCorporationIDWalletsDivisionJournalGetRefType = "freelance_jobs_escrow_refund"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeFreelanceJobsReward                       CorporationsCorporationIDWalletsDivisionJournalGetRefType = "freelance_jobs_reward"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeFreelanceJobsRewardCorporationTax         CorporationsCorporationIDWalletsDivisionJournalGetRefType = "freelance_jobs_reward_corporation_tax"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeFreelanceJobsRewardEscrow                 CorporationsCorporationIDWalletsDivisionJournalGetRefType = "freelance_jobs_reward_escrow"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeGmCashTransfer                            CorporationsCorporationIDWalletsDivisionJournalGetRefType = "gm_cash_transfer"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeGmPlexFeeRefund                           CorporationsCorporationIDWalletsDivisionJournalGetRefType = "gm_plex_fee_refund"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeIndustryJobTax                            CorporationsCorporationIDWalletsDivisionJournalGetRefType = "industry_job_tax"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeInfrastructureHubMaintenance              CorporationsCorporationIDWalletsDivisionJournalGetRefType = "infrastructure_hub_maintenance"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeInheritance                               CorporationsCorporationIDWalletsDivisionJournalGetRefType = "inheritance"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeInsurance                                 CorporationsCorporationIDWalletsDivisionJournalGetRefType = "insurance"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeInsurgencyCorruptionContributionReward    CorporationsCorporationIDWalletsDivisionJournalGetRefType = "insurgency_corruption_contribution_reward"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeInsurgencySuppressionContributionReward   CorporationsCorporationIDWalletsDivisionJournalGetRefType = "insurgency_suppression_contribution_reward"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeItemTraderPayment                         CorporationsCorporationIDWalletsDivisionJournalGetRefType = "item_trader_payment"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeJumpCloneActivationFee                    CorporationsCorporationIDWalletsDivisionJournalGetRefType = "jump_clone_activation_fee"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeJumpCloneInstallationFee                  CorporationsCorporationIDWalletsDivisionJournalGetRefType = "jump_clone_installation_fee"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeKillRightFee                              CorporationsCorporationIDWalletsDivisionJournalGetRefType = "kill_right_fee"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeLpStore                                   CorporationsCorporationIDWalletsDivisionJournalGetRefType = "lp_store"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeManufacturing                             CorporationsCorporationIDWalletsDivisionJournalGetRefType = "manufacturing"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeMarketEscrow                              CorporationsCorporationIDWalletsDivisionJournalGetRefType = "market_escrow"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeMarketFinePaid                            CorporationsCorporationIDWalletsDivisionJournalGetRefType = "market_fine_paid"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeMarketProviderTax                         CorporationsCorporationIDWalletsDivisionJournalGetRefType = "market_provider_tax"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeMarketTransaction                         CorporationsCorporationIDWalletsDivisionJournalGetRefType = "market_transaction"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeMedalCreation                             CorporationsCorporationIDWalletsDivisionJournalGetRefType = "medal_creation"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeMedalIssued                               CorporationsCorporationIDWalletsDivisionJournalGetRefType = "medal_issued"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeMilestoneRewardPayment                    CorporationsCorporationIDWalletsDivisionJournalGetRefType = "milestone_reward_payment"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeMissionCompletion                         CorporationsCorporationIDWalletsDivisionJournalGetRefType = "mission_completion"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeMissionCost                               CorporationsCorporationIDWalletsDivisionJournalGetRefType = "mission_cost"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeMissionExpiration                         CorporationsCorporationIDWalletsDivisionJournalGetRefType = "mission_expiration"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeMissionReward                             CorporationsCorporationIDWalletsDivisionJournalGetRefType = "mission_reward"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeOfficeRentalFee                           CorporationsCorporationIDWalletsDivisionJournalGetRefType = "office_rental_fee"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeOperationBonus                            CorporationsCorporationIDWalletsDivisionJournalGetRefType = "operation_bonus"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeOpportunityReward                         CorporationsCorporationIDWalletsDivisionJournalGetRefType = "opportunity_reward"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypePlanetaryConstruction                     CorporationsCorporationIDWalletsDivisionJournalGetRefType = "planetary_construction"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypePlanetaryExportTax                        CorporationsCorporationIDWalletsDivisionJournalGetRefType = "planetary_export_tax"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypePlanetaryImportTax                        CorporationsCorporationIDWalletsDivisionJournalGetRefType = "planetary_import_tax"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypePlayerDonation                            CorporationsCorporationIDWalletsDivisionJournalGetRefType = "player_donation"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypePlayerTrading                             CorporationsCorporationIDWalletsDivisionJournalGetRefType = "player_trading"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeProjectDiscoveryReward                    CorporationsCorporationIDWalletsDivisionJournalGetRefType = "project_discovery_reward"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeProjectDiscoveryTax                       CorporationsCorporationIDWalletsDivisionJournalGetRefType = "project_discovery_tax"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeProjectPayouts                            CorporationsCorporationIDWalletsDivisionJournalGetRefType = "project_payouts"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeReaction                                  CorporationsCorporationIDWalletsDivisionJournalGetRefType = "reaction"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeRedeemedIskToken                          CorporationsCorporationIDWalletsDivisionJournalGetRefType = "redeemed_isk_token"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeReleaseOfImpoundedProperty                CorporationsCorporationIDWalletsDivisionJournalGetRefType = "release_of_impounded_property"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeRepairBill                                CorporationsCorporationIDWalletsDivisionJournalGetRefType = "repair_bill"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeReprocessingTax                           CorporationsCorporationIDWalletsDivisionJournalGetRefType = "reprocessing_tax"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeResearchingMaterialProductivity           CorporationsCorporationIDWalletsDivisionJournalGetRefType = "researching_material_productivity"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeResearchingTechnology                     CorporationsCorporationIDWalletsDivisionJournalGetRefType = "researching_technology"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeResearchingTimeProductivity               CorporationsCorporationIDWalletsDivisionJournalGetRefType = "researching_time_productivity"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeResourceWarsReward                        CorporationsCorporationIDWalletsDivisionJournalGetRefType = "resource_wars_reward"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeReverseEngineering                        CorporationsCorporationIDWalletsDivisionJournalGetRefType = "reverse_engineering"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeSeasonChallengeReward                     CorporationsCorporationIDWalletsDivisionJournalGetRefType = "season_challenge_reward"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeSecurityProcessingFee                     CorporationsCorporationIDWalletsDivisionJournalGetRefType = "security_processing_fee"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeShares                                    CorporationsCorporationIDWalletsDivisionJournalGetRefType = "shares"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeSkillPurchase                             CorporationsCorporationIDWalletsDivisionJournalGetRefType = "skill_purchase"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeSkyhookClaimFee                           CorporationsCorporationIDWalletsDivisionJournalGetRefType = "skyhook_claim_fee"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeSovereignityBill                          CorporationsCorporationIDWalletsDivisionJournalGetRefType = "sovereignity_bill"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeStorePurchase                             CorporationsCorporationIDWalletsDivisionJournalGetRefType = "store_purchase"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeStorePurchaseRefund                       CorporationsCorporationIDWalletsDivisionJournalGetRefType = "store_purchase_refund"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeStructureGateJump                         CorporationsCorporationIDWalletsDivisionJournalGetRefType = "structure_gate_jump"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeTransactionTax                            CorporationsCorporationIDWalletsDivisionJournalGetRefType = "transaction_tax"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeUnderConstruction                         CorporationsCorporationIDWalletsDivisionJournalGetRefType = "under_construction"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeUpkeepAdjustmentFee                       CorporationsCorporationIDWalletsDivisionJournalGetRefType = "upkeep_adjustment_fee"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeWarAllyContract                           CorporationsCorporationIDWalletsDivisionJournalGetRefType = "war_ally_contract"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeWarFee                                    CorporationsCorporationIDWalletsDivisionJournalGetRefType = "war_fee"
	CorporationsCorporationIDWalletsDivisionJournalGetRefTypeWarFeeSurrender                           CorporationsCorporationIDWalletsDivisionJournalGetRefType = "war_fee_surrender"
)

// Defines values for FleetsFleetIDMembersGetRole.
const (
	FleetsFleetIDMembersGetRoleFleetCommander FleetsFleetIDMembersGetRole = "fleet_commander"
	FleetsFleetIDMembersGetRoleSquadCommander FleetsFleetIDMembersGetRole = "squad_commander"
	FleetsFleetIDMembersGetRoleSquadMember    FleetsFleetIDMembersGetRole = "squad_member"
	FleetsFleetIDMembersGetRoleWingCommander  FleetsFleetIDMembersGetRole = "wing_commander"
)

// Defines values for FwSystemsGetContested.
const (
	Captured    FwSystemsGetContested = "captured"
	Contested   FwSystemsGetContested = "contested"
	Uncontested FwSystemsGetContested = "uncontested"
	Vulnerable  FwSystemsGetContested = "vulnerable"
)

// Defines values for IncursionsGetState.
const (
	Established IncursionsGetState = "established"
	Mobilizing  IncursionsGetState = "mobilizing"
	Withdrawing IncursionsGetState = "withdrawing"
)

// Defines values for IndustrySystemsGetCostIndicesActivity.
const (
	Copying                       IndustrySystemsGetCostIndicesActivity = "copying"
	Duplicating                   IndustrySystemsGetCostIndicesActivity = "duplicating"
	Invention                     IndustrySystemsGetCostIndicesActivity = "invention"
	Manufacturing                 IndustrySystemsGetCostIndicesActivity = "manufacturing"
	None                          IndustrySystemsGetCostIndicesActivity = "none"
	Reaction                      IndustrySystemsGetCostIndicesActivity = "reaction"
	ResearchingMaterialEfficiency IndustrySystemsGetCostIndicesActivity = "researching_material_efficiency"
	ResearchingTechnology         IndustrySystemsGetCostIndicesActivity = "researching_technology"
	ResearchingTimeEfficiency     IndustrySystemsGetCostIndicesActivity = "researching_time_efficiency"
	ReverseEngineering            IndustrySystemsGetCostIndicesActivity = "reverse_engineering"
)

// Defines values for MarketsRegionIDOrdersGetRange.
const (
	MarketsRegionIDOrdersGetRangeN1          MarketsRegionIDOrdersGetRange = "1"
	MarketsRegionIDOrdersGetRangeN10         MarketsRegionIDOrdersGetRange = "10"
	MarketsRegionIDOrdersGetRangeN2          MarketsRegionIDOrdersGetRange = "2"
	MarketsRegionIDOrdersGetRangeN20         MarketsRegionIDOrdersGetRange = "20"
	MarketsRegionIDOrdersGetRangeN3          MarketsRegionIDOrdersGetRange = "3"
	MarketsRegionIDOrdersGetRangeN30         MarketsRegionIDOrdersGetRange = "30"
	MarketsRegionIDOrdersGetRangeN4          MarketsRegionIDOrdersGetRange = "4"
	MarketsRegionIDOrdersGetRangeN40         MarketsRegionIDOrdersGetRange = "40"
	MarketsRegionIDOrdersGetRangeN5          MarketsRegionIDOrdersGetRange = "5"
	MarketsRegionIDOrdersGetRangeRegion      MarketsRegionIDOrdersGetRange = "region"
	MarketsRegionIDOrdersGetRangeSolarsystem MarketsRegionIDOrdersGetRange = "solarsystem"
	MarketsRegionIDOrdersGetRangeStation     MarketsRegionIDOrdersGetRange = "station"
)

// Defines values for MarketsStructuresStructureIDGetRange.
const (
	MarketsStructuresStructureIDGetRangeN1          MarketsStructuresStructureIDGetRange = "1"
	MarketsStructuresStructureIDGetRangeN10         MarketsStructuresStructureIDGetRange = "10"
	MarketsStructuresStructureIDGetRangeN2          MarketsStructuresStructureIDGetRange = "2"
	MarketsStructuresStructureIDGetRangeN20         MarketsStructuresStructureIDGetRange = "20"
	MarketsStructuresStructureIDGetRangeN3          MarketsStructuresStructureIDGetRange = "3"
	MarketsStructuresStructureIDGetRangeN30         MarketsStructuresStructureIDGetRange = "30"
	MarketsStructuresStructureIDGetRangeN4          MarketsStructuresStructureIDGetRange = "4"
	MarketsStructuresStructureIDGetRangeN40         MarketsStructuresStructureIDGetRange = "40"
	MarketsStructuresStructureIDGetRangeN5          MarketsStructuresStructureIDGetRange = "5"
	MarketsStructuresStructureIDGetRangeRegion      MarketsStructuresStructureIDGetRange = "region"
	MarketsStructuresStructureIDGetRangeSolarsystem MarketsStructuresStructureIDGetRange = "solarsystem"
	MarketsStructuresStructureIDGetRangeStation     MarketsStructuresStructureIDGetRange = "station"
)

// Defines values for SovereigntyCampaignsGetEventType.
const (
	IhubDefense     SovereigntyCampaignsGetEventType = "ihub_defense"
	StationDefense  SovereigntyCampaignsGetEventType = "station_defense"
	StationFreeport SovereigntyCampaignsGetEventType = "station_freeport"
	TcuDefense      SovereigntyCampaignsGetEventType = "tcu_defense"
)

// Defines values for UniverseNamesPostCategory.
const (
	UniverseNamesPostCategoryAlliance      UniverseNamesPostCategory = "alliance"
	UniverseNamesPostCategoryCharacter     UniverseNamesPostCategory = "character"
	UniverseNamesPostCategoryConstellation UniverseNamesPostCategory = "constellation"
	UniverseNamesPostCategoryCorporation   UniverseNamesPostCategory = "corporation"
	UniverseNamesPostCategoryFaction       UniverseNamesPostCategory = "faction"
	UniverseNamesPostCategoryInventoryType UniverseNamesPostCategory = "inventory_type"
	UniverseNamesPostCategoryRegion        UniverseNamesPostCategory = "region"
	UniverseNamesPostCategorySolarSystem   UniverseNamesPostCategory = "solar_system"
	UniverseNamesPostCategoryStation       UniverseNamesPostCategory = "station"
)

// Defines values for UniverseStarsStarIDGetSpectralClass.
const (
	A0    UniverseStarsStarIDGetSpectralClass = "A0"
	A0IV  UniverseStarsStarIDGetSpectralClass = "A0IV"
	A0IV2 UniverseStarsStarIDGetSpectralClass = "A0IV2"
	F0IV  UniverseStarsStarIDGetSpectralClass = "F0 IV"
	F0V   UniverseStarsStarIDGetSpectralClass = "F0 V"
	F0VI  UniverseStarsStarIDGetSpectralClass = "F0 VI"
	F1IV  UniverseStarsStarIDGetSpectralClass = "F1 IV"
	F1V   UniverseStarsStarIDGetSpectralClass = "F1 V"
	F1VI  UniverseStarsStarIDGetSpectralClass = "F1 VI"
	F2IV  UniverseStarsStarIDGetSpectralClass = "F2 IV"
	F2V   UniverseStarsStarIDGetSpectralClass = "F2 V"
	F2VI  UniverseStarsStarIDGetSpectralClass = "F2 VI"
	F3IV  UniverseStarsStarIDGetSpectralClass = "F3 IV"
	F3V   UniverseStarsStarIDGetSpectralClass = "F3 V"
	F3VI  UniverseStarsStarIDGetSpectralClass = "F3 VI"
	F4IV  UniverseStarsStarIDGetSpectralClass = "F4 IV"
	F4V   UniverseStarsStarIDGetSpectralClass = "F4 V"
	F4VI  UniverseStarsStarIDGetSpectralClass = "F4 VI"
	F5IV  UniverseStarsStarIDGetSpectralClass = "F5 IV"
	F5V   UniverseStarsStarIDGetSpectralClass = "F5 V"
	F5VI  UniverseStarsStarIDGetSpectralClass = "F5 VI"
	F6IV  UniverseStarsStarIDGetSpectralClass = "F6 IV"
	F6V   UniverseStarsStarIDGetSpectralClass = "F6 V"
	F6VI  UniverseStarsStarIDGetSpectralClass = "F6 VI"
	F7V   UniverseStarsStarIDGetSpectralClass = "F7 V"
	F7VI  UniverseStarsStarIDGetSpectralClass = "F7 VI"
	F8V   UniverseStarsStarIDGetSpectralClass = "F8 V"
	F8VI  UniverseStarsStarIDGetSpectralClass = "F8 VI"
	F9IV  UniverseStarsStarIDGetSpectralClass = "F9 IV"
	F9V   UniverseStarsStarIDGetSpectralClass = "F9 V"
	F9VI  UniverseStarsStarIDGetSpectralClass = "F9 VI"
	G0IV  UniverseStarsStarIDGetSpectralClass = "G0 IV"
	G0V   UniverseStarsStarIDGetSpectralClass = "G0 V"
	G0VI  UniverseStarsStarIDGetSpectralClass = "G0 VI"
	G1IV  UniverseStarsStarIDGetSpectralClass = "G1 IV"
	G1V   UniverseStarsStarIDGetSpectralClass = "G1 V"
	G1VI  UniverseStarsStarIDGetSpectralClass = "G1 VI"
	G2IV  UniverseStarsStarIDGetSpectralClass = "G2 IV"
	G2V   UniverseStarsStarIDGetSpectralClass = "G2 V"
	G2VI  UniverseStarsStarIDGetSpectralClass = "G2 VI"
	G3IV  UniverseStarsStarIDGetSpectralClass = "G3 IV"
	G3V   UniverseStarsStarIDGetSpectralClass = "G3 V"
	G3VI  UniverseStarsStarIDGetSpectralClass = "G3 VI"
	G4IV  UniverseStarsStarIDGetSpectralClass = "G4 IV"
	G4V   UniverseStarsStarIDGetSpectralClass = "G4 V"
	G4VI  UniverseStarsStarIDGetSpectralClass = "G4 VI"
	G5IV  UniverseStarsStarIDGetSpectralClass = "G5 IV"
	G5V   UniverseStarsStarIDGetSpectralClass = "G5 V"
	G5VI  UniverseStarsStarIDGetSpectralClass = "G5 VI"
	G6V   UniverseStarsStarIDGetSpectralClass = "G6 V"
	G6VI  UniverseStarsStarIDGetSpectralClass = "G6 VI"
	G7IV  UniverseStarsStarIDGetSpectralClass = "G7 IV"
	G7V   UniverseStarsStarIDGetSpectralClass = "G7 V"
	G7VI  UniverseStarsStarIDGetSpectralClass = "G7 VI"
	G8IV  UniverseStarsStarIDGetSpectralClass = "G8 IV"
	G8V   UniverseStarsStarIDGetSpectralClass = "G8 V"
	G8VI  UniverseStarsStarIDGetSpectralClass = "G8 VI"
	G9V   UniverseStarsStarIDGetSpectralClass = "G9 V"
	G9VI  UniverseStarsStarIDGetSpectralClass = "G9 VI"
	K0IV  UniverseStarsStarIDGetSpectralClass = "K0 IV"
	K0V   UniverseStarsStarIDGetSpectralClass = "K0 V"
	K1IV  UniverseStarsStarIDGetSpectralClass = "K1 IV"
	K1V   UniverseStarsStarIDGetSpectralClass = "K1 V"
	K2IV  UniverseStarsStarIDGetSpectralClass = "K2 IV"
	K2V   UniverseStarsStarIDGetSpectralClass = "K2 V"
	K3IV  UniverseStarsStarIDGetSpectralClass = "K3 IV"
	K3V   UniverseStarsStarIDGetSpectralClass = "K3 V"
	K4IV  UniverseStarsStarIDGetSpectralClass = "K4 IV"
	K4V   UniverseStarsStarIDGetSpectralClass = "K4 V"
	K5IV  UniverseStarsStarIDGetSpectralClass = "K5 IV"
	K5V   UniverseStarsStarIDGetSpectralClass = "K5 V"
	K6IV  UniverseStarsStarIDGetSpectralClass = "K6 IV"
	K6V   UniverseStarsStarIDGetSpectralClass = "K6 V"
	K7IV  UniverseStarsStarIDGetSpectralClass = "K7 IV"
	K7V   UniverseStarsStarIDGetSpectralClass = "K7 V"
	K8IV  UniverseStarsStarIDGetSpectralClass = "K8 IV"
	K8V   UniverseStarsStarIDGetSpectralClass = "K8 V"
	K9IV  UniverseStarsStarIDGetSpectralClass = "K9 IV"
	K9V   UniverseStarsStarIDGetSpectralClass = "K9 V"
	M0V   UniverseStarsStarIDGetSpectralClass = "M0 V"
	M1V   UniverseStarsStarIDGetSpectralClass = "M1 V"
	M2V   UniverseStarsStarIDGetSpectralClass = "M2 V"
	M3V   UniverseStarsStarIDGetSpectralClass = "M3 V"
	M4V   UniverseStarsStarIDGetSpectralClass = "M4 V"
	M5V   UniverseStarsStarIDGetSpectralClass = "M5 V"
	M6V   UniverseStarsStarIDGetSpectralClass = "M6 V"
	M7V   UniverseStarsStarIDGetSpectralClass = "M7 V"
	M8V   UniverseStarsStarIDGetSpectralClass = "M8 V"
	M9V   UniverseStarsStarIDGetSpectralClass = "M9 V"
)

// Defines values for UniverseStationsStationIDGetServices.
const (
	UniverseStationsStationIDGetServicesAssasinationMissions UniverseStationsStationIDGetServices = "assasination-missions"
	UniverseStationsStationIDGetServicesBlackMarket          UniverseStationsStationIDGetServices = "black-market"
	UniverseStationsStationIDGetServicesBountyMissions       UniverseStationsStationIDGetServices = "bounty-missions"
	UniverseStationsStationIDGetServicesCloning              UniverseStationsStationIDGetServices = "cloning"
	UniverseStationsStationIDGetServicesCourierMissions      UniverseStationsStationIDGetServices = "courier-missions"
	UniverseStationsStationIDGetServicesDnaTherapy           UniverseStationsStationIDGetServices = "dna-therapy"
	UniverseStationsStationIDGetServicesDocking              UniverseStationsStationIDGetServices = "docking"
	UniverseStationsStationIDGetServicesFactory              UniverseStationsStationIDGetServices = "factory"
	UniverseStationsStationIDGetServicesFitting              UniverseStationsStationIDGetServices = "fitting"
	UniverseStationsStationIDGetServicesGambling             UniverseStationsStationIDGetServices = "gambling"
	UniverseStationsStationIDGetServicesInsurance            UniverseStationsStationIDGetServices = "insurance"
	UniverseStationsStationIDGetServicesInterbus             UniverseStationsStationIDGetServices = "interbus"
	UniverseStationsStationIDGetServicesJumpCloneFacility    UniverseStationsStationIDGetServices = "jump-clone-facility"
	UniverseStationsStationIDGetServicesLabratory            UniverseStationsStationIDGetServices = "labratory"
	UniverseStationsStationIDGetServicesLoyaltyPointStore    UniverseStationsStationIDGetServices = "loyalty-point-store"
	UniverseStationsStationIDGetServicesMarket               UniverseStationsStationIDGetServices = "market"
	UniverseStationsStationIDGetServicesNavyOffices          UniverseStationsStationIDGetServices = "navy-offices"
	UniverseStationsStationIDGetServicesNews                 UniverseStationsStationIDGetServices = "news"
	UniverseStationsStationIDGetServicesOfficeRental         UniverseStationsStationIDGetServices = "office-rental"
	UniverseStationsStationIDGetServicesPaintshop            UniverseStationsStationIDGetServices = "paintshop"
	UniverseStationsStationIDGetServicesRefinery             UniverseStationsStationIDGetServices = "refinery"
	UniverseStationsStationIDGetServicesRepairFacilities     UniverseStationsStationIDGetServices = "repair-facilities"
	UniverseStationsStationIDGetServicesReprocessingPlant    UniverseStationsStationIDGetServices = "reprocessing-plant"
	UniverseStationsStationIDGetServicesSecurityOffices      UniverseStationsStationIDGetServices = "security-offices"
	UniverseStationsStationIDGetServicesStockExchange        UniverseStationsStationIDGetServices = "stock-exchange"
	UniverseStationsStationIDGetServicesStorage              UniverseStationsStationIDGetServices = "storage"
	UniverseStationsStationIDGetServicesSurgery              UniverseStationsStationIDGetServices = "surgery"
)

// Defines values for AcceptLanguage.
const (
	AcceptLanguageDe AcceptLanguage = "de"
	AcceptLanguageEn AcceptLanguage = "en"
	AcceptLanguageEs AcceptLanguage = "es"
	AcceptLanguageFr AcceptLanguage = "fr"
	AcceptLanguageJa AcceptLanguage = "ja"
	AcceptLanguageKo AcceptLanguage = "ko"
	AcceptLanguageRu AcceptLanguage = "ru"
	AcceptLanguageZh AcceptLanguage = "zh"
)

// Defines values for GetAlliancesParamsAcceptLanguage.
const (
	GetAlliancesParamsAcceptLanguageDe GetAlliancesParamsAcceptLanguage = "de"
	GetAlliancesParamsAcceptLanguageEn GetAlliancesParamsAcceptLanguage = "en"
	GetAlliancesParamsAcceptLanguageEs GetAlliancesParamsAcceptLanguage = "es"
	GetAlliancesParamsAcceptLanguageFr GetAlliancesParamsAcceptLanguage = "fr"
	GetAlliancesParamsAcceptLanguageJa GetAlliancesParamsAcceptLanguage = "ja"
	GetAlliancesParamsAcceptLanguageKo GetAlliancesParamsAcceptLanguage = "ko"
	GetAlliancesParamsAcceptLanguageRu GetAlliancesParamsAcceptLanguage = "ru"
	GetAlliancesParamsAcceptLanguageZh GetAlliancesParamsAcceptLanguage = "zh"
)

// Defines values for GetAlliancesAllianceIDParamsAcceptLanguage.
const (
	GetAlliancesAllianceIDParamsAcceptLanguageDe GetAlliancesAllianceIDParamsAcceptLanguage = "de"
	GetAlliancesAllianceIDParamsAcceptLanguageEn GetAlliancesAllianceIDParamsAcceptLanguage = "en"
	GetAlliancesAllianceIDParamsAcceptLanguageEs GetAlliancesAllianceIDParamsAcceptLanguage = "es"
	GetAlliancesAllianceIDParamsAcceptLanguageFr GetAlliancesAllianceIDParamsAcceptLanguage = "fr"
	GetAlliancesAllianceIDParamsAcceptLanguageJa GetAlliancesAllianceIDParamsAcceptLanguage = "ja"
	GetAlliancesAllianceIDParamsAcceptLanguageKo GetAlliancesAllianceIDParamsAcceptLanguage = "ko"
	GetAlliancesAllianceIDParamsAcceptLanguageRu GetAlliancesAllianceIDParamsAcceptLanguage = "ru"
	GetAlliancesAllianceIDParamsAcceptLanguageZh GetAlliancesAllianceIDParamsAcceptLanguage = "zh"
)

// Defines values for GetAlliancesAllianceIDContactsParamsAcceptLanguage.
const (
	GetAlliancesAllianceIDContactsParamsAcceptLanguageDe GetAlliancesAllianceIDContactsParamsAcceptLanguage = "de"
	GetAlliancesAllianceIDContactsParamsAcceptLanguageEn GetAlliancesAllianceIDContactsParamsAcceptLanguage = "en"
	GetAlliancesAllianceIDContactsParamsAcceptLanguageEs GetAlliancesAllianceIDContactsParamsAcceptLanguage = "es"
	GetAlliancesAllianceIDContactsParamsAcceptLanguageFr GetAlliancesAllianceIDContactsParamsAcceptLanguage = "fr"
	GetAlliancesAllianceIDContactsParamsAcceptLanguageJa GetAlliancesAllianceIDContactsParamsAcceptLanguage = "ja"
	GetAlliancesAllianceIDContactsParamsAcceptLanguageKo GetAlliancesAllianceIDContactsParamsAcceptLanguage = "ko"
	GetAlliancesAllianceIDContactsParamsAcceptLanguageRu GetAlliancesAllianceIDContactsParamsAcceptLanguage = "ru"
	GetAlliancesAllianceIDContactsParamsAcceptLanguageZh GetAlliancesAllianceIDContactsParamsAcceptLanguage = "zh"
)

// Defines values for GetAlliancesAllianceIDContactsLabelsParamsAcceptLanguage.
const (
	GetAlliancesAllianceIDContactsLabelsParamsAcceptLanguageDe GetAlliancesAllianceIDContactsLabelsParamsAcceptLanguage = "de"
	GetAlliancesAllianceIDContactsLabelsParamsAcceptLanguageEn GetAlliancesAllianceIDContactsLabelsParamsAcceptLanguage = "en"
	GetAlliancesAllianceIDContactsLabelsParamsAcceptLanguageEs GetAlliancesAllianceIDContactsLabelsParamsAcceptLanguage = "es"
	GetAlliancesAllianceIDContactsLabelsParamsAcceptLanguageFr GetAlliancesAllianceIDContactsLabelsParamsAcceptLanguage = "fr"
	GetAlliancesAllianceIDContactsLabelsParamsAcceptLanguageJa GetAlliancesAllianceIDContactsLabelsParamsAcceptLanguage = "ja"
	GetAlliancesAllianceIDContactsLabelsParamsAcceptLanguageKo GetAlliancesAllianceIDContactsLabelsParamsAcceptLanguage = "ko"
	GetAlliancesAllianceIDContactsLabelsParamsAcceptLanguageRu GetAlliancesAllianceIDContactsLabelsParamsAcceptLanguage = "ru"
	GetAlliancesAllianceIDContactsLabelsParamsAcceptLanguageZh GetAlliancesAllianceIDContactsLabelsParamsAcceptLanguage = "zh"
)

// Defines values for GetAlliancesAllianceIDCorporationsParamsAcceptLanguage.
const (
	GetAlliancesAllianceIDCorporationsParamsAcceptLanguageDe GetAlliancesAllianceIDCorporationsParamsAcceptLanguage = "de"
	GetAlliancesAllianceIDCorporationsParamsAcceptLanguageEn GetAlliancesAllianceIDCorporationsParamsAcceptLanguage = "en"
	GetAlliancesAllianceIDCorporationsParamsAcceptLanguageEs GetAlliancesAllianceIDCorporationsParamsAcceptLanguage = "es"
	GetAlliancesAllianceIDCorporationsParamsAcceptLanguageFr GetAlliancesAllianceIDCorporationsParamsAcceptLanguage = "fr"
	GetAlliancesAllianceIDCorporationsParamsAcceptLanguageJa GetAlliancesAllianceIDCorporationsParamsAcceptLanguage = "ja"
	GetAlliancesAllianceIDCorporationsParamsAcceptLanguageKo GetAlliancesAllianceIDCorporationsParamsAcceptLanguage = "ko"
	GetAlliancesAllianceIDCorporationsParamsAcceptLanguageRu GetAlliancesAllianceIDCorporationsParamsAcceptLanguage = "ru"
	GetAlliancesAllianceIDCorporationsParamsAcceptLanguageZh GetAlliancesAllianceIDCorporationsParamsAcceptLanguage = "zh"
)

// Defines values for GetAlliancesAllianceIDIconsParamsAcceptLanguage.
const (
	GetAlliancesAllianceIDIconsParamsAcceptLanguageDe GetAlliancesAllianceIDIconsParamsAcceptLanguage = "de"
	GetAlliancesAllianceIDIconsParamsAcceptLanguageEn GetAlliancesAllianceIDIconsParamsAcceptLanguage = "en"
	GetAlliancesAllianceIDIconsParamsAcceptLanguageEs GetAlliancesAllianceIDIconsParamsAcceptLanguage = "es"
	GetAlliancesAllianceIDIconsParamsAcceptLanguageFr GetAlliancesAllianceIDIconsParamsAcceptLanguage = "fr"
	GetAlliancesAllianceIDIconsParamsAcceptLanguageJa GetAlliancesAllianceIDIconsParamsAcceptLanguage = "ja"
	GetAlliancesAllianceIDIconsParamsAcceptLanguageKo GetAlliancesAllianceIDIconsParamsAcceptLanguage = "ko"
	GetAlliancesAllianceIDIconsParamsAcceptLanguageRu GetAlliancesAllianceIDIconsParamsAcceptLanguage = "ru"
	GetAlliancesAllianceIDIconsParamsAcceptLanguageZh GetAlliancesAllianceIDIconsParamsAcceptLanguage = "zh"
)

// Defines values for PostCharactersAffiliationParamsAcceptLanguage.
const (
	PostCharactersAffiliationParamsAcceptLanguageDe PostCharactersAffiliationParamsAcceptLanguage = "de"
	PostCharactersAffiliationParamsAcceptLanguageEn PostCharactersAffiliationParamsAcceptLanguage = "en"
	PostCharactersAffiliationParamsAcceptLanguageEs PostCharactersAffiliationParamsAcceptLanguage = "es"
	PostCharactersAffiliationParamsAcceptLanguageFr PostCharactersAffiliationParamsAcceptLanguage = "fr"
	PostCharactersAffiliationParamsAcceptLanguageJa PostCharactersAffiliationParamsAcceptLanguage = "ja"
	PostCharactersAffiliationParamsAcceptLanguageKo PostCharactersAffiliationParamsAcceptLanguage = "ko"
	PostCharactersAffiliationParamsAcceptLanguageRu PostCharactersAffiliationParamsAcceptLanguage = "ru"
	PostCharactersAffiliationParamsAcceptLanguageZh PostCharactersAffiliationParamsAcceptLanguage = "zh"
)

// Defines values for GetCharactersCharacterIDParamsAcceptLanguage.
const (
	GetCharactersCharacterIDParamsAcceptLanguageDe GetCharactersCharacterIDParamsAcceptLanguage = "de"
	GetCharactersCharacterIDParamsAcceptLanguageEn GetCharactersCharacterIDParamsAcceptLanguage = "en"
	GetCharactersCharacterIDParamsAcceptLanguageEs GetCharactersCharacterIDParamsAcceptLanguage = "es"
	GetCharactersCharacterIDParamsAcceptLanguageFr GetCharactersCharacterIDParamsAcceptLanguage = "fr"
	GetCharactersCharacterIDParamsAcceptLanguageJa GetCharactersCharacterIDParamsAcceptLanguage = "ja"
	GetCharactersCharacterIDParamsAcceptLanguageKo GetCharactersCharacterIDParamsAcceptLanguage = "ko"
	GetCharactersCharacterIDParamsAcceptLanguageRu GetCharactersCharacterIDParamsAcceptLanguage = "ru"
	GetCharactersCharacterIDParamsAcceptLanguageZh GetCharactersCharacterIDParamsAcceptLanguage = "zh"
)

// Defines values for GetCharactersCharacterIDAgentsResearchParamsAcceptLanguage.
const (
	GetCharactersCharacterIDAgentsResearchParamsAcceptLanguageDe GetCharactersCharacterIDAgentsResearchParamsAcceptLanguage = "de"
	GetCharactersCharacterIDAgentsResearchParamsAcceptLanguageEn GetCharactersCharacterIDAgentsResearchParamsAcceptLanguage = "en"
	GetCharactersCharacterIDAgentsResearchParamsAcceptLanguageEs GetCharactersCharacterIDAgentsResearchParamsAcceptLanguage = "es"
	GetCharactersCharacterIDAgentsResearchParamsAcceptLanguageFr GetCharactersCharacterIDAgentsResearchParamsAcceptLanguage = "fr"
	GetCharactersCharacterIDAgentsResearchParamsAcceptLanguageJa GetCharactersCharacterIDAgentsResearchParamsAcceptLanguage = "ja"
	GetCharactersCharacterIDAgentsResearchParamsAcceptLanguageKo GetCharactersCharacterIDAgentsResearchParamsAcceptLanguage = "ko"
	GetCharactersCharacterIDAgentsResearchParamsAcceptLanguageRu GetCharactersCharacterIDAgentsResearchParamsAcceptLanguage = "ru"
	GetCharactersCharacterIDAgentsResearchParamsAcceptLanguageZh GetCharactersCharacterIDAgentsResearchParamsAcceptLanguage = "zh"
)

// Defines values for GetCharactersCharacterIDAssetsParamsAcceptLanguage.
const (
	GetCharactersCharacterIDAssetsParamsAcceptLanguageDe GetCharactersCharacterIDAssetsParamsAcceptLanguage = "de"
	GetCharactersCharacterIDAssetsParamsAcceptLanguageEn GetCharactersCharacterIDAssetsParamsAcceptLanguage = "en"
	GetCharactersCharacterIDAssetsParamsAcceptLanguageEs GetCharactersCharacterIDAssetsParamsAcceptLanguage = "es"
	GetCharactersCharacterIDAssetsParamsAcceptLanguageFr GetCharactersCharacterIDAssetsParamsAcceptLanguage = "fr"
	GetCharactersCharacterIDAssetsParamsAcceptLanguageJa GetCharactersCharacterIDAssetsParamsAcceptLanguage = "ja"
	GetCharactersCharacterIDAssetsParamsAcceptLanguageKo GetCharactersCharacterIDAssetsParamsAcceptLanguage = "ko"
	GetCharactersCharacterIDAssetsParamsAcceptLanguageRu GetCharactersCharacterIDAssetsParamsAcceptLanguage = "ru"
	GetCharactersCharacterIDAssetsParamsAcceptLanguageZh GetCharactersCharacterIDAssetsParamsAcceptLanguage = "zh"
)

// Defines values for PostCharactersCharacterIDAssetsLocationsParamsAcceptLanguage.
const (
	PostCharactersCharacterIDAssetsLocationsParamsAcceptLanguageDe PostCharactersCharacterIDAssetsLocationsParamsAcceptLanguage = "de"
	PostCharactersCharacterIDAssetsLocationsParamsAcceptLanguageEn PostCharactersCharacterIDAssetsLocationsParamsAcceptLanguage = "en"
	PostCharactersCharacterIDAssetsLocationsParamsAcceptLanguageEs PostCharactersCharacterIDAssetsLocationsParamsAcceptLanguage = "es"
	PostCharactersCharacterIDAssetsLocationsParamsAcceptLanguageFr PostCharactersCharacterIDAssetsLocationsParamsAcceptLanguage = "fr"
	PostCharactersCharacterIDAssetsLocationsParamsAcceptLanguageJa PostCharactersCharacterIDAssetsLocationsParamsAcceptLanguage = "ja"
	PostCharactersCharacterIDAssetsLocationsParamsAcceptLanguageKo PostCharactersCharacterIDAssetsLocationsParamsAcceptLanguage = "ko"
	PostCharactersCharacterIDAssetsLocationsParamsAcceptLanguageRu PostCharactersCharacterIDAssetsLocationsParamsAcceptLanguage = "ru"
	PostCharactersCharacterIDAssetsLocationsParamsAcceptLanguageZh PostCharactersCharacterIDAssetsLocationsParamsAcceptLanguage = "zh"
)

// Defines values for PostCharactersCharacterIDAssetsNamesParamsAcceptLanguage.
const (
	PostCharactersCharacterIDAssetsNamesParamsAcceptLanguageDe PostCharactersCharacterIDAssetsNamesParamsAcceptLanguage = "de"
	PostCharactersCharacterIDAssetsNamesParamsAcceptLanguageEn PostCharactersCharacterIDAssetsNamesParamsAcceptLanguage = "en"
	PostCharactersCharacterIDAssetsNamesParamsAcceptLanguageEs PostCharactersCharacterIDAssetsNamesParamsAcceptLanguage = "es"
	PostCharactersCharacterIDAssetsNamesParamsAcceptLanguageFr PostCharactersCharacterIDAssetsNamesParamsAcceptLanguage = "fr"
	PostCharactersCharacterIDAssetsNamesParamsAcceptLanguageJa PostCharactersCharacterIDAssetsNamesParamsAcceptLanguage = "ja"
	PostCharactersCharacterIDAssetsNamesParamsAcceptLanguageKo PostCharactersCharacterIDAssetsNamesParamsAcceptLanguage = "ko"
	PostCharactersCharacterIDAssetsNamesParamsAcceptLanguageRu PostCharactersCharacterIDAssetsNamesParamsAcceptLanguage = "ru"
	PostCharactersCharacterIDAssetsNamesParamsAcceptLanguageZh PostCharactersCharacterIDAssetsNamesParamsAcceptLanguage = "zh"
)

// Defines values for GetCharactersCharacterIDAttributesParamsAcceptLanguage.
const (
	GetCharactersCharacterIDAttributesParamsAcceptLanguageDe GetCharactersCharacterIDAttributesParamsAcceptLanguage = "de"
	GetCharactersCharacterIDAttributesParamsAcceptLanguageEn GetCharactersCharacterIDAttributesParamsAcceptLanguage = "en"
	GetCharactersCharacterIDAttributesParamsAcceptLanguageEs GetCharactersCharacterIDAttributesParamsAcceptLanguage = "es"
	GetCharactersCharacterIDAttributesParamsAcceptLanguageFr GetCharactersCharacterIDAttributesParamsAcceptLanguage = "fr"
	GetCharactersCharacterIDAttributesParamsAcceptLanguageJa GetCharactersCharacterIDAttributesParamsAcceptLanguage = "ja"
	GetCharactersCharacterIDAttributesParamsAcceptLanguageKo GetCharactersCharacterIDAttributesParamsAcceptLanguage = "ko"
	GetCharactersCharacterIDAttributesParamsAcceptLanguageRu GetCharactersCharacterIDAttributesParamsAcceptLanguage = "ru"
	GetCharactersCharacterIDAttributesParamsAcceptLanguageZh GetCharactersCharacterIDAttributesParamsAcceptLanguage = "zh"
)

// Defines values for GetCharactersCharacterIDBlueprintsParamsAcceptLanguage.
const (
	GetCharactersCharacterIDBlueprintsParamsAcceptLanguageDe GetCharactersCharacterIDBlueprintsParamsAcceptLanguage = "de"
	GetCharactersCharacterIDBlueprintsParamsAcceptLanguageEn GetCharactersCharacterIDBlueprintsParamsAcceptLanguage = "en"
	GetCharactersCharacterIDBlueprintsParamsAcceptLanguageEs GetCharactersCharacterIDBlueprintsParamsAcceptLanguage = "es"
	GetCharactersCharacterIDBlueprintsParamsAcceptLanguageFr GetCharactersCharacterIDBlueprintsParamsAcceptLanguage = "fr"
	GetCharactersCharacterIDBlueprintsParamsAcceptLanguageJa GetCharactersCharacterIDBlueprintsParamsAcceptLanguage = "ja"
	GetCharactersCharacterIDBlueprintsParamsAcceptLanguageKo GetCharactersCharacterIDBlueprintsParamsAcceptLanguage = "ko"
	GetCharactersCharacterIDBlueprintsParamsAcceptLanguageRu GetCharactersCharacterIDBlueprintsParamsAcceptLanguage = "ru"
	GetCharactersCharacterIDBlueprintsParamsAcceptLanguageZh GetCharactersCharacterIDBlueprintsParamsAcceptLanguage = "zh"
)

// Defines values for GetCharactersCharacterIDCalendarParamsAcceptLanguage.
const (
	GetCharactersCharacterIDCalendarParamsAcceptLanguageDe GetCharactersCharacterIDCalendarParamsAcceptLanguage = "de"
	GetCharactersCharacterIDCalendarParamsAcceptLanguageEn GetCharactersCharacterIDCalendarParamsAcceptLanguage = "en"
	GetCharactersCharacterIDCalendarParamsAcceptLanguageEs GetCharactersCharacterIDCalendarParamsAcceptLanguage = "es"
	GetCharactersCharacterIDCalendarParamsAcceptLanguageFr GetCharactersCharacterIDCalendarParamsAcceptLanguage = "fr"
	GetCharactersCharacterIDCalendarParamsAcceptLanguageJa GetCharactersCharacterIDCalendarParamsAcceptLanguage = "ja"
	GetCharactersCharacterIDCalendarParamsAcceptLanguageKo GetCharactersCharacterIDCalendarParamsAcceptLanguage = "ko"
	GetCharactersCharacterIDCalendarParamsAcceptLanguageRu GetCharactersCharacterIDCalendarParamsAcceptLanguage = "ru"
	GetCharactersCharacterIDCalendarParamsAcceptLanguageZh GetCharactersCharacterIDCalendarParamsAcceptLanguage = "zh"
)

// Defines values for GetCharactersCharacterIDCalendarEventIDParamsAcceptLanguage.
const (
	GetCharactersCharacterIDCalendarEventIDParamsAcceptLanguageDe GetCharactersCharacterIDCalendarEventIDParamsAcceptLanguage = "de"
	GetCharactersCharacterIDCalendarEventIDParamsAcceptLanguageEn GetCharactersCharacterIDCalendarEventIDParamsAcceptLanguage = "en"
	GetCharactersCharacterIDCalendarEventIDParamsAcceptLanguageEs GetCharactersCharacterIDCalendarEventIDParamsAcceptLanguage = "es"
	GetCharactersCharacterIDCalendarEventIDParamsAcceptLanguageFr GetCharactersCharacterIDCalendarEventIDParamsAcceptLanguage = "fr"
	GetCharactersCharacterIDCalendarEventIDParamsAcceptLanguageJa GetCharactersCharacterIDCalendarEventIDParamsAcceptLanguage = "ja"
	GetCharactersCharacterIDCalendarEventIDParamsAcceptLanguageKo GetCharactersCharacterIDCalendarEventIDParamsAcceptLanguage = "ko"
	GetCharactersCharacterIDCalendarEventIDParamsAcceptLanguageRu GetCharactersCharacterIDCalendarEventIDParamsAcceptLanguage = "ru"
	GetCharactersCharacterIDCalendarEventIDParamsAcceptLanguageZh GetCharactersCharacterIDCalendarEventIDParamsAcceptLanguage = "zh"
)

// Defines values for PutCharactersCharacterIDCalendarEventIDParamsAcceptLanguage.
const (
	PutCharactersCharacterIDCalendarEventIDParamsAcceptLanguageDe PutCharactersCharacterIDCalendarEventIDParamsAcceptLanguage = "de"
	PutCharactersCharacterIDCalendarEventIDParamsAcceptLanguageEn PutCharactersCharacterIDCalendarEventIDParamsAcceptLanguage = "en"
	PutCharactersCharacterIDCalendarEventIDParamsAcceptLanguageEs PutCharactersCharacterIDCalendarEventIDParamsAcceptLanguage = "es"
	PutCharactersCharacterIDCalendarEventIDParamsAcceptLanguageFr PutCharactersCharacterIDCalendarEventIDParamsAcceptLanguage = "fr"
	PutCharactersCharacterIDCalendarEventIDParamsAcceptLanguageJa PutCharactersCharacterIDCalendarEventIDParamsAcceptLanguage = "ja"
	PutCharactersCharacterIDCalendarEventIDParamsAcceptLanguageKo PutCharactersCharacterIDCalendarEventIDParamsAcceptLanguage = "ko"
	PutCharactersCharacterIDCalendarEventIDParamsAcceptLanguageRu PutCharactersCharacterIDCalendarEventIDParamsAcceptLanguage = "ru"
	PutCharactersCharacterIDCalendarEventIDParamsAcceptLanguageZh PutCharactersCharacterIDCalendarEventIDParamsAcceptLanguage = "zh"
)

// Defines values for PutCharactersCharacterIDCalendarEventIDJSONBodyResponse.
const (
	Accepted  PutCharactersCharacterIDCalendarEventIDJSONBodyResponse = "accepted"
	Declined  PutCharactersCharacterIDCalendarEventIDJSONBodyResponse = "declined"
	Tentative PutCharactersCharacterIDCalendarEventIDJSONBodyResponse = "tentative"
)

// Defines values for GetCharactersCharacterIDCalendarEventIDAttendeesParamsAcceptLanguage.
const (
	GetCharactersCharacterIDCalendarEventIDAttendeesParamsAcceptLanguageDe GetCharactersCharacterIDCalendarEventIDAttendeesParamsAcceptLanguage = "de"
	GetCharactersCharacterIDCalendarEventIDAttendeesParamsAcceptLanguageEn GetCharactersCharacterIDCalendarEventIDAttendeesParamsAcceptLanguage = "en"
	GetCharactersCharacterIDCalendarEventIDAttendeesParamsAcceptLanguageEs GetCharactersCharacterIDCalendarEventIDAttendeesParamsAcceptLanguage = "es"
	GetCharactersCharacterIDCalendarEventIDAttendeesParamsAcceptLanguageFr GetCharactersCharacterIDCalendarEventIDAttendeesParamsAcceptLanguage = "fr"
	GetCharactersCharacterIDCalendarEventIDAttendeesParamsAcceptLanguageJa GetCharactersCharacterIDCalendarEventIDAttendeesParamsAcceptLanguage = "ja"
	GetCharactersCharacterIDCalendarEventIDAttendeesParamsAcceptLanguageKo GetCharactersCharacterIDCalendarEventIDAttendeesParamsAcceptLanguage = "ko"
	GetCharactersCharacterIDCalendarEventIDAttendeesParamsAcceptLanguageRu GetCharactersCharacterIDCalendarEventIDAttendeesParamsAcceptLanguage = "ru"
	GetCharactersCharacterIDCalendarEventIDAttendeesParamsAcceptLanguageZh GetCharactersCharacterIDCalendarEventIDAttendeesParamsAcceptLanguage = "zh"
)

// Defines values for GetCharactersCharacterIDClonesParamsAcceptLanguage.
const (
	GetCharactersCharacterIDClonesParamsAcceptLanguageDe GetCharactersCharacterIDClonesParamsAcceptLanguage = "de"
	GetCharactersCharacterIDClonesParamsAcceptLanguageEn GetCharactersCharacterIDClonesParamsAcceptLanguage = "en"
	GetCharactersCharacterIDClonesParamsAcceptLanguageEs GetCharactersCharacterIDClonesParamsAcceptLanguage = "es"
	GetCharactersCharacterIDClonesParamsAcceptLanguageFr GetCharactersCharacterIDClonesParamsAcceptLanguage = "fr"
	GetCharactersCharacterIDClonesParamsAcceptLanguageJa GetCharactersCharacterIDClonesParamsAcceptLanguage = "ja"
	GetCharactersCharacterIDClonesParamsAcceptLanguageKo GetCharactersCharacterIDClonesParamsAcceptLanguage = "ko"
	GetCharactersCharacterIDClonesParamsAcceptLanguageRu GetCharactersCharacterIDClonesParamsAcceptLanguage = "ru"
	GetCharactersCharacterIDClonesParamsAcceptLanguageZh GetCharactersCharacterIDClonesParamsAcceptLanguage = "zh"
)

// Defines values for DeleteCharactersCharacterIDContactsParamsAcceptLanguage.
const (
	DeleteCharactersCharacterIDContactsParamsAcceptLanguageDe DeleteCharactersCharacterIDContactsParamsAcceptLanguage = "de"
	DeleteCharactersCharacterIDContactsParamsAcceptLanguageEn DeleteCharactersCharacterIDContactsParamsAcceptLanguage = "en"
	DeleteCharactersCharacterIDContactsParamsAcceptLanguageEs DeleteCharactersCharacterIDContactsParamsAcceptLanguage = "es"
	DeleteCharactersCharacterIDContactsParamsAcceptLanguageFr DeleteCharactersCharacterIDContactsParamsAcceptLanguage = "fr"
	DeleteCharactersCharacterIDContactsParamsAcceptLanguageJa DeleteCharactersCharacterIDContactsParamsAcceptLanguage = "ja"
	DeleteCharactersCharacterIDContactsParamsAcceptLanguageKo DeleteCharactersCharacterIDContactsParamsAcceptLanguage = "ko"
	DeleteCharactersCharacterIDContactsParamsAcceptLanguageRu DeleteCharactersCharacterIDContactsParamsAcceptLanguage = "ru"
	DeleteCharactersCharacterIDContactsParamsAcceptLanguageZh DeleteCharactersCharacterIDContactsParamsAcceptLanguage = "zh"
)

// Defines values for GetCharactersCharacterIDContactsParamsAcceptLanguage.
const (
	GetCharactersCharacterIDContactsParamsAcceptLanguageDe GetCharactersCharacterIDContactsParamsAcceptLanguage = "de"
	GetCharactersCharacterIDContactsParamsAcceptLanguageEn GetCharactersCharacterIDContactsParamsAcceptLanguage = "en"
	GetCharactersCharacterIDContactsParamsAcceptLanguageEs GetCharactersCharacterIDContactsParamsAcceptLanguage = "es"
	GetCharactersCharacterIDContactsParamsAcceptLanguageFr GetCharactersCharacterIDContactsParamsAcceptLanguage = "fr"
	GetCharactersCharacterIDContactsParamsAcceptLanguageJa GetCharactersCharacterIDContactsParamsAcceptLanguage = "ja"
	GetCharactersCharacterIDContactsParamsAcceptLanguageKo GetCharactersCharacterIDContactsParamsAcceptLanguage = "ko"
	GetCharactersCharacterIDContactsParamsAcceptLanguageRu GetCharactersCharacterIDContactsParamsAcceptLanguage = "ru"
	GetCharactersCharacterIDContactsParamsAcceptLanguageZh GetCharactersCharacterIDContactsParamsAcceptLanguage = "zh"
)

// Defines values for PostCharactersCharacterIDContactsParamsAcceptLanguage.
const (
	PostCharactersCharacterIDContactsParamsAcceptLanguageDe PostCharactersCharacterIDContactsParamsAcceptLanguage = "de"
	PostCharactersCharacterIDContactsParamsAcceptLanguageEn PostCharactersCharacterIDContactsParamsAcceptLanguage = "en"
	PostCharactersCharacterIDContactsParamsAcceptLanguageEs PostCharactersCharacterIDContactsParamsAcceptLanguage = "es"
	PostCharactersCharacterIDContactsParamsAcceptLanguageFr PostCharactersCharacterIDContactsParamsAcceptLanguage = "fr"
	PostCharactersCharacterIDContactsParamsAcceptLanguageJa PostCharactersCharacterIDContactsParamsAcceptLanguage = "ja"
	PostCharactersCharacterIDContactsParamsAcceptLanguageKo PostCharactersCharacterIDContactsParamsAcceptLanguage = "ko"
	PostCharactersCharacterIDContactsParamsAcceptLanguageRu PostCharactersCharacterIDContactsParamsAcceptLanguage = "ru"
	PostCharactersCharacterIDContactsParamsAcceptLanguageZh PostCharactersCharacterIDContactsParamsAcceptLanguage = "zh"
)

// Defines values for PutCharactersCharacterIDContactsParamsAcceptLanguage.
const (
	PutCharactersCharacterIDContactsParamsAcceptLanguageDe PutCharactersCharacterIDContactsParamsAcceptLanguage = "de"
	PutCharactersCharacterIDContactsParamsAcceptLanguageEn PutCharactersCharacterIDContactsParamsAcceptLanguage = "en"
	PutCharactersCharacterIDContactsParamsAcceptLanguageEs PutCharactersCharacterIDContactsParamsAcceptLanguage = "es"
	PutCharactersCharacterIDContactsParamsAcceptLanguageFr PutCharactersCharacterIDContactsParamsAcceptLanguage = "fr"
	PutCharactersCharacterIDContactsParamsAcceptLanguageJa PutCharactersCharacterIDContactsParamsAcceptLanguage = "ja"
	PutCharactersCharacterIDContactsParamsAcceptLanguageKo PutCharactersCharacterIDContactsParamsAcceptLanguage = "ko"
	PutCharactersCharacterIDContactsParamsAcceptLanguageRu PutCharactersCharacterIDContactsParamsAcceptLanguage = "ru"
	PutCharactersCharacterIDContactsParamsAcceptLanguageZh PutCharactersCharacterIDContactsParamsAcceptLanguage = "zh"
)

// Defines values for GetCharactersCharacterIDContactsLabelsParamsAcceptLanguage.
const (
	GetCharactersCharacterIDContactsLabelsParamsAcceptLanguageDe GetCharactersCharacterIDContactsLabelsParamsAcceptLanguage = "de"
	GetCharactersCharacterIDContactsLabelsParamsAcceptLanguageEn GetCharactersCharacterIDContactsLabelsParamsAcceptLanguage = "en"
	GetCharactersCharacterIDContactsLabelsParamsAcceptLanguageEs GetCharactersCharacterIDContactsLabelsParamsAcceptLanguage = "es"
	GetCharactersCharacterIDContactsLabelsParamsAcceptLanguageFr GetCharactersCharacterIDContactsLabelsParamsAcceptLanguage = "fr"
	GetCharactersCharacterIDContactsLabelsParamsAcceptLanguageJa GetCharactersCharacterIDContactsLabelsParamsAcceptLanguage = "ja"
	GetCharactersCharacterIDContactsLabelsParamsAcceptLanguageKo GetCharactersCharacterIDContactsLabelsParamsAcceptLanguage = "ko"
	GetCharactersCharacterIDContactsLabelsParamsAcceptLanguageRu GetCharactersCharacterIDContactsLabelsParamsAcceptLanguage = "ru"
	GetCharactersCharacterIDContactsLabelsParamsAcceptLanguageZh GetCharactersCharacterIDContactsLabelsParamsAcceptLanguage = "zh"
)

// Defines values for GetCharactersCharacterIDContractsParamsAcceptLanguage.
const (
	GetCharactersCharacterIDContractsParamsAcceptLanguageDe GetCharactersCharacterIDContractsParamsAcceptLanguage = "de"
	GetCharactersCharacterIDContractsParamsAcceptLanguageEn GetCharactersCharacterIDContractsParamsAcceptLanguage = "en"
	GetCharactersCharacterIDContractsParamsAcceptLanguageEs GetCharactersCharacterIDContractsParamsAcceptLanguage = "es"
	GetCharactersCharacterIDContractsParamsAcceptLanguageFr GetCharactersCharacterIDContractsParamsAcceptLanguage = "fr"
	GetCharactersCharacterIDContractsParamsAcceptLanguageJa GetCharactersCharacterIDContractsParamsAcceptLanguage = "ja"
	GetCharactersCharacterIDContractsParamsAcceptLanguageKo GetCharactersCharacterIDContractsParamsAcceptLanguage = "ko"
	GetCharactersCharacterIDContractsParamsAcceptLanguageRu GetCharactersCharacterIDContractsParamsAcceptLanguage = "ru"
	GetCharactersCharacterIDContractsParamsAcceptLanguageZh GetCharactersCharacterIDContractsParamsAcceptLanguage = "zh"
)

// Defines values for GetCharactersCharacterIDContractsContractIDBidsParamsAcceptLanguage.
const (
	GetCharactersCharacterIDContractsContractIDBidsParamsAcceptLanguageDe GetCharactersCharacterIDContractsContractIDBidsParamsAcceptLanguage = "de"
	GetCharactersCharacterIDContractsContractIDBidsParamsAcceptLanguageEn GetCharactersCharacterIDContractsContractIDBidsParamsAcceptLanguage = "en"
	GetCharactersCharacterIDContractsContractIDBidsParamsAcceptLanguageEs GetCharactersCharacterIDContractsContractIDBidsParamsAcceptLanguage = "es"
	GetCharactersCharacterIDContractsContractIDBidsParamsAcceptLanguageFr GetCharactersCharacterIDContractsContractIDBidsParamsAcceptLanguage = "fr"
	GetCharactersCharacterIDContractsContractIDBidsParamsAcceptLanguageJa GetCharactersCharacterIDContractsContractIDBidsParamsAcceptLanguage = "ja"
	GetCharactersCharacterIDContractsContractIDBidsParamsAcceptLanguageKo GetCharactersCharacterIDContractsContractIDBidsParamsAcceptLanguage = "ko"
	GetCharactersCharacterIDContractsContractIDBidsParamsAcceptLanguageRu GetCharactersCharacterIDContractsContractIDBidsParamsAcceptLanguage = "ru"
	GetCharactersCharacterIDContractsContractIDBidsParamsAcceptLanguageZh GetCharactersCharacterIDContractsContractIDBidsParamsAcceptLanguage = "zh"
)

// Defines values for GetCharactersCharacterIDContractsContractIDItemsParamsAcceptLanguage.
const (
	GetCharactersCharacterIDContractsContractIDItemsParamsAcceptLanguageDe GetCharactersCharacterIDContractsContractIDItemsParamsAcceptLanguage = "de"
	GetCharactersCharacterIDContractsContractIDItemsParamsAcceptLanguageEn GetCharactersCharacterIDContractsContractIDItemsParamsAcceptLanguage = "en"
	GetCharactersCharacterIDContractsContractIDItemsParamsAcceptLanguageEs GetCharactersCharacterIDContractsContractIDItemsParamsAcceptLanguage = "es"
	GetCharactersCharacterIDContractsContractIDItemsParamsAcceptLanguageFr GetCharactersCharacterIDContractsContractIDItemsParamsAcceptLanguage = "fr"
	GetCharactersCharacterIDContractsContractIDItemsParamsAcceptLanguageJa GetCharactersCharacterIDContractsContractIDItemsParamsAcceptLanguage = "ja"
	GetCharactersCharacterIDContractsContractIDItemsParamsAcceptLanguageKo GetCharactersCharacterIDContractsContractIDItemsParamsAcceptLanguage = "ko"
	GetCharactersCharacterIDContractsContractIDItemsParamsAcceptLanguageRu GetCharactersCharacterIDContractsContractIDItemsParamsAcceptLanguage = "ru"
	GetCharactersCharacterIDContractsContractIDItemsParamsAcceptLanguageZh GetCharactersCharacterIDContractsContractIDItemsParamsAcceptLanguage = "zh"
)

// Defines values for GetCharactersCharacterIDCorporationhistoryParamsAcceptLanguage.
const (
	GetCharactersCharacterIDCorporationhistoryParamsAcceptLanguageDe GetCharactersCharacterIDCorporationhistoryParamsAcceptLanguage = "de"
	GetCharactersCharacterIDCorporationhistoryParamsAcceptLanguageEn GetCharactersCharacterIDCorporationhistoryParamsAcceptLanguage = "en"
	GetCharactersCharacterIDCorporationhistoryParamsAcceptLanguageEs GetCharactersCharacterIDCorporationhistoryParamsAcceptLanguage = "es"
	GetCharactersCharacterIDCorporationhistoryParamsAcceptLanguageFr GetCharactersCharacterIDCorporationhistoryParamsAcceptLanguage = "fr"
	GetCharactersCharacterIDCorporationhistoryParamsAcceptLanguageJa GetCharactersCharacterIDCorporationhistoryParamsAcceptLanguage = "ja"
	GetCharactersCharacterIDCorporationhistoryParamsAcceptLanguageKo GetCharactersCharacterIDCorporationhistoryParamsAcceptLanguage = "ko"
	GetCharactersCharacterIDCorporationhistoryParamsAcceptLanguageRu GetCharactersCharacterIDCorporationhistoryParamsAcceptLanguage = "ru"
	GetCharactersCharacterIDCorporationhistoryParamsAcceptLanguageZh GetCharactersCharacterIDCorporationhistoryParamsAcceptLanguage = "zh"
)

// Defines values for PostCharactersCharacterIDCspaParamsAcceptLanguage.
const (
	PostCharactersCharacterIDCspaParamsAcceptLanguageDe PostCharactersCharacterIDCspaParamsAcceptLanguage = "de"
	PostCharactersCharacterIDCspaParamsAcceptLanguageEn PostCharactersCharacterIDCspaParamsAcceptLanguage = "en"
	PostCharactersCharacterIDCspaParamsAcceptLanguageEs PostCharactersCharacterIDCspaParamsAcceptLanguage = "es"
	PostCharactersCharacterIDCspaParamsAcceptLanguageFr PostCharactersCharacterIDCspaParamsAcceptLanguage = "fr"
	PostCharactersCharacterIDCspaParamsAcceptLanguageJa PostCharactersCharacterIDCspaParamsAcceptLanguage = "ja"
	PostCharactersCharacterIDCspaParamsAcceptLanguageKo PostCharactersCharacterIDCspaParamsAcceptLanguage = "ko"
	PostCharactersCharacterIDCspaParamsAcceptLanguageRu PostCharactersCharacterIDCspaParamsAcceptLanguage = "ru"
	PostCharactersCharacterIDCspaParamsAcceptLanguageZh PostCharactersCharacterIDCspaParamsAcceptLanguage = "zh"
)

// Defines values for GetCharactersCharacterIDFatigueParamsAcceptLanguage.
const (
	GetCharactersCharacterIDFatigueParamsAcceptLanguageDe GetCharactersCharacterIDFatigueParamsAcceptLanguage = "de"
	GetCharactersCharacterIDFatigueParamsAcceptLanguageEn GetCharactersCharacterIDFatigueParamsAcceptLanguage = "en"
	GetCharactersCharacterIDFatigueParamsAcceptLanguageEs GetCharactersCharacterIDFatigueParamsAcceptLanguage = "es"
	GetCharactersCharacterIDFatigueParamsAcceptLanguageFr GetCharactersCharacterIDFatigueParamsAcceptLanguage = "fr"
	GetCharactersCharacterIDFatigueParamsAcceptLanguageJa GetCharactersCharacterIDFatigueParamsAcceptLanguage = "ja"
	GetCharactersCharacterIDFatigueParamsAcceptLanguageKo GetCharactersCharacterIDFatigueParamsAcceptLanguage = "ko"
	GetCharactersCharacterIDFatigueParamsAcceptLanguageRu GetCharactersCharacterIDFatigueParamsAcceptLanguage = "ru"
	GetCharactersCharacterIDFatigueParamsAcceptLanguageZh GetCharactersCharacterIDFatigueParamsAcceptLanguage = "zh"
)

// Defines values for GetCharactersCharacterIDFittingsParamsAcceptLanguage.
const (
	GetCharactersCharacterIDFittingsParamsAcceptLanguageDe GetCharactersCharacterIDFittingsParamsAcceptLanguage = "de"
	GetCharactersCharacterIDFittingsParamsAcceptLanguageEn GetCharactersCharacterIDFittingsParamsAcceptLanguage = "en"
	GetCharactersCharacterIDFittingsParamsAcceptLanguageEs GetCharactersCharacterIDFittingsParamsAcceptLanguage = "es"
	GetCharactersCharacterIDFittingsParamsAcceptLanguageFr GetCharactersCharacterIDFittingsParamsAcceptLanguage = "fr"
	GetCharactersCharacterIDFittingsParamsAcceptLanguageJa GetCharactersCharacterIDFittingsParamsAcceptLanguage = "ja"
	GetCharactersCharacterIDFittingsParamsAcceptLanguageKo GetCharactersCharacterIDFittingsParamsAcceptLanguage = "ko"
	GetCharactersCharacterIDFittingsParamsAcceptLanguageRu GetCharactersCharacterIDFittingsParamsAcceptLanguage = "ru"
	GetCharactersCharacterIDFittingsParamsAcceptLanguageZh GetCharactersCharacterIDFittingsParamsAcceptLanguage = "zh"
)

// Defines values for PostCharactersCharacterIDFittingsParamsAcceptLanguage.
const (
	PostCharactersCharacterIDFittingsParamsAcceptLanguageDe PostCharactersCharacterIDFittingsParamsAcceptLanguage = "de"
	PostCharactersCharacterIDFittingsParamsAcceptLanguageEn PostCharactersCharacterIDFittingsParamsAcceptLanguage = "en"
	PostCharactersCharacterIDFittingsParamsAcceptLanguageEs PostCharactersCharacterIDFittingsParamsAcceptLanguage = "es"
	PostCharactersCharacterIDFittingsParamsAcceptLanguageFr PostCharactersCharacterIDFittingsParamsAcceptLanguage = "fr"
	PostCharactersCharacterIDFittingsParamsAcceptLanguageJa PostCharactersCharacterIDFittingsParamsAcceptLanguage = "ja"
	PostCharactersCharacterIDFittingsParamsAcceptLanguageKo PostCharactersCharacterIDFittingsParamsAcceptLanguage = "ko"
	PostCharactersCharacterIDFittingsParamsAcceptLanguageRu PostCharactersCharacterIDFittingsParamsAcceptLanguage = "ru"
	PostCharactersCharacterIDFittingsParamsAcceptLanguageZh PostCharactersCharacterIDFittingsParamsAcceptLanguage = "zh"
)

// Defines values for PostCharactersCharacterIDFittingsJSONBodyItemsFlag.
const (
	Cargo          PostCharactersCharacterIDFittingsJSONBodyItemsFlag = "Cargo"
	DroneBay       PostCharactersCharacterIDFittingsJSONBodyItemsFlag = "DroneBay"
	FighterBay     PostCharactersCharacterIDFittingsJSONBodyItemsFlag = "FighterBay"
	HiSlot0        PostCharactersCharacterIDFittingsJSONBodyItemsFlag = "HiSlot0"
	HiSlot1        PostCharactersCharacterIDFittingsJSONBodyItemsFlag = "HiSlot1"
	HiSlot2        PostCharactersCharacterIDFittingsJSONBodyItemsFlag = "HiSlot2"
	HiSlot3        PostCharactersCharacterIDFittingsJSONBodyItemsFlag = "HiSlot3"
	HiSlot4        PostCharactersCharacterIDFittingsJSONBodyItemsFlag = "HiSlot4"
	HiSlot5        PostCharactersCharacterIDFittingsJSONBodyItemsFlag = "HiSlot5"
	HiSlot6        PostCharactersCharacterIDFittingsJSONBodyItemsFlag = "HiSlot6"
	HiSlot7        PostCharactersCharacterIDFittingsJSONBodyItemsFlag = "HiSlot7"
	Invalid        PostCharactersCharacterIDFittingsJSONBodyItemsFlag = "Invalid"
	LoSlot0        PostCharactersCharacterIDFittingsJSONBodyItemsFlag = "LoSlot0"
	LoSlot1        PostCharactersCharacterIDFittingsJSONBodyItemsFlag = "LoSlot1"
	LoSlot2        PostCharactersCharacterIDFittingsJSONBodyItemsFlag = "LoSlot2"
	LoSlot3        PostCharactersCharacterIDFittingsJSONBodyItemsFlag = "LoSlot3"
	LoSlot4        PostCharactersCharacterIDFittingsJSONBodyItemsFlag = "LoSlot4"
	LoSlot5        PostCharactersCharacterIDFittingsJSONBodyItemsFlag = "LoSlot5"
	LoSlot6        PostCharactersCharacterIDFittingsJSONBodyItemsFlag = "LoSlot6"
	LoSlot7        PostCharactersCharacterIDFittingsJSONBodyItemsFlag = "LoSlot7"
	MedSlot0       PostCharactersCharacterIDFittingsJSONBodyItemsFlag = "MedSlot0"
	MedSlot1       PostCharactersCharacterIDFittingsJSONBodyItemsFlag = "MedSlot1"
	MedSlot2       PostCharactersCharacterIDFittingsJSONBodyItemsFlag = "MedSlot2"
	MedSlot3       PostCharactersCharacterIDFittingsJSONBodyItemsFlag = "MedSlot3"
	MedSlot4       PostCharactersCharacterIDFittingsJSONBodyItemsFlag = "MedSlot4"
	MedSlot5       PostCharactersCharacterIDFittingsJSONBodyItemsFlag = "MedSlot5"
	MedSlot6       PostCharactersCharacterIDFittingsJSONBodyItemsFlag = "MedSlot6"
	MedSlot7       PostCharactersCharacterIDFittingsJSONBodyItemsFlag = "MedSlot7"
	RigSlot0       PostCharactersCharacterIDFittingsJSONBodyItemsFlag = "RigSlot0"
	RigSlot1       PostCharactersCharacterIDFittingsJSONBodyItemsFlag = "RigSlot1"
	RigSlot2       PostCharactersCharacterIDFittingsJSONBodyItemsFlag = "RigSlot2"
	ServiceSlot0   PostCharactersCharacterIDFittingsJSONBodyItemsFlag = "ServiceSlot0"
	ServiceSlot1   PostCharactersCharacterIDFittingsJSONBodyItemsFlag = "ServiceSlot1"
	ServiceSlot2   PostCharactersCharacterIDFittingsJSONBodyItemsFlag = "ServiceSlot2"
	ServiceSlot3   PostCharactersCharacterIDFittingsJSONBodyItemsFlag = "ServiceSlot3"
	ServiceSlot4   PostCharactersCharacterIDFittingsJSONBodyItemsFlag = "ServiceSlot4"
	ServiceSlot5   PostCharactersCharacterIDFittingsJSONBodyItemsFlag = "ServiceSlot5"
	ServiceSlot6   PostCharactersCharacterIDFittingsJSONBodyItemsFlag = "ServiceSlot6"
	ServiceSlot7   PostCharactersCharacterIDFittingsJSONBodyItemsFlag = "ServiceSlot7"
	SubSystemSlot0 PostCharactersCharacterIDFittingsJSONBodyItemsFlag = "SubSystemSlot0"
	SubSystemSlot1 PostCharactersCharacterIDFittingsJSONBodyItemsFlag = "SubSystemSlot1"
	SubSystemSlot2 PostCharactersCharacterIDFittingsJSONBodyItemsFlag = "SubSystemSlot2"
	SubSystemSlot3 PostCharactersCharacterIDFittingsJSONBodyItemsFlag = "SubSystemSlot3"
)

// Defines values for DeleteCharactersCharacterIDFittingsFittingIDParamsAcceptLanguage.
const (
	DeleteCharactersCharacterIDFittingsFittingIDParamsAcceptLanguageDe DeleteCharactersCharacterIDFittingsFittingIDParamsAcceptLanguage = "de"
	DeleteCharactersCharacterIDFittingsFittingIDParamsAcceptLanguageEn DeleteCharactersCharacterIDFittingsFittingIDParamsAcceptLanguage = "en"
	DeleteCharactersCharacterIDFittingsFittingIDParamsAcceptLanguageEs DeleteCharactersCharacterIDFittingsFittingIDParamsAcceptLanguage = "es"
	DeleteCharactersCharacterIDFittingsFittingIDParamsAcceptLanguageFr DeleteCharactersCharacterIDFittingsFittingIDParamsAcceptLanguage = "fr"
	DeleteCharactersCharacterIDFittingsFittingIDParamsAcceptLanguageJa DeleteCharactersCharacterIDFittingsFittingIDParamsAcceptLanguage = "ja"
	DeleteCharactersCharacterIDFittingsFittingIDParamsAcceptLanguageKo DeleteCharactersCharacterIDFittingsFittingIDParamsAcceptLanguage = "ko"
	DeleteCharactersCharacterIDFittingsFittingIDParamsAcceptLanguageRu DeleteCharactersCharacterIDFittingsFittingIDParamsAcceptLanguage = "ru"
	DeleteCharactersCharacterIDFittingsFittingIDParamsAcceptLanguageZh DeleteCharactersCharacterIDFittingsFittingIDParamsAcceptLanguage = "zh"
)

// Defines values for GetCharactersCharacterIDFleetParamsAcceptLanguage.
const (
	GetCharactersCharacterIDFleetParamsAcceptLanguageDe GetCharactersCharacterIDFleetParamsAcceptLanguage = "de"
	GetCharactersCharacterIDFleetParamsAcceptLanguageEn GetCharactersCharacterIDFleetParamsAcceptLanguage = "en"
	GetCharactersCharacterIDFleetParamsAcceptLanguageEs GetCharactersCharacterIDFleetParamsAcceptLanguage = "es"
	GetCharactersCharacterIDFleetParamsAcceptLanguageFr GetCharactersCharacterIDFleetParamsAcceptLanguage = "fr"
	GetCharactersCharacterIDFleetParamsAcceptLanguageJa GetCharactersCharacterIDFleetParamsAcceptLanguage = "ja"
	GetCharactersCharacterIDFleetParamsAcceptLanguageKo GetCharactersCharacterIDFleetParamsAcceptLanguage = "ko"
	GetCharactersCharacterIDFleetParamsAcceptLanguageRu GetCharactersCharacterIDFleetParamsAcceptLanguage = "ru"
	GetCharactersCharacterIDFleetParamsAcceptLanguageZh GetCharactersCharacterIDFleetParamsAcceptLanguage = "zh"
)

// Defines values for GetCharactersCharacterIDFwStatsParamsAcceptLanguage.
const (
	GetCharactersCharacterIDFwStatsParamsAcceptLanguageDe GetCharactersCharacterIDFwStatsParamsAcceptLanguage = "de"
	GetCharactersCharacterIDFwStatsParamsAcceptLanguageEn GetCharactersCharacterIDFwStatsParamsAcceptLanguage = "en"
	GetCharactersCharacterIDFwStatsParamsAcceptLanguageEs GetCharactersCharacterIDFwStatsParamsAcceptLanguage = "es"
	GetCharactersCharacterIDFwStatsParamsAcceptLanguageFr GetCharactersCharacterIDFwStatsParamsAcceptLanguage = "fr"
	GetCharactersCharacterIDFwStatsParamsAcceptLanguageJa GetCharactersCharacterIDFwStatsParamsAcceptLanguage = "ja"
	GetCharactersCharacterIDFwStatsParamsAcceptLanguageKo GetCharactersCharacterIDFwStatsParamsAcceptLanguage = "ko"
	GetCharactersCharacterIDFwStatsParamsAcceptLanguageRu GetCharactersCharacterIDFwStatsParamsAcceptLanguage = "ru"
	GetCharactersCharacterIDFwStatsParamsAcceptLanguageZh GetCharactersCharacterIDFwStatsParamsAcceptLanguage = "zh"
)

// Defines values for GetCharactersCharacterIDImplantsParamsAcceptLanguage.
const (
	GetCharactersCharacterIDImplantsParamsAcceptLanguageDe GetCharactersCharacterIDImplantsParamsAcceptLanguage = "de"
	GetCharactersCharacterIDImplantsParamsAcceptLanguageEn GetCharactersCharacterIDImplantsParamsAcceptLanguage = "en"
	GetCharactersCharacterIDImplantsParamsAcceptLanguageEs GetCharactersCharacterIDImplantsParamsAcceptLanguage = "es"
	GetCharactersCharacterIDImplantsParamsAcceptLanguageFr GetCharactersCharacterIDImplantsParamsAcceptLanguage = "fr"
	GetCharactersCharacterIDImplantsParamsAcceptLanguageJa GetCharactersCharacterIDImplantsParamsAcceptLanguage = "ja"
	GetCharactersCharacterIDImplantsParamsAcceptLanguageKo GetCharactersCharacterIDImplantsParamsAcceptLanguage = "ko"
	GetCharactersCharacterIDImplantsParamsAcceptLanguageRu GetCharactersCharacterIDImplantsParamsAcceptLanguage = "ru"
	GetCharactersCharacterIDImplantsParamsAcceptLanguageZh GetCharactersCharacterIDImplantsParamsAcceptLanguage = "zh"
)

// Defines values for GetCharactersCharacterIDIndustryJobsParamsAcceptLanguage.
const (
	GetCharactersCharacterIDIndustryJobsParamsAcceptLanguageDe GetCharactersCharacterIDIndustryJobsParamsAcceptLanguage = "de"
	GetCharactersCharacterIDIndustryJobsParamsAcceptLanguageEn GetCharactersCharacterIDIndustryJobsParamsAcceptLanguage = "en"
	GetCharactersCharacterIDIndustryJobsParamsAcceptLanguageEs GetCharactersCharacterIDIndustryJobsParamsAcceptLanguage = "es"
	GetCharactersCharacterIDIndustryJobsParamsAcceptLanguageFr GetCharactersCharacterIDIndustryJobsParamsAcceptLanguage = "fr"
	GetCharactersCharacterIDIndustryJobsParamsAcceptLanguageJa GetCharactersCharacterIDIndustryJobsParamsAcceptLanguage = "ja"
	GetCharactersCharacterIDIndustryJobsParamsAcceptLanguageKo GetCharactersCharacterIDIndustryJobsParamsAcceptLanguage = "ko"
	GetCharactersCharacterIDIndustryJobsParamsAcceptLanguageRu GetCharactersCharacterIDIndustryJobsParamsAcceptLanguage = "ru"
	GetCharactersCharacterIDIndustryJobsParamsAcceptLanguageZh GetCharactersCharacterIDIndustryJobsParamsAcceptLanguage = "zh"
)

// Defines values for GetCharactersCharacterIDKillmailsRecentParamsAcceptLanguage.
const (
	GetCharactersCharacterIDKillmailsRecentParamsAcceptLanguageDe GetCharactersCharacterIDKillmailsRecentParamsAcceptLanguage = "de"
	GetCharactersCharacterIDKillmailsRecentParamsAcceptLanguageEn GetCharactersCharacterIDKillmailsRecentParamsAcceptLanguage = "en"
	GetCharactersCharacterIDKillmailsRecentParamsAcceptLanguageEs GetCharactersCharacterIDKillmailsRecentParamsAcceptLanguage = "es"
	GetCharactersCharacterIDKillmailsRecentParamsAcceptLanguageFr GetCharactersCharacterIDKillmailsRecentParamsAcceptLanguage = "fr"
	GetCharactersCharacterIDKillmailsRecentParamsAcceptLanguageJa GetCharactersCharacterIDKillmailsRecentParamsAcceptLanguage = "ja"
	GetCharactersCharacterIDKillmailsRecentParamsAcceptLanguageKo GetCharactersCharacterIDKillmailsRecentParamsAcceptLanguage = "ko"
	GetCharactersCharacterIDKillmailsRecentParamsAcceptLanguageRu GetCharactersCharacterIDKillmailsRecentParamsAcceptLanguage = "ru"
	GetCharactersCharacterIDKillmailsRecentParamsAcceptLanguageZh GetCharactersCharacterIDKillmailsRecentParamsAcceptLanguage = "zh"
)

// Defines values for GetCharactersCharacterIDLocationParamsAcceptLanguage.
const (
	GetCharactersCharacterIDLocationParamsAcceptLanguageDe GetCharactersCharacterIDLocationParamsAcceptLanguage = "de"
	GetCharactersCharacterIDLocationParamsAcceptLanguageEn GetCharactersCharacterIDLocationParamsAcceptLanguage = "en"
	GetCharactersCharacterIDLocationParamsAcceptLanguageEs GetCharactersCharacterIDLocationParamsAcceptLanguage = "es"
	GetCharactersCharacterIDLocationParamsAcceptLanguageFr GetCharactersCharacterIDLocationParamsAcceptLanguage = "fr"
	GetCharactersCharacterIDLocationParamsAcceptLanguageJa GetCharactersCharacterIDLocationParamsAcceptLanguage = "ja"
	GetCharactersCharacterIDLocationParamsAcceptLanguageKo GetCharactersCharacterIDLocationParamsAcceptLanguage = "ko"
	GetCharactersCharacterIDLocationParamsAcceptLanguageRu GetCharactersCharacterIDLocationParamsAcceptLanguage = "ru"
	GetCharactersCharacterIDLocationParamsAcceptLanguageZh GetCharactersCharacterIDLocationParamsAcceptLanguage = "zh"
)

// Defines values for GetCharactersCharacterIDLoyaltyPointsParamsAcceptLanguage.
const (
	GetCharactersCharacterIDLoyaltyPointsParamsAcceptLanguageDe GetCharactersCharacterIDLoyaltyPointsParamsAcceptLanguage = "de"
	GetCharactersCharacterIDLoyaltyPointsParamsAcceptLanguageEn GetCharactersCharacterIDLoyaltyPointsParamsAcceptLanguage = "en"
	GetCharactersCharacterIDLoyaltyPointsParamsAcceptLanguageEs GetCharactersCharacterIDLoyaltyPointsParamsAcceptLanguage = "es"
	GetCharactersCharacterIDLoyaltyPointsParamsAcceptLanguageFr GetCharactersCharacterIDLoyaltyPointsParamsAcceptLanguage = "fr"
	GetCharactersCharacterIDLoyaltyPointsParamsAcceptLanguageJa GetCharactersCharacterIDLoyaltyPointsParamsAcceptLanguage = "ja"
	GetCharactersCharacterIDLoyaltyPointsParamsAcceptLanguageKo GetCharactersCharacterIDLoyaltyPointsParamsAcceptLanguage = "ko"
	GetCharactersCharacterIDLoyaltyPointsParamsAcceptLanguageRu GetCharactersCharacterIDLoyaltyPointsParamsAcceptLanguage = "ru"
	GetCharactersCharacterIDLoyaltyPointsParamsAcceptLanguageZh GetCharactersCharacterIDLoyaltyPointsParamsAcceptLanguage = "zh"
)

// Defines values for GetCharactersCharacterIDMailParamsAcceptLanguage.
const (
	GetCharactersCharacterIDMailParamsAcceptLanguageDe GetCharactersCharacterIDMailParamsAcceptLanguage = "de"
	GetCharactersCharacterIDMailParamsAcceptLanguageEn GetCharactersCharacterIDMailParamsAcceptLanguage = "en"
	GetCharactersCharacterIDMailParamsAcceptLanguageEs GetCharactersCharacterIDMailParamsAcceptLanguage = "es"
	GetCharactersCharacterIDMailParamsAcceptLanguageFr GetCharactersCharacterIDMailParamsAcceptLanguage = "fr"
	GetCharactersCharacterIDMailParamsAcceptLanguageJa GetCharactersCharacterIDMailParamsAcceptLanguage = "ja"
	GetCharactersCharacterIDMailParamsAcceptLanguageKo GetCharactersCharacterIDMailParamsAcceptLanguage = "ko"
	GetCharactersCharacterIDMailParamsAcceptLanguageRu GetCharactersCharacterIDMailParamsAcceptLanguage = "ru"
	GetCharactersCharacterIDMailParamsAcceptLanguageZh GetCharactersCharacterIDMailParamsAcceptLanguage = "zh"
)

// Defines values for PostCharactersCharacterIDMailParamsAcceptLanguage.
const (
	PostCharactersCharacterIDMailParamsAcceptLanguageDe PostCharactersCharacterIDMailParamsAcceptLanguage = "de"
	PostCharactersCharacterIDMailParamsAcceptLanguageEn PostCharactersCharacterIDMailParamsAcceptLanguage = "en"
	PostCharactersCharacterIDMailParamsAcceptLanguageEs PostCharactersCharacterIDMailParamsAcceptLanguage = "es"
	PostCharactersCharacterIDMailParamsAcceptLanguageFr PostCharactersCharacterIDMailParamsAcceptLanguage = "fr"
	PostCharactersCharacterIDMailParamsAcceptLanguageJa PostCharactersCharacterIDMailParamsAcceptLanguage = "ja"
	PostCharactersCharacterIDMailParamsAcceptLanguageKo PostCharactersCharacterIDMailParamsAcceptLanguage = "ko"
	PostCharactersCharacterIDMailParamsAcceptLanguageRu PostCharactersCharacterIDMailParamsAcceptLanguage = "ru"
	PostCharactersCharacterIDMailParamsAcceptLanguageZh PostCharactersCharacterIDMailParamsAcceptLanguage = "zh"
)

// Defines values for PostCharactersCharacterIDMailJSONBodyRecipientsRecipientType.
const (
	Alliance    PostCharactersCharacterIDMailJSONBodyRecipientsRecipientType = "alliance"
	Character   PostCharactersCharacterIDMailJSONBodyRecipientsRecipientType = "character"
	Corporation PostCharactersCharacterIDMailJSONBodyRecipientsRecipientType = "corporation"
	MailingList PostCharactersCharacterIDMailJSONBodyRecipientsRecipientType = "mailing_list"
)

// Defines values for GetCharactersCharacterIDMailLabelsParamsAcceptLanguage.
const (
	GetCharactersCharacterIDMailLabelsParamsAcceptLanguageDe GetCharactersCharacterIDMailLabelsParamsAcceptLanguage = "de"
	GetCharactersCharacterIDMailLabelsParamsAcceptLanguageEn GetCharactersCharacterIDMailLabelsParamsAcceptLanguage = "en"
	GetCharactersCharacterIDMailLabelsParamsAcceptLanguageEs GetCharactersCharacterIDMailLabelsParamsAcceptLanguage = "es"
	GetCharactersCharacterIDMailLabelsParamsAcceptLanguageFr GetCharactersCharacterIDMailLabelsParamsAcceptLanguage = "fr"
	GetCharactersCharacterIDMailLabelsParamsAcceptLanguageJa GetCharactersCharacterIDMailLabelsParamsAcceptLanguage = "ja"
	GetCharactersCharacterIDMailLabelsParamsAcceptLanguageKo GetCharactersCharacterIDMailLabelsParamsAcceptLanguage = "ko"
	GetCharactersCharacterIDMailLabelsParamsAcceptLanguageRu GetCharactersCharacterIDMailLabelsParamsAcceptLanguage = "ru"
	GetCharactersCharacterIDMailLabelsParamsAcceptLanguageZh GetCharactersCharacterIDMailLabelsParamsAcceptLanguage = "zh"
)

// Defines values for PostCharactersCharacterIDMailLabelsParamsAcceptLanguage.
const (
	PostCharactersCharacterIDMailLabelsParamsAcceptLanguageDe PostCharactersCharacterIDMailLabelsParamsAcceptLanguage = "de"
	PostCharactersCharacterIDMailLabelsParamsAcceptLanguageEn PostCharactersCharacterIDMailLabelsParamsAcceptLanguage = "en"
	PostCharactersCharacterIDMailLabelsParamsAcceptLanguageEs PostCharactersCharacterIDMailLabelsParamsAcceptLanguage = "es"
	PostCharactersCharacterIDMailLabelsParamsAcceptLanguageFr PostCharactersCharacterIDMailLabelsParamsAcceptLanguage = "fr"
	PostCharactersCharacterIDMailLabelsParamsAcceptLanguageJa PostCharactersCharacterIDMailLabelsParamsAcceptLanguage = "ja"
	PostCharactersCharacterIDMailLabelsParamsAcceptLanguageKo PostCharactersCharacterIDMailLabelsParamsAcceptLanguage = "ko"
	PostCharactersCharacterIDMailLabelsParamsAcceptLanguageRu PostCharactersCharacterIDMailLabelsParamsAcceptLanguage = "ru"
	PostCharactersCharacterIDMailLabelsParamsAcceptLanguageZh PostCharactersCharacterIDMailLabelsParamsAcceptLanguage = "zh"
)

// Defines values for PostCharactersCharacterIDMailLabelsJSONBodyColor.
const (
	PostCharactersCharacterIDMailLabelsJSONBodyColorHash0000Fe PostCharactersCharacterIDMailLabelsJSONBodyColor = "#0000fe"
	PostCharactersCharacterIDMailLabelsJSONBodyColorHash006634 PostCharactersCharacterIDMailLabelsJSONBodyColor = "#006634"
	PostCharactersCharacterIDMailLabelsJSONBodyColorHash0099Ff PostCharactersCharacterIDMailLabelsJSONBodyColor = "#0099ff"
	PostCharactersCharacterIDMailLabelsJSONBodyColorHash00Ff33 PostCharactersCharacterIDMailLabelsJSONBodyColor = "#00ff33"
	PostCharactersCharacterIDMailLabelsJSONBodyColorHash01Ffff PostCharactersCharacterIDMailLabelsJSONBodyColor = "#01ffff"
	PostCharactersCharacterIDMailLabelsJSONBodyColorHash349800 PostCharactersCharacterIDMailLabelsJSONBodyColor = "#349800"
	PostCharactersCharacterIDMailLabelsJSONBodyColorHash660066 PostCharactersCharacterIDMailLabelsJSONBodyColor = "#660066"
	PostCharactersCharacterIDMailLabelsJSONBodyColorHash666666 PostCharactersCharacterIDMailLabelsJSONBodyColor = "#666666"
	PostCharactersCharacterIDMailLabelsJSONBodyColorHash999999 PostCharactersCharacterIDMailLabelsJSONBodyColor = "#999999"
	PostCharactersCharacterIDMailLabelsJSONBodyColorHash99Ffff PostCharactersCharacterIDMailLabelsJSONBodyColor = "#99ffff"
	PostCharactersCharacterIDMailLabelsJSONBodyColorHash9A0000 PostCharactersCharacterIDMailLabelsJSONBodyColor = "#9a0000"
	PostCharactersCharacterIDMailLabelsJSONBodyColorHashCcff9A PostCharactersCharacterIDMailLabelsJSONBodyColor = "#ccff9a"
	PostCharactersCharacterIDMailLabelsJSONBodyColorHashE6E6E6 PostCharactersCharacterIDMailLabelsJSONBodyColor = "#e6e6e6"
	PostCharactersCharacterIDMailLabelsJSONBodyColorHashFe0000 PostCharactersCharacterIDMailLabelsJSONBodyColor = "#fe0000"
	PostCharactersCharacterIDMailLabelsJSONBodyColorHashFf6600 PostCharactersCharacterIDMailLabelsJSONBodyColor = "#ff6600"
	PostCharactersCharacterIDMailLabelsJSONBodyColorHashFfff01 PostCharactersCharacterIDMailLabelsJSONBodyColor = "#ffff01"
	PostCharactersCharacterIDMailLabelsJSONBodyColorHashFfffcd PostCharactersCharacterIDMailLabelsJSONBodyColor = "#ffffcd"
	PostCharactersCharacterIDMailLabelsJSONBodyColorHashFfffff PostCharactersCharacterIDMailLabelsJSONBodyColor = "#ffffff"
)

// Defines values for DeleteCharactersCharacterIDMailLabelsLabelIDParamsAcceptLanguage.
const (
	DeleteCharactersCharacterIDMailLabelsLabelIDParamsAcceptLanguageDe DeleteCharactersCharacterIDMailLabelsLabelIDParamsAcceptLanguage = "de"
	DeleteCharactersCharacterIDMailLabelsLabelIDParamsAcceptLanguageEn DeleteCharactersCharacterIDMailLabelsLabelIDParamsAcceptLanguage = "en"
	DeleteCharactersCharacterIDMailLabelsLabelIDParamsAcceptLanguageEs DeleteCharactersCharacterIDMailLabelsLabelIDParamsAcceptLanguage = "es"
	DeleteCharactersCharacterIDMailLabelsLabelIDParamsAcceptLanguageFr DeleteCharactersCharacterIDMailLabelsLabelIDParamsAcceptLanguage = "fr"
	DeleteCharactersCharacterIDMailLabelsLabelIDParamsAcceptLanguageJa DeleteCharactersCharacterIDMailLabelsLabelIDParamsAcceptLanguage = "ja"
	DeleteCharactersCharacterIDMailLabelsLabelIDParamsAcceptLanguageKo DeleteCharactersCharacterIDMailLabelsLabelIDParamsAcceptLanguage = "ko"
	DeleteCharactersCharacterIDMailLabelsLabelIDParamsAcceptLanguageRu DeleteCharactersCharacterIDMailLabelsLabelIDParamsAcceptLanguage = "ru"
	DeleteCharactersCharacterIDMailLabelsLabelIDParamsAcceptLanguageZh DeleteCharactersCharacterIDMailLabelsLabelIDParamsAcceptLanguage = "zh"
)

// Defines values for GetCharactersCharacterIDMailListsParamsAcceptLanguage.
const (
	GetCharactersCharacterIDMailListsParamsAcceptLanguageDe GetCharactersCharacterIDMailListsParamsAcceptLanguage = "de"
	GetCharactersCharacterIDMailListsParamsAcceptLanguageEn GetCharactersCharacterIDMailListsParamsAcceptLanguage = "en"
	GetCharactersCharacterIDMailListsParamsAcceptLanguageEs GetCharactersCharacterIDMailListsParamsAcceptLanguage = "es"
	GetCharactersCharacterIDMailListsParamsAcceptLanguageFr GetCharactersCharacterIDMailListsParamsAcceptLanguage = "fr"
	GetCharactersCharacterIDMailListsParamsAcceptLanguageJa GetCharactersCharacterIDMailListsParamsAcceptLanguage = "ja"
	GetCharactersCharacterIDMailListsParamsAcceptLanguageKo GetCharactersCharacterIDMailListsParamsAcceptLanguage = "ko"
	GetCharactersCharacterIDMailListsParamsAcceptLanguageRu GetCharactersCharacterIDMailListsParamsAcceptLanguage = "ru"
	GetCharactersCharacterIDMailListsParamsAcceptLanguageZh GetCharactersCharacterIDMailListsParamsAcceptLanguage = "zh"
)

// Defines values for DeleteCharactersCharacterIDMailMailIDParamsAcceptLanguage.
const (
	DeleteCharactersCharacterIDMailMailIDParamsAcceptLanguageDe DeleteCharactersCharacterIDMailMailIDParamsAcceptLanguage = "de"
	DeleteCharactersCharacterIDMailMailIDParamsAcceptLanguageEn DeleteCharactersCharacterIDMailMailIDParamsAcceptLanguage = "en"
	DeleteCharactersCharacterIDMailMailIDParamsAcceptLanguageEs DeleteCharactersCharacterIDMailMailIDParamsAcceptLanguage = "es"
	DeleteCharactersCharacterIDMailMailIDParamsAcceptLanguageFr DeleteCharactersCharacterIDMailMailIDParamsAcceptLanguage = "fr"
	DeleteCharactersCharacterIDMailMailIDParamsAcceptLanguageJa DeleteCharactersCharacterIDMailMailIDParamsAcceptLanguage = "ja"
	DeleteCharactersCharacterIDMailMailIDParamsAcceptLanguageKo DeleteCharactersCharacterIDMailMailIDParamsAcceptLanguage = "ko"
	DeleteCharactersCharacterIDMailMailIDParamsAcceptLanguageRu DeleteCharactersCharacterIDMailMailIDParamsAcceptLanguage = "ru"
	DeleteCharactersCharacterIDMailMailIDParamsAcceptLanguageZh DeleteCharactersCharacterIDMailMailIDParamsAcceptLanguage = "zh"
)

// Defines values for GetCharactersCharacterIDMailMailIDParamsAcceptLanguage.
const (
	GetCharactersCharacterIDMailMailIDParamsAcceptLanguageDe GetCharactersCharacterIDMailMailIDParamsAcceptLanguage = "de"
	GetCharactersCharacterIDMailMailIDParamsAcceptLanguageEn GetCharactersCharacterIDMailMailIDParamsAcceptLanguage = "en"
	GetCharactersCharacterIDMailMailIDParamsAcceptLanguageEs GetCharactersCharacterIDMailMailIDParamsAcceptLanguage = "es"
	GetCharactersCharacterIDMailMailIDParamsAcceptLanguageFr GetCharactersCharacterIDMailMailIDParamsAcceptLanguage = "fr"
	GetCharactersCharacterIDMailMailIDParamsAcceptLanguageJa GetCharactersCharacterIDMailMailIDParamsAcceptLanguage = "ja"
	GetCharactersCharacterIDMailMailIDParamsAcceptLanguageKo GetCharactersCharacterIDMailMailIDParamsAcceptLanguage = "ko"
	GetCharactersCharacterIDMailMailIDParamsAcceptLanguageRu GetCharactersCharacterIDMailMailIDParamsAcceptLanguage = "ru"
	GetCharactersCharacterIDMailMailIDParamsAcceptLanguageZh GetCharactersCharacterIDMailMailIDParamsAcceptLanguage = "zh"
)

// Defines values for PutCharactersCharacterIDMailMailIDParamsAcceptLanguage.
const (
	PutCharactersCharacterIDMailMailIDParamsAcceptLanguageDe PutCharactersCharacterIDMailMailIDParamsAcceptLanguage = "de"
	PutCharactersCharacterIDMailMailIDParamsAcceptLanguageEn PutCharactersCharacterIDMailMailIDParamsAcceptLanguage = "en"
	PutCharactersCharacterIDMailMailIDParamsAcceptLanguageEs PutCharactersCharacterIDMailMailIDParamsAcceptLanguage = "es"
	PutCharactersCharacterIDMailMailIDParamsAcceptLanguageFr PutCharactersCharacterIDMailMailIDParamsAcceptLanguage = "fr"
	PutCharactersCharacterIDMailMailIDParamsAcceptLanguageJa PutCharactersCharacterIDMailMailIDParamsAcceptLanguage = "ja"
	PutCharactersCharacterIDMailMailIDParamsAcceptLanguageKo PutCharactersCharacterIDMailMailIDParamsAcceptLanguage = "ko"
	PutCharactersCharacterIDMailMailIDParamsAcceptLanguageRu PutCharactersCharacterIDMailMailIDParamsAcceptLanguage = "ru"
	PutCharactersCharacterIDMailMailIDParamsAcceptLanguageZh PutCharactersCharacterIDMailMailIDParamsAcceptLanguage = "zh"
)

// Defines values for GetCharactersCharacterIDMedalsParamsAcceptLanguage.
const (
	GetCharactersCharacterIDMedalsParamsAcceptLanguageDe GetCharactersCharacterIDMedalsParamsAcceptLanguage = "de"
	GetCharactersCharacterIDMedalsParamsAcceptLanguageEn GetCharactersCharacterIDMedalsParamsAcceptLanguage = "en"
	GetCharactersCharacterIDMedalsParamsAcceptLanguageEs GetCharactersCharacterIDMedalsParamsAcceptLanguage = "es"
	GetCharactersCharacterIDMedalsParamsAcceptLanguageFr GetCharactersCharacterIDMedalsParamsAcceptLanguage = "fr"
	GetCharactersCharacterIDMedalsParamsAcceptLanguageJa GetCharactersCharacterIDMedalsParamsAcceptLanguage = "ja"
	GetCharactersCharacterIDMedalsParamsAcceptLanguageKo GetCharactersCharacterIDMedalsParamsAcceptLanguage = "ko"
	GetCharactersCharacterIDMedalsParamsAcceptLanguageRu GetCharactersCharacterIDMedalsParamsAcceptLanguage = "ru"
	GetCharactersCharacterIDMedalsParamsAcceptLanguageZh GetCharactersCharacterIDMedalsParamsAcceptLanguage = "zh"
)

// Defines values for GetCharactersCharacterIDMiningParamsAcceptLanguage.
const (
	GetCharactersCharacterIDMiningParamsAcceptLanguageDe GetCharactersCharacterIDMiningParamsAcceptLanguage = "de"
	GetCharactersCharacterIDMiningParamsAcceptLanguageEn GetCharactersCharacterIDMiningParamsAcceptLanguage = "en"
	GetCharactersCharacterIDMiningParamsAcceptLanguageEs GetCharactersCharacterIDMiningParamsAcceptLanguage = "es"
	GetCharactersCharacterIDMiningParamsAcceptLanguageFr GetCharactersCharacterIDMiningParamsAcceptLanguage = "fr"
	GetCharactersCharacterIDMiningParamsAcceptLanguageJa GetCharactersCharacterIDMiningParamsAcceptLanguage = "ja"
	GetCharactersCharacterIDMiningParamsAcceptLanguageKo GetCharactersCharacterIDMiningParamsAcceptLanguage = "ko"
	GetCharactersCharacterIDMiningParamsAcceptLanguageRu GetCharactersCharacterIDMiningParamsAcceptLanguage = "ru"
	GetCharactersCharacterIDMiningParamsAcceptLanguageZh GetCharactersCharacterIDMiningParamsAcceptLanguage = "zh"
)

// Defines values for GetCharactersCharacterIDNotificationsParamsAcceptLanguage.
const (
	GetCharactersCharacterIDNotificationsParamsAcceptLanguageDe GetCharactersCharacterIDNotificationsParamsAcceptLanguage = "de"
	GetCharactersCharacterIDNotificationsParamsAcceptLanguageEn GetCharactersCharacterIDNotificationsParamsAcceptLanguage = "en"
	GetCharactersCharacterIDNotificationsParamsAcceptLanguageEs GetCharactersCharacterIDNotificationsParamsAcceptLanguage = "es"
	GetCharactersCharacterIDNotificationsParamsAcceptLanguageFr GetCharactersCharacterIDNotificationsParamsAcceptLanguage = "fr"
	GetCharactersCharacterIDNotificationsParamsAcceptLanguageJa GetCharactersCharacterIDNotificationsParamsAcceptLanguage = "ja"
	GetCharactersCharacterIDNotificationsParamsAcceptLanguageKo GetCharactersCharacterIDNotificationsParamsAcceptLanguage = "ko"
	GetCharactersCharacterIDNotificationsParamsAcceptLanguageRu GetCharactersCharacterIDNotificationsParamsAcceptLanguage = "ru"
	GetCharactersCharacterIDNotificationsParamsAcceptLanguageZh GetCharactersCharacterIDNotificationsParamsAcceptLanguage = "zh"
)

// Defines values for GetCharactersCharacterIDNotificationsContactsParamsAcceptLanguage.
const (
	GetCharactersCharacterIDNotificationsContactsParamsAcceptLanguageDe GetCharactersCharacterIDNotificationsContactsParamsAcceptLanguage = "de"
	GetCharactersCharacterIDNotificationsContactsParamsAcceptLanguageEn GetCharactersCharacterIDNotificationsContactsParamsAcceptLanguage = "en"
	GetCharactersCharacterIDNotificationsContactsParamsAcceptLanguageEs GetCharactersCharacterIDNotificationsContactsParamsAcceptLanguage = "es"
	GetCharactersCharacterIDNotificationsContactsParamsAcceptLanguageFr GetCharactersCharacterIDNotificationsContactsParamsAcceptLanguage = "fr"
	GetCharactersCharacterIDNotificationsContactsParamsAcceptLanguageJa GetCharactersCharacterIDNotificationsContactsParamsAcceptLanguage = "ja"
	GetCharactersCharacterIDNotificationsContactsParamsAcceptLanguageKo GetCharactersCharacterIDNotificationsContactsParamsAcceptLanguage = "ko"
	GetCharactersCharacterIDNotificationsContactsParamsAcceptLanguageRu GetCharactersCharacterIDNotificationsContactsParamsAcceptLanguage = "ru"
	GetCharactersCharacterIDNotificationsContactsParamsAcceptLanguageZh GetCharactersCharacterIDNotificationsContactsParamsAcceptLanguage = "zh"
)

// Defines values for GetCharactersCharacterIDOnlineParamsAcceptLanguage.
const (
	GetCharactersCharacterIDOnlineParamsAcceptLanguageDe GetCharactersCharacterIDOnlineParamsAcceptLanguage = "de"
	GetCharactersCharacterIDOnlineParamsAcceptLanguageEn GetCharactersCharacterIDOnlineParamsAcceptLanguage = "en"
	GetCharactersCharacterIDOnlineParamsAcceptLanguageEs GetCharactersCharacterIDOnlineParamsAcceptLanguage = "es"
	GetCharactersCharacterIDOnlineParamsAcceptLanguageFr GetCharactersCharacterIDOnlineParamsAcceptLanguage = "fr"
	GetCharactersCharacterIDOnlineParamsAcceptLanguageJa GetCharactersCharacterIDOnlineParamsAcceptLanguage = "ja"
	GetCharactersCharacterIDOnlineParamsAcceptLanguageKo GetCharactersCharacterIDOnlineParamsAcceptLanguage = "ko"
	GetCharactersCharacterIDOnlineParamsAcceptLanguageRu GetCharactersCharacterIDOnlineParamsAcceptLanguage = "ru"
	GetCharactersCharacterIDOnlineParamsAcceptLanguageZh GetCharactersCharacterIDOnlineParamsAcceptLanguage = "zh"
)

// Defines values for GetCharactersCharacterIDOrdersParamsAcceptLanguage.
const (
	GetCharactersCharacterIDOrdersParamsAcceptLanguageDe GetCharactersCharacterIDOrdersParamsAcceptLanguage = "de"
	GetCharactersCharacterIDOrdersParamsAcceptLanguageEn GetCharactersCharacterIDOrdersParamsAcceptLanguage = "en"
	GetCharactersCharacterIDOrdersParamsAcceptLanguageEs GetCharactersCharacterIDOrdersParamsAcceptLanguage = "es"
	GetCharactersCharacterIDOrdersParamsAcceptLanguageFr GetCharactersCharacterIDOrdersParamsAcceptLanguage = "fr"
	GetCharactersCharacterIDOrdersParamsAcceptLanguageJa GetCharactersCharacterIDOrdersParamsAcceptLanguage = "ja"
	GetCharactersCharacterIDOrdersParamsAcceptLanguageKo GetCharactersCharacterIDOrdersParamsAcceptLanguage = "ko"
	GetCharactersCharacterIDOrdersParamsAcceptLanguageRu GetCharactersCharacterIDOrdersParamsAcceptLanguage = "ru"
	GetCharactersCharacterIDOrdersParamsAcceptLanguageZh GetCharactersCharacterIDOrdersParamsAcceptLanguage = "zh"
)

// Defines values for GetCharactersCharacterIDOrdersHistoryParamsAcceptLanguage.
const (
	GetCharactersCharacterIDOrdersHistoryParamsAcceptLanguageDe GetCharactersCharacterIDOrdersHistoryParamsAcceptLanguage = "de"
	GetCharactersCharacterIDOrdersHistoryParamsAcceptLanguageEn GetCharactersCharacterIDOrdersHistoryParamsAcceptLanguage = "en"
	GetCharactersCharacterIDOrdersHistoryParamsAcceptLanguageEs GetCharactersCharacterIDOrdersHistoryParamsAcceptLanguage = "es"
	GetCharactersCharacterIDOrdersHistoryParamsAcceptLanguageFr GetCharactersCharacterIDOrdersHistoryParamsAcceptLanguage = "fr"
	GetCharactersCharacterIDOrdersHistoryParamsAcceptLanguageJa GetCharactersCharacterIDOrdersHistoryParamsAcceptLanguage = "ja"
	GetCharactersCharacterIDOrdersHistoryParamsAcceptLanguageKo GetCharactersCharacterIDOrdersHistoryParamsAcceptLanguage = "ko"
	GetCharactersCharacterIDOrdersHistoryParamsAcceptLanguageRu GetCharactersCharacterIDOrdersHistoryParamsAcceptLanguage = "ru"
	GetCharactersCharacterIDOrdersHistoryParamsAcceptLanguageZh GetCharactersCharacterIDOrdersHistoryParamsAcceptLanguage = "zh"
)

// Defines values for GetCharactersCharacterIDPlanetsParamsAcceptLanguage.
const (
	GetCharactersCharacterIDPlanetsParamsAcceptLanguageDe GetCharactersCharacterIDPlanetsParamsAcceptLanguage = "de"
	GetCharactersCharacterIDPlanetsParamsAcceptLanguageEn GetCharactersCharacterIDPlanetsParamsAcceptLanguage = "en"
	GetCharactersCharacterIDPlanetsParamsAcceptLanguageEs GetCharactersCharacterIDPlanetsParamsAcceptLanguage = "es"
	GetCharactersCharacterIDPlanetsParamsAcceptLanguageFr GetCharactersCharacterIDPlanetsParamsAcceptLanguage = "fr"
	GetCharactersCharacterIDPlanetsParamsAcceptLanguageJa GetCharactersCharacterIDPlanetsParamsAcceptLanguage = "ja"
	GetCharactersCharacterIDPlanetsParamsAcceptLanguageKo GetCharactersCharacterIDPlanetsParamsAcceptLanguage = "ko"
	GetCharactersCharacterIDPlanetsParamsAcceptLanguageRu GetCharactersCharacterIDPlanetsParamsAcceptLanguage = "ru"
	GetCharactersCharacterIDPlanetsParamsAcceptLanguageZh GetCharactersCharacterIDPlanetsParamsAcceptLanguage = "zh"
)

// Defines values for GetCharactersCharacterIDPlanetsPlanetIDParamsAcceptLanguage.
const (
	GetCharactersCharacterIDPlanetsPlanetIDParamsAcceptLanguageDe GetCharactersCharacterIDPlanetsPlanetIDParamsAcceptLanguage = "de"
	GetCharactersCharacterIDPlanetsPlanetIDParamsAcceptLanguageEn GetCharactersCharacterIDPlanetsPlanetIDParamsAcceptLanguage = "en"
	GetCharactersCharacterIDPlanetsPlanetIDParamsAcceptLanguageEs GetCharactersCharacterIDPlanetsPlanetIDParamsAcceptLanguage = "es"
	GetCharactersCharacterIDPlanetsPlanetIDParamsAcceptLanguageFr GetCharactersCharacterIDPlanetsPlanetIDParamsAcceptLanguage = "fr"
	GetCharactersCharacterIDPlanetsPlanetIDParamsAcceptLanguageJa GetCharactersCharacterIDPlanetsPlanetIDParamsAcceptLanguage = "ja"
	GetCharactersCharacterIDPlanetsPlanetIDParamsAcceptLanguageKo GetCharactersCharacterIDPlanetsPlanetIDParamsAcceptLanguage = "ko"
	GetCharactersCharacterIDPlanetsPlanetIDParamsAcceptLanguageRu GetCharactersCharacterIDPlanetsPlanetIDParamsAcceptLanguage = "ru"
	GetCharactersCharacterIDPlanetsPlanetIDParamsAcceptLanguageZh GetCharactersCharacterIDPlanetsPlanetIDParamsAcceptLanguage = "zh"
)

// Defines values for GetCharactersCharacterIDPortraitParamsAcceptLanguage.
const (
	GetCharactersCharacterIDPortraitParamsAcceptLanguageDe GetCharactersCharacterIDPortraitParamsAcceptLanguage = "de"
	GetCharactersCharacterIDPortraitParamsAcceptLanguageEn GetCharactersCharacterIDPortraitParamsAcceptLanguage = "en"
	GetCharactersCharacterIDPortraitParamsAcceptLanguageEs GetCharactersCharacterIDPortraitParamsAcceptLanguage = "es"
	GetCharactersCharacterIDPortraitParamsAcceptLanguageFr GetCharactersCharacterIDPortraitParamsAcceptLanguage = "fr"
	GetCharactersCharacterIDPortraitParamsAcceptLanguageJa GetCharactersCharacterIDPortraitParamsAcceptLanguage = "ja"
	GetCharactersCharacterIDPortraitParamsAcceptLanguageKo GetCharactersCharacterIDPortraitParamsAcceptLanguage = "ko"
	GetCharactersCharacterIDPortraitParamsAcceptLanguageRu GetCharactersCharacterIDPortraitParamsAcceptLanguage = "ru"
	GetCharactersCharacterIDPortraitParamsAcceptLanguageZh GetCharactersCharacterIDPortraitParamsAcceptLanguage = "zh"
)

// Defines values for GetCharactersCharacterIDRolesParamsAcceptLanguage.
const (
	GetCharactersCharacterIDRolesParamsAcceptLanguageDe GetCharactersCharacterIDRolesParamsAcceptLanguage = "de"
	GetCharactersCharacterIDRolesParamsAcceptLanguageEn GetCharactersCharacterIDRolesParamsAcceptLanguage = "en"
	GetCharactersCharacterIDRolesParamsAcceptLanguageEs GetCharactersCharacterIDRolesParamsAcceptLanguage = "es"
	GetCharactersCharacterIDRolesParamsAcceptLanguageFr GetCharactersCharacterIDRolesParamsAcceptLanguage = "fr"
	GetCharactersCharacterIDRolesParamsAcceptLanguageJa GetCharactersCharacterIDRolesParamsAcceptLanguage = "ja"
	GetCharactersCharacterIDRolesParamsAcceptLanguageKo GetCharactersCharacterIDRolesParamsAcceptLanguage = "ko"
	GetCharactersCharacterIDRolesParamsAcceptLanguageRu GetCharactersCharacterIDRolesParamsAcceptLanguage = "ru"
	GetCharactersCharacterIDRolesParamsAcceptLanguageZh GetCharactersCharacterIDRolesParamsAcceptLanguage = "zh"
)

// Defines values for GetCharactersCharacterIDSearchParamsCategories.
const (
	GetCharactersCharacterIDSearchParamsCategoriesAgent         GetCharactersCharacterIDSearchParamsCategories = "agent"
	GetCharactersCharacterIDSearchParamsCategoriesAlliance      GetCharactersCharacterIDSearchParamsCategories = "alliance"
	GetCharactersCharacterIDSearchParamsCategoriesCharacter     GetCharactersCharacterIDSearchParamsCategories = "character"
	GetCharactersCharacterIDSearchParamsCategoriesConstellation GetCharactersCharacterIDSearchParamsCategories = "constellation"
	GetCharactersCharacterIDSearchParamsCategoriesCorporation   GetCharactersCharacterIDSearchParamsCategories = "corporation"
	GetCharactersCharacterIDSearchParamsCategoriesFaction       GetCharactersCharacterIDSearchParamsCategories = "faction"
	GetCharactersCharacterIDSearchParamsCategoriesInventoryType GetCharactersCharacterIDSearchParamsCategories = "inventory_type"
	GetCharactersCharacterIDSearchParamsCategoriesRegion        GetCharactersCharacterIDSearchParamsCategories = "region"
	GetCharactersCharacterIDSearchParamsCategoriesSolarSystem   GetCharactersCharacterIDSearchParamsCategories = "solar_system"
	GetCharactersCharacterIDSearchParamsCategoriesStation       GetCharactersCharacterIDSearchParamsCategories = "station"
	GetCharactersCharacterIDSearchParamsCategoriesStructure     GetCharactersCharacterIDSearchParamsCategories = "structure"
)

// Defines values for GetCharactersCharacterIDSearchParamsAcceptLanguage.
const (
	GetCharactersCharacterIDSearchParamsAcceptLanguageDe GetCharactersCharacterIDSearchParamsAcceptLanguage = "de"
	GetCharactersCharacterIDSearchParamsAcceptLanguageEn GetCharactersCharacterIDSearchParamsAcceptLanguage = "en"
	GetCharactersCharacterIDSearchParamsAcceptLanguageEs GetCharactersCharacterIDSearchParamsAcceptLanguage = "es"
	GetCharactersCharacterIDSearchParamsAcceptLanguageFr GetCharactersCharacterIDSearchParamsAcceptLanguage = "fr"
	GetCharactersCharacterIDSearchParamsAcceptLanguageJa GetCharactersCharacterIDSearchParamsAcceptLanguage = "ja"
	GetCharactersCharacterIDSearchParamsAcceptLanguageKo GetCharactersCharacterIDSearchParamsAcceptLanguage = "ko"
	GetCharactersCharacterIDSearchParamsAcceptLanguageRu GetCharactersCharacterIDSearchParamsAcceptLanguage = "ru"
	GetCharactersCharacterIDSearchParamsAcceptLanguageZh GetCharactersCharacterIDSearchParamsAcceptLanguage = "zh"
)

// Defines values for GetCharactersCharacterIDShipParamsAcceptLanguage.
const (
	GetCharactersCharacterIDShipParamsAcceptLanguageDe GetCharactersCharacterIDShipParamsAcceptLanguage = "de"
	GetCharactersCharacterIDShipParamsAcceptLanguageEn GetCharactersCharacterIDShipParamsAcceptLanguage = "en"
	GetCharactersCharacterIDShipParamsAcceptLanguageEs GetCharactersCharacterIDShipParamsAcceptLanguage = "es"
	GetCharactersCharacterIDShipParamsAcceptLanguageFr GetCharactersCharacterIDShipParamsAcceptLanguage = "fr"
	GetCharactersCharacterIDShipParamsAcceptLanguageJa GetCharactersCharacterIDShipParamsAcceptLanguage = "ja"
	GetCharactersCharacterIDShipParamsAcceptLanguageKo GetCharactersCharacterIDShipParamsAcceptLanguage = "ko"
	GetCharactersCharacterIDShipParamsAcceptLanguageRu GetCharactersCharacterIDShipParamsAcceptLanguage = "ru"
	GetCharactersCharacterIDShipParamsAcceptLanguageZh GetCharactersCharacterIDShipParamsAcceptLanguage = "zh"
)

// Defines values for GetCharactersCharacterIDSkillqueueParamsAcceptLanguage.
const (
	GetCharactersCharacterIDSkillqueueParamsAcceptLanguageDe GetCharactersCharacterIDSkillqueueParamsAcceptLanguage = "de"
	GetCharactersCharacterIDSkillqueueParamsAcceptLanguageEn GetCharactersCharacterIDSkillqueueParamsAcceptLanguage = "en"
	GetCharactersCharacterIDSkillqueueParamsAcceptLanguageEs GetCharactersCharacterIDSkillqueueParamsAcceptLanguage = "es"
	GetCharactersCharacterIDSkillqueueParamsAcceptLanguageFr GetCharactersCharacterIDSkillqueueParamsAcceptLanguage = "fr"
	GetCharactersCharacterIDSkillqueueParamsAcceptLanguageJa GetCharactersCharacterIDSkillqueueParamsAcceptLanguage = "ja"
	GetCharactersCharacterIDSkillqueueParamsAcceptLanguageKo GetCharactersCharacterIDSkillqueueParamsAcceptLanguage = "ko"
	GetCharactersCharacterIDSkillqueueParamsAcceptLanguageRu GetCharactersCharacterIDSkillqueueParamsAcceptLanguage = "ru"
	GetCharactersCharacterIDSkillqueueParamsAcceptLanguageZh GetCharactersCharacterIDSkillqueueParamsAcceptLanguage = "zh"
)

// Defines values for GetCharactersCharacterIDSkillsParamsAcceptLanguage.
const (
	GetCharactersCharacterIDSkillsParamsAcceptLanguageDe GetCharactersCharacterIDSkillsParamsAcceptLanguage = "de"
	GetCharactersCharacterIDSkillsParamsAcceptLanguageEn GetCharactersCharacterIDSkillsParamsAcceptLanguage = "en"
	GetCharactersCharacterIDSkillsParamsAcceptLanguageEs GetCharactersCharacterIDSkillsParamsAcceptLanguage = "es"
	GetCharactersCharacterIDSkillsParamsAcceptLanguageFr GetCharactersCharacterIDSkillsParamsAcceptLanguage = "fr"
	GetCharactersCharacterIDSkillsParamsAcceptLanguageJa GetCharactersCharacterIDSkillsParamsAcceptLanguage = "ja"
	GetCharactersCharacterIDSkillsParamsAcceptLanguageKo GetCharactersCharacterIDSkillsParamsAcceptLanguage = "ko"
	GetCharactersCharacterIDSkillsParamsAcceptLanguageRu GetCharactersCharacterIDSkillsParamsAcceptLanguage = "ru"
	GetCharactersCharacterIDSkillsParamsAcceptLanguageZh GetCharactersCharacterIDSkillsParamsAcceptLanguage = "zh"
)

// Defines values for GetCharactersCharacterIDStandingsParamsAcceptLanguage.
const (
	GetCharactersCharacterIDStandingsParamsAcceptLanguageDe GetCharactersCharacterIDStandingsParamsAcceptLanguage = "de"
	GetCharactersCharacterIDStandingsParamsAcceptLanguageEn GetCharactersCharacterIDStandingsParamsAcceptLanguage = "en"
	GetCharactersCharacterIDStandingsParamsAcceptLanguageEs GetCharactersCharacterIDStandingsParamsAcceptLanguage = "es"
	GetCharactersCharacterIDStandingsParamsAcceptLanguageFr GetCharactersCharacterIDStandingsParamsAcceptLanguage = "fr"
	GetCharactersCharacterIDStandingsParamsAcceptLanguageJa GetCharactersCharacterIDStandingsParamsAcceptLanguage = "ja"
	GetCharactersCharacterIDStandingsParamsAcceptLanguageKo GetCharactersCharacterIDStandingsParamsAcceptLanguage = "ko"
	GetCharactersCharacterIDStandingsParamsAcceptLanguageRu GetCharactersCharacterIDStandingsParamsAcceptLanguage = "ru"
	GetCharactersCharacterIDStandingsParamsAcceptLanguageZh GetCharactersCharacterIDStandingsParamsAcceptLanguage = "zh"
)

// Defines values for GetCharactersCharacterIDTitlesParamsAcceptLanguage.
const (
	GetCharactersCharacterIDTitlesParamsAcceptLanguageDe GetCharactersCharacterIDTitlesParamsAcceptLanguage = "de"
	GetCharactersCharacterIDTitlesParamsAcceptLanguageEn GetCharactersCharacterIDTitlesParamsAcceptLanguage = "en"
	GetCharactersCharacterIDTitlesParamsAcceptLanguageEs GetCharactersCharacterIDTitlesParamsAcceptLanguage = "es"
	GetCharactersCharacterIDTitlesParamsAcceptLanguageFr GetCharactersCharacterIDTitlesParamsAcceptLanguage = "fr"
	GetCharactersCharacterIDTitlesParamsAcceptLanguageJa GetCharactersCharacterIDTitlesParamsAcceptLanguage = "ja"
	GetCharactersCharacterIDTitlesParamsAcceptLanguageKo GetCharactersCharacterIDTitlesParamsAcceptLanguage = "ko"
	GetCharactersCharacterIDTitlesParamsAcceptLanguageRu GetCharactersCharacterIDTitlesParamsAcceptLanguage = "ru"
	GetCharactersCharacterIDTitlesParamsAcceptLanguageZh GetCharactersCharacterIDTitlesParamsAcceptLanguage = "zh"
)

// Defines values for GetCharactersCharacterIDWalletParamsAcceptLanguage.
const (
	GetCharactersCharacterIDWalletParamsAcceptLanguageDe GetCharactersCharacterIDWalletParamsAcceptLanguage = "de"
	GetCharactersCharacterIDWalletParamsAcceptLanguageEn GetCharactersCharacterIDWalletParamsAcceptLanguage = "en"
	GetCharactersCharacterIDWalletParamsAcceptLanguageEs GetCharactersCharacterIDWalletParamsAcceptLanguage = "es"
	GetCharactersCharacterIDWalletParamsAcceptLanguageFr GetCharactersCharacterIDWalletParamsAcceptLanguage = "fr"
	GetCharactersCharacterIDWalletParamsAcceptLanguageJa GetCharactersCharacterIDWalletParamsAcceptLanguage = "ja"
	GetCharactersCharacterIDWalletParamsAcceptLanguageKo GetCharactersCharacterIDWalletParamsAcceptLanguage = "ko"
	GetCharactersCharacterIDWalletParamsAcceptLanguageRu GetCharactersCharacterIDWalletParamsAcceptLanguage = "ru"
	GetCharactersCharacterIDWalletParamsAcceptLanguageZh GetCharactersCharacterIDWalletParamsAcceptLanguage = "zh"
)

// Defines values for GetCharactersCharacterIDWalletJournalParamsAcceptLanguage.
const (
	GetCharactersCharacterIDWalletJournalParamsAcceptLanguageDe GetCharactersCharacterIDWalletJournalParamsAcceptLanguage = "de"
	GetCharactersCharacterIDWalletJournalParamsAcceptLanguageEn GetCharactersCharacterIDWalletJournalParamsAcceptLanguage = "en"
	GetCharactersCharacterIDWalletJournalParamsAcceptLanguageEs GetCharactersCharacterIDWalletJournalParamsAcceptLanguage = "es"
	GetCharactersCharacterIDWalletJournalParamsAcceptLanguageFr GetCharactersCharacterIDWalletJournalParamsAcceptLanguage = "fr"
	GetCharactersCharacterIDWalletJournalParamsAcceptLanguageJa GetCharactersCharacterIDWalletJournalParamsAcceptLanguage = "ja"
	GetCharactersCharacterIDWalletJournalParamsAcceptLanguageKo GetCharactersCharacterIDWalletJournalParamsAcceptLanguage = "ko"
	GetCharactersCharacterIDWalletJournalParamsAcceptLanguageRu GetCharactersCharacterIDWalletJournalParamsAcceptLanguage = "ru"
	GetCharactersCharacterIDWalletJournalParamsAcceptLanguageZh GetCharactersCharacterIDWalletJournalParamsAcceptLanguage = "zh"
)

// Defines values for GetCharactersCharacterIDWalletTransactionsParamsAcceptLanguage.
const (
	GetCharactersCharacterIDWalletTransactionsParamsAcceptLanguageDe GetCharactersCharacterIDWalletTransactionsParamsAcceptLanguage = "de"
	GetCharactersCharacterIDWalletTransactionsParamsAcceptLanguageEn GetCharactersCharacterIDWalletTransactionsParamsAcceptLanguage = "en"
	GetCharactersCharacterIDWalletTransactionsParamsAcceptLanguageEs GetCharactersCharacterIDWalletTransactionsParamsAcceptLanguage = "es"
	GetCharactersCharacterIDWalletTransactionsParamsAcceptLanguageFr GetCharactersCharacterIDWalletTransactionsParamsAcceptLanguage = "fr"
	GetCharactersCharacterIDWalletTransactionsParamsAcceptLanguageJa GetCharactersCharacterIDWalletTransactionsParamsAcceptLanguage = "ja"
	GetCharactersCharacterIDWalletTransactionsParamsAcceptLanguageKo GetCharactersCharacterIDWalletTransactionsParamsAcceptLanguage = "ko"
	GetCharactersCharacterIDWalletTransactionsParamsAcceptLanguageRu GetCharactersCharacterIDWalletTransactionsParamsAcceptLanguage = "ru"
	GetCharactersCharacterIDWalletTransactionsParamsAcceptLanguageZh GetCharactersCharacterIDWalletTransactionsParamsAcceptLanguage = "zh"
)

// Defines values for GetContractsPublicBidsContractIDParamsAcceptLanguage.
const (
	GetContractsPublicBidsContractIDParamsAcceptLanguageDe GetContractsPublicBidsContractIDParamsAcceptLanguage = "de"
	GetContractsPublicBidsContractIDParamsAcceptLanguageEn GetContractsPublicBidsContractIDParamsAcceptLanguage = "en"
	GetContractsPublicBidsContractIDParamsAcceptLanguageEs GetContractsPublicBidsContractIDParamsAcceptLanguage = "es"
	GetContractsPublicBidsContractIDParamsAcceptLanguageFr GetContractsPublicBidsContractIDParamsAcceptLanguage = "fr"
	GetContractsPublicBidsContractIDParamsAcceptLanguageJa GetContractsPublicBidsContractIDParamsAcceptLanguage = "ja"
	GetContractsPublicBidsContractIDParamsAcceptLanguageKo GetContractsPublicBidsContractIDParamsAcceptLanguage = "ko"
	GetContractsPublicBidsContractIDParamsAcceptLanguageRu GetContractsPublicBidsContractIDParamsAcceptLanguage = "ru"
	GetContractsPublicBidsContractIDParamsAcceptLanguageZh GetContractsPublicBidsContractIDParamsAcceptLanguage = "zh"
)

// Defines values for GetContractsPublicItemsContractIDParamsAcceptLanguage.
const (
	GetContractsPublicItemsContractIDParamsAcceptLanguageDe GetContractsPublicItemsContractIDParamsAcceptLanguage = "de"
	GetContractsPublicItemsContractIDParamsAcceptLanguageEn GetContractsPublicItemsContractIDParamsAcceptLanguage = "en"
	GetContractsPublicItemsContractIDParamsAcceptLanguageEs GetContractsPublicItemsContractIDParamsAcceptLanguage = "es"
	GetContractsPublicItemsContractIDParamsAcceptLanguageFr GetContractsPublicItemsContractIDParamsAcceptLanguage = "fr"
	GetContractsPublicItemsContractIDParamsAcceptLanguageJa GetContractsPublicItemsContractIDParamsAcceptLanguage = "ja"
	GetContractsPublicItemsContractIDParamsAcceptLanguageKo GetContractsPublicItemsContractIDParamsAcceptLanguage = "ko"
	GetContractsPublicItemsContractIDParamsAcceptLanguageRu GetContractsPublicItemsContractIDParamsAcceptLanguage = "ru"
	GetContractsPublicItemsContractIDParamsAcceptLanguageZh GetContractsPublicItemsContractIDParamsAcceptLanguage = "zh"
)

// Defines values for GetContractsPublicRegionIDParamsAcceptLanguage.
const (
	GetContractsPublicRegionIDParamsAcceptLanguageDe GetContractsPublicRegionIDParamsAcceptLanguage = "de"
	GetContractsPublicRegionIDParamsAcceptLanguageEn GetContractsPublicRegionIDParamsAcceptLanguage = "en"
	GetContractsPublicRegionIDParamsAcceptLanguageEs GetContractsPublicRegionIDParamsAcceptLanguage = "es"
	GetContractsPublicRegionIDParamsAcceptLanguageFr GetContractsPublicRegionIDParamsAcceptLanguage = "fr"
	GetContractsPublicRegionIDParamsAcceptLanguageJa GetContractsPublicRegionIDParamsAcceptLanguage = "ja"
	GetContractsPublicRegionIDParamsAcceptLanguageKo GetContractsPublicRegionIDParamsAcceptLanguage = "ko"
	GetContractsPublicRegionIDParamsAcceptLanguageRu GetContractsPublicRegionIDParamsAcceptLanguage = "ru"
	GetContractsPublicRegionIDParamsAcceptLanguageZh GetContractsPublicRegionIDParamsAcceptLanguage = "zh"
)

// Defines values for GetCorporationCorporationIDMiningExtractionsParamsAcceptLanguage.
const (
	GetCorporationCorporationIDMiningExtractionsParamsAcceptLanguageDe GetCorporationCorporationIDMiningExtractionsParamsAcceptLanguage = "de"
	GetCorporationCorporationIDMiningExtractionsParamsAcceptLanguageEn GetCorporationCorporationIDMiningExtractionsParamsAcceptLanguage = "en"
	GetCorporationCorporationIDMiningExtractionsParamsAcceptLanguageEs GetCorporationCorporationIDMiningExtractionsParamsAcceptLanguage = "es"
	GetCorporationCorporationIDMiningExtractionsParamsAcceptLanguageFr GetCorporationCorporationIDMiningExtractionsParamsAcceptLanguage = "fr"
	GetCorporationCorporationIDMiningExtractionsParamsAcceptLanguageJa GetCorporationCorporationIDMiningExtractionsParamsAcceptLanguage = "ja"
	GetCorporationCorporationIDMiningExtractionsParamsAcceptLanguageKo GetCorporationCorporationIDMiningExtractionsParamsAcceptLanguage = "ko"
	GetCorporationCorporationIDMiningExtractionsParamsAcceptLanguageRu GetCorporationCorporationIDMiningExtractionsParamsAcceptLanguage = "ru"
	GetCorporationCorporationIDMiningExtractionsParamsAcceptLanguageZh GetCorporationCorporationIDMiningExtractionsParamsAcceptLanguage = "zh"
)

// Defines values for GetCorporationCorporationIDMiningObserversParamsAcceptLanguage.
const (
	GetCorporationCorporationIDMiningObserversParamsAcceptLanguageDe GetCorporationCorporationIDMiningObserversParamsAcceptLanguage = "de"
	GetCorporationCorporationIDMiningObserversParamsAcceptLanguageEn GetCorporationCorporationIDMiningObserversParamsAcceptLanguage = "en"
	GetCorporationCorporationIDMiningObserversParamsAcceptLanguageEs GetCorporationCorporationIDMiningObserversParamsAcceptLanguage = "es"
	GetCorporationCorporationIDMiningObserversParamsAcceptLanguageFr GetCorporationCorporationIDMiningObserversParamsAcceptLanguage = "fr"
	GetCorporationCorporationIDMiningObserversParamsAcceptLanguageJa GetCorporationCorporationIDMiningObserversParamsAcceptLanguage = "ja"
	GetCorporationCorporationIDMiningObserversParamsAcceptLanguageKo GetCorporationCorporationIDMiningObserversParamsAcceptLanguage = "ko"
	GetCorporationCorporationIDMiningObserversParamsAcceptLanguageRu GetCorporationCorporationIDMiningObserversParamsAcceptLanguage = "ru"
	GetCorporationCorporationIDMiningObserversParamsAcceptLanguageZh GetCorporationCorporationIDMiningObserversParamsAcceptLanguage = "zh"
)

// Defines values for GetCorporationCorporationIDMiningObserversObserverIDParamsAcceptLanguage.
const (
	GetCorporationCorporationIDMiningObserversObserverIDParamsAcceptLanguageDe GetCorporationCorporationIDMiningObserversObserverIDParamsAcceptLanguage = "de"
	GetCorporationCorporationIDMiningObserversObserverIDParamsAcceptLanguageEn GetCorporationCorporationIDMiningObserversObserverIDParamsAcceptLanguage = "en"
	GetCorporationCorporationIDMiningObserversObserverIDParamsAcceptLanguageEs GetCorporationCorporationIDMiningObserversObserverIDParamsAcceptLanguage = "es"
	GetCorporationCorporationIDMiningObserversObserverIDParamsAcceptLanguageFr GetCorporationCorporationIDMiningObserversObserverIDParamsAcceptLanguage = "fr"
	GetCorporationCorporationIDMiningObserversObserverIDParamsAcceptLanguageJa GetCorporationCorporationIDMiningObserversObserverIDParamsAcceptLanguage = "ja"
	GetCorporationCorporationIDMiningObserversObserverIDParamsAcceptLanguageKo GetCorporationCorporationIDMiningObserversObserverIDParamsAcceptLanguage = "ko"
	GetCorporationCorporationIDMiningObserversObserverIDParamsAcceptLanguageRu GetCorporationCorporationIDMiningObserversObserverIDParamsAcceptLanguage = "ru"
	GetCorporationCorporationIDMiningObserversObserverIDParamsAcceptLanguageZh GetCorporationCorporationIDMiningObserversObserverIDParamsAcceptLanguage = "zh"
)

// Defines values for GetCorporationsNpccorpsParamsAcceptLanguage.
const (
	GetCorporationsNpccorpsParamsAcceptLanguageDe GetCorporationsNpccorpsParamsAcceptLanguage = "de"
	GetCorporationsNpccorpsParamsAcceptLanguageEn GetCorporationsNpccorpsParamsAcceptLanguage = "en"
	GetCorporationsNpccorpsParamsAcceptLanguageEs GetCorporationsNpccorpsParamsAcceptLanguage = "es"
	GetCorporationsNpccorpsParamsAcceptLanguageFr GetCorporationsNpccorpsParamsAcceptLanguage = "fr"
	GetCorporationsNpccorpsParamsAcceptLanguageJa GetCorporationsNpccorpsParamsAcceptLanguage = "ja"
	GetCorporationsNpccorpsParamsAcceptLanguageKo GetCorporationsNpccorpsParamsAcceptLanguage = "ko"
	GetCorporationsNpccorpsParamsAcceptLanguageRu GetCorporationsNpccorpsParamsAcceptLanguage = "ru"
	GetCorporationsNpccorpsParamsAcceptLanguageZh GetCorporationsNpccorpsParamsAcceptLanguage = "zh"
)

// Defines values for GetCorporationsCorporationIDParamsAcceptLanguage.
const (
	GetCorporationsCorporationIDParamsAcceptLanguageDe GetCorporationsCorporationIDParamsAcceptLanguage = "de"
	GetCorporationsCorporationIDParamsAcceptLanguageEn GetCorporationsCorporationIDParamsAcceptLanguage = "en"
	GetCorporationsCorporationIDParamsAcceptLanguageEs GetCorporationsCorporationIDParamsAcceptLanguage = "es"
	GetCorporationsCorporationIDParamsAcceptLanguageFr GetCorporationsCorporationIDParamsAcceptLanguage = "fr"
	GetCorporationsCorporationIDParamsAcceptLanguageJa GetCorporationsCorporationIDParamsAcceptLanguage = "ja"
	GetCorporationsCorporationIDParamsAcceptLanguageKo GetCorporationsCorporationIDParamsAcceptLanguage = "ko"
	GetCorporationsCorporationIDParamsAcceptLanguageRu GetCorporationsCorporationIDParamsAcceptLanguage = "ru"
	GetCorporationsCorporationIDParamsAcceptLanguageZh GetCorporationsCorporationIDParamsAcceptLanguage = "zh"
)

// Defines values for GetCorporationsCorporationIDAlliancehistoryParamsAcceptLanguage.
const (
	GetCorporationsCorporationIDAlliancehistoryParamsAcceptLanguageDe GetCorporationsCorporationIDAlliancehistoryParamsAcceptLanguage = "de"
	GetCorporationsCorporationIDAlliancehistoryParamsAcceptLanguageEn GetCorporationsCorporationIDAlliancehistoryParamsAcceptLanguage = "en"
	GetCorporationsCorporationIDAlliancehistoryParamsAcceptLanguageEs GetCorporationsCorporationIDAlliancehistoryParamsAcceptLanguage = "es"
	GetCorporationsCorporationIDAlliancehistoryParamsAcceptLanguageFr GetCorporationsCorporationIDAlliancehistoryParamsAcceptLanguage = "fr"
	GetCorporationsCorporationIDAlliancehistoryParamsAcceptLanguageJa GetCorporationsCorporationIDAlliancehistoryParamsAcceptLanguage = "ja"
	GetCorporationsCorporationIDAlliancehistoryParamsAcceptLanguageKo GetCorporationsCorporationIDAlliancehistoryParamsAcceptLanguage = "ko"
	GetCorporationsCorporationIDAlliancehistoryParamsAcceptLanguageRu GetCorporationsCorporationIDAlliancehistoryParamsAcceptLanguage = "ru"
	GetCorporationsCorporationIDAlliancehistoryParamsAcceptLanguageZh GetCorporationsCorporationIDAlliancehistoryParamsAcceptLanguage = "zh"
)

// Defines values for GetCorporationsCorporationIDAssetsParamsAcceptLanguage.
const (
	GetCorporationsCorporationIDAssetsParamsAcceptLanguageDe GetCorporationsCorporationIDAssetsParamsAcceptLanguage = "de"
	GetCorporationsCorporationIDAssetsParamsAcceptLanguageEn GetCorporationsCorporationIDAssetsParamsAcceptLanguage = "en"
	GetCorporationsCorporationIDAssetsParamsAcceptLanguageEs GetCorporationsCorporationIDAssetsParamsAcceptLanguage = "es"
	GetCorporationsCorporationIDAssetsParamsAcceptLanguageFr GetCorporationsCorporationIDAssetsParamsAcceptLanguage = "fr"
	GetCorporationsCorporationIDAssetsParamsAcceptLanguageJa GetCorporationsCorporationIDAssetsParamsAcceptLanguage = "ja"
	GetCorporationsCorporationIDAssetsParamsAcceptLanguageKo GetCorporationsCorporationIDAssetsParamsAcceptLanguage = "ko"
	GetCorporationsCorporationIDAssetsParamsAcceptLanguageRu GetCorporationsCorporationIDAssetsParamsAcceptLanguage = "ru"
	GetCorporationsCorporationIDAssetsParamsAcceptLanguageZh GetCorporationsCorporationIDAssetsParamsAcceptLanguage = "zh"
)

// Defines values for PostCorporationsCorporationIDAssetsLocationsParamsAcceptLanguage.
const (
	PostCorporationsCorporationIDAssetsLocationsParamsAcceptLanguageDe PostCorporationsCorporationIDAssetsLocationsParamsAcceptLanguage = "de"
	PostCorporationsCorporationIDAssetsLocationsParamsAcceptLanguageEn PostCorporationsCorporationIDAssetsLocationsParamsAcceptLanguage = "en"
	PostCorporationsCorporationIDAssetsLocationsParamsAcceptLanguageEs PostCorporationsCorporationIDAssetsLocationsParamsAcceptLanguage = "es"
	PostCorporationsCorporationIDAssetsLocationsParamsAcceptLanguageFr PostCorporationsCorporationIDAssetsLocationsParamsAcceptLanguage = "fr"
	PostCorporationsCorporationIDAssetsLocationsParamsAcceptLanguageJa PostCorporationsCorporationIDAssetsLocationsParamsAcceptLanguage = "ja"
	PostCorporationsCorporationIDAssetsLocationsParamsAcceptLanguageKo PostCorporationsCorporationIDAssetsLocationsParamsAcceptLanguage = "ko"
	PostCorporationsCorporationIDAssetsLocationsParamsAcceptLanguageRu PostCorporationsCorporationIDAssetsLocationsParamsAcceptLanguage = "ru"
	PostCorporationsCorporationIDAssetsLocationsParamsAcceptLanguageZh PostCorporationsCorporationIDAssetsLocationsParamsAcceptLanguage = "zh"
)

// Defines values for PostCorporationsCorporationIDAssetsNamesParamsAcceptLanguage.
const (
	PostCorporationsCorporationIDAssetsNamesParamsAcceptLanguageDe PostCorporationsCorporationIDAssetsNamesParamsAcceptLanguage = "de"
	PostCorporationsCorporationIDAssetsNamesParamsAcceptLanguageEn PostCorporationsCorporationIDAssetsNamesParamsAcceptLanguage = "en"
	PostCorporationsCorporationIDAssetsNamesParamsAcceptLanguageEs PostCorporationsCorporationIDAssetsNamesParamsAcceptLanguage = "es"
	PostCorporationsCorporationIDAssetsNamesParamsAcceptLanguageFr PostCorporationsCorporationIDAssetsNamesParamsAcceptLanguage = "fr"
	PostCorporationsCorporationIDAssetsNamesParamsAcceptLanguageJa PostCorporationsCorporationIDAssetsNamesParamsAcceptLanguage = "ja"
	PostCorporationsCorporationIDAssetsNamesParamsAcceptLanguageKo PostCorporationsCorporationIDAssetsNamesParamsAcceptLanguage = "ko"
	PostCorporationsCorporationIDAssetsNamesParamsAcceptLanguageRu PostCorporationsCorporationIDAssetsNamesParamsAcceptLanguage = "ru"
	PostCorporationsCorporationIDAssetsNamesParamsAcceptLanguageZh PostCorporationsCorporationIDAssetsNamesParamsAcceptLanguage = "zh"
)

// Defines values for GetCorporationsCorporationIDBlueprintsParamsAcceptLanguage.
const (
	GetCorporationsCorporationIDBlueprintsParamsAcceptLanguageDe GetCorporationsCorporationIDBlueprintsParamsAcceptLanguage = "de"
	GetCorporationsCorporationIDBlueprintsParamsAcceptLanguageEn GetCorporationsCorporationIDBlueprintsParamsAcceptLanguage = "en"
	GetCorporationsCorporationIDBlueprintsParamsAcceptLanguageEs GetCorporationsCorporationIDBlueprintsParamsAcceptLanguage = "es"
	GetCorporationsCorporationIDBlueprintsParamsAcceptLanguageFr GetCorporationsCorporationIDBlueprintsParamsAcceptLanguage = "fr"
	GetCorporationsCorporationIDBlueprintsParamsAcceptLanguageJa GetCorporationsCorporationIDBlueprintsParamsAcceptLanguage = "ja"
	GetCorporationsCorporationIDBlueprintsParamsAcceptLanguageKo GetCorporationsCorporationIDBlueprintsParamsAcceptLanguage = "ko"
	GetCorporationsCorporationIDBlueprintsParamsAcceptLanguageRu GetCorporationsCorporationIDBlueprintsParamsAcceptLanguage = "ru"
	GetCorporationsCorporationIDBlueprintsParamsAcceptLanguageZh GetCorporationsCorporationIDBlueprintsParamsAcceptLanguage = "zh"
)

// Defines values for GetCorporationsCorporationIDContactsParamsAcceptLanguage.
const (
	GetCorporationsCorporationIDContactsParamsAcceptLanguageDe GetCorporationsCorporationIDContactsParamsAcceptLanguage = "de"
	GetCorporationsCorporationIDContactsParamsAcceptLanguageEn GetCorporationsCorporationIDContactsParamsAcceptLanguage = "en"
	GetCorporationsCorporationIDContactsParamsAcceptLanguageEs GetCorporationsCorporationIDContactsParamsAcceptLanguage = "es"
	GetCorporationsCorporationIDContactsParamsAcceptLanguageFr GetCorporationsCorporationIDContactsParamsAcceptLanguage = "fr"
	GetCorporationsCorporationIDContactsParamsAcceptLanguageJa GetCorporationsCorporationIDContactsParamsAcceptLanguage = "ja"
	GetCorporationsCorporationIDContactsParamsAcceptLanguageKo GetCorporationsCorporationIDContactsParamsAcceptLanguage = "ko"
	GetCorporationsCorporationIDContactsParamsAcceptLanguageRu GetCorporationsCorporationIDContactsParamsAcceptLanguage = "ru"
	GetCorporationsCorporationIDContactsParamsAcceptLanguageZh GetCorporationsCorporationIDContactsParamsAcceptLanguage = "zh"
)

// Defines values for GetCorporationsCorporationIDContactsLabelsParamsAcceptLanguage.
const (
	GetCorporationsCorporationIDContactsLabelsParamsAcceptLanguageDe GetCorporationsCorporationIDContactsLabelsParamsAcceptLanguage = "de"
	GetCorporationsCorporationIDContactsLabelsParamsAcceptLanguageEn GetCorporationsCorporationIDContactsLabelsParamsAcceptLanguage = "en"
	GetCorporationsCorporationIDContactsLabelsParamsAcceptLanguageEs GetCorporationsCorporationIDContactsLabelsParamsAcceptLanguage = "es"
	GetCorporationsCorporationIDContactsLabelsParamsAcceptLanguageFr GetCorporationsCorporationIDContactsLabelsParamsAcceptLanguage = "fr"
	GetCorporationsCorporationIDContactsLabelsParamsAcceptLanguageJa GetCorporationsCorporationIDContactsLabelsParamsAcceptLanguage = "ja"
	GetCorporationsCorporationIDContactsLabelsParamsAcceptLanguageKo GetCorporationsCorporationIDContactsLabelsParamsAcceptLanguage = "ko"
	GetCorporationsCorporationIDContactsLabelsParamsAcceptLanguageRu GetCorporationsCorporationIDContactsLabelsParamsAcceptLanguage = "ru"
	GetCorporationsCorporationIDContactsLabelsParamsAcceptLanguageZh GetCorporationsCorporationIDContactsLabelsParamsAcceptLanguage = "zh"
)

// Defines values for GetCorporationsCorporationIDContainersLogsParamsAcceptLanguage.
const (
	GetCorporationsCorporationIDContainersLogsParamsAcceptLanguageDe GetCorporationsCorporationIDContainersLogsParamsAcceptLanguage = "de"
	GetCorporationsCorporationIDContainersLogsParamsAcceptLanguageEn GetCorporationsCorporationIDContainersLogsParamsAcceptLanguage = "en"
	GetCorporationsCorporationIDContainersLogsParamsAcceptLanguageEs GetCorporationsCorporationIDContainersLogsParamsAcceptLanguage = "es"
	GetCorporationsCorporationIDContainersLogsParamsAcceptLanguageFr GetCorporationsCorporationIDContainersLogsParamsAcceptLanguage = "fr"
	GetCorporationsCorporationIDContainersLogsParamsAcceptLanguageJa GetCorporationsCorporationIDContainersLogsParamsAcceptLanguage = "ja"
	GetCorporationsCorporationIDContainersLogsParamsAcceptLanguageKo GetCorporationsCorporationIDContainersLogsParamsAcceptLanguage = "ko"
	GetCorporationsCorporationIDContainersLogsParamsAcceptLanguageRu GetCorporationsCorporationIDContainersLogsParamsAcceptLanguage = "ru"
	GetCorporationsCorporationIDContainersLogsParamsAcceptLanguageZh GetCorporationsCorporationIDContainersLogsParamsAcceptLanguage = "zh"
)

// Defines values for GetCorporationsCorporationIDContractsParamsAcceptLanguage.
const (
	GetCorporationsCorporationIDContractsParamsAcceptLanguageDe GetCorporationsCorporationIDContractsParamsAcceptLanguage = "de"
	GetCorporationsCorporationIDContractsParamsAcceptLanguageEn GetCorporationsCorporationIDContractsParamsAcceptLanguage = "en"
	GetCorporationsCorporationIDContractsParamsAcceptLanguageEs GetCorporationsCorporationIDContractsParamsAcceptLanguage = "es"
	GetCorporationsCorporationIDContractsParamsAcceptLanguageFr GetCorporationsCorporationIDContractsParamsAcceptLanguage = "fr"
	GetCorporationsCorporationIDContractsParamsAcceptLanguageJa GetCorporationsCorporationIDContractsParamsAcceptLanguage = "ja"
	GetCorporationsCorporationIDContractsParamsAcceptLanguageKo GetCorporationsCorporationIDContractsParamsAcceptLanguage = "ko"
	GetCorporationsCorporationIDContractsParamsAcceptLanguageRu GetCorporationsCorporationIDContractsParamsAcceptLanguage = "ru"
	GetCorporationsCorporationIDContractsParamsAcceptLanguageZh GetCorporationsCorporationIDContractsParamsAcceptLanguage = "zh"
)

// Defines values for GetCorporationsCorporationIDContractsContractIDBidsParamsAcceptLanguage.
const (
	GetCorporationsCorporationIDContractsContractIDBidsParamsAcceptLanguageDe GetCorporationsCorporationIDContractsContractIDBidsParamsAcceptLanguage = "de"
	GetCorporationsCorporationIDContractsContractIDBidsParamsAcceptLanguageEn GetCorporationsCorporationIDContractsContractIDBidsParamsAcceptLanguage = "en"
	GetCorporationsCorporationIDContractsContractIDBidsParamsAcceptLanguageEs GetCorporationsCorporationIDContractsContractIDBidsParamsAcceptLanguage = "es"
	GetCorporationsCorporationIDContractsContractIDBidsParamsAcceptLanguageFr GetCorporationsCorporationIDContractsContractIDBidsParamsAcceptLanguage = "fr"
	GetCorporationsCorporationIDContractsContractIDBidsParamsAcceptLanguageJa GetCorporationsCorporationIDContractsContractIDBidsParamsAcceptLanguage = "ja"
	GetCorporationsCorporationIDContractsContractIDBidsParamsAcceptLanguageKo GetCorporationsCorporationIDContractsContractIDBidsParamsAcceptLanguage = "ko"
	GetCorporationsCorporationIDContractsContractIDBidsParamsAcceptLanguageRu GetCorporationsCorporationIDContractsContractIDBidsParamsAcceptLanguage = "ru"
	GetCorporationsCorporationIDContractsContractIDBidsParamsAcceptLanguageZh GetCorporationsCorporationIDContractsContractIDBidsParamsAcceptLanguage = "zh"
)

// Defines values for GetCorporationsCorporationIDContractsContractIDItemsParamsAcceptLanguage.
const (
	GetCorporationsCorporationIDContractsContractIDItemsParamsAcceptLanguageDe GetCorporationsCorporationIDContractsContractIDItemsParamsAcceptLanguage = "de"
	GetCorporationsCorporationIDContractsContractIDItemsParamsAcceptLanguageEn GetCorporationsCorporationIDContractsContractIDItemsParamsAcceptLanguage = "en"
	GetCorporationsCorporationIDContractsContractIDItemsParamsAcceptLanguageEs GetCorporationsCorporationIDContractsContractIDItemsParamsAcceptLanguage = "es"
	GetCorporationsCorporationIDContractsContractIDItemsParamsAcceptLanguageFr GetCorporationsCorporationIDContractsContractIDItemsParamsAcceptLanguage = "fr"
	GetCorporationsCorporationIDContractsContractIDItemsParamsAcceptLanguageJa GetCorporationsCorporationIDContractsContractIDItemsParamsAcceptLanguage = "ja"
	GetCorporationsCorporationIDContractsContractIDItemsParamsAcceptLanguageKo GetCorporationsCorporationIDContractsContractIDItemsParamsAcceptLanguage = "ko"
	GetCorporationsCorporationIDContractsContractIDItemsParamsAcceptLanguageRu GetCorporationsCorporationIDContractsContractIDItemsParamsAcceptLanguage = "ru"
	GetCorporationsCorporationIDContractsContractIDItemsParamsAcceptLanguageZh GetCorporationsCorporationIDContractsContractIDItemsParamsAcceptLanguage = "zh"
)

// Defines values for GetCorporationsCorporationIDCustomsOfficesParamsAcceptLanguage.
const (
	GetCorporationsCorporationIDCustomsOfficesParamsAcceptLanguageDe GetCorporationsCorporationIDCustomsOfficesParamsAcceptLanguage = "de"
	GetCorporationsCorporationIDCustomsOfficesParamsAcceptLanguageEn GetCorporationsCorporationIDCustomsOfficesParamsAcceptLanguage = "en"
	GetCorporationsCorporationIDCustomsOfficesParamsAcceptLanguageEs GetCorporationsCorporationIDCustomsOfficesParamsAcceptLanguage = "es"
	GetCorporationsCorporationIDCustomsOfficesParamsAcceptLanguageFr GetCorporationsCorporationIDCustomsOfficesParamsAcceptLanguage = "fr"
	GetCorporationsCorporationIDCustomsOfficesParamsAcceptLanguageJa GetCorporationsCorporationIDCustomsOfficesParamsAcceptLanguage = "ja"
	GetCorporationsCorporationIDCustomsOfficesParamsAcceptLanguageKo GetCorporationsCorporationIDCustomsOfficesParamsAcceptLanguage = "ko"
	GetCorporationsCorporationIDCustomsOfficesParamsAcceptLanguageRu GetCorporationsCorporationIDCustomsOfficesParamsAcceptLanguage = "ru"
	GetCorporationsCorporationIDCustomsOfficesParamsAcceptLanguageZh GetCorporationsCorporationIDCustomsOfficesParamsAcceptLanguage = "zh"
)

// Defines values for GetCorporationsCorporationIDDivisionsParamsAcceptLanguage.
const (
	GetCorporationsCorporationIDDivisionsParamsAcceptLanguageDe GetCorporationsCorporationIDDivisionsParamsAcceptLanguage = "de"
	GetCorporationsCorporationIDDivisionsParamsAcceptLanguageEn GetCorporationsCorporationIDDivisionsParamsAcceptLanguage = "en"
	GetCorporationsCorporationIDDivisionsParamsAcceptLanguageEs GetCorporationsCorporationIDDivisionsParamsAcceptLanguage = "es"
	GetCorporationsCorporationIDDivisionsParamsAcceptLanguageFr GetCorporationsCorporationIDDivisionsParamsAcceptLanguage = "fr"
	GetCorporationsCorporationIDDivisionsParamsAcceptLanguageJa GetCorporationsCorporationIDDivisionsParamsAcceptLanguage = "ja"
	GetCorporationsCorporationIDDivisionsParamsAcceptLanguageKo GetCorporationsCorporationIDDivisionsParamsAcceptLanguage = "ko"
	GetCorporationsCorporationIDDivisionsParamsAcceptLanguageRu GetCorporationsCorporationIDDivisionsParamsAcceptLanguage = "ru"
	GetCorporationsCorporationIDDivisionsParamsAcceptLanguageZh GetCorporationsCorporationIDDivisionsParamsAcceptLanguage = "zh"
)

// Defines values for GetCorporationsCorporationIDFacilitiesParamsAcceptLanguage.
const (
	GetCorporationsCorporationIDFacilitiesParamsAcceptLanguageDe GetCorporationsCorporationIDFacilitiesParamsAcceptLanguage = "de"
	GetCorporationsCorporationIDFacilitiesParamsAcceptLanguageEn GetCorporationsCorporationIDFacilitiesParamsAcceptLanguage = "en"
	GetCorporationsCorporationIDFacilitiesParamsAcceptLanguageEs GetCorporationsCorporationIDFacilitiesParamsAcceptLanguage = "es"
	GetCorporationsCorporationIDFacilitiesParamsAcceptLanguageFr GetCorporationsCorporationIDFacilitiesParamsAcceptLanguage = "fr"
	GetCorporationsCorporationIDFacilitiesParamsAcceptLanguageJa GetCorporationsCorporationIDFacilitiesParamsAcceptLanguage = "ja"
	GetCorporationsCorporationIDFacilitiesParamsAcceptLanguageKo GetCorporationsCorporationIDFacilitiesParamsAcceptLanguage = "ko"
	GetCorporationsCorporationIDFacilitiesParamsAcceptLanguageRu GetCorporationsCorporationIDFacilitiesParamsAcceptLanguage = "ru"
	GetCorporationsCorporationIDFacilitiesParamsAcceptLanguageZh GetCorporationsCorporationIDFacilitiesParamsAcceptLanguage = "zh"
)

// Defines values for GetCorporationsCorporationIDFwStatsParamsAcceptLanguage.
const (
	GetCorporationsCorporationIDFwStatsParamsAcceptLanguageDe GetCorporationsCorporationIDFwStatsParamsAcceptLanguage = "de"
	GetCorporationsCorporationIDFwStatsParamsAcceptLanguageEn GetCorporationsCorporationIDFwStatsParamsAcceptLanguage = "en"
	GetCorporationsCorporationIDFwStatsParamsAcceptLanguageEs GetCorporationsCorporationIDFwStatsParamsAcceptLanguage = "es"
	GetCorporationsCorporationIDFwStatsParamsAcceptLanguageFr GetCorporationsCorporationIDFwStatsParamsAcceptLanguage = "fr"
	GetCorporationsCorporationIDFwStatsParamsAcceptLanguageJa GetCorporationsCorporationIDFwStatsParamsAcceptLanguage = "ja"
	GetCorporationsCorporationIDFwStatsParamsAcceptLanguageKo GetCorporationsCorporationIDFwStatsParamsAcceptLanguage = "ko"
	GetCorporationsCorporationIDFwStatsParamsAcceptLanguageRu GetCorporationsCorporationIDFwStatsParamsAcceptLanguage = "ru"
	GetCorporationsCorporationIDFwStatsParamsAcceptLanguageZh GetCorporationsCorporationIDFwStatsParamsAcceptLanguage = "zh"
)

// Defines values for GetCorporationsCorporationIDIconsParamsAcceptLanguage.
const (
	GetCorporationsCorporationIDIconsParamsAcceptLanguageDe GetCorporationsCorporationIDIconsParamsAcceptLanguage = "de"
	GetCorporationsCorporationIDIconsParamsAcceptLanguageEn GetCorporationsCorporationIDIconsParamsAcceptLanguage = "en"
	GetCorporationsCorporationIDIconsParamsAcceptLanguageEs GetCorporationsCorporationIDIconsParamsAcceptLanguage = "es"
	GetCorporationsCorporationIDIconsParamsAcceptLanguageFr GetCorporationsCorporationIDIconsParamsAcceptLanguage = "fr"
	GetCorporationsCorporationIDIconsParamsAcceptLanguageJa GetCorporationsCorporationIDIconsParamsAcceptLanguage = "ja"
	GetCorporationsCorporationIDIconsParamsAcceptLanguageKo GetCorporationsCorporationIDIconsParamsAcceptLanguage = "ko"
	GetCorporationsCorporationIDIconsParamsAcceptLanguageRu GetCorporationsCorporationIDIconsParamsAcceptLanguage = "ru"
	GetCorporationsCorporationIDIconsParamsAcceptLanguageZh GetCorporationsCorporationIDIconsParamsAcceptLanguage = "zh"
)

// Defines values for GetCorporationsCorporationIDIndustryJobsParamsAcceptLanguage.
const (
	GetCorporationsCorporationIDIndustryJobsParamsAcceptLanguageDe GetCorporationsCorporationIDIndustryJobsParamsAcceptLanguage = "de"
	GetCorporationsCorporationIDIndustryJobsParamsAcceptLanguageEn GetCorporationsCorporationIDIndustryJobsParamsAcceptLanguage = "en"
	GetCorporationsCorporationIDIndustryJobsParamsAcceptLanguageEs GetCorporationsCorporationIDIndustryJobsParamsAcceptLanguage = "es"
	GetCorporationsCorporationIDIndustryJobsParamsAcceptLanguageFr GetCorporationsCorporationIDIndustryJobsParamsAcceptLanguage = "fr"
	GetCorporationsCorporationIDIndustryJobsParamsAcceptLanguageJa GetCorporationsCorporationIDIndustryJobsParamsAcceptLanguage = "ja"
	GetCorporationsCorporationIDIndustryJobsParamsAcceptLanguageKo GetCorporationsCorporationIDIndustryJobsParamsAcceptLanguage = "ko"
	GetCorporationsCorporationIDIndustryJobsParamsAcceptLanguageRu GetCorporationsCorporationIDIndustryJobsParamsAcceptLanguage = "ru"
	GetCorporationsCorporationIDIndustryJobsParamsAcceptLanguageZh GetCorporationsCorporationIDIndustryJobsParamsAcceptLanguage = "zh"
)

// Defines values for GetCorporationsCorporationIDKillmailsRecentParamsAcceptLanguage.
const (
	GetCorporationsCorporationIDKillmailsRecentParamsAcceptLanguageDe GetCorporationsCorporationIDKillmailsRecentParamsAcceptLanguage = "de"
	GetCorporationsCorporationIDKillmailsRecentParamsAcceptLanguageEn GetCorporationsCorporationIDKillmailsRecentParamsAcceptLanguage = "en"
	GetCorporationsCorporationIDKillmailsRecentParamsAcceptLanguageEs GetCorporationsCorporationIDKillmailsRecentParamsAcceptLanguage = "es"
	GetCorporationsCorporationIDKillmailsRecentParamsAcceptLanguageFr GetCorporationsCorporationIDKillmailsRecentParamsAcceptLanguage = "fr"
	GetCorporationsCorporationIDKillmailsRecentParamsAcceptLanguageJa GetCorporationsCorporationIDKillmailsRecentParamsAcceptLanguage = "ja"
	GetCorporationsCorporationIDKillmailsRecentParamsAcceptLanguageKo GetCorporationsCorporationIDKillmailsRecentParamsAcceptLanguage = "ko"
	GetCorporationsCorporationIDKillmailsRecentParamsAcceptLanguageRu GetCorporationsCorporationIDKillmailsRecentParamsAcceptLanguage = "ru"
	GetCorporationsCorporationIDKillmailsRecentParamsAcceptLanguageZh GetCorporationsCorporationIDKillmailsRecentParamsAcceptLanguage = "zh"
)

// Defines values for GetCorporationsCorporationIDMedalsParamsAcceptLanguage.
const (
	GetCorporationsCorporationIDMedalsParamsAcceptLanguageDe GetCorporationsCorporationIDMedalsParamsAcceptLanguage = "de"
	GetCorporationsCorporationIDMedalsParamsAcceptLanguageEn GetCorporationsCorporationIDMedalsParamsAcceptLanguage = "en"
	GetCorporationsCorporationIDMedalsParamsAcceptLanguageEs GetCorporationsCorporationIDMedalsParamsAcceptLanguage = "es"
	GetCorporationsCorporationIDMedalsParamsAcceptLanguageFr GetCorporationsCorporationIDMedalsParamsAcceptLanguage = "fr"
	GetCorporationsCorporationIDMedalsParamsAcceptLanguageJa GetCorporationsCorporationIDMedalsParamsAcceptLanguage = "ja"
	GetCorporationsCorporationIDMedalsParamsAcceptLanguageKo GetCorporationsCorporationIDMedalsParamsAcceptLanguage = "ko"
	GetCorporationsCorporationIDMedalsParamsAcceptLanguageRu GetCorporationsCorporationIDMedalsParamsAcceptLanguage = "ru"
	GetCorporationsCorporationIDMedalsParamsAcceptLanguageZh GetCorporationsCorporationIDMedalsParamsAcceptLanguage = "zh"
)

// Defines values for GetCorporationsCorporationIDMedalsIssuedParamsAcceptLanguage.
const (
	GetCorporationsCorporationIDMedalsIssuedParamsAcceptLanguageDe GetCorporationsCorporationIDMedalsIssuedParamsAcceptLanguage = "de"
	GetCorporationsCorporationIDMedalsIssuedParamsAcceptLanguageEn GetCorporationsCorporationIDMedalsIssuedParamsAcceptLanguage = "en"
	GetCorporationsCorporationIDMedalsIssuedParamsAcceptLanguageEs GetCorporationsCorporationIDMedalsIssuedParamsAcceptLanguage = "es"
	GetCorporationsCorporationIDMedalsIssuedParamsAcceptLanguageFr GetCorporationsCorporationIDMedalsIssuedParamsAcceptLanguage = "fr"
	GetCorporationsCorporationIDMedalsIssuedParamsAcceptLanguageJa GetCorporationsCorporationIDMedalsIssuedParamsAcceptLanguage = "ja"
	GetCorporationsCorporationIDMedalsIssuedParamsAcceptLanguageKo GetCorporationsCorporationIDMedalsIssuedParamsAcceptLanguage = "ko"
	GetCorporationsCorporationIDMedalsIssuedParamsAcceptLanguageRu GetCorporationsCorporationIDMedalsIssuedParamsAcceptLanguage = "ru"
	GetCorporationsCorporationIDMedalsIssuedParamsAcceptLanguageZh GetCorporationsCorporationIDMedalsIssuedParamsAcceptLanguage = "zh"
)

// Defines values for GetCorporationsCorporationIDMembersParamsAcceptLanguage.
const (
	GetCorporationsCorporationIDMembersParamsAcceptLanguageDe GetCorporationsCorporationIDMembersParamsAcceptLanguage = "de"
	GetCorporationsCorporationIDMembersParamsAcceptLanguageEn GetCorporationsCorporationIDMembersParamsAcceptLanguage = "en"
	GetCorporationsCorporationIDMembersParamsAcceptLanguageEs GetCorporationsCorporationIDMembersParamsAcceptLanguage = "es"
	GetCorporationsCorporationIDMembersParamsAcceptLanguageFr GetCorporationsCorporationIDMembersParamsAcceptLanguage = "fr"
	GetCorporationsCorporationIDMembersParamsAcceptLanguageJa GetCorporationsCorporationIDMembersParamsAcceptLanguage = "ja"
	GetCorporationsCorporationIDMembersParamsAcceptLanguageKo GetCorporationsCorporationIDMembersParamsAcceptLanguage = "ko"
	GetCorporationsCorporationIDMembersParamsAcceptLanguageRu GetCorporationsCorporationIDMembersParamsAcceptLanguage = "ru"
	GetCorporationsCorporationIDMembersParamsAcceptLanguageZh GetCorporationsCorporationIDMembersParamsAcceptLanguage = "zh"
)

// Defines values for GetCorporationsCorporationIDMembersLimitParamsAcceptLanguage.
const (
	GetCorporationsCorporationIDMembersLimitParamsAcceptLanguageDe GetCorporationsCorporationIDMembersLimitParamsAcceptLanguage = "de"
	GetCorporationsCorporationIDMembersLimitParamsAcceptLanguageEn GetCorporationsCorporationIDMembersLimitParamsAcceptLanguage = "en"
	GetCorporationsCorporationIDMembersLimitParamsAcceptLanguageEs GetCorporationsCorporationIDMembersLimitParamsAcceptLanguage = "es"
	GetCorporationsCorporationIDMembersLimitParamsAcceptLanguageFr GetCorporationsCorporationIDMembersLimitParamsAcceptLanguage = "fr"
	GetCorporationsCorporationIDMembersLimitParamsAcceptLanguageJa GetCorporationsCorporationIDMembersLimitParamsAcceptLanguage = "ja"
	GetCorporationsCorporationIDMembersLimitParamsAcceptLanguageKo GetCorporationsCorporationIDMembersLimitParamsAcceptLanguage = "ko"
	GetCorporationsCorporationIDMembersLimitParamsAcceptLanguageRu GetCorporationsCorporationIDMembersLimitParamsAcceptLanguage = "ru"
	GetCorporationsCorporationIDMembersLimitParamsAcceptLanguageZh GetCorporationsCorporationIDMembersLimitParamsAcceptLanguage = "zh"
)

// Defines values for GetCorporationsCorporationIDMembersTitlesParamsAcceptLanguage.
const (
	GetCorporationsCorporationIDMembersTitlesParamsAcceptLanguageDe GetCorporationsCorporationIDMembersTitlesParamsAcceptLanguage = "de"
	GetCorporationsCorporationIDMembersTitlesParamsAcceptLanguageEn GetCorporationsCorporationIDMembersTitlesParamsAcceptLanguage = "en"
	GetCorporationsCorporationIDMembersTitlesParamsAcceptLanguageEs GetCorporationsCorporationIDMembersTitlesParamsAcceptLanguage = "es"
	GetCorporationsCorporationIDMembersTitlesParamsAcceptLanguageFr GetCorporationsCorporationIDMembersTitlesParamsAcceptLanguage = "fr"
	GetCorporationsCorporationIDMembersTitlesParamsAcceptLanguageJa GetCorporationsCorporationIDMembersTitlesParamsAcceptLanguage = "ja"
	GetCorporationsCorporationIDMembersTitlesParamsAcceptLanguageKo GetCorporationsCorporationIDMembersTitlesParamsAcceptLanguage = "ko"
	GetCorporationsCorporationIDMembersTitlesParamsAcceptLanguageRu GetCorporationsCorporationIDMembersTitlesParamsAcceptLanguage = "ru"
	GetCorporationsCorporationIDMembersTitlesParamsAcceptLanguageZh GetCorporationsCorporationIDMembersTitlesParamsAcceptLanguage = "zh"
)

// Defines values for GetCorporationsCorporationIDMembertrackingParamsAcceptLanguage.
const (
	GetCorporationsCorporationIDMembertrackingParamsAcceptLanguageDe GetCorporationsCorporationIDMembertrackingParamsAcceptLanguage = "de"
	GetCorporationsCorporationIDMembertrackingParamsAcceptLanguageEn GetCorporationsCorporationIDMembertrackingParamsAcceptLanguage = "en"
	GetCorporationsCorporationIDMembertrackingParamsAcceptLanguageEs GetCorporationsCorporationIDMembertrackingParamsAcceptLanguage = "es"
	GetCorporationsCorporationIDMembertrackingParamsAcceptLanguageFr GetCorporationsCorporationIDMembertrackingParamsAcceptLanguage = "fr"
	GetCorporationsCorporationIDMembertrackingParamsAcceptLanguageJa GetCorporationsCorporationIDMembertrackingParamsAcceptLanguage = "ja"
	GetCorporationsCorporationIDMembertrackingParamsAcceptLanguageKo GetCorporationsCorporationIDMembertrackingParamsAcceptLanguage = "ko"
	GetCorporationsCorporationIDMembertrackingParamsAcceptLanguageRu GetCorporationsCorporationIDMembertrackingParamsAcceptLanguage = "ru"
	GetCorporationsCorporationIDMembertrackingParamsAcceptLanguageZh GetCorporationsCorporationIDMembertrackingParamsAcceptLanguage = "zh"
)

// Defines values for GetCorporationsCorporationIDOrdersParamsAcceptLanguage.
const (
	GetCorporationsCorporationIDOrdersParamsAcceptLanguageDe GetCorporationsCorporationIDOrdersParamsAcceptLanguage = "de"
	GetCorporationsCorporationIDOrdersParamsAcceptLanguageEn GetCorporationsCorporationIDOrdersParamsAcceptLanguage = "en"
	GetCorporationsCorporationIDOrdersParamsAcceptLanguageEs GetCorporationsCorporationIDOrdersParamsAcceptLanguage = "es"
	GetCorporationsCorporationIDOrdersParamsAcceptLanguageFr GetCorporationsCorporationIDOrdersParamsAcceptLanguage = "fr"
	GetCorporationsCorporationIDOrdersParamsAcceptLanguageJa GetCorporationsCorporationIDOrdersParamsAcceptLanguage = "ja"
	GetCorporationsCorporationIDOrdersParamsAcceptLanguageKo GetCorporationsCorporationIDOrdersParamsAcceptLanguage = "ko"
	GetCorporationsCorporationIDOrdersParamsAcceptLanguageRu GetCorporationsCorporationIDOrdersParamsAcceptLanguage = "ru"
	GetCorporationsCorporationIDOrdersParamsAcceptLanguageZh GetCorporationsCorporationIDOrdersParamsAcceptLanguage = "zh"
)

// Defines values for GetCorporationsCorporationIDOrdersHistoryParamsAcceptLanguage.
const (
	GetCorporationsCorporationIDOrdersHistoryParamsAcceptLanguageDe GetCorporationsCorporationIDOrdersHistoryParamsAcceptLanguage = "de"
	GetCorporationsCorporationIDOrdersHistoryParamsAcceptLanguageEn GetCorporationsCorporationIDOrdersHistoryParamsAcceptLanguage = "en"
	GetCorporationsCorporationIDOrdersHistoryParamsAcceptLanguageEs GetCorporationsCorporationIDOrdersHistoryParamsAcceptLanguage = "es"
	GetCorporationsCorporationIDOrdersHistoryParamsAcceptLanguageFr GetCorporationsCorporationIDOrdersHistoryParamsAcceptLanguage = "fr"
	GetCorporationsCorporationIDOrdersHistoryParamsAcceptLanguageJa GetCorporationsCorporationIDOrdersHistoryParamsAcceptLanguage = "ja"
	GetCorporationsCorporationIDOrdersHistoryParamsAcceptLanguageKo GetCorporationsCorporationIDOrdersHistoryParamsAcceptLanguage = "ko"
	GetCorporationsCorporationIDOrdersHistoryParamsAcceptLanguageRu GetCorporationsCorporationIDOrdersHistoryParamsAcceptLanguage = "ru"
	GetCorporationsCorporationIDOrdersHistoryParamsAcceptLanguageZh GetCorporationsCorporationIDOrdersHistoryParamsAcceptLanguage = "zh"
)

// Defines values for GetCorporationsCorporationIDRolesParamsAcceptLanguage.
const (
	GetCorporationsCorporationIDRolesParamsAcceptLanguageDe GetCorporationsCorporationIDRolesParamsAcceptLanguage = "de"
	GetCorporationsCorporationIDRolesParamsAcceptLanguageEn GetCorporationsCorporationIDRolesParamsAcceptLanguage = "en"
	GetCorporationsCorporationIDRolesParamsAcceptLanguageEs GetCorporationsCorporationIDRolesParamsAcceptLanguage = "es"
	GetCorporationsCorporationIDRolesParamsAcceptLanguageFr GetCorporationsCorporationIDRolesParamsAcceptLanguage = "fr"
	GetCorporationsCorporationIDRolesParamsAcceptLanguageJa GetCorporationsCorporationIDRolesParamsAcceptLanguage = "ja"
	GetCorporationsCorporationIDRolesParamsAcceptLanguageKo GetCorporationsCorporationIDRolesParamsAcceptLanguage = "ko"
	GetCorporationsCorporationIDRolesParamsAcceptLanguageRu GetCorporationsCorporationIDRolesParamsAcceptLanguage = "ru"
	GetCorporationsCorporationIDRolesParamsAcceptLanguageZh GetCorporationsCorporationIDRolesParamsAcceptLanguage = "zh"
)

// Defines values for GetCorporationsCorporationIDRolesHistoryParamsAcceptLanguage.
const (
	GetCorporationsCorporationIDRolesHistoryParamsAcceptLanguageDe GetCorporationsCorporationIDRolesHistoryParamsAcceptLanguage = "de"
	GetCorporationsCorporationIDRolesHistoryParamsAcceptLanguageEn GetCorporationsCorporationIDRolesHistoryParamsAcceptLanguage = "en"
	GetCorporationsCorporationIDRolesHistoryParamsAcceptLanguageEs GetCorporationsCorporationIDRolesHistoryParamsAcceptLanguage = "es"
	GetCorporationsCorporationIDRolesHistoryParamsAcceptLanguageFr GetCorporationsCorporationIDRolesHistoryParamsAcceptLanguage = "fr"
	GetCorporationsCorporationIDRolesHistoryParamsAcceptLanguageJa GetCorporationsCorporationIDRolesHistoryParamsAcceptLanguage = "ja"
	GetCorporationsCorporationIDRolesHistoryParamsAcceptLanguageKo GetCorporationsCorporationIDRolesHistoryParamsAcceptLanguage = "ko"
	GetCorporationsCorporationIDRolesHistoryParamsAcceptLanguageRu GetCorporationsCorporationIDRolesHistoryParamsAcceptLanguage = "ru"
	GetCorporationsCorporationIDRolesHistoryParamsAcceptLanguageZh GetCorporationsCorporationIDRolesHistoryParamsAcceptLanguage = "zh"
)

// Defines values for GetCorporationsCorporationIDShareholdersParamsAcceptLanguage.
const (
	GetCorporationsCorporationIDShareholdersParamsAcceptLanguageDe GetCorporationsCorporationIDShareholdersParamsAcceptLanguage = "de"
	GetCorporationsCorporationIDShareholdersParamsAcceptLanguageEn GetCorporationsCorporationIDShareholdersParamsAcceptLanguage = "en"
	GetCorporationsCorporationIDShareholdersParamsAcceptLanguageEs GetCorporationsCorporationIDShareholdersParamsAcceptLanguage = "es"
	GetCorporationsCorporationIDShareholdersParamsAcceptLanguageFr GetCorporationsCorporationIDShareholdersParamsAcceptLanguage = "fr"
	GetCorporationsCorporationIDShareholdersParamsAcceptLanguageJa GetCorporationsCorporationIDShareholdersParamsAcceptLanguage = "ja"
	GetCorporationsCorporationIDShareholdersParamsAcceptLanguageKo GetCorporationsCorporationIDShareholdersParamsAcceptLanguage = "ko"
	GetCorporationsCorporationIDShareholdersParamsAcceptLanguageRu GetCorporationsCorporationIDShareholdersParamsAcceptLanguage = "ru"
	GetCorporationsCorporationIDShareholdersParamsAcceptLanguageZh GetCorporationsCorporationIDShareholdersParamsAcceptLanguage = "zh"
)

// Defines values for GetCorporationsCorporationIDStandingsParamsAcceptLanguage.
const (
	GetCorporationsCorporationIDStandingsParamsAcceptLanguageDe GetCorporationsCorporationIDStandingsParamsAcceptLanguage = "de"
	GetCorporationsCorporationIDStandingsParamsAcceptLanguageEn GetCorporationsCorporationIDStandingsParamsAcceptLanguage = "en"
	GetCorporationsCorporationIDStandingsParamsAcceptLanguageEs GetCorporationsCorporationIDStandingsParamsAcceptLanguage = "es"
	GetCorporationsCorporationIDStandingsParamsAcceptLanguageFr GetCorporationsCorporationIDStandingsParamsAcceptLanguage = "fr"
	GetCorporationsCorporationIDStandingsParamsAcceptLanguageJa GetCorporationsCorporationIDStandingsParamsAcceptLanguage = "ja"
	GetCorporationsCorporationIDStandingsParamsAcceptLanguageKo GetCorporationsCorporationIDStandingsParamsAcceptLanguage = "ko"
	GetCorporationsCorporationIDStandingsParamsAcceptLanguageRu GetCorporationsCorporationIDStandingsParamsAcceptLanguage = "ru"
	GetCorporationsCorporationIDStandingsParamsAcceptLanguageZh GetCorporationsCorporationIDStandingsParamsAcceptLanguage = "zh"
)

// Defines values for GetCorporationsCorporationIDStarbasesParamsAcceptLanguage.
const (
	GetCorporationsCorporationIDStarbasesParamsAcceptLanguageDe GetCorporationsCorporationIDStarbasesParamsAcceptLanguage = "de"
	GetCorporationsCorporationIDStarbasesParamsAcceptLanguageEn GetCorporationsCorporationIDStarbasesParamsAcceptLanguage = "en"
	GetCorporationsCorporationIDStarbasesParamsAcceptLanguageEs GetCorporationsCorporationIDStarbasesParamsAcceptLanguage = "es"
	GetCorporationsCorporationIDStarbasesParamsAcceptLanguageFr GetCorporationsCorporationIDStarbasesParamsAcceptLanguage = "fr"
	GetCorporationsCorporationIDStarbasesParamsAcceptLanguageJa GetCorporationsCorporationIDStarbasesParamsAcceptLanguage = "ja"
	GetCorporationsCorporationIDStarbasesParamsAcceptLanguageKo GetCorporationsCorporationIDStarbasesParamsAcceptLanguage = "ko"
	GetCorporationsCorporationIDStarbasesParamsAcceptLanguageRu GetCorporationsCorporationIDStarbasesParamsAcceptLanguage = "ru"
	GetCorporationsCorporationIDStarbasesParamsAcceptLanguageZh GetCorporationsCorporationIDStarbasesParamsAcceptLanguage = "zh"
)

// Defines values for GetCorporationsCorporationIDStarbasesStarbaseIDParamsAcceptLanguage.
const (
	GetCorporationsCorporationIDStarbasesStarbaseIDParamsAcceptLanguageDe GetCorporationsCorporationIDStarbasesStarbaseIDParamsAcceptLanguage = "de"
	GetCorporationsCorporationIDStarbasesStarbaseIDParamsAcceptLanguageEn GetCorporationsCorporationIDStarbasesStarbaseIDParamsAcceptLanguage = "en"
	GetCorporationsCorporationIDStarbasesStarbaseIDParamsAcceptLanguageEs GetCorporationsCorporationIDStarbasesStarbaseIDParamsAcceptLanguage = "es"
	GetCorporationsCorporationIDStarbasesStarbaseIDParamsAcceptLanguageFr GetCorporationsCorporationIDStarbasesStarbaseIDParamsAcceptLanguage = "fr"
	GetCorporationsCorporationIDStarbasesStarbaseIDParamsAcceptLanguageJa GetCorporationsCorporationIDStarbasesStarbaseIDParamsAcceptLanguage = "ja"
	GetCorporationsCorporationIDStarbasesStarbaseIDParamsAcceptLanguageKo GetCorporationsCorporationIDStarbasesStarbaseIDParamsAcceptLanguage = "ko"
	GetCorporationsCorporationIDStarbasesStarbaseIDParamsAcceptLanguageRu GetCorporationsCorporationIDStarbasesStarbaseIDParamsAcceptLanguage = "ru"
	GetCorporationsCorporationIDStarbasesStarbaseIDParamsAcceptLanguageZh GetCorporationsCorporationIDStarbasesStarbaseIDParamsAcceptLanguage = "zh"
)

// Defines values for GetCorporationsCorporationIDStructuresParamsAcceptLanguage.
const (
	GetCorporationsCorporationIDStructuresParamsAcceptLanguageDe GetCorporationsCorporationIDStructuresParamsAcceptLanguage = "de"
	GetCorporationsCorporationIDStructuresParamsAcceptLanguageEn GetCorporationsCorporationIDStructuresParamsAcceptLanguage = "en"
	GetCorporationsCorporationIDStructuresParamsAcceptLanguageEs GetCorporationsCorporationIDStructuresParamsAcceptLanguage = "es"
	GetCorporationsCorporationIDStructuresParamsAcceptLanguageFr GetCorporationsCorporationIDStructuresParamsAcceptLanguage = "fr"
	GetCorporationsCorporationIDStructuresParamsAcceptLanguageJa GetCorporationsCorporationIDStructuresParamsAcceptLanguage = "ja"
	GetCorporationsCorporationIDStructuresParamsAcceptLanguageKo GetCorporationsCorporationIDStructuresParamsAcceptLanguage = "ko"
	GetCorporationsCorporationIDStructuresParamsAcceptLanguageRu GetCorporationsCorporationIDStructuresParamsAcceptLanguage = "ru"
	GetCorporationsCorporationIDStructuresParamsAcceptLanguageZh GetCorporationsCorporationIDStructuresParamsAcceptLanguage = "zh"
)

// Defines values for GetCorporationsCorporationIDTitlesParamsAcceptLanguage.
const (
	GetCorporationsCorporationIDTitlesParamsAcceptLanguageDe GetCorporationsCorporationIDTitlesParamsAcceptLanguage = "de"
	GetCorporationsCorporationIDTitlesParamsAcceptLanguageEn GetCorporationsCorporationIDTitlesParamsAcceptLanguage = "en"
	GetCorporationsCorporationIDTitlesParamsAcceptLanguageEs GetCorporationsCorporationIDTitlesParamsAcceptLanguage = "es"
	GetCorporationsCorporationIDTitlesParamsAcceptLanguageFr GetCorporationsCorporationIDTitlesParamsAcceptLanguage = "fr"
	GetCorporationsCorporationIDTitlesParamsAcceptLanguageJa GetCorporationsCorporationIDTitlesParamsAcceptLanguage = "ja"
	GetCorporationsCorporationIDTitlesParamsAcceptLanguageKo GetCorporationsCorporationIDTitlesParamsAcceptLanguage = "ko"
	GetCorporationsCorporationIDTitlesParamsAcceptLanguageRu GetCorporationsCorporationIDTitlesParamsAcceptLanguage = "ru"
	GetCorporationsCorporationIDTitlesParamsAcceptLanguageZh GetCorporationsCorporationIDTitlesParamsAcceptLanguage = "zh"
)

// Defines values for GetCorporationsCorporationIDWalletsParamsAcceptLanguage.
const (
	GetCorporationsCorporationIDWalletsParamsAcceptLanguageDe GetCorporationsCorporationIDWalletsParamsAcceptLanguage = "de"
	GetCorporationsCorporationIDWalletsParamsAcceptLanguageEn GetCorporationsCorporationIDWalletsParamsAcceptLanguage = "en"
	GetCorporationsCorporationIDWalletsParamsAcceptLanguageEs GetCorporationsCorporationIDWalletsParamsAcceptLanguage = "es"
	GetCorporationsCorporationIDWalletsParamsAcceptLanguageFr GetCorporationsCorporationIDWalletsParamsAcceptLanguage = "fr"
	GetCorporationsCorporationIDWalletsParamsAcceptLanguageJa GetCorporationsCorporationIDWalletsParamsAcceptLanguage = "ja"
	GetCorporationsCorporationIDWalletsParamsAcceptLanguageKo GetCorporationsCorporationIDWalletsParamsAcceptLanguage = "ko"
	GetCorporationsCorporationIDWalletsParamsAcceptLanguageRu GetCorporationsCorporationIDWalletsParamsAcceptLanguage = "ru"
	GetCorporationsCorporationIDWalletsParamsAcceptLanguageZh GetCorporationsCorporationIDWalletsParamsAcceptLanguage = "zh"
)

// Defines values for GetCorporationsCorporationIDWalletsDivisionJournalParamsAcceptLanguage.
const (
	GetCorporationsCorporationIDWalletsDivisionJournalParamsAcceptLanguageDe GetCorporationsCorporationIDWalletsDivisionJournalParamsAcceptLanguage = "de"
	GetCorporationsCorporationIDWalletsDivisionJournalParamsAcceptLanguageEn GetCorporationsCorporationIDWalletsDivisionJournalParamsAcceptLanguage = "en"
	GetCorporationsCorporationIDWalletsDivisionJournalParamsAcceptLanguageEs GetCorporationsCorporationIDWalletsDivisionJournalParamsAcceptLanguage = "es"
	GetCorporationsCorporationIDWalletsDivisionJournalParamsAcceptLanguageFr GetCorporationsCorporationIDWalletsDivisionJournalParamsAcceptLanguage = "fr"
	GetCorporationsCorporationIDWalletsDivisionJournalParamsAcceptLanguageJa GetCorporationsCorporationIDWalletsDivisionJournalParamsAcceptLanguage = "ja"
	GetCorporationsCorporationIDWalletsDivisionJournalParamsAcceptLanguageKo GetCorporationsCorporationIDWalletsDivisionJournalParamsAcceptLanguage = "ko"
	GetCorporationsCorporationIDWalletsDivisionJournalParamsAcceptLanguageRu GetCorporationsCorporationIDWalletsDivisionJournalParamsAcceptLanguage = "ru"
	GetCorporationsCorporationIDWalletsDivisionJournalParamsAcceptLanguageZh GetCorporationsCorporationIDWalletsDivisionJournalParamsAcceptLanguage = "zh"
)

// Defines values for GetCorporationsCorporationIDWalletsDivisionTransactionsParamsAcceptLanguage.
const (
	GetCorporationsCorporationIDWalletsDivisionTransactionsParamsAcceptLanguageDe GetCorporationsCorporationIDWalletsDivisionTransactionsParamsAcceptLanguage = "de"
	GetCorporationsCorporationIDWalletsDivisionTransactionsParamsAcceptLanguageEn GetCorporationsCorporationIDWalletsDivisionTransactionsParamsAcceptLanguage = "en"
	GetCorporationsCorporationIDWalletsDivisionTransactionsParamsAcceptLanguageEs GetCorporationsCorporationIDWalletsDivisionTransactionsParamsAcceptLanguage = "es"
	GetCorporationsCorporationIDWalletsDivisionTransactionsParamsAcceptLanguageFr GetCorporationsCorporationIDWalletsDivisionTransactionsParamsAcceptLanguage = "fr"
	GetCorporationsCorporationIDWalletsDivisionTransactionsParamsAcceptLanguageJa GetCorporationsCorporationIDWalletsDivisionTransactionsParamsAcceptLanguage = "ja"
	GetCorporationsCorporationIDWalletsDivisionTransactionsParamsAcceptLanguageKo GetCorporationsCorporationIDWalletsDivisionTransactionsParamsAcceptLanguage = "ko"
	GetCorporationsCorporationIDWalletsDivisionTransactionsParamsAcceptLanguageRu GetCorporationsCorporationIDWalletsDivisionTransactionsParamsAcceptLanguage = "ru"
	GetCorporationsCorporationIDWalletsDivisionTransactionsParamsAcceptLanguageZh GetCorporationsCorporationIDWalletsDivisionTransactionsParamsAcceptLanguage = "zh"
)

// Defines values for GetDogmaAttributesParamsAcceptLanguage.
const (
	GetDogmaAttributesParamsAcceptLanguageDe GetDogmaAttributesParamsAcceptLanguage = "de"
	GetDogmaAttributesParamsAcceptLanguageEn GetDogmaAttributesParamsAcceptLanguage = "en"
	GetDogmaAttributesParamsAcceptLanguageEs GetDogmaAttributesParamsAcceptLanguage = "es"
	GetDogmaAttributesParamsAcceptLanguageFr GetDogmaAttributesParamsAcceptLanguage = "fr"
	GetDogmaAttributesParamsAcceptLanguageJa GetDogmaAttributesParamsAcceptLanguage = "ja"
	GetDogmaAttributesParamsAcceptLanguageKo GetDogmaAttributesParamsAcceptLanguage = "ko"
	GetDogmaAttributesParamsAcceptLanguageRu GetDogmaAttributesParamsAcceptLanguage = "ru"
	GetDogmaAttributesParamsAcceptLanguageZh GetDogmaAttributesParamsAcceptLanguage = "zh"
)

// Defines values for GetDogmaAttributesAttributeIDParamsAcceptLanguage.
const (
	GetDogmaAttributesAttributeIDParamsAcceptLanguageDe GetDogmaAttributesAttributeIDParamsAcceptLanguage = "de"
	GetDogmaAttributesAttributeIDParamsAcceptLanguageEn GetDogmaAttributesAttributeIDParamsAcceptLanguage = "en"
	GetDogmaAttributesAttributeIDParamsAcceptLanguageEs GetDogmaAttributesAttributeIDParamsAcceptLanguage = "es"
	GetDogmaAttributesAttributeIDParamsAcceptLanguageFr GetDogmaAttributesAttributeIDParamsAcceptLanguage = "fr"
	GetDogmaAttributesAttributeIDParamsAcceptLanguageJa GetDogmaAttributesAttributeIDParamsAcceptLanguage = "ja"
	GetDogmaAttributesAttributeIDParamsAcceptLanguageKo GetDogmaAttributesAttributeIDParamsAcceptLanguage = "ko"
	GetDogmaAttributesAttributeIDParamsAcceptLanguageRu GetDogmaAttributesAttributeIDParamsAcceptLanguage = "ru"
	GetDogmaAttributesAttributeIDParamsAcceptLanguageZh GetDogmaAttributesAttributeIDParamsAcceptLanguage = "zh"
)

// Defines values for GetDogmaDynamicItemsTypeIDItemIDParamsAcceptLanguage.
const (
	GetDogmaDynamicItemsTypeIDItemIDParamsAcceptLanguageDe GetDogmaDynamicItemsTypeIDItemIDParamsAcceptLanguage = "de"
	GetDogmaDynamicItemsTypeIDItemIDParamsAcceptLanguageEn GetDogmaDynamicItemsTypeIDItemIDParamsAcceptLanguage = "en"
	GetDogmaDynamicItemsTypeIDItemIDParamsAcceptLanguageEs GetDogmaDynamicItemsTypeIDItemIDParamsAcceptLanguage = "es"
	GetDogmaDynamicItemsTypeIDItemIDParamsAcceptLanguageFr GetDogmaDynamicItemsTypeIDItemIDParamsAcceptLanguage = "fr"
	GetDogmaDynamicItemsTypeIDItemIDParamsAcceptLanguageJa GetDogmaDynamicItemsTypeIDItemIDParamsAcceptLanguage = "ja"
	GetDogmaDynamicItemsTypeIDItemIDParamsAcceptLanguageKo GetDogmaDynamicItemsTypeIDItemIDParamsAcceptLanguage = "ko"
	GetDogmaDynamicItemsTypeIDItemIDParamsAcceptLanguageRu GetDogmaDynamicItemsTypeIDItemIDParamsAcceptLanguage = "ru"
	GetDogmaDynamicItemsTypeIDItemIDParamsAcceptLanguageZh GetDogmaDynamicItemsTypeIDItemIDParamsAcceptLanguage = "zh"
)

// Defines values for GetDogmaEffectsParamsAcceptLanguage.
const (
	GetDogmaEffectsParamsAcceptLanguageDe GetDogmaEffectsParamsAcceptLanguage = "de"
	GetDogmaEffectsParamsAcceptLanguageEn GetDogmaEffectsParamsAcceptLanguage = "en"
	GetDogmaEffectsParamsAcceptLanguageEs GetDogmaEffectsParamsAcceptLanguage = "es"
	GetDogmaEffectsParamsAcceptLanguageFr GetDogmaEffectsParamsAcceptLanguage = "fr"
	GetDogmaEffectsParamsAcceptLanguageJa GetDogmaEffectsParamsAcceptLanguage = "ja"
	GetDogmaEffectsParamsAcceptLanguageKo GetDogmaEffectsParamsAcceptLanguage = "ko"
	GetDogmaEffectsParamsAcceptLanguageRu GetDogmaEffectsParamsAcceptLanguage = "ru"
	GetDogmaEffectsParamsAcceptLanguageZh GetDogmaEffectsParamsAcceptLanguage = "zh"
)

// Defines values for GetDogmaEffectsEffectIDParamsAcceptLanguage.
const (
	GetDogmaEffectsEffectIDParamsAcceptLanguageDe GetDogmaEffectsEffectIDParamsAcceptLanguage = "de"
	GetDogmaEffectsEffectIDParamsAcceptLanguageEn GetDogmaEffectsEffectIDParamsAcceptLanguage = "en"
	GetDogmaEffectsEffectIDParamsAcceptLanguageEs GetDogmaEffectsEffectIDParamsAcceptLanguage = "es"
	GetDogmaEffectsEffectIDParamsAcceptLanguageFr GetDogmaEffectsEffectIDParamsAcceptLanguage = "fr"
	GetDogmaEffectsEffectIDParamsAcceptLanguageJa GetDogmaEffectsEffectIDParamsAcceptLanguage = "ja"
	GetDogmaEffectsEffectIDParamsAcceptLanguageKo GetDogmaEffectsEffectIDParamsAcceptLanguage = "ko"
	GetDogmaEffectsEffectIDParamsAcceptLanguageRu GetDogmaEffectsEffectIDParamsAcceptLanguage = "ru"
	GetDogmaEffectsEffectIDParamsAcceptLanguageZh GetDogmaEffectsEffectIDParamsAcceptLanguage = "zh"
)

// Defines values for GetFleetsFleetIDParamsAcceptLanguage.
const (
	GetFleetsFleetIDParamsAcceptLanguageDe GetFleetsFleetIDParamsAcceptLanguage = "de"
	GetFleetsFleetIDParamsAcceptLanguageEn GetFleetsFleetIDParamsAcceptLanguage = "en"
	GetFleetsFleetIDParamsAcceptLanguageEs GetFleetsFleetIDParamsAcceptLanguage = "es"
	GetFleetsFleetIDParamsAcceptLanguageFr GetFleetsFleetIDParamsAcceptLanguage = "fr"
	GetFleetsFleetIDParamsAcceptLanguageJa GetFleetsFleetIDParamsAcceptLanguage = "ja"
	GetFleetsFleetIDParamsAcceptLanguageKo GetFleetsFleetIDParamsAcceptLanguage = "ko"
	GetFleetsFleetIDParamsAcceptLanguageRu GetFleetsFleetIDParamsAcceptLanguage = "ru"
	GetFleetsFleetIDParamsAcceptLanguageZh GetFleetsFleetIDParamsAcceptLanguage = "zh"
)

// Defines values for PutFleetsFleetIDParamsAcceptLanguage.
const (
	PutFleetsFleetIDParamsAcceptLanguageDe PutFleetsFleetIDParamsAcceptLanguage = "de"
	PutFleetsFleetIDParamsAcceptLanguageEn PutFleetsFleetIDParamsAcceptLanguage = "en"
	PutFleetsFleetIDParamsAcceptLanguageEs PutFleetsFleetIDParamsAcceptLanguage = "es"
	PutFleetsFleetIDParamsAcceptLanguageFr PutFleetsFleetIDParamsAcceptLanguage = "fr"
	PutFleetsFleetIDParamsAcceptLanguageJa PutFleetsFleetIDParamsAcceptLanguage = "ja"
	PutFleetsFleetIDParamsAcceptLanguageKo PutFleetsFleetIDParamsAcceptLanguage = "ko"
	PutFleetsFleetIDParamsAcceptLanguageRu PutFleetsFleetIDParamsAcceptLanguage = "ru"
	PutFleetsFleetIDParamsAcceptLanguageZh PutFleetsFleetIDParamsAcceptLanguage = "zh"
)

// Defines values for GetFleetsFleetIDMembersParamsAcceptLanguage.
const (
	GetFleetsFleetIDMembersParamsAcceptLanguageDe GetFleetsFleetIDMembersParamsAcceptLanguage = "de"
	GetFleetsFleetIDMembersParamsAcceptLanguageEn GetFleetsFleetIDMembersParamsAcceptLanguage = "en"
	GetFleetsFleetIDMembersParamsAcceptLanguageEs GetFleetsFleetIDMembersParamsAcceptLanguage = "es"
	GetFleetsFleetIDMembersParamsAcceptLanguageFr GetFleetsFleetIDMembersParamsAcceptLanguage = "fr"
	GetFleetsFleetIDMembersParamsAcceptLanguageJa GetFleetsFleetIDMembersParamsAcceptLanguage = "ja"
	GetFleetsFleetIDMembersParamsAcceptLanguageKo GetFleetsFleetIDMembersParamsAcceptLanguage = "ko"
	GetFleetsFleetIDMembersParamsAcceptLanguageRu GetFleetsFleetIDMembersParamsAcceptLanguage = "ru"
	GetFleetsFleetIDMembersParamsAcceptLanguageZh GetFleetsFleetIDMembersParamsAcceptLanguage = "zh"
)

// Defines values for PostFleetsFleetIDMembersParamsAcceptLanguage.
const (
	PostFleetsFleetIDMembersParamsAcceptLanguageDe PostFleetsFleetIDMembersParamsAcceptLanguage = "de"
	PostFleetsFleetIDMembersParamsAcceptLanguageEn PostFleetsFleetIDMembersParamsAcceptLanguage = "en"
	PostFleetsFleetIDMembersParamsAcceptLanguageEs PostFleetsFleetIDMembersParamsAcceptLanguage = "es"
	PostFleetsFleetIDMembersParamsAcceptLanguageFr PostFleetsFleetIDMembersParamsAcceptLanguage = "fr"
	PostFleetsFleetIDMembersParamsAcceptLanguageJa PostFleetsFleetIDMembersParamsAcceptLanguage = "ja"
	PostFleetsFleetIDMembersParamsAcceptLanguageKo PostFleetsFleetIDMembersParamsAcceptLanguage = "ko"
	PostFleetsFleetIDMembersParamsAcceptLanguageRu PostFleetsFleetIDMembersParamsAcceptLanguage = "ru"
	PostFleetsFleetIDMembersParamsAcceptLanguageZh PostFleetsFleetIDMembersParamsAcceptLanguage = "zh"
)

// Defines values for PostFleetsFleetIDMembersJSONBodyRole.
const (
	PostFleetsFleetIDMembersJSONBodyRoleFleetCommander PostFleetsFleetIDMembersJSONBodyRole = "fleet_commander"
	PostFleetsFleetIDMembersJSONBodyRoleSquadCommander PostFleetsFleetIDMembersJSONBodyRole = "squad_commander"
	PostFleetsFleetIDMembersJSONBodyRoleSquadMember    PostFleetsFleetIDMembersJSONBodyRole = "squad_member"
	PostFleetsFleetIDMembersJSONBodyRoleWingCommander  PostFleetsFleetIDMembersJSONBodyRole = "wing_commander"
)

// Defines values for DeleteFleetsFleetIDMembersMemberIDParamsAcceptLanguage.
const (
	DeleteFleetsFleetIDMembersMemberIDParamsAcceptLanguageDe DeleteFleetsFleetIDMembersMemberIDParamsAcceptLanguage = "de"
	DeleteFleetsFleetIDMembersMemberIDParamsAcceptLanguageEn DeleteFleetsFleetIDMembersMemberIDParamsAcceptLanguage = "en"
	DeleteFleetsFleetIDMembersMemberIDParamsAcceptLanguageEs DeleteFleetsFleetIDMembersMemberIDParamsAcceptLanguage = "es"
	DeleteFleetsFleetIDMembersMemberIDParamsAcceptLanguageFr DeleteFleetsFleetIDMembersMemberIDParamsAcceptLanguage = "fr"
	DeleteFleetsFleetIDMembersMemberIDParamsAcceptLanguageJa DeleteFleetsFleetIDMembersMemberIDParamsAcceptLanguage = "ja"
	DeleteFleetsFleetIDMembersMemberIDParamsAcceptLanguageKo DeleteFleetsFleetIDMembersMemberIDParamsAcceptLanguage = "ko"
	DeleteFleetsFleetIDMembersMemberIDParamsAcceptLanguageRu DeleteFleetsFleetIDMembersMemberIDParamsAcceptLanguage = "ru"
	DeleteFleetsFleetIDMembersMemberIDParamsAcceptLanguageZh DeleteFleetsFleetIDMembersMemberIDParamsAcceptLanguage = "zh"
)

// Defines values for PutFleetsFleetIDMembersMemberIDParamsAcceptLanguage.
const (
	PutFleetsFleetIDMembersMemberIDParamsAcceptLanguageDe PutFleetsFleetIDMembersMemberIDParamsAcceptLanguage = "de"
	PutFleetsFleetIDMembersMemberIDParamsAcceptLanguageEn PutFleetsFleetIDMembersMemberIDParamsAcceptLanguage = "en"
	PutFleetsFleetIDMembersMemberIDParamsAcceptLanguageEs PutFleetsFleetIDMembersMemberIDParamsAcceptLanguage = "es"
	PutFleetsFleetIDMembersMemberIDParamsAcceptLanguageFr PutFleetsFleetIDMembersMemberIDParamsAcceptLanguage = "fr"
	PutFleetsFleetIDMembersMemberIDParamsAcceptLanguageJa PutFleetsFleetIDMembersMemberIDParamsAcceptLanguage = "ja"
	PutFleetsFleetIDMembersMemberIDParamsAcceptLanguageKo PutFleetsFleetIDMembersMemberIDParamsAcceptLanguage = "ko"
	PutFleetsFleetIDMembersMemberIDParamsAcceptLanguageRu PutFleetsFleetIDMembersMemberIDParamsAcceptLanguage = "ru"
	PutFleetsFleetIDMembersMemberIDParamsAcceptLanguageZh PutFleetsFleetIDMembersMemberIDParamsAcceptLanguage = "zh"
)

// Defines values for PutFleetsFleetIDMembersMemberIDJSONBodyRole.
const (
	PutFleetsFleetIDMembersMemberIDJSONBodyRoleFleetCommander PutFleetsFleetIDMembersMemberIDJSONBodyRole = "fleet_commander"
	PutFleetsFleetIDMembersMemberIDJSONBodyRoleSquadCommander PutFleetsFleetIDMembersMemberIDJSONBodyRole = "squad_commander"
	PutFleetsFleetIDMembersMemberIDJSONBodyRoleSquadMember    PutFleetsFleetIDMembersMemberIDJSONBodyRole = "squad_member"
	PutFleetsFleetIDMembersMemberIDJSONBodyRoleWingCommander  PutFleetsFleetIDMembersMemberIDJSONBodyRole = "wing_commander"
)

// Defines values for DeleteFleetsFleetIDSquadsSquadIDParamsAcceptLanguage.
const (
	DeleteFleetsFleetIDSquadsSquadIDParamsAcceptLanguageDe DeleteFleetsFleetIDSquadsSquadIDParamsAcceptLanguage = "de"
	DeleteFleetsFleetIDSquadsSquadIDParamsAcceptLanguageEn DeleteFleetsFleetIDSquadsSquadIDParamsAcceptLanguage = "en"
	DeleteFleetsFleetIDSquadsSquadIDParamsAcceptLanguageEs DeleteFleetsFleetIDSquadsSquadIDParamsAcceptLanguage = "es"
	DeleteFleetsFleetIDSquadsSquadIDParamsAcceptLanguageFr DeleteFleetsFleetIDSquadsSquadIDParamsAcceptLanguage = "fr"
	DeleteFleetsFleetIDSquadsSquadIDParamsAcceptLanguageJa DeleteFleetsFleetIDSquadsSquadIDParamsAcceptLanguage = "ja"
	DeleteFleetsFleetIDSquadsSquadIDParamsAcceptLanguageKo DeleteFleetsFleetIDSquadsSquadIDParamsAcceptLanguage = "ko"
	DeleteFleetsFleetIDSquadsSquadIDParamsAcceptLanguageRu DeleteFleetsFleetIDSquadsSquadIDParamsAcceptLanguage = "ru"
	DeleteFleetsFleetIDSquadsSquadIDParamsAcceptLanguageZh DeleteFleetsFleetIDSquadsSquadIDParamsAcceptLanguage = "zh"
)

// Defines values for PutFleetsFleetIDSquadsSquadIDParamsAcceptLanguage.
const (
	PutFleetsFleetIDSquadsSquadIDParamsAcceptLanguageDe PutFleetsFleetIDSquadsSquadIDParamsAcceptLanguage = "de"
	PutFleetsFleetIDSquadsSquadIDParamsAcceptLanguageEn PutFleetsFleetIDSquadsSquadIDParamsAcceptLanguage = "en"
	PutFleetsFleetIDSquadsSquadIDParamsAcceptLanguageEs PutFleetsFleetIDSquadsSquadIDParamsAcceptLanguage = "es"
	PutFleetsFleetIDSquadsSquadIDParamsAcceptLanguageFr PutFleetsFleetIDSquadsSquadIDParamsAcceptLanguage = "fr"
	PutFleetsFleetIDSquadsSquadIDParamsAcceptLanguageJa PutFleetsFleetIDSquadsSquadIDParamsAcceptLanguage = "ja"
	PutFleetsFleetIDSquadsSquadIDParamsAcceptLanguageKo PutFleetsFleetIDSquadsSquadIDParamsAcceptLanguage = "ko"
	PutFleetsFleetIDSquadsSquadIDParamsAcceptLanguageRu PutFleetsFleetIDSquadsSquadIDParamsAcceptLanguage = "ru"
	PutFleetsFleetIDSquadsSquadIDParamsAcceptLanguageZh PutFleetsFleetIDSquadsSquadIDParamsAcceptLanguage = "zh"
)

// Defines values for GetFleetsFleetIDWingsParamsAcceptLanguage.
const (
	GetFleetsFleetIDWingsParamsAcceptLanguageDe GetFleetsFleetIDWingsParamsAcceptLanguage = "de"
	GetFleetsFleetIDWingsParamsAcceptLanguageEn GetFleetsFleetIDWingsParamsAcceptLanguage = "en"
	GetFleetsFleetIDWingsParamsAcceptLanguageEs GetFleetsFleetIDWingsParamsAcceptLanguage = "es"
	GetFleetsFleetIDWingsParamsAcceptLanguageFr GetFleetsFleetIDWingsParamsAcceptLanguage = "fr"
	GetFleetsFleetIDWingsParamsAcceptLanguageJa GetFleetsFleetIDWingsParamsAcceptLanguage = "ja"
	GetFleetsFleetIDWingsParamsAcceptLanguageKo GetFleetsFleetIDWingsParamsAcceptLanguage = "ko"
	GetFleetsFleetIDWingsParamsAcceptLanguageRu GetFleetsFleetIDWingsParamsAcceptLanguage = "ru"
	GetFleetsFleetIDWingsParamsAcceptLanguageZh GetFleetsFleetIDWingsParamsAcceptLanguage = "zh"
)

// Defines values for PostFleetsFleetIDWingsParamsAcceptLanguage.
const (
	PostFleetsFleetIDWingsParamsAcceptLanguageDe PostFleetsFleetIDWingsParamsAcceptLanguage = "de"
	PostFleetsFleetIDWingsParamsAcceptLanguageEn PostFleetsFleetIDWingsParamsAcceptLanguage = "en"
	PostFleetsFleetIDWingsParamsAcceptLanguageEs PostFleetsFleetIDWingsParamsAcceptLanguage = "es"
	PostFleetsFleetIDWingsParamsAcceptLanguageFr PostFleetsFleetIDWingsParamsAcceptLanguage = "fr"
	PostFleetsFleetIDWingsParamsAcceptLanguageJa PostFleetsFleetIDWingsParamsAcceptLanguage = "ja"
	PostFleetsFleetIDWingsParamsAcceptLanguageKo PostFleetsFleetIDWingsParamsAcceptLanguage = "ko"
	PostFleetsFleetIDWingsParamsAcceptLanguageRu PostFleetsFleetIDWingsParamsAcceptLanguage = "ru"
	PostFleetsFleetIDWingsParamsAcceptLanguageZh PostFleetsFleetIDWingsParamsAcceptLanguage = "zh"
)

// Defines values for DeleteFleetsFleetIDWingsWingIDParamsAcceptLanguage.
const (
	DeleteFleetsFleetIDWingsWingIDParamsAcceptLanguageDe DeleteFleetsFleetIDWingsWingIDParamsAcceptLanguage = "de"
	DeleteFleetsFleetIDWingsWingIDParamsAcceptLanguageEn DeleteFleetsFleetIDWingsWingIDParamsAcceptLanguage = "en"
	DeleteFleetsFleetIDWingsWingIDParamsAcceptLanguageEs DeleteFleetsFleetIDWingsWingIDParamsAcceptLanguage = "es"
	DeleteFleetsFleetIDWingsWingIDParamsAcceptLanguageFr DeleteFleetsFleetIDWingsWingIDParamsAcceptLanguage = "fr"
	DeleteFleetsFleetIDWingsWingIDParamsAcceptLanguageJa DeleteFleetsFleetIDWingsWingIDParamsAcceptLanguage = "ja"
	DeleteFleetsFleetIDWingsWingIDParamsAcceptLanguageKo DeleteFleetsFleetIDWingsWingIDParamsAcceptLanguage = "ko"
	DeleteFleetsFleetIDWingsWingIDParamsAcceptLanguageRu DeleteFleetsFleetIDWingsWingIDParamsAcceptLanguage = "ru"
	DeleteFleetsFleetIDWingsWingIDParamsAcceptLanguageZh DeleteFleetsFleetIDWingsWingIDParamsAcceptLanguage = "zh"
)

// Defines values for PutFleetsFleetIDWingsWingIDParamsAcceptLanguage.
const (
	PutFleetsFleetIDWingsWingIDParamsAcceptLanguageDe PutFleetsFleetIDWingsWingIDParamsAcceptLanguage = "de"
	PutFleetsFleetIDWingsWingIDParamsAcceptLanguageEn PutFleetsFleetIDWingsWingIDParamsAcceptLanguage = "en"
	PutFleetsFleetIDWingsWingIDParamsAcceptLanguageEs PutFleetsFleetIDWingsWingIDParamsAcceptLanguage = "es"
	PutFleetsFleetIDWingsWingIDParamsAcceptLanguageFr PutFleetsFleetIDWingsWingIDParamsAcceptLanguage = "fr"
	PutFleetsFleetIDWingsWingIDParamsAcceptLanguageJa PutFleetsFleetIDWingsWingIDParamsAcceptLanguage = "ja"
	PutFleetsFleetIDWingsWingIDParamsAcceptLanguageKo PutFleetsFleetIDWingsWingIDParamsAcceptLanguage = "ko"
	PutFleetsFleetIDWingsWingIDParamsAcceptLanguageRu PutFleetsFleetIDWingsWingIDParamsAcceptLanguage = "ru"
	PutFleetsFleetIDWingsWingIDParamsAcceptLanguageZh PutFleetsFleetIDWingsWingIDParamsAcceptLanguage = "zh"
)

// Defines values for PostFleetsFleetIDWingsWingIDSquadsParamsAcceptLanguage.
const (
	PostFleetsFleetIDWingsWingIDSquadsParamsAcceptLanguageDe PostFleetsFleetIDWingsWingIDSquadsParamsAcceptLanguage = "de"
	PostFleetsFleetIDWingsWingIDSquadsParamsAcceptLanguageEn PostFleetsFleetIDWingsWingIDSquadsParamsAcceptLanguage = "en"
	PostFleetsFleetIDWingsWingIDSquadsParamsAcceptLanguageEs PostFleetsFleetIDWingsWingIDSquadsParamsAcceptLanguage = "es"
	PostFleetsFleetIDWingsWingIDSquadsParamsAcceptLanguageFr PostFleetsFleetIDWingsWingIDSquadsParamsAcceptLanguage = "fr"
	PostFleetsFleetIDWingsWingIDSquadsParamsAcceptLanguageJa PostFleetsFleetIDWingsWingIDSquadsParamsAcceptLanguage = "ja"
	PostFleetsFleetIDWingsWingIDSquadsParamsAcceptLanguageKo PostFleetsFleetIDWingsWingIDSquadsParamsAcceptLanguage = "ko"
	PostFleetsFleetIDWingsWingIDSquadsParamsAcceptLanguageRu PostFleetsFleetIDWingsWingIDSquadsParamsAcceptLanguage = "ru"
	PostFleetsFleetIDWingsWingIDSquadsParamsAcceptLanguageZh PostFleetsFleetIDWingsWingIDSquadsParamsAcceptLanguage = "zh"
)

// Defines values for GetFwLeaderboardsParamsAcceptLanguage.
const (
	GetFwLeaderboardsParamsAcceptLanguageDe GetFwLeaderboardsParamsAcceptLanguage = "de"
	GetFwLeaderboardsParamsAcceptLanguageEn GetFwLeaderboardsParamsAcceptLanguage = "en"
	GetFwLeaderboardsParamsAcceptLanguageEs GetFwLeaderboardsParamsAcceptLanguage = "es"
	GetFwLeaderboardsParamsAcceptLanguageFr GetFwLeaderboardsParamsAcceptLanguage = "fr"
	GetFwLeaderboardsParamsAcceptLanguageJa GetFwLeaderboardsParamsAcceptLanguage = "ja"
	GetFwLeaderboardsParamsAcceptLanguageKo GetFwLeaderboardsParamsAcceptLanguage = "ko"
	GetFwLeaderboardsParamsAcceptLanguageRu GetFwLeaderboardsParamsAcceptLanguage = "ru"
	GetFwLeaderboardsParamsAcceptLanguageZh GetFwLeaderboardsParamsAcceptLanguage = "zh"
)

// Defines values for GetFwLeaderboardsCharactersParamsAcceptLanguage.
const (
	GetFwLeaderboardsCharactersParamsAcceptLanguageDe GetFwLeaderboardsCharactersParamsAcceptLanguage = "de"
	GetFwLeaderboardsCharactersParamsAcceptLanguageEn GetFwLeaderboardsCharactersParamsAcceptLanguage = "en"
	GetFwLeaderboardsCharactersParamsAcceptLanguageEs GetFwLeaderboardsCharactersParamsAcceptLanguage = "es"
	GetFwLeaderboardsCharactersParamsAcceptLanguageFr GetFwLeaderboardsCharactersParamsAcceptLanguage = "fr"
	GetFwLeaderboardsCharactersParamsAcceptLanguageJa GetFwLeaderboardsCharactersParamsAcceptLanguage = "ja"
	GetFwLeaderboardsCharactersParamsAcceptLanguageKo GetFwLeaderboardsCharactersParamsAcceptLanguage = "ko"
	GetFwLeaderboardsCharactersParamsAcceptLanguageRu GetFwLeaderboardsCharactersParamsAcceptLanguage = "ru"
	GetFwLeaderboardsCharactersParamsAcceptLanguageZh GetFwLeaderboardsCharactersParamsAcceptLanguage = "zh"
)

// Defines values for GetFwLeaderboardsCorporationsParamsAcceptLanguage.
const (
	GetFwLeaderboardsCorporationsParamsAcceptLanguageDe GetFwLeaderboardsCorporationsParamsAcceptLanguage = "de"
	GetFwLeaderboardsCorporationsParamsAcceptLanguageEn GetFwLeaderboardsCorporationsParamsAcceptLanguage = "en"
	GetFwLeaderboardsCorporationsParamsAcceptLanguageEs GetFwLeaderboardsCorporationsParamsAcceptLanguage = "es"
	GetFwLeaderboardsCorporationsParamsAcceptLanguageFr GetFwLeaderboardsCorporationsParamsAcceptLanguage = "fr"
	GetFwLeaderboardsCorporationsParamsAcceptLanguageJa GetFwLeaderboardsCorporationsParamsAcceptLanguage = "ja"
	GetFwLeaderboardsCorporationsParamsAcceptLanguageKo GetFwLeaderboardsCorporationsParamsAcceptLanguage = "ko"
	GetFwLeaderboardsCorporationsParamsAcceptLanguageRu GetFwLeaderboardsCorporationsParamsAcceptLanguage = "ru"
	GetFwLeaderboardsCorporationsParamsAcceptLanguageZh GetFwLeaderboardsCorporationsParamsAcceptLanguage = "zh"
)

// Defines values for GetFwStatsParamsAcceptLanguage.
const (
	GetFwStatsParamsAcceptLanguageDe GetFwStatsParamsAcceptLanguage = "de"
	GetFwStatsParamsAcceptLanguageEn GetFwStatsParamsAcceptLanguage = "en"
	GetFwStatsParamsAcceptLanguageEs GetFwStatsParamsAcceptLanguage = "es"
	GetFwStatsParamsAcceptLanguageFr GetFwStatsParamsAcceptLanguage = "fr"
	GetFwStatsParamsAcceptLanguageJa GetFwStatsParamsAcceptLanguage = "ja"
	GetFwStatsParamsAcceptLanguageKo GetFwStatsParamsAcceptLanguage = "ko"
	GetFwStatsParamsAcceptLanguageRu GetFwStatsParamsAcceptLanguage = "ru"
	GetFwStatsParamsAcceptLanguageZh GetFwStatsParamsAcceptLanguage = "zh"
)

// Defines values for GetFwSystemsParamsAcceptLanguage.
const (
	GetFwSystemsParamsAcceptLanguageDe GetFwSystemsParamsAcceptLanguage = "de"
	GetFwSystemsParamsAcceptLanguageEn GetFwSystemsParamsAcceptLanguage = "en"
	GetFwSystemsParamsAcceptLanguageEs GetFwSystemsParamsAcceptLanguage = "es"
	GetFwSystemsParamsAcceptLanguageFr GetFwSystemsParamsAcceptLanguage = "fr"
	GetFwSystemsParamsAcceptLanguageJa GetFwSystemsParamsAcceptLanguage = "ja"
	GetFwSystemsParamsAcceptLanguageKo GetFwSystemsParamsAcceptLanguage = "ko"
	GetFwSystemsParamsAcceptLanguageRu GetFwSystemsParamsAcceptLanguage = "ru"
	GetFwSystemsParamsAcceptLanguageZh GetFwSystemsParamsAcceptLanguage = "zh"
)

// Defines values for GetFwWarsParamsAcceptLanguage.
const (
	GetFwWarsParamsAcceptLanguageDe GetFwWarsParamsAcceptLanguage = "de"
	GetFwWarsParamsAcceptLanguageEn GetFwWarsParamsAcceptLanguage = "en"
	GetFwWarsParamsAcceptLanguageEs GetFwWarsParamsAcceptLanguage = "es"
	GetFwWarsParamsAcceptLanguageFr GetFwWarsParamsAcceptLanguage = "fr"
	GetFwWarsParamsAcceptLanguageJa GetFwWarsParamsAcceptLanguage = "ja"
	GetFwWarsParamsAcceptLanguageKo GetFwWarsParamsAcceptLanguage = "ko"
	GetFwWarsParamsAcceptLanguageRu GetFwWarsParamsAcceptLanguage = "ru"
	GetFwWarsParamsAcceptLanguageZh GetFwWarsParamsAcceptLanguage = "zh"
)

// Defines values for GetIncursionsParamsAcceptLanguage.
const (
	GetIncursionsParamsAcceptLanguageDe GetIncursionsParamsAcceptLanguage = "de"
	GetIncursionsParamsAcceptLanguageEn GetIncursionsParamsAcceptLanguage = "en"
	GetIncursionsParamsAcceptLanguageEs GetIncursionsParamsAcceptLanguage = "es"
	GetIncursionsParamsAcceptLanguageFr GetIncursionsParamsAcceptLanguage = "fr"
	GetIncursionsParamsAcceptLanguageJa GetIncursionsParamsAcceptLanguage = "ja"
	GetIncursionsParamsAcceptLanguageKo GetIncursionsParamsAcceptLanguage = "ko"
	GetIncursionsParamsAcceptLanguageRu GetIncursionsParamsAcceptLanguage = "ru"
	GetIncursionsParamsAcceptLanguageZh GetIncursionsParamsAcceptLanguage = "zh"
)

// Defines values for GetIndustryFacilitiesParamsAcceptLanguage.
const (
	GetIndustryFacilitiesParamsAcceptLanguageDe GetIndustryFacilitiesParamsAcceptLanguage = "de"
	GetIndustryFacilitiesParamsAcceptLanguageEn GetIndustryFacilitiesParamsAcceptLanguage = "en"
	GetIndustryFacilitiesParamsAcceptLanguageEs GetIndustryFacilitiesParamsAcceptLanguage = "es"
	GetIndustryFacilitiesParamsAcceptLanguageFr GetIndustryFacilitiesParamsAcceptLanguage = "fr"
	GetIndustryFacilitiesParamsAcceptLanguageJa GetIndustryFacilitiesParamsAcceptLanguage = "ja"
	GetIndustryFacilitiesParamsAcceptLanguageKo GetIndustryFacilitiesParamsAcceptLanguage = "ko"
	GetIndustryFacilitiesParamsAcceptLanguageRu GetIndustryFacilitiesParamsAcceptLanguage = "ru"
	GetIndustryFacilitiesParamsAcceptLanguageZh GetIndustryFacilitiesParamsAcceptLanguage = "zh"
)

// Defines values for GetIndustrySystemsParamsAcceptLanguage.
const (
	GetIndustrySystemsParamsAcceptLanguageDe GetIndustrySystemsParamsAcceptLanguage = "de"
	GetIndustrySystemsParamsAcceptLanguageEn GetIndustrySystemsParamsAcceptLanguage = "en"
	GetIndustrySystemsParamsAcceptLanguageEs GetIndustrySystemsParamsAcceptLanguage = "es"
	GetIndustrySystemsParamsAcceptLanguageFr GetIndustrySystemsParamsAcceptLanguage = "fr"
	GetIndustrySystemsParamsAcceptLanguageJa GetIndustrySystemsParamsAcceptLanguage = "ja"
	GetIndustrySystemsParamsAcceptLanguageKo GetIndustrySystemsParamsAcceptLanguage = "ko"
	GetIndustrySystemsParamsAcceptLanguageRu GetIndustrySystemsParamsAcceptLanguage = "ru"
	GetIndustrySystemsParamsAcceptLanguageZh GetIndustrySystemsParamsAcceptLanguage = "zh"
)

// Defines values for GetInsurancePricesParamsAcceptLanguage.
const (
	GetInsurancePricesParamsAcceptLanguageDe GetInsurancePricesParamsAcceptLanguage = "de"
	GetInsurancePricesParamsAcceptLanguageEn GetInsurancePricesParamsAcceptLanguage = "en"
	GetInsurancePricesParamsAcceptLanguageEs GetInsurancePricesParamsAcceptLanguage = "es"
	GetInsurancePricesParamsAcceptLanguageFr GetInsurancePricesParamsAcceptLanguage = "fr"
	GetInsurancePricesParamsAcceptLanguageJa GetInsurancePricesParamsAcceptLanguage = "ja"
	GetInsurancePricesParamsAcceptLanguageKo GetInsurancePricesParamsAcceptLanguage = "ko"
	GetInsurancePricesParamsAcceptLanguageRu GetInsurancePricesParamsAcceptLanguage = "ru"
	GetInsurancePricesParamsAcceptLanguageZh GetInsurancePricesParamsAcceptLanguage = "zh"
)

// Defines values for GetKillmailsKillmailIDKillmailHashParamsAcceptLanguage.
const (
	GetKillmailsKillmailIDKillmailHashParamsAcceptLanguageDe GetKillmailsKillmailIDKillmailHashParamsAcceptLanguage = "de"
	GetKillmailsKillmailIDKillmailHashParamsAcceptLanguageEn GetKillmailsKillmailIDKillmailHashParamsAcceptLanguage = "en"
	GetKillmailsKillmailIDKillmailHashParamsAcceptLanguageEs GetKillmailsKillmailIDKillmailHashParamsAcceptLanguage = "es"
	GetKillmailsKillmailIDKillmailHashParamsAcceptLanguageFr GetKillmailsKillmailIDKillmailHashParamsAcceptLanguage = "fr"
	GetKillmailsKillmailIDKillmailHashParamsAcceptLanguageJa GetKillmailsKillmailIDKillmailHashParamsAcceptLanguage = "ja"
	GetKillmailsKillmailIDKillmailHashParamsAcceptLanguageKo GetKillmailsKillmailIDKillmailHashParamsAcceptLanguage = "ko"
	GetKillmailsKillmailIDKillmailHashParamsAcceptLanguageRu GetKillmailsKillmailIDKillmailHashParamsAcceptLanguage = "ru"
	GetKillmailsKillmailIDKillmailHashParamsAcceptLanguageZh GetKillmailsKillmailIDKillmailHashParamsAcceptLanguage = "zh"
)

// Defines values for GetLoyaltyStoresCorporationIDOffersParamsAcceptLanguage.
const (
	GetLoyaltyStoresCorporationIDOffersParamsAcceptLanguageDe GetLoyaltyStoresCorporationIDOffersParamsAcceptLanguage = "de"
	GetLoyaltyStoresCorporationIDOffersParamsAcceptLanguageEn GetLoyaltyStoresCorporationIDOffersParamsAcceptLanguage = "en"
	GetLoyaltyStoresCorporationIDOffersParamsAcceptLanguageEs GetLoyaltyStoresCorporationIDOffersParamsAcceptLanguage = "es"
	GetLoyaltyStoresCorporationIDOffersParamsAcceptLanguageFr GetLoyaltyStoresCorporationIDOffersParamsAcceptLanguage = "fr"
	GetLoyaltyStoresCorporationIDOffersParamsAcceptLanguageJa GetLoyaltyStoresCorporationIDOffersParamsAcceptLanguage = "ja"
	GetLoyaltyStoresCorporationIDOffersParamsAcceptLanguageKo GetLoyaltyStoresCorporationIDOffersParamsAcceptLanguage = "ko"
	GetLoyaltyStoresCorporationIDOffersParamsAcceptLanguageRu GetLoyaltyStoresCorporationIDOffersParamsAcceptLanguage = "ru"
	GetLoyaltyStoresCorporationIDOffersParamsAcceptLanguageZh GetLoyaltyStoresCorporationIDOffersParamsAcceptLanguage = "zh"
)

// Defines values for GetMarketsGroupsParamsAcceptLanguage.
const (
	GetMarketsGroupsParamsAcceptLanguageDe GetMarketsGroupsParamsAcceptLanguage = "de"
	GetMarketsGroupsParamsAcceptLanguageEn GetMarketsGroupsParamsAcceptLanguage = "en"
	GetMarketsGroupsParamsAcceptLanguageEs GetMarketsGroupsParamsAcceptLanguage = "es"
	GetMarketsGroupsParamsAcceptLanguageFr GetMarketsGroupsParamsAcceptLanguage = "fr"
	GetMarketsGroupsParamsAcceptLanguageJa GetMarketsGroupsParamsAcceptLanguage = "ja"
	GetMarketsGroupsParamsAcceptLanguageKo GetMarketsGroupsParamsAcceptLanguage = "ko"
	GetMarketsGroupsParamsAcceptLanguageRu GetMarketsGroupsParamsAcceptLanguage = "ru"
	GetMarketsGroupsParamsAcceptLanguageZh GetMarketsGroupsParamsAcceptLanguage = "zh"
)

// Defines values for GetMarketsGroupsMarketGroupIDParamsAcceptLanguage.
const (
	GetMarketsGroupsMarketGroupIDParamsAcceptLanguageDe GetMarketsGroupsMarketGroupIDParamsAcceptLanguage = "de"
	GetMarketsGroupsMarketGroupIDParamsAcceptLanguageEn GetMarketsGroupsMarketGroupIDParamsAcceptLanguage = "en"
	GetMarketsGroupsMarketGroupIDParamsAcceptLanguageEs GetMarketsGroupsMarketGroupIDParamsAcceptLanguage = "es"
	GetMarketsGroupsMarketGroupIDParamsAcceptLanguageFr GetMarketsGroupsMarketGroupIDParamsAcceptLanguage = "fr"
	GetMarketsGroupsMarketGroupIDParamsAcceptLanguageJa GetMarketsGroupsMarketGroupIDParamsAcceptLanguage = "ja"
	GetMarketsGroupsMarketGroupIDParamsAcceptLanguageKo GetMarketsGroupsMarketGroupIDParamsAcceptLanguage = "ko"
	GetMarketsGroupsMarketGroupIDParamsAcceptLanguageRu GetMarketsGroupsMarketGroupIDParamsAcceptLanguage = "ru"
	GetMarketsGroupsMarketGroupIDParamsAcceptLanguageZh GetMarketsGroupsMarketGroupIDParamsAcceptLanguage = "zh"
)

// Defines values for GetMarketsPricesParamsAcceptLanguage.
const (
	GetMarketsPricesParamsAcceptLanguageDe GetMarketsPricesParamsAcceptLanguage = "de"
	GetMarketsPricesParamsAcceptLanguageEn GetMarketsPricesParamsAcceptLanguage = "en"
	GetMarketsPricesParamsAcceptLanguageEs GetMarketsPricesParamsAcceptLanguage = "es"
	GetMarketsPricesParamsAcceptLanguageFr GetMarketsPricesParamsAcceptLanguage = "fr"
	GetMarketsPricesParamsAcceptLanguageJa GetMarketsPricesParamsAcceptLanguage = "ja"
	GetMarketsPricesParamsAcceptLanguageKo GetMarketsPricesParamsAcceptLanguage = "ko"
	GetMarketsPricesParamsAcceptLanguageRu GetMarketsPricesParamsAcceptLanguage = "ru"
	GetMarketsPricesParamsAcceptLanguageZh GetMarketsPricesParamsAcceptLanguage = "zh"
)

// Defines values for GetMarketsStructuresStructureIDParamsAcceptLanguage.
const (
	GetMarketsStructuresStructureIDParamsAcceptLanguageDe GetMarketsStructuresStructureIDParamsAcceptLanguage = "de"
	GetMarketsStructuresStructureIDParamsAcceptLanguageEn GetMarketsStructuresStructureIDParamsAcceptLanguage = "en"
	GetMarketsStructuresStructureIDParamsAcceptLanguageEs GetMarketsStructuresStructureIDParamsAcceptLanguage = "es"
	GetMarketsStructuresStructureIDParamsAcceptLanguageFr GetMarketsStructuresStructureIDParamsAcceptLanguage = "fr"
	GetMarketsStructuresStructureIDParamsAcceptLanguageJa GetMarketsStructuresStructureIDParamsAcceptLanguage = "ja"
	GetMarketsStructuresStructureIDParamsAcceptLanguageKo GetMarketsStructuresStructureIDParamsAcceptLanguage = "ko"
	GetMarketsStructuresStructureIDParamsAcceptLanguageRu GetMarketsStructuresStructureIDParamsAcceptLanguage = "ru"
	GetMarketsStructuresStructureIDParamsAcceptLanguageZh GetMarketsStructuresStructureIDParamsAcceptLanguage = "zh"
)

// Defines values for GetMarketsRegionIDHistoryParamsAcceptLanguage.
const (
	GetMarketsRegionIDHistoryParamsAcceptLanguageDe GetMarketsRegionIDHistoryParamsAcceptLanguage = "de"
	GetMarketsRegionIDHistoryParamsAcceptLanguageEn GetMarketsRegionIDHistoryParamsAcceptLanguage = "en"
	GetMarketsRegionIDHistoryParamsAcceptLanguageEs GetMarketsRegionIDHistoryParamsAcceptLanguage = "es"
	GetMarketsRegionIDHistoryParamsAcceptLanguageFr GetMarketsRegionIDHistoryParamsAcceptLanguage = "fr"
	GetMarketsRegionIDHistoryParamsAcceptLanguageJa GetMarketsRegionIDHistoryParamsAcceptLanguage = "ja"
	GetMarketsRegionIDHistoryParamsAcceptLanguageKo GetMarketsRegionIDHistoryParamsAcceptLanguage = "ko"
	GetMarketsRegionIDHistoryParamsAcceptLanguageRu GetMarketsRegionIDHistoryParamsAcceptLanguage = "ru"
	GetMarketsRegionIDHistoryParamsAcceptLanguageZh GetMarketsRegionIDHistoryParamsAcceptLanguage = "zh"
)

// Defines values for GetMarketsRegionIDOrdersParamsOrderType.
const (
	All  GetMarketsRegionIDOrdersParamsOrderType = "all"
	Buy  GetMarketsRegionIDOrdersParamsOrderType = "buy"
	Sell GetMarketsRegionIDOrdersParamsOrderType = "sell"
)

// Defines values for GetMarketsRegionIDOrdersParamsAcceptLanguage.
const (
	GetMarketsRegionIDOrdersParamsAcceptLanguageDe GetMarketsRegionIDOrdersParamsAcceptLanguage = "de"
	GetMarketsRegionIDOrdersParamsAcceptLanguageEn GetMarketsRegionIDOrdersParamsAcceptLanguage = "en"
	GetMarketsRegionIDOrdersParamsAcceptLanguageEs GetMarketsRegionIDOrdersParamsAcceptLanguage = "es"
	GetMarketsRegionIDOrdersParamsAcceptLanguageFr GetMarketsRegionIDOrdersParamsAcceptLanguage = "fr"
	GetMarketsRegionIDOrdersParamsAcceptLanguageJa GetMarketsRegionIDOrdersParamsAcceptLanguage = "ja"
	GetMarketsRegionIDOrdersParamsAcceptLanguageKo GetMarketsRegionIDOrdersParamsAcceptLanguage = "ko"
	GetMarketsRegionIDOrdersParamsAcceptLanguageRu GetMarketsRegionIDOrdersParamsAcceptLanguage = "ru"
	GetMarketsRegionIDOrdersParamsAcceptLanguageZh GetMarketsRegionIDOrdersParamsAcceptLanguage = "zh"
)

// Defines values for GetMarketsRegionIDTypesParamsAcceptLanguage.
const (
	GetMarketsRegionIDTypesParamsAcceptLanguageDe GetMarketsRegionIDTypesParamsAcceptLanguage = "de"
	GetMarketsRegionIDTypesParamsAcceptLanguageEn GetMarketsRegionIDTypesParamsAcceptLanguage = "en"
	GetMarketsRegionIDTypesParamsAcceptLanguageEs GetMarketsRegionIDTypesParamsAcceptLanguage = "es"
	GetMarketsRegionIDTypesParamsAcceptLanguageFr GetMarketsRegionIDTypesParamsAcceptLanguage = "fr"
	GetMarketsRegionIDTypesParamsAcceptLanguageJa GetMarketsRegionIDTypesParamsAcceptLanguage = "ja"
	GetMarketsRegionIDTypesParamsAcceptLanguageKo GetMarketsRegionIDTypesParamsAcceptLanguage = "ko"
	GetMarketsRegionIDTypesParamsAcceptLanguageRu GetMarketsRegionIDTypesParamsAcceptLanguage = "ru"
	GetMarketsRegionIDTypesParamsAcceptLanguageZh GetMarketsRegionIDTypesParamsAcceptLanguage = "zh"
)

// Defines values for GetRouteOriginDestinationParamsFlag.
const (
	Insecure GetRouteOriginDestinationParamsFlag = "insecure"
	Secure   GetRouteOriginDestinationParamsFlag = "secure"
	Shortest GetRouteOriginDestinationParamsFlag = "shortest"
)

// Defines values for GetRouteOriginDestinationParamsAcceptLanguage.
const (
	GetRouteOriginDestinationParamsAcceptLanguageDe GetRouteOriginDestinationParamsAcceptLanguage = "de"
	GetRouteOriginDestinationParamsAcceptLanguageEn GetRouteOriginDestinationParamsAcceptLanguage = "en"
	GetRouteOriginDestinationParamsAcceptLanguageEs GetRouteOriginDestinationParamsAcceptLanguage = "es"
	GetRouteOriginDestinationParamsAcceptLanguageFr GetRouteOriginDestinationParamsAcceptLanguage = "fr"
	GetRouteOriginDestinationParamsAcceptLanguageJa GetRouteOriginDestinationParamsAcceptLanguage = "ja"
	GetRouteOriginDestinationParamsAcceptLanguageKo GetRouteOriginDestinationParamsAcceptLanguage = "ko"
	GetRouteOriginDestinationParamsAcceptLanguageRu GetRouteOriginDestinationParamsAcceptLanguage = "ru"
	GetRouteOriginDestinationParamsAcceptLanguageZh GetRouteOriginDestinationParamsAcceptLanguage = "zh"
)

// Defines values for GetSovereigntyCampaignsParamsAcceptLanguage.
const (
	GetSovereigntyCampaignsParamsAcceptLanguageDe GetSovereigntyCampaignsParamsAcceptLanguage = "de"
	GetSovereigntyCampaignsParamsAcceptLanguageEn GetSovereigntyCampaignsParamsAcceptLanguage = "en"
	GetSovereigntyCampaignsParamsAcceptLanguageEs GetSovereigntyCampaignsParamsAcceptLanguage = "es"
	GetSovereigntyCampaignsParamsAcceptLanguageFr GetSovereigntyCampaignsParamsAcceptLanguage = "fr"
	GetSovereigntyCampaignsParamsAcceptLanguageJa GetSovereigntyCampaignsParamsAcceptLanguage = "ja"
	GetSovereigntyCampaignsParamsAcceptLanguageKo GetSovereigntyCampaignsParamsAcceptLanguage = "ko"
	GetSovereigntyCampaignsParamsAcceptLanguageRu GetSovereigntyCampaignsParamsAcceptLanguage = "ru"
	GetSovereigntyCampaignsParamsAcceptLanguageZh GetSovereigntyCampaignsParamsAcceptLanguage = "zh"
)

// Defines values for GetSovereigntyMapParamsAcceptLanguage.
const (
	GetSovereigntyMapParamsAcceptLanguageDe GetSovereigntyMapParamsAcceptLanguage = "de"
	GetSovereigntyMapParamsAcceptLanguageEn GetSovereigntyMapParamsAcceptLanguage = "en"
	GetSovereigntyMapParamsAcceptLanguageEs GetSovereigntyMapParamsAcceptLanguage = "es"
	GetSovereigntyMapParamsAcceptLanguageFr GetSovereigntyMapParamsAcceptLanguage = "fr"
	GetSovereigntyMapParamsAcceptLanguageJa GetSovereigntyMapParamsAcceptLanguage = "ja"
	GetSovereigntyMapParamsAcceptLanguageKo GetSovereigntyMapParamsAcceptLanguage = "ko"
	GetSovereigntyMapParamsAcceptLanguageRu GetSovereigntyMapParamsAcceptLanguage = "ru"
	GetSovereigntyMapParamsAcceptLanguageZh GetSovereigntyMapParamsAcceptLanguage = "zh"
)

// Defines values for GetSovereigntyStructuresParamsAcceptLanguage.
const (
	GetSovereigntyStructuresParamsAcceptLanguageDe GetSovereigntyStructuresParamsAcceptLanguage = "de"
	GetSovereigntyStructuresParamsAcceptLanguageEn GetSovereigntyStructuresParamsAcceptLanguage = "en"
	GetSovereigntyStructuresParamsAcceptLanguageEs GetSovereigntyStructuresParamsAcceptLanguage = "es"
	GetSovereigntyStructuresParamsAcceptLanguageFr GetSovereigntyStructuresParamsAcceptLanguage = "fr"
	GetSovereigntyStructuresParamsAcceptLanguageJa GetSovereigntyStructuresParamsAcceptLanguage = "ja"
	GetSovereigntyStructuresParamsAcceptLanguageKo GetSovereigntyStructuresParamsAcceptLanguage = "ko"
	GetSovereigntyStructuresParamsAcceptLanguageRu GetSovereigntyStructuresParamsAcceptLanguage = "ru"
	GetSovereigntyStructuresParamsAcceptLanguageZh GetSovereigntyStructuresParamsAcceptLanguage = "zh"
)

// Defines values for GetStatusParamsAcceptLanguage.
const (
	GetStatusParamsAcceptLanguageDe GetStatusParamsAcceptLanguage = "de"
	GetStatusParamsAcceptLanguageEn GetStatusParamsAcceptLanguage = "en"
	GetStatusParamsAcceptLanguageEs GetStatusParamsAcceptLanguage = "es"
	GetStatusParamsAcceptLanguageFr GetStatusParamsAcceptLanguage = "fr"
	GetStatusParamsAcceptLanguageJa GetStatusParamsAcceptLanguage = "ja"
	GetStatusParamsAcceptLanguageKo GetStatusParamsAcceptLanguage = "ko"
	GetStatusParamsAcceptLanguageRu GetStatusParamsAcceptLanguage = "ru"
	GetStatusParamsAcceptLanguageZh GetStatusParamsAcceptLanguage = "zh"
)

// Defines values for PostUIAutopilotWaypointParamsAcceptLanguage.
const (
	PostUIAutopilotWaypointParamsAcceptLanguageDe PostUIAutopilotWaypointParamsAcceptLanguage = "de"
	PostUIAutopilotWaypointParamsAcceptLanguageEn PostUIAutopilotWaypointParamsAcceptLanguage = "en"
	PostUIAutopilotWaypointParamsAcceptLanguageEs PostUIAutopilotWaypointParamsAcceptLanguage = "es"
	PostUIAutopilotWaypointParamsAcceptLanguageFr PostUIAutopilotWaypointParamsAcceptLanguage = "fr"
	PostUIAutopilotWaypointParamsAcceptLanguageJa PostUIAutopilotWaypointParamsAcceptLanguage = "ja"
	PostUIAutopilotWaypointParamsAcceptLanguageKo PostUIAutopilotWaypointParamsAcceptLanguage = "ko"
	PostUIAutopilotWaypointParamsAcceptLanguageRu PostUIAutopilotWaypointParamsAcceptLanguage = "ru"
	PostUIAutopilotWaypointParamsAcceptLanguageZh PostUIAutopilotWaypointParamsAcceptLanguage = "zh"
)

// Defines values for PostUIOpenwindowContractParamsAcceptLanguage.
const (
	PostUIOpenwindowContractParamsAcceptLanguageDe PostUIOpenwindowContractParamsAcceptLanguage = "de"
	PostUIOpenwindowContractParamsAcceptLanguageEn PostUIOpenwindowContractParamsAcceptLanguage = "en"
	PostUIOpenwindowContractParamsAcceptLanguageEs PostUIOpenwindowContractParamsAcceptLanguage = "es"
	PostUIOpenwindowContractParamsAcceptLanguageFr PostUIOpenwindowContractParamsAcceptLanguage = "fr"
	PostUIOpenwindowContractParamsAcceptLanguageJa PostUIOpenwindowContractParamsAcceptLanguage = "ja"
	PostUIOpenwindowContractParamsAcceptLanguageKo PostUIOpenwindowContractParamsAcceptLanguage = "ko"
	PostUIOpenwindowContractParamsAcceptLanguageRu PostUIOpenwindowContractParamsAcceptLanguage = "ru"
	PostUIOpenwindowContractParamsAcceptLanguageZh PostUIOpenwindowContractParamsAcceptLanguage = "zh"
)

// Defines values for PostUIOpenwindowInformationParamsAcceptLanguage.
const (
	PostUIOpenwindowInformationParamsAcceptLanguageDe PostUIOpenwindowInformationParamsAcceptLanguage = "de"
	PostUIOpenwindowInformationParamsAcceptLanguageEn PostUIOpenwindowInformationParamsAcceptLanguage = "en"
	PostUIOpenwindowInformationParamsAcceptLanguageEs PostUIOpenwindowInformationParamsAcceptLanguage = "es"
	PostUIOpenwindowInformationParamsAcceptLanguageFr PostUIOpenwindowInformationParamsAcceptLanguage = "fr"
	PostUIOpenwindowInformationParamsAcceptLanguageJa PostUIOpenwindowInformationParamsAcceptLanguage = "ja"
	PostUIOpenwindowInformationParamsAcceptLanguageKo PostUIOpenwindowInformationParamsAcceptLanguage = "ko"
	PostUIOpenwindowInformationParamsAcceptLanguageRu PostUIOpenwindowInformationParamsAcceptLanguage = "ru"
	PostUIOpenwindowInformationParamsAcceptLanguageZh PostUIOpenwindowInformationParamsAcceptLanguage = "zh"
)

// Defines values for PostUIOpenwindowMarketdetailsParamsAcceptLanguage.
const (
	PostUIOpenwindowMarketdetailsParamsAcceptLanguageDe PostUIOpenwindowMarketdetailsParamsAcceptLanguage = "de"
	PostUIOpenwindowMarketdetailsParamsAcceptLanguageEn PostUIOpenwindowMarketdetailsParamsAcceptLanguage = "en"
	PostUIOpenwindowMarketdetailsParamsAcceptLanguageEs PostUIOpenwindowMarketdetailsParamsAcceptLanguage = "es"
	PostUIOpenwindowMarketdetailsParamsAcceptLanguageFr PostUIOpenwindowMarketdetailsParamsAcceptLanguage = "fr"
	PostUIOpenwindowMarketdetailsParamsAcceptLanguageJa PostUIOpenwindowMarketdetailsParamsAcceptLanguage = "ja"
	PostUIOpenwindowMarketdetailsParamsAcceptLanguageKo PostUIOpenwindowMarketdetailsParamsAcceptLanguage = "ko"
	PostUIOpenwindowMarketdetailsParamsAcceptLanguageRu PostUIOpenwindowMarketdetailsParamsAcceptLanguage = "ru"
	PostUIOpenwindowMarketdetailsParamsAcceptLanguageZh PostUIOpenwindowMarketdetailsParamsAcceptLanguage = "zh"
)

// Defines values for PostUIOpenwindowNewmailParamsAcceptLanguage.
const (
	PostUIOpenwindowNewmailParamsAcceptLanguageDe PostUIOpenwindowNewmailParamsAcceptLanguage = "de"
	PostUIOpenwindowNewmailParamsAcceptLanguageEn PostUIOpenwindowNewmailParamsAcceptLanguage = "en"
	PostUIOpenwindowNewmailParamsAcceptLanguageEs PostUIOpenwindowNewmailParamsAcceptLanguage = "es"
	PostUIOpenwindowNewmailParamsAcceptLanguageFr PostUIOpenwindowNewmailParamsAcceptLanguage = "fr"
	PostUIOpenwindowNewmailParamsAcceptLanguageJa PostUIOpenwindowNewmailParamsAcceptLanguage = "ja"
	PostUIOpenwindowNewmailParamsAcceptLanguageKo PostUIOpenwindowNewmailParamsAcceptLanguage = "ko"
	PostUIOpenwindowNewmailParamsAcceptLanguageRu PostUIOpenwindowNewmailParamsAcceptLanguage = "ru"
	PostUIOpenwindowNewmailParamsAcceptLanguageZh PostUIOpenwindowNewmailParamsAcceptLanguage = "zh"
)

// Defines values for GetUniverseAncestriesParamsAcceptLanguage.
const (
	GetUniverseAncestriesParamsAcceptLanguageDe GetUniverseAncestriesParamsAcceptLanguage = "de"
	GetUniverseAncestriesParamsAcceptLanguageEn GetUniverseAncestriesParamsAcceptLanguage = "en"
	GetUniverseAncestriesParamsAcceptLanguageEs GetUniverseAncestriesParamsAcceptLanguage = "es"
	GetUniverseAncestriesParamsAcceptLanguageFr GetUniverseAncestriesParamsAcceptLanguage = "fr"
	GetUniverseAncestriesParamsAcceptLanguageJa GetUniverseAncestriesParamsAcceptLanguage = "ja"
	GetUniverseAncestriesParamsAcceptLanguageKo GetUniverseAncestriesParamsAcceptLanguage = "ko"
	GetUniverseAncestriesParamsAcceptLanguageRu GetUniverseAncestriesParamsAcceptLanguage = "ru"
	GetUniverseAncestriesParamsAcceptLanguageZh GetUniverseAncestriesParamsAcceptLanguage = "zh"
)

// Defines values for GetUniverseAsteroidBeltsAsteroidBeltIDParamsAcceptLanguage.
const (
	GetUniverseAsteroidBeltsAsteroidBeltIDParamsAcceptLanguageDe GetUniverseAsteroidBeltsAsteroidBeltIDParamsAcceptLanguage = "de"
	GetUniverseAsteroidBeltsAsteroidBeltIDParamsAcceptLanguageEn GetUniverseAsteroidBeltsAsteroidBeltIDParamsAcceptLanguage = "en"
	GetUniverseAsteroidBeltsAsteroidBeltIDParamsAcceptLanguageEs GetUniverseAsteroidBeltsAsteroidBeltIDParamsAcceptLanguage = "es"
	GetUniverseAsteroidBeltsAsteroidBeltIDParamsAcceptLanguageFr GetUniverseAsteroidBeltsAsteroidBeltIDParamsAcceptLanguage = "fr"
	GetUniverseAsteroidBeltsAsteroidBeltIDParamsAcceptLanguageJa GetUniverseAsteroidBeltsAsteroidBeltIDParamsAcceptLanguage = "ja"
	GetUniverseAsteroidBeltsAsteroidBeltIDParamsAcceptLanguageKo GetUniverseAsteroidBeltsAsteroidBeltIDParamsAcceptLanguage = "ko"
	GetUniverseAsteroidBeltsAsteroidBeltIDParamsAcceptLanguageRu GetUniverseAsteroidBeltsAsteroidBeltIDParamsAcceptLanguage = "ru"
	GetUniverseAsteroidBeltsAsteroidBeltIDParamsAcceptLanguageZh GetUniverseAsteroidBeltsAsteroidBeltIDParamsAcceptLanguage = "zh"
)

// Defines values for GetUniverseBloodlinesParamsAcceptLanguage.
const (
	GetUniverseBloodlinesParamsAcceptLanguageDe GetUniverseBloodlinesParamsAcceptLanguage = "de"
	GetUniverseBloodlinesParamsAcceptLanguageEn GetUniverseBloodlinesParamsAcceptLanguage = "en"
	GetUniverseBloodlinesParamsAcceptLanguageEs GetUniverseBloodlinesParamsAcceptLanguage = "es"
	GetUniverseBloodlinesParamsAcceptLanguageFr GetUniverseBloodlinesParamsAcceptLanguage = "fr"
	GetUniverseBloodlinesParamsAcceptLanguageJa GetUniverseBloodlinesParamsAcceptLanguage = "ja"
	GetUniverseBloodlinesParamsAcceptLanguageKo GetUniverseBloodlinesParamsAcceptLanguage = "ko"
	GetUniverseBloodlinesParamsAcceptLanguageRu GetUniverseBloodlinesParamsAcceptLanguage = "ru"
	GetUniverseBloodlinesParamsAcceptLanguageZh GetUniverseBloodlinesParamsAcceptLanguage = "zh"
)

// Defines values for GetUniverseCategoriesParamsAcceptLanguage.
const (
	GetUniverseCategoriesParamsAcceptLanguageDe GetUniverseCategoriesParamsAcceptLanguage = "de"
	GetUniverseCategoriesParamsAcceptLanguageEn GetUniverseCategoriesParamsAcceptLanguage = "en"
	GetUniverseCategoriesParamsAcceptLanguageEs GetUniverseCategoriesParamsAcceptLanguage = "es"
	GetUniverseCategoriesParamsAcceptLanguageFr GetUniverseCategoriesParamsAcceptLanguage = "fr"
	GetUniverseCategoriesParamsAcceptLanguageJa GetUniverseCategoriesParamsAcceptLanguage = "ja"
	GetUniverseCategoriesParamsAcceptLanguageKo GetUniverseCategoriesParamsAcceptLanguage = "ko"
	GetUniverseCategoriesParamsAcceptLanguageRu GetUniverseCategoriesParamsAcceptLanguage = "ru"
	GetUniverseCategoriesParamsAcceptLanguageZh GetUniverseCategoriesParamsAcceptLanguage = "zh"
)

// Defines values for GetUniverseCategoriesCategoryIDParamsAcceptLanguage.
const (
	GetUniverseCategoriesCategoryIDParamsAcceptLanguageDe GetUniverseCategoriesCategoryIDParamsAcceptLanguage = "de"
	GetUniverseCategoriesCategoryIDParamsAcceptLanguageEn GetUniverseCategoriesCategoryIDParamsAcceptLanguage = "en"
	GetUniverseCategoriesCategoryIDParamsAcceptLanguageEs GetUniverseCategoriesCategoryIDParamsAcceptLanguage = "es"
	GetUniverseCategoriesCategoryIDParamsAcceptLanguageFr GetUniverseCategoriesCategoryIDParamsAcceptLanguage = "fr"
	GetUniverseCategoriesCategoryIDParamsAcceptLanguageJa GetUniverseCategoriesCategoryIDParamsAcceptLanguage = "ja"
	GetUniverseCategoriesCategoryIDParamsAcceptLanguageKo GetUniverseCategoriesCategoryIDParamsAcceptLanguage = "ko"
	GetUniverseCategoriesCategoryIDParamsAcceptLanguageRu GetUniverseCategoriesCategoryIDParamsAcceptLanguage = "ru"
	GetUniverseCategoriesCategoryIDParamsAcceptLanguageZh GetUniverseCategoriesCategoryIDParamsAcceptLanguage = "zh"
)

// Defines values for GetUniverseConstellationsParamsAcceptLanguage.
const (
	GetUniverseConstellationsParamsAcceptLanguageDe GetUniverseConstellationsParamsAcceptLanguage = "de"
	GetUniverseConstellationsParamsAcceptLanguageEn GetUniverseConstellationsParamsAcceptLanguage = "en"
	GetUniverseConstellationsParamsAcceptLanguageEs GetUniverseConstellationsParamsAcceptLanguage = "es"
	GetUniverseConstellationsParamsAcceptLanguageFr GetUniverseConstellationsParamsAcceptLanguage = "fr"
	GetUniverseConstellationsParamsAcceptLanguageJa GetUniverseConstellationsParamsAcceptLanguage = "ja"
	GetUniverseConstellationsParamsAcceptLanguageKo GetUniverseConstellationsParamsAcceptLanguage = "ko"
	GetUniverseConstellationsParamsAcceptLanguageRu GetUniverseConstellationsParamsAcceptLanguage = "ru"
	GetUniverseConstellationsParamsAcceptLanguageZh GetUniverseConstellationsParamsAcceptLanguage = "zh"
)

// Defines values for GetUniverseConstellationsConstellationIDParamsAcceptLanguage.
const (
	GetUniverseConstellationsConstellationIDParamsAcceptLanguageDe GetUniverseConstellationsConstellationIDParamsAcceptLanguage = "de"
	GetUniverseConstellationsConstellationIDParamsAcceptLanguageEn GetUniverseConstellationsConstellationIDParamsAcceptLanguage = "en"
	GetUniverseConstellationsConstellationIDParamsAcceptLanguageEs GetUniverseConstellationsConstellationIDParamsAcceptLanguage = "es"
	GetUniverseConstellationsConstellationIDParamsAcceptLanguageFr GetUniverseConstellationsConstellationIDParamsAcceptLanguage = "fr"
	GetUniverseConstellationsConstellationIDParamsAcceptLanguageJa GetUniverseConstellationsConstellationIDParamsAcceptLanguage = "ja"
	GetUniverseConstellationsConstellationIDParamsAcceptLanguageKo GetUniverseConstellationsConstellationIDParamsAcceptLanguage = "ko"
	GetUniverseConstellationsConstellationIDParamsAcceptLanguageRu GetUniverseConstellationsConstellationIDParamsAcceptLanguage = "ru"
	GetUniverseConstellationsConstellationIDParamsAcceptLanguageZh GetUniverseConstellationsConstellationIDParamsAcceptLanguage = "zh"
)

// Defines values for GetUniverseFactionsParamsAcceptLanguage.
const (
	GetUniverseFactionsParamsAcceptLanguageDe GetUniverseFactionsParamsAcceptLanguage = "de"
	GetUniverseFactionsParamsAcceptLanguageEn GetUniverseFactionsParamsAcceptLanguage = "en"
	GetUniverseFactionsParamsAcceptLanguageEs GetUniverseFactionsParamsAcceptLanguage = "es"
	GetUniverseFactionsParamsAcceptLanguageFr GetUniverseFactionsParamsAcceptLanguage = "fr"
	GetUniverseFactionsParamsAcceptLanguageJa GetUniverseFactionsParamsAcceptLanguage = "ja"
	GetUniverseFactionsParamsAcceptLanguageKo GetUniverseFactionsParamsAcceptLanguage = "ko"
	GetUniverseFactionsParamsAcceptLanguageRu GetUniverseFactionsParamsAcceptLanguage = "ru"
	GetUniverseFactionsParamsAcceptLanguageZh GetUniverseFactionsParamsAcceptLanguage = "zh"
)

// Defines values for GetUniverseGraphicsParamsAcceptLanguage.
const (
	GetUniverseGraphicsParamsAcceptLanguageDe GetUniverseGraphicsParamsAcceptLanguage = "de"
	GetUniverseGraphicsParamsAcceptLanguageEn GetUniverseGraphicsParamsAcceptLanguage = "en"
	GetUniverseGraphicsParamsAcceptLanguageEs GetUniverseGraphicsParamsAcceptLanguage = "es"
	GetUniverseGraphicsParamsAcceptLanguageFr GetUniverseGraphicsParamsAcceptLanguage = "fr"
	GetUniverseGraphicsParamsAcceptLanguageJa GetUniverseGraphicsParamsAcceptLanguage = "ja"
	GetUniverseGraphicsParamsAcceptLanguageKo GetUniverseGraphicsParamsAcceptLanguage = "ko"
	GetUniverseGraphicsParamsAcceptLanguageRu GetUniverseGraphicsParamsAcceptLanguage = "ru"
	GetUniverseGraphicsParamsAcceptLanguageZh GetUniverseGraphicsParamsAcceptLanguage = "zh"
)

// Defines values for GetUniverseGraphicsGraphicIDParamsAcceptLanguage.
const (
	GetUniverseGraphicsGraphicIDParamsAcceptLanguageDe GetUniverseGraphicsGraphicIDParamsAcceptLanguage = "de"
	GetUniverseGraphicsGraphicIDParamsAcceptLanguageEn GetUniverseGraphicsGraphicIDParamsAcceptLanguage = "en"
	GetUniverseGraphicsGraphicIDParamsAcceptLanguageEs GetUniverseGraphicsGraphicIDParamsAcceptLanguage = "es"
	GetUniverseGraphicsGraphicIDParamsAcceptLanguageFr GetUniverseGraphicsGraphicIDParamsAcceptLanguage = "fr"
	GetUniverseGraphicsGraphicIDParamsAcceptLanguageJa GetUniverseGraphicsGraphicIDParamsAcceptLanguage = "ja"
	GetUniverseGraphicsGraphicIDParamsAcceptLanguageKo GetUniverseGraphicsGraphicIDParamsAcceptLanguage = "ko"
	GetUniverseGraphicsGraphicIDParamsAcceptLanguageRu GetUniverseGraphicsGraphicIDParamsAcceptLanguage = "ru"
	GetUniverseGraphicsGraphicIDParamsAcceptLanguageZh GetUniverseGraphicsGraphicIDParamsAcceptLanguage = "zh"
)

// Defines values for GetUniverseGroupsParamsAcceptLanguage.
const (
	GetUniverseGroupsParamsAcceptLanguageDe GetUniverseGroupsParamsAcceptLanguage = "de"
	GetUniverseGroupsParamsAcceptLanguageEn GetUniverseGroupsParamsAcceptLanguage = "en"
	GetUniverseGroupsParamsAcceptLanguageEs GetUniverseGroupsParamsAcceptLanguage = "es"
	GetUniverseGroupsParamsAcceptLanguageFr GetUniverseGroupsParamsAcceptLanguage = "fr"
	GetUniverseGroupsParamsAcceptLanguageJa GetUniverseGroupsParamsAcceptLanguage = "ja"
	GetUniverseGroupsParamsAcceptLanguageKo GetUniverseGroupsParamsAcceptLanguage = "ko"
	GetUniverseGroupsParamsAcceptLanguageRu GetUniverseGroupsParamsAcceptLanguage = "ru"
	GetUniverseGroupsParamsAcceptLanguageZh GetUniverseGroupsParamsAcceptLanguage = "zh"
)

// Defines values for GetUniverseGroupsGroupIDParamsAcceptLanguage.
const (
	GetUniverseGroupsGroupIDParamsAcceptLanguageDe GetUniverseGroupsGroupIDParamsAcceptLanguage = "de"
	GetUniverseGroupsGroupIDParamsAcceptLanguageEn GetUniverseGroupsGroupIDParamsAcceptLanguage = "en"
	GetUniverseGroupsGroupIDParamsAcceptLanguageEs GetUniverseGroupsGroupIDParamsAcceptLanguage = "es"
	GetUniverseGroupsGroupIDParamsAcceptLanguageFr GetUniverseGroupsGroupIDParamsAcceptLanguage = "fr"
	GetUniverseGroupsGroupIDParamsAcceptLanguageJa GetUniverseGroupsGroupIDParamsAcceptLanguage = "ja"
	GetUniverseGroupsGroupIDParamsAcceptLanguageKo GetUniverseGroupsGroupIDParamsAcceptLanguage = "ko"
	GetUniverseGroupsGroupIDParamsAcceptLanguageRu GetUniverseGroupsGroupIDParamsAcceptLanguage = "ru"
	GetUniverseGroupsGroupIDParamsAcceptLanguageZh GetUniverseGroupsGroupIDParamsAcceptLanguage = "zh"
)

// Defines values for PostUniverseIdsParamsAcceptLanguage.
const (
	PostUniverseIdsParamsAcceptLanguageDe PostUniverseIdsParamsAcceptLanguage = "de"
	PostUniverseIdsParamsAcceptLanguageEn PostUniverseIdsParamsAcceptLanguage = "en"
	PostUniverseIdsParamsAcceptLanguageEs PostUniverseIdsParamsAcceptLanguage = "es"
	PostUniverseIdsParamsAcceptLanguageFr PostUniverseIdsParamsAcceptLanguage = "fr"
	PostUniverseIdsParamsAcceptLanguageJa PostUniverseIdsParamsAcceptLanguage = "ja"
	PostUniverseIdsParamsAcceptLanguageKo PostUniverseIdsParamsAcceptLanguage = "ko"
	PostUniverseIdsParamsAcceptLanguageRu PostUniverseIdsParamsAcceptLanguage = "ru"
	PostUniverseIdsParamsAcceptLanguageZh PostUniverseIdsParamsAcceptLanguage = "zh"
)

// Defines values for GetUniverseMoonsMoonIDParamsAcceptLanguage.
const (
	GetUniverseMoonsMoonIDParamsAcceptLanguageDe GetUniverseMoonsMoonIDParamsAcceptLanguage = "de"
	GetUniverseMoonsMoonIDParamsAcceptLanguageEn GetUniverseMoonsMoonIDParamsAcceptLanguage = "en"
	GetUniverseMoonsMoonIDParamsAcceptLanguageEs GetUniverseMoonsMoonIDParamsAcceptLanguage = "es"
	GetUniverseMoonsMoonIDParamsAcceptLanguageFr GetUniverseMoonsMoonIDParamsAcceptLanguage = "fr"
	GetUniverseMoonsMoonIDParamsAcceptLanguageJa GetUniverseMoonsMoonIDParamsAcceptLanguage = "ja"
	GetUniverseMoonsMoonIDParamsAcceptLanguageKo GetUniverseMoonsMoonIDParamsAcceptLanguage = "ko"
	GetUniverseMoonsMoonIDParamsAcceptLanguageRu GetUniverseMoonsMoonIDParamsAcceptLanguage = "ru"
	GetUniverseMoonsMoonIDParamsAcceptLanguageZh GetUniverseMoonsMoonIDParamsAcceptLanguage = "zh"
)

// Defines values for PostUniverseNamesParamsAcceptLanguage.
const (
	PostUniverseNamesParamsAcceptLanguageDe PostUniverseNamesParamsAcceptLanguage = "de"
	PostUniverseNamesParamsAcceptLanguageEn PostUniverseNamesParamsAcceptLanguage = "en"
	PostUniverseNamesParamsAcceptLanguageEs PostUniverseNamesParamsAcceptLanguage = "es"
	PostUniverseNamesParamsAcceptLanguageFr PostUniverseNamesParamsAcceptLanguage = "fr"
	PostUniverseNamesParamsAcceptLanguageJa PostUniverseNamesParamsAcceptLanguage = "ja"
	PostUniverseNamesParamsAcceptLanguageKo PostUniverseNamesParamsAcceptLanguage = "ko"
	PostUniverseNamesParamsAcceptLanguageRu PostUniverseNamesParamsAcceptLanguage = "ru"
	PostUniverseNamesParamsAcceptLanguageZh PostUniverseNamesParamsAcceptLanguage = "zh"
)

// Defines values for GetUniversePlanetsPlanetIDParamsAcceptLanguage.
const (
	GetUniversePlanetsPlanetIDParamsAcceptLanguageDe GetUniversePlanetsPlanetIDParamsAcceptLanguage = "de"
	GetUniversePlanetsPlanetIDParamsAcceptLanguageEn GetUniversePlanetsPlanetIDParamsAcceptLanguage = "en"
	GetUniversePlanetsPlanetIDParamsAcceptLanguageEs GetUniversePlanetsPlanetIDParamsAcceptLanguage = "es"
	GetUniversePlanetsPlanetIDParamsAcceptLanguageFr GetUniversePlanetsPlanetIDParamsAcceptLanguage = "fr"
	GetUniversePlanetsPlanetIDParamsAcceptLanguageJa GetUniversePlanetsPlanetIDParamsAcceptLanguage = "ja"
	GetUniversePlanetsPlanetIDParamsAcceptLanguageKo GetUniversePlanetsPlanetIDParamsAcceptLanguage = "ko"
	GetUniversePlanetsPlanetIDParamsAcceptLanguageRu GetUniversePlanetsPlanetIDParamsAcceptLanguage = "ru"
	GetUniversePlanetsPlanetIDParamsAcceptLanguageZh GetUniversePlanetsPlanetIDParamsAcceptLanguage = "zh"
)

// Defines values for GetUniverseRacesParamsAcceptLanguage.
const (
	GetUniverseRacesParamsAcceptLanguageDe GetUniverseRacesParamsAcceptLanguage = "de"
	GetUniverseRacesParamsAcceptLanguageEn GetUniverseRacesParamsAcceptLanguage = "en"
	GetUniverseRacesParamsAcceptLanguageEs GetUniverseRacesParamsAcceptLanguage = "es"
	GetUniverseRacesParamsAcceptLanguageFr GetUniverseRacesParamsAcceptLanguage = "fr"
	GetUniverseRacesParamsAcceptLanguageJa GetUniverseRacesParamsAcceptLanguage = "ja"
	GetUniverseRacesParamsAcceptLanguageKo GetUniverseRacesParamsAcceptLanguage = "ko"
	GetUniverseRacesParamsAcceptLanguageRu GetUniverseRacesParamsAcceptLanguage = "ru"
	GetUniverseRacesParamsAcceptLanguageZh GetUniverseRacesParamsAcceptLanguage = "zh"
)

// Defines values for GetUniverseRegionsParamsAcceptLanguage.
const (
	GetUniverseRegionsParamsAcceptLanguageDe GetUniverseRegionsParamsAcceptLanguage = "de"
	GetUniverseRegionsParamsAcceptLanguageEn GetUniverseRegionsParamsAcceptLanguage = "en"
	GetUniverseRegionsParamsAcceptLanguageEs GetUniverseRegionsParamsAcceptLanguage = "es"
	GetUniverseRegionsParamsAcceptLanguageFr GetUniverseRegionsParamsAcceptLanguage = "fr"
	GetUniverseRegionsParamsAcceptLanguageJa GetUniverseRegionsParamsAcceptLanguage = "ja"
	GetUniverseRegionsParamsAcceptLanguageKo GetUniverseRegionsParamsAcceptLanguage = "ko"
	GetUniverseRegionsParamsAcceptLanguageRu GetUniverseRegionsParamsAcceptLanguage = "ru"
	GetUniverseRegionsParamsAcceptLanguageZh GetUniverseRegionsParamsAcceptLanguage = "zh"
)

// Defines values for GetUniverseRegionsRegionIDParamsAcceptLanguage.
const (
	GetUniverseRegionsRegionIDParamsAcceptLanguageDe GetUniverseRegionsRegionIDParamsAcceptLanguage = "de"
	GetUniverseRegionsRegionIDParamsAcceptLanguageEn GetUniverseRegionsRegionIDParamsAcceptLanguage = "en"
	GetUniverseRegionsRegionIDParamsAcceptLanguageEs GetUniverseRegionsRegionIDParamsAcceptLanguage = "es"
	GetUniverseRegionsRegionIDParamsAcceptLanguageFr GetUniverseRegionsRegionIDParamsAcceptLanguage = "fr"
	GetUniverseRegionsRegionIDParamsAcceptLanguageJa GetUniverseRegionsRegionIDParamsAcceptLanguage = "ja"
	GetUniverseRegionsRegionIDParamsAcceptLanguageKo GetUniverseRegionsRegionIDParamsAcceptLanguage = "ko"
	GetUniverseRegionsRegionIDParamsAcceptLanguageRu GetUniverseRegionsRegionIDParamsAcceptLanguage = "ru"
	GetUniverseRegionsRegionIDParamsAcceptLanguageZh GetUniverseRegionsRegionIDParamsAcceptLanguage = "zh"
)

// Defines values for GetUniverseSchematicsSchematicIDParamsAcceptLanguage.
const (
	GetUniverseSchematicsSchematicIDParamsAcceptLanguageDe GetUniverseSchematicsSchematicIDParamsAcceptLanguage = "de"
	GetUniverseSchematicsSchematicIDParamsAcceptLanguageEn GetUniverseSchematicsSchematicIDParamsAcceptLanguage = "en"
	GetUniverseSchematicsSchematicIDParamsAcceptLanguageEs GetUniverseSchematicsSchematicIDParamsAcceptLanguage = "es"
	GetUniverseSchematicsSchematicIDParamsAcceptLanguageFr GetUniverseSchematicsSchematicIDParamsAcceptLanguage = "fr"
	GetUniverseSchematicsSchematicIDParamsAcceptLanguageJa GetUniverseSchematicsSchematicIDParamsAcceptLanguage = "ja"
	GetUniverseSchematicsSchematicIDParamsAcceptLanguageKo GetUniverseSchematicsSchematicIDParamsAcceptLanguage = "ko"
	GetUniverseSchematicsSchematicIDParamsAcceptLanguageRu GetUniverseSchematicsSchematicIDParamsAcceptLanguage = "ru"
	GetUniverseSchematicsSchematicIDParamsAcceptLanguageZh GetUniverseSchematicsSchematicIDParamsAcceptLanguage = "zh"
)

// Defines values for GetUniverseStargatesStargateIDParamsAcceptLanguage.
const (
	GetUniverseStargatesStargateIDParamsAcceptLanguageDe GetUniverseStargatesStargateIDParamsAcceptLanguage = "de"
	GetUniverseStargatesStargateIDParamsAcceptLanguageEn GetUniverseStargatesStargateIDParamsAcceptLanguage = "en"
	GetUniverseStargatesStargateIDParamsAcceptLanguageEs GetUniverseStargatesStargateIDParamsAcceptLanguage = "es"
	GetUniverseStargatesStargateIDParamsAcceptLanguageFr GetUniverseStargatesStargateIDParamsAcceptLanguage = "fr"
	GetUniverseStargatesStargateIDParamsAcceptLanguageJa GetUniverseStargatesStargateIDParamsAcceptLanguage = "ja"
	GetUniverseStargatesStargateIDParamsAcceptLanguageKo GetUniverseStargatesStargateIDParamsAcceptLanguage = "ko"
	GetUniverseStargatesStargateIDParamsAcceptLanguageRu GetUniverseStargatesStargateIDParamsAcceptLanguage = "ru"
	GetUniverseStargatesStargateIDParamsAcceptLanguageZh GetUniverseStargatesStargateIDParamsAcceptLanguage = "zh"
)

// Defines values for GetUniverseStarsStarIDParamsAcceptLanguage.
const (
	GetUniverseStarsStarIDParamsAcceptLanguageDe GetUniverseStarsStarIDParamsAcceptLanguage = "de"
	GetUniverseStarsStarIDParamsAcceptLanguageEn GetUniverseStarsStarIDParamsAcceptLanguage = "en"
	GetUniverseStarsStarIDParamsAcceptLanguageEs GetUniverseStarsStarIDParamsAcceptLanguage = "es"
	GetUniverseStarsStarIDParamsAcceptLanguageFr GetUniverseStarsStarIDParamsAcceptLanguage = "fr"
	GetUniverseStarsStarIDParamsAcceptLanguageJa GetUniverseStarsStarIDParamsAcceptLanguage = "ja"
	GetUniverseStarsStarIDParamsAcceptLanguageKo GetUniverseStarsStarIDParamsAcceptLanguage = "ko"
	GetUniverseStarsStarIDParamsAcceptLanguageRu GetUniverseStarsStarIDParamsAcceptLanguage = "ru"
	GetUniverseStarsStarIDParamsAcceptLanguageZh GetUniverseStarsStarIDParamsAcceptLanguage = "zh"
)

// Defines values for GetUniverseStationsStationIDParamsAcceptLanguage.
const (
	GetUniverseStationsStationIDParamsAcceptLanguageDe GetUniverseStationsStationIDParamsAcceptLanguage = "de"
	GetUniverseStationsStationIDParamsAcceptLanguageEn GetUniverseStationsStationIDParamsAcceptLanguage = "en"
	GetUniverseStationsStationIDParamsAcceptLanguageEs GetUniverseStationsStationIDParamsAcceptLanguage = "es"
	GetUniverseStationsStationIDParamsAcceptLanguageFr GetUniverseStationsStationIDParamsAcceptLanguage = "fr"
	GetUniverseStationsStationIDParamsAcceptLanguageJa GetUniverseStationsStationIDParamsAcceptLanguage = "ja"
	GetUniverseStationsStationIDParamsAcceptLanguageKo GetUniverseStationsStationIDParamsAcceptLanguage = "ko"
	GetUniverseStationsStationIDParamsAcceptLanguageRu GetUniverseStationsStationIDParamsAcceptLanguage = "ru"
	GetUniverseStationsStationIDParamsAcceptLanguageZh GetUniverseStationsStationIDParamsAcceptLanguage = "zh"
)

// Defines values for GetUniverseStructuresParamsFilter.
const (
	GetUniverseStructuresParamsFilterManufacturingBasic GetUniverseStructuresParamsFilter = "manufacturing_basic"
	GetUniverseStructuresParamsFilterMarket             GetUniverseStructuresParamsFilter = "market"
)

// Defines values for GetUniverseStructuresParamsAcceptLanguage.
const (
	GetUniverseStructuresParamsAcceptLanguageDe GetUniverseStructuresParamsAcceptLanguage = "de"
	GetUniverseStructuresParamsAcceptLanguageEn GetUniverseStructuresParamsAcceptLanguage = "en"
	GetUniverseStructuresParamsAcceptLanguageEs GetUniverseStructuresParamsAcceptLanguage = "es"
	GetUniverseStructuresParamsAcceptLanguageFr GetUniverseStructuresParamsAcceptLanguage = "fr"
	GetUniverseStructuresParamsAcceptLanguageJa GetUniverseStructuresParamsAcceptLanguage = "ja"
	GetUniverseStructuresParamsAcceptLanguageKo GetUniverseStructuresParamsAcceptLanguage = "ko"
	GetUniverseStructuresParamsAcceptLanguageRu GetUniverseStructuresParamsAcceptLanguage = "ru"
	GetUniverseStructuresParamsAcceptLanguageZh GetUniverseStructuresParamsAcceptLanguage = "zh"
)

// Defines values for GetUniverseStructuresStructureIDParamsAcceptLanguage.
const (
	GetUniverseStructuresStructureIDParamsAcceptLanguageDe GetUniverseStructuresStructureIDParamsAcceptLanguage = "de"
	GetUniverseStructuresStructureIDParamsAcceptLanguageEn GetUniverseStructuresStructureIDParamsAcceptLanguage = "en"
	GetUniverseStructuresStructureIDParamsAcceptLanguageEs GetUniverseStructuresStructureIDParamsAcceptLanguage = "es"
	GetUniverseStructuresStructureIDParamsAcceptLanguageFr GetUniverseStructuresStructureIDParamsAcceptLanguage = "fr"
	GetUniverseStructuresStructureIDParamsAcceptLanguageJa GetUniverseStructuresStructureIDParamsAcceptLanguage = "ja"
	GetUniverseStructuresStructureIDParamsAcceptLanguageKo GetUniverseStructuresStructureIDParamsAcceptLanguage = "ko"
	GetUniverseStructuresStructureIDParamsAcceptLanguageRu GetUniverseStructuresStructureIDParamsAcceptLanguage = "ru"
	GetUniverseStructuresStructureIDParamsAcceptLanguageZh GetUniverseStructuresStructureIDParamsAcceptLanguage = "zh"
)

// Defines values for GetUniverseSystemJumpsParamsAcceptLanguage.
const (
	GetUniverseSystemJumpsParamsAcceptLanguageDe GetUniverseSystemJumpsParamsAcceptLanguage = "de"
	GetUniverseSystemJumpsParamsAcceptLanguageEn GetUniverseSystemJumpsParamsAcceptLanguage = "en"
	GetUniverseSystemJumpsParamsAcceptLanguageEs GetUniverseSystemJumpsParamsAcceptLanguage = "es"
	GetUniverseSystemJumpsParamsAcceptLanguageFr GetUniverseSystemJumpsParamsAcceptLanguage = "fr"
	GetUniverseSystemJumpsParamsAcceptLanguageJa GetUniverseSystemJumpsParamsAcceptLanguage = "ja"
	GetUniverseSystemJumpsParamsAcceptLanguageKo GetUniverseSystemJumpsParamsAcceptLanguage = "ko"
	GetUniverseSystemJumpsParamsAcceptLanguageRu GetUniverseSystemJumpsParamsAcceptLanguage = "ru"
	GetUniverseSystemJumpsParamsAcceptLanguageZh GetUniverseSystemJumpsParamsAcceptLanguage = "zh"
)

// Defines values for GetUniverseSystemKillsParamsAcceptLanguage.
const (
	GetUniverseSystemKillsParamsAcceptLanguageDe GetUniverseSystemKillsParamsAcceptLanguage = "de"
	GetUniverseSystemKillsParamsAcceptLanguageEn GetUniverseSystemKillsParamsAcceptLanguage = "en"
	GetUniverseSystemKillsParamsAcceptLanguageEs GetUniverseSystemKillsParamsAcceptLanguage = "es"
	GetUniverseSystemKillsParamsAcceptLanguageFr GetUniverseSystemKillsParamsAcceptLanguage = "fr"
	GetUniverseSystemKillsParamsAcceptLanguageJa GetUniverseSystemKillsParamsAcceptLanguage = "ja"
	GetUniverseSystemKillsParamsAcceptLanguageKo GetUniverseSystemKillsParamsAcceptLanguage = "ko"
	GetUniverseSystemKillsParamsAcceptLanguageRu GetUniverseSystemKillsParamsAcceptLanguage = "ru"
	GetUniverseSystemKillsParamsAcceptLanguageZh GetUniverseSystemKillsParamsAcceptLanguage = "zh"
)

// Defines values for GetUniverseSystemsParamsAcceptLanguage.
const (
	GetUniverseSystemsParamsAcceptLanguageDe GetUniverseSystemsParamsAcceptLanguage = "de"
	GetUniverseSystemsParamsAcceptLanguageEn GetUniverseSystemsParamsAcceptLanguage = "en"
	GetUniverseSystemsParamsAcceptLanguageEs GetUniverseSystemsParamsAcceptLanguage = "es"
	GetUniverseSystemsParamsAcceptLanguageFr GetUniverseSystemsParamsAcceptLanguage = "fr"
	GetUniverseSystemsParamsAcceptLanguageJa GetUniverseSystemsParamsAcceptLanguage = "ja"
	GetUniverseSystemsParamsAcceptLanguageKo GetUniverseSystemsParamsAcceptLanguage = "ko"
	GetUniverseSystemsParamsAcceptLanguageRu GetUniverseSystemsParamsAcceptLanguage = "ru"
	GetUniverseSystemsParamsAcceptLanguageZh GetUniverseSystemsParamsAcceptLanguage = "zh"
)

// Defines values for GetUniverseSystemsSystemIDParamsAcceptLanguage.
const (
	GetUniverseSystemsSystemIDParamsAcceptLanguageDe GetUniverseSystemsSystemIDParamsAcceptLanguage = "de"
	GetUniverseSystemsSystemIDParamsAcceptLanguageEn GetUniverseSystemsSystemIDParamsAcceptLanguage = "en"
	GetUniverseSystemsSystemIDParamsAcceptLanguageEs GetUniverseSystemsSystemIDParamsAcceptLanguage = "es"
	GetUniverseSystemsSystemIDParamsAcceptLanguageFr GetUniverseSystemsSystemIDParamsAcceptLanguage = "fr"
	GetUniverseSystemsSystemIDParamsAcceptLanguageJa GetUniverseSystemsSystemIDParamsAcceptLanguage = "ja"
	GetUniverseSystemsSystemIDParamsAcceptLanguageKo GetUniverseSystemsSystemIDParamsAcceptLanguage = "ko"
	GetUniverseSystemsSystemIDParamsAcceptLanguageRu GetUniverseSystemsSystemIDParamsAcceptLanguage = "ru"
	GetUniverseSystemsSystemIDParamsAcceptLanguageZh GetUniverseSystemsSystemIDParamsAcceptLanguage = "zh"
)

// Defines values for GetUniverseTypesParamsAcceptLanguage.
const (
	GetUniverseTypesParamsAcceptLanguageDe GetUniverseTypesParamsAcceptLanguage = "de"
	GetUniverseTypesParamsAcceptLanguageEn GetUniverseTypesParamsAcceptLanguage = "en"
	GetUniverseTypesParamsAcceptLanguageEs GetUniverseTypesParamsAcceptLanguage = "es"
	GetUniverseTypesParamsAcceptLanguageFr GetUniverseTypesParamsAcceptLanguage = "fr"
	GetUniverseTypesParamsAcceptLanguageJa GetUniverseTypesParamsAcceptLanguage = "ja"
	GetUniverseTypesParamsAcceptLanguageKo GetUniverseTypesParamsAcceptLanguage = "ko"
	GetUniverseTypesParamsAcceptLanguageRu GetUniverseTypesParamsAcceptLanguage = "ru"
	GetUniverseTypesParamsAcceptLanguageZh GetUniverseTypesParamsAcceptLanguage = "zh"
)

// Defines values for GetUniverseTypesTypeIDParamsAcceptLanguage.
const (
	GetUniverseTypesTypeIDParamsAcceptLanguageDe GetUniverseTypesTypeIDParamsAcceptLanguage = "de"
	GetUniverseTypesTypeIDParamsAcceptLanguageEn GetUniverseTypesTypeIDParamsAcceptLanguage = "en"
	GetUniverseTypesTypeIDParamsAcceptLanguageEs GetUniverseTypesTypeIDParamsAcceptLanguage = "es"
	GetUniverseTypesTypeIDParamsAcceptLanguageFr GetUniverseTypesTypeIDParamsAcceptLanguage = "fr"
	GetUniverseTypesTypeIDParamsAcceptLanguageJa GetUniverseTypesTypeIDParamsAcceptLanguage = "ja"
	GetUniverseTypesTypeIDParamsAcceptLanguageKo GetUniverseTypesTypeIDParamsAcceptLanguage = "ko"
	GetUniverseTypesTypeIDParamsAcceptLanguageRu GetUniverseTypesTypeIDParamsAcceptLanguage = "ru"
	GetUniverseTypesTypeIDParamsAcceptLanguageZh GetUniverseTypesTypeIDParamsAcceptLanguage = "zh"
)

// Defines values for GetWarsParamsAcceptLanguage.
const (
	GetWarsParamsAcceptLanguageDe GetWarsParamsAcceptLanguage = "de"
	GetWarsParamsAcceptLanguageEn GetWarsParamsAcceptLanguage = "en"
	GetWarsParamsAcceptLanguageEs GetWarsParamsAcceptLanguage = "es"
	GetWarsParamsAcceptLanguageFr GetWarsParamsAcceptLanguage = "fr"
	GetWarsParamsAcceptLanguageJa GetWarsParamsAcceptLanguage = "ja"
	GetWarsParamsAcceptLanguageKo GetWarsParamsAcceptLanguage = "ko"
	GetWarsParamsAcceptLanguageRu GetWarsParamsAcceptLanguage = "ru"
	GetWarsParamsAcceptLanguageZh GetWarsParamsAcceptLanguage = "zh"
)

// Defines values for GetWarsWarIDParamsAcceptLanguage.
const (
	GetWarsWarIDParamsAcceptLanguageDe GetWarsWarIDParamsAcceptLanguage = "de"
	GetWarsWarIDParamsAcceptLanguageEn GetWarsWarIDParamsAcceptLanguage = "en"
	GetWarsWarIDParamsAcceptLanguageEs GetWarsWarIDParamsAcceptLanguage = "es"
	GetWarsWarIDParamsAcceptLanguageFr GetWarsWarIDParamsAcceptLanguage = "fr"
	GetWarsWarIDParamsAcceptLanguageJa GetWarsWarIDParamsAcceptLanguage = "ja"
	GetWarsWarIDParamsAcceptLanguageKo GetWarsWarIDParamsAcceptLanguage = "ko"
	GetWarsWarIDParamsAcceptLanguageRu GetWarsWarIDParamsAcceptLanguage = "ru"
	GetWarsWarIDParamsAcceptLanguageZh GetWarsWarIDParamsAcceptLanguage = "zh"
)

// Defines values for GetWarsWarIDKillmailsParamsAcceptLanguage.
const (
	GetWarsWarIDKillmailsParamsAcceptLanguageDe GetWarsWarIDKillmailsParamsAcceptLanguage = "de"
	GetWarsWarIDKillmailsParamsAcceptLanguageEn GetWarsWarIDKillmailsParamsAcceptLanguage = "en"
	GetWarsWarIDKillmailsParamsAcceptLanguageEs GetWarsWarIDKillmailsParamsAcceptLanguage = "es"
	GetWarsWarIDKillmailsParamsAcceptLanguageFr GetWarsWarIDKillmailsParamsAcceptLanguage = "fr"
	GetWarsWarIDKillmailsParamsAcceptLanguageJa GetWarsWarIDKillmailsParamsAcceptLanguage = "ja"
	GetWarsWarIDKillmailsParamsAcceptLanguageKo GetWarsWarIDKillmailsParamsAcceptLanguage = "ko"
	GetWarsWarIDKillmailsParamsAcceptLanguageRu GetWarsWarIDKillmailsParamsAcceptLanguage = "ru"
	GetWarsWarIDKillmailsParamsAcceptLanguageZh GetWarsWarIDKillmailsParamsAcceptLanguage = "zh"
)

// AllianceID defines model for AllianceID.
type AllianceID = int64

// AlliancesAllianceIDContactsGet defines model for AlliancesAllianceIdContactsGet.
type AlliancesAllianceIDContactsGet = []struct {
	ContactID   int64                                     `json:"contact_id"`
	ContactType AlliancesAllianceIDContactsGetContactType `json:"contact_type"`
	LabelIds    *[]int64                                  `json:"label_ids,omitempty"`

	// Standing Standing of the contact
	Standing float64 `json:"standing"`
}

// AlliancesAllianceIDContactsGetContactType defines model for AlliancesAllianceIDContactsGet.ContactType.
type AlliancesAllianceIDContactsGetContactType string

// AlliancesAllianceIDContactsLabelsGet defines model for AlliancesAllianceIdContactsLabelsGet.
type AlliancesAllianceIDContactsLabelsGet = []struct {
	LabelID   int64  `json:"label_id"`
	LabelName string `json:"label_name"`
}

// AlliancesAllianceIDCorporationsGet defines model for AlliancesAllianceIdCorporationsGet.
type AlliancesAllianceIDCorporationsGet = []int64

// AlliancesAllianceIDGet defines model for AlliancesAllianceIdGet.
type AlliancesAllianceIDGet struct {
	// CreatorCorporationID ID of the corporation that created the alliance
	CreatorCorporationID int64 `json:"creator_corporation_id"`

	// CreatorID ID of the character that created the alliance
	CreatorID   int64     `json:"creator_id"`
	DateFounded time.Time `json:"date_founded"`

	// ExecutorCorporationID the executor corporation ID, if this alliance is not closed
	ExecutorCorporationID *int64 `json:"executor_corporation_id,omitempty"`

	// FactionID Faction ID this alliance is fighting for, if this alliance is enlisted in factional warfare
	FactionID *int64 `json:"faction_id,omitempty"`

	// Name the full name of the alliance
	Name string `json:"name"`

	// Ticker the short name of the alliance
	Ticker string `json:"ticker"`
}

// AlliancesAllianceIDIconsGet defines model for AlliancesAllianceIdIconsGet.
type AlliancesAllianceIDIconsGet struct {
	Px128X128 *string `json:"px128x128,omitempty"`
	Px64X64   *string `json:"px64x64,omitempty"`
}

// AlliancesGet defines model for AlliancesGet.
type AlliancesGet = []int64

// CharacterID defines model for CharacterID.
type CharacterID = int64

// CharactersAffiliationPost defines model for CharactersAffiliationPost.
type CharactersAffiliationPost = []struct {
	// AllianceID The character's alliance ID, if their corporation is in an alliance
	AllianceID *int64 `json:"alliance_id,omitempty"`

	// CharacterID The character's ID
	CharacterID int64 `json:"character_id"`

	// CorporationID The character's corporation ID
	CorporationID int64 `json:"corporation_id"`

	// FactionID The character's faction ID, if their corporation is in a faction
	FactionID *int64 `json:"faction_id,omitempty"`
}

// CharactersCharacterIDAgentsResearchGet defines model for CharactersCharacterIdAgentsResearchGet.
type CharactersCharacterIDAgentsResearchGet = []struct {
	AgentID         int64     `json:"agent_id"`
	PointsPerDay    float64   `json:"points_per_day"`
	RemainderPoints float64   `json:"remainder_points"`
	SkillTypeID     int64     `json:"skill_type_id"`
	StartedAt       time.Time `json:"started_at"`
}

// CharactersCharacterIDAssetsGet defines model for CharactersCharacterIdAssetsGet.
type CharactersCharacterIDAssetsGet = []struct {
	IsBlueprintCopy *bool                                      `json:"is_blueprint_copy,omitempty"`
	IsSingleton     bool                                       `json:"is_singleton"`
	ItemID          int64                                      `json:"item_id"`
	LocationFlag    CharactersCharacterIDAssetsGetLocationFlag `json:"location_flag"`
	LocationID      int64                                      `json:"location_id"`
	LocationType    CharactersCharacterIDAssetsGetLocationType `json:"location_type"`
	Quantity        int64                                      `json:"quantity"`
	TypeID          int64                                      `json:"type_id"`
}

// CharactersCharacterIDAssetsGetLocationFlag defines model for CharactersCharacterIDAssetsGet.LocationFlag.
type CharactersCharacterIDAssetsGetLocationFlag string

// CharactersCharacterIDAssetsGetLocationType defines model for CharactersCharacterIDAssetsGet.LocationType.
type CharactersCharacterIDAssetsGetLocationType string

// CharactersCharacterIDAssetsLocationsPost defines model for CharactersCharacterIdAssetsLocationsPost.
type CharactersCharacterIDAssetsLocationsPost = []struct {
	ItemID   int64 `json:"item_id"`
	Position struct {
		X float64 `json:"x"`
		Y float64 `json:"y"`
		Z float64 `json:"z"`
	} `json:"position"`
}

// CharactersCharacterIDAssetsNamesPost defines model for CharactersCharacterIdAssetsNamesPost.
type CharactersCharacterIDAssetsNamesPost = []struct {
	ItemID int64  `json:"item_id"`
	Name   string `json:"name"`
}

// CharactersCharacterIDAttributesGet defines model for CharactersCharacterIdAttributesGet.
type CharactersCharacterIDAttributesGet struct {
	// AccruedRemapCooldownDate Neural remapping cooldown after a character uses remap accrued over time
	AccruedRemapCooldownDate *time.Time `json:"accrued_remap_cooldown_date,omitempty"`

	// BonusRemaps Number of available bonus character neural remaps
	BonusRemaps  *int64 `json:"bonus_remaps,omitempty"`
	Charisma     int64  `json:"charisma"`
	Intelligence int64  `json:"intelligence"`

	// LastRemapDate Datetime of last neural remap, including usage of bonus remaps
	LastRemapDate *time.Time `json:"last_remap_date,omitempty"`
	Memory        int64      `json:"memory"`
	Perception    int64      `json:"perception"`
	Willpower     int64      `json:"willpower"`
}

// CharactersCharacterIDBlueprintsGet defines model for CharactersCharacterIdBlueprintsGet.
type CharactersCharacterIDBlueprintsGet = []struct {
	// ItemID Unique ID for this item.
	ItemID int64 `json:"item_id"`

	// LocationFlag Type of the location_id
	LocationFlag CharactersCharacterIDBlueprintsGetLocationFlag `json:"location_flag"`

	// LocationID References a station, a ship or an item_id if this blueprint is located within a container. If the return value is an item_id, then the Character AssetList API must be queried to find the container using the given item_id to determine the correct location of the Blueprint.
	LocationID int64 `json:"location_id"`

	// MaterialEfficiency Material Efficiency Level of the blueprint.
	MaterialEfficiency int64 `json:"material_efficiency"`

	// Quantity A range of numbers with a minimum of -2 and no maximum value where -1 is an original and -2 is a copy. It can be a positive integer if it is a stack of blueprint originals fresh from the market (e.g. no activities performed on them yet).
	Quantity int64 `json:"quantity"`

	// Runs Number of runs remaining if the blueprint is a copy, -1 if it is an original.
	Runs int64 `json:"runs"`

	// TimeEfficiency Time Efficiency Level of the blueprint.
	TimeEfficiency int64 `json:"time_efficiency"`
	TypeID         int64 `json:"type_id"`
}

// CharactersCharacterIDBlueprintsGetLocationFlag Type of the location_id
type CharactersCharacterIDBlueprintsGetLocationFlag string

// CharactersCharacterIDCalendarEventIDAttendeesGet List of attendees for a given event
type CharactersCharacterIDCalendarEventIDAttendeesGet = []struct {
	CharacterID   *int64                                                         `json:"character_id,omitempty"`
	EventResponse *CharactersCharacterIDCalendarEventIDAttendeesGetEventResponse `json:"event_response,omitempty"`
}

// CharactersCharacterIDCalendarEventIDAttendeesGetEventResponse defines model for CharactersCharacterIDCalendarEventIDAttendeesGet.EventResponse.
type CharactersCharacterIDCalendarEventIDAttendeesGetEventResponse string

// CharactersCharacterIDCalendarEventIDGet Full details of a specific event
type CharactersCharacterIDCalendarEventIDGet struct {
	Date time.Time `json:"date"`

	// Duration Length in minutes
	Duration   int64                                            `json:"duration"`
	EventID    int64                                            `json:"event_id"`
	Importance int64                                            `json:"importance"`
	OwnerID    int64                                            `json:"owner_id"`
	OwnerName  string                                           `json:"owner_name"`
	OwnerType  CharactersCharacterIDCalendarEventIDGetOwnerType `json:"owner_type"`
	Response   string                                           `json:"response"`
	Text       string                                           `json:"text"`
	Title      string                                           `json:"title"`
}

// CharactersCharacterIDCalendarEventIDGetOwnerType defines model for CharactersCharacterIDCalendarEventIDGet.OwnerType.
type CharactersCharacterIDCalendarEventIDGetOwnerType string

// CharactersCharacterIDCalendarGet Up to 50 events from now or the event you requested
type CharactersCharacterIDCalendarGet = []struct {
	EventDate     *time.Time                                     `json:"event_date,omitempty"`
	EventID       *int64                                         `json:"event_id,omitempty"`
	EventResponse *CharactersCharacterIDCalendarGetEventResponse `json:"event_response,omitempty"`
	Importance    *int64                                         `json:"importance,omitempty"`
	Title         *string                                        `json:"title,omitempty"`
}

// CharactersCharacterIDCalendarGetEventResponse defines model for CharactersCharacterIDCalendarGet.EventResponse.
type CharactersCharacterIDCalendarGetEventResponse string

// CharactersCharacterIDClonesGet defines model for CharactersCharacterIdClonesGet.
type CharactersCharacterIDClonesGet struct {
	HomeLocation *struct {
		LocationID   *int64                                                  `json:"location_id,omitempty"`
		LocationType *CharactersCharacterIDClonesGetHomeLocationLocationType `json:"location_type,omitempty"`
	} `json:"home_location,omitempty"`
	JumpClones []struct {
		Implants     []int64                                              `json:"implants"`
		JumpCloneID  int64                                                `json:"jump_clone_id"`
		LocationID   int64                                                `json:"location_id"`
		LocationType CharactersCharacterIDClonesGetJumpClonesLocationType `json:"location_type"`
		Name         *string                                              `json:"name,omitempty"`
	} `json:"jump_clones"`
	LastCloneJumpDate     *time.Time `json:"last_clone_jump_date,omitempty"`
	LastStationChangeDate *time.Time `json:"last_station_change_date,omitempty"`
}

// CharactersCharacterIDClonesGetHomeLocationLocationType defines model for CharactersCharacterIDClonesGet.HomeLocation.LocationType.
type CharactersCharacterIDClonesGetHomeLocationLocationType string

// CharactersCharacterIDClonesGetJumpClonesLocationType defines model for CharactersCharacterIDClonesGet.JumpClones.LocationType.
type CharactersCharacterIDClonesGetJumpClonesLocationType string

// CharactersCharacterIDContactsGet defines model for CharactersCharacterIdContactsGet.
type CharactersCharacterIDContactsGet = []struct {
	ContactID   int64                                       `json:"contact_id"`
	ContactType CharactersCharacterIDContactsGetContactType `json:"contact_type"`

	// IsBlocked Whether this contact is in the blocked list. Note a missing value denotes unknown, not true or false
	IsBlocked *bool `json:"is_blocked,omitempty"`

	// IsWatched Whether this contact is being watched
	IsWatched *bool    `json:"is_watched,omitempty"`
	LabelIds  *[]int64 `json:"label_ids,omitempty"`

	// Standing Standing of the contact
	Standing float64 `json:"standing"`
}

// CharactersCharacterIDContactsGetContactType defines model for CharactersCharacterIDContactsGet.ContactType.
type CharactersCharacterIDContactsGetContactType string

// CharactersCharacterIDContactsLabelsGet defines model for CharactersCharacterIdContactsLabelsGet.
type CharactersCharacterIDContactsLabelsGet = []struct {
	LabelID   int64  `json:"label_id"`
	LabelName string `json:"label_name"`
}

// CharactersCharacterIDContactsPost 201 created array
type CharactersCharacterIDContactsPost = []int64

// CharactersCharacterIDContractsContractIDBidsGet defines model for CharactersCharacterIdContractsContractIdBidsGet.
type CharactersCharacterIDContractsContractIDBidsGet = []struct {
	// Amount The amount bid, in ISK
	Amount float64 `json:"amount"`

	// BidID Unique ID for the bid
	BidID int64 `json:"bid_id"`

	// BidderID Character ID of the bidder
	BidderID int64 `json:"bidder_id"`

	// DateBid Datetime when the bid was placed
	DateBid time.Time `json:"date_bid"`
}

// CharactersCharacterIDContractsContractIDItemsGet defines model for CharactersCharacterIdContractsContractIdItemsGet.
type CharactersCharacterIDContractsContractIDItemsGet = []struct {
	// IsIncluded true if the contract issuer has submitted this item with the contract, false if the isser is asking for this item in the contract
	IsIncluded  bool `json:"is_included"`
	IsSingleton bool `json:"is_singleton"`

	// Quantity Number of items in the stack
	Quantity int64 `json:"quantity"`

	// RawQuantity -1 indicates that the item is a singleton (non-stackable). If the item happens to be a Blueprint, -1 is an Original and -2 is a Blueprint Copy
	RawQuantity *int64 `json:"raw_quantity,omitempty"`

	// RecordID Unique ID for the item
	RecordID int64 `json:"record_id"`

	// TypeID Type ID for item
	TypeID int64 `json:"type_id"`
}

// CharactersCharacterIDContractsGet defines model for CharactersCharacterIdContractsGet.
type CharactersCharacterIDContractsGet = []struct {
	// AcceptorID Who will accept the contract
	AcceptorID int64 `json:"acceptor_id"`

	// AssigneeID ID to whom the contract is assigned, can be alliance, corporation or character ID
	AssigneeID int64 `json:"assignee_id"`

	// Availability To whom the contract is available
	Availability CharactersCharacterIDContractsGetAvailability `json:"availability"`

	// Buyout Buyout price (for Auctions only)
	Buyout *float64 `json:"buyout,omitempty"`

	// Collateral Collateral price (for Couriers only)
	Collateral *float64 `json:"collateral,omitempty"`
	ContractID int64    `json:"contract_id"`

	// DateAccepted Date of confirmation of contract
	DateAccepted *time.Time `json:"date_accepted,omitempty"`

	// DateCompleted Date of completed of contract
	DateCompleted *time.Time `json:"date_completed,omitempty"`

	// DateExpired Expiration date of the contract
	DateExpired time.Time `json:"date_expired"`

	// DateIssued Сreation date of the contract
	DateIssued time.Time `json:"date_issued"`

	// DaysToComplete Number of days to perform the contract
	DaysToComplete *int64 `json:"days_to_complete,omitempty"`

	// EndLocationID End location ID (for Couriers contract)
	EndLocationID *int64 `json:"end_location_id,omitempty"`

	// ForCorporation true if the contract was issued on behalf of the issuer's corporation
	ForCorporation bool `json:"for_corporation"`

	// IssuerCorporationID Character's corporation ID for the issuer
	IssuerCorporationID int64 `json:"issuer_corporation_id"`

	// IssuerID Character ID for the issuer
	IssuerID int64 `json:"issuer_id"`

	// Price Price of contract (for ItemsExchange and Auctions)
	Price *float64 `json:"price,omitempty"`

	// Reward Remuneration for contract (for Couriers only)
	Reward *float64 `json:"reward,omitempty"`

	// StartLocationID Start location ID (for Couriers contract)
	StartLocationID *int64 `json:"start_location_id,omitempty"`

	// Status Status of the the contract
	Status CharactersCharacterIDContractsGetStatus `json:"status"`

	// Title Title of the contract
	Title *string `json:"title,omitempty"`

	// Type Type of the contract
	Type CharactersCharacterIDContractsGetType `json:"type"`

	// Volume Volume of items in the contract
	Volume *float64 `json:"volume,omitempty"`
}

// CharactersCharacterIDContractsGetAvailability To whom the contract is available
type CharactersCharacterIDContractsGetAvailability string

// CharactersCharacterIDContractsGetStatus Status of the the contract
type CharactersCharacterIDContractsGetStatus string

// CharactersCharacterIDContractsGetType Type of the contract
type CharactersCharacterIDContractsGetType string

// CharactersCharacterIDCorporationhistoryGet defines model for CharactersCharacterIdCorporationhistoryGet.
type CharactersCharacterIDCorporationhistoryGet = []struct {
	CorporationID int64 `json:"corporation_id"`

	// IsDeleted True if the corporation has been deleted
	IsDeleted *bool `json:"is_deleted,omitempty"`

	// RecordID An incrementing ID that can be used to canonically establish order of records in cases where dates may be ambiguous
	RecordID  int64     `json:"record_id"`
	StartDate time.Time `json:"start_date"`
}

// CharactersCharacterIDCspaPost 201 created number
type CharactersCharacterIDCspaPost = float64

// CharactersCharacterIDFatigueGet defines model for CharactersCharacterIdFatigueGet.
type CharactersCharacterIDFatigueGet struct {
	// JumpFatigueExpireDate Character's jump fatigue expiry
	JumpFatigueExpireDate *time.Time `json:"jump_fatigue_expire_date,omitempty"`

	// LastJumpDate Character's last jump activation
	LastJumpDate *time.Time `json:"last_jump_date,omitempty"`

	// LastUpdateDate Character's last jump update
	LastUpdateDate *time.Time `json:"last_update_date,omitempty"`
}

// CharactersCharacterIDFittingsGet defines model for CharactersCharacterIdFittingsGet.
type CharactersCharacterIDFittingsGet = []struct {
	Description string `json:"description"`
	FittingID   int64  `json:"fitting_id"`
	Items       []struct {
		Flag     CharactersCharacterIDFittingsGetItemsFlag `json:"flag"`
		Quantity int64                                     `json:"quantity"`
		TypeID   int64                                     `json:"type_id"`
	} `json:"items"`
	Name       string `json:"name"`
	ShipTypeID int64  `json:"ship_type_id"`
}

// CharactersCharacterIDFittingsGetItemsFlag defines model for CharactersCharacterIDFittingsGet.Items.Flag.
type CharactersCharacterIDFittingsGetItemsFlag string

// CharactersCharacterIDFittingsPost 201 created object
type CharactersCharacterIDFittingsPost struct {
	FittingID int64 `json:"fitting_id"`
}

// CharactersCharacterIDFleetGet defines model for CharactersCharacterIdFleetGet.
type CharactersCharacterIDFleetGet struct {
	// FleetBossID Character ID of the current fleet boss
	FleetBossID int64 `json:"fleet_boss_id"`

	// FleetID The character's current fleet ID
	FleetID int64 `json:"fleet_id"`

	// Role Member’s role in fleet
	Role CharactersCharacterIDFleetGetRole `json:"role"`

	// SquadID ID of the squad the member is in. If not applicable, will be set to -1
	SquadID int64 `json:"squad_id"`

	// WingID ID of the wing the member is in. If not applicable, will be set to -1
	WingID int64 `json:"wing_id"`
}

// CharactersCharacterIDFleetGetRole Member’s role in fleet
type CharactersCharacterIDFleetGetRole string

// CharactersCharacterIDFwStatsGet defines model for CharactersCharacterIdFwStatsGet.
type CharactersCharacterIDFwStatsGet struct {
	// CurrentRank The given character's current faction rank
	CurrentRank *int64 `json:"current_rank,omitempty"`

	// EnlistedOn The enlistment date of the given character into faction warfare. Will not be included if character is not enlisted in faction warfare
	EnlistedOn *time.Time `json:"enlisted_on,omitempty"`

	// FactionID The faction the given character is enlisted to fight for. Will not be included if character is not enlisted in faction warfare
	FactionID *int64 `json:"faction_id,omitempty"`

	// HighestRank The given character's highest faction rank achieved
	HighestRank *int64 `json:"highest_rank,omitempty"`

	// Kills Summary of kills done by the given character against enemy factions
	Kills struct {
		// LastWeek Last week's total number of kills by a given character against enemy factions
		LastWeek int64 `json:"last_week"`

		// Total Total number of kills by a given character against enemy factions since the character enlisted
		Total int64 `json:"total"`

		// Yesterday Yesterday's total number of kills by a given character against enemy factions
		Yesterday int64 `json:"yesterday"`
	} `json:"kills"`

	// VictoryPoints Summary of victory points gained by the given character for the enlisted faction
	VictoryPoints struct {
		// LastWeek Last week's victory points gained by the given character
		LastWeek int64 `json:"last_week"`

		// Total Total victory points gained since the given character enlisted
		Total int64 `json:"total"`

		// Yesterday Yesterday's victory points gained by the given character
		Yesterday int64 `json:"yesterday"`
	} `json:"victory_points"`
}

// CharactersCharacterIDGet defines model for CharactersCharacterIdGet.
type CharactersCharacterIDGet struct {
	// AllianceID The character's alliance ID
	AllianceID *int64 `json:"alliance_id,omitempty"`

	// Birthday Creation date of the character
	Birthday    time.Time `json:"birthday"`
	BloodlineID int64     `json:"bloodline_id"`

	// CorporationID The character's corporation ID
	CorporationID int64   `json:"corporation_id"`
	Description   *string `json:"description,omitempty"`

	// FactionID ID of the faction the character is fighting for, if the character is enlisted in Factional Warfare
	FactionID      *int64                         `json:"faction_id,omitempty"`
	Gender         CharactersCharacterIDGetGender `json:"gender"`
	Name           string                         `json:"name"`
	RaceID         int64                          `json:"race_id"`
	SecurityStatus *float64                       `json:"security_status,omitempty"`

	// Title The individual title of the character
	Title *string `json:"title,omitempty"`
}

// CharactersCharacterIDGetGender defines model for CharactersCharacterIDGet.Gender.
type CharactersCharacterIDGetGender string

// CharactersCharacterIDImplantsGet defines model for CharactersCharacterIdImplantsGet.
type CharactersCharacterIDImplantsGet = []int64

// CharactersCharacterIDIndustryJobsGet defines model for CharactersCharacterIdIndustryJobsGet.
type CharactersCharacterIDIndustryJobsGet = []struct {
	// ActivityID Job activity ID
	ActivityID  int64 `json:"activity_id"`
	BlueprintID int64 `json:"blueprint_id"`

	// BlueprintLocationID Location ID of the location from which the blueprint was installed. Normally a station ID, but can also be an asset (e.g. container) or corporation facility
	BlueprintLocationID int64 `json:"blueprint_location_id"`
	BlueprintTypeID     int64 `json:"blueprint_type_id"`

	// CompletedCharacterID ID of the character which completed this job
	CompletedCharacterID *int64 `json:"completed_character_id,omitempty"`

	// CompletedDate Date and time when this job was completed
	CompletedDate *time.Time `json:"completed_date,omitempty"`

	// Cost The sume of job installation fee and industry facility tax
	Cost *float64 `json:"cost,omitempty"`

	// Duration Job duration in seconds
	Duration int64 `json:"duration"`

	// EndDate Date and time when this job finished
	EndDate time.Time `json:"end_date"`

	// FacilityID ID of the facility where this job is running
	FacilityID int64 `json:"facility_id"`

	// InstallerID ID of the character which installed this job
	InstallerID int64 `json:"installer_id"`

	// JobID Unique job ID
	JobID int64 `json:"job_id"`

	// LicensedRuns Number of runs blueprint is licensed for
	LicensedRuns *int64 `json:"licensed_runs,omitempty"`

	// OutputLocationID Location ID of the location to which the output of the job will be delivered. Normally a station ID, but can also be a corporation facility
	OutputLocationID int64 `json:"output_location_id"`

	// PauseDate Date and time when this job was paused (i.e. time when the facility where this job was installed went offline)
	PauseDate *time.Time `json:"pause_date,omitempty"`

	// Probability Chance of success for invention
	Probability *float64 `json:"probability,omitempty"`

	// ProductTypeID Type ID of product (manufactured, copied or invented)
	ProductTypeID *int64 `json:"product_type_id,omitempty"`

	// Runs Number of runs for a manufacturing job, or number of copies to make for a blueprint copy
	Runs int64 `json:"runs"`

	// StartDate Date and time when this job started
	StartDate time.Time `json:"start_date"`

	// StationID ID of the station where industry facility is located
	StationID int64                                      `json:"station_id"`
	Status    CharactersCharacterIDIndustryJobsGetStatus `json:"status"`

	// SuccessfulRuns Number of successful runs for this job. Equal to runs unless this is an invention job
	SuccessfulRuns *int64 `json:"successful_runs,omitempty"`
}

// CharactersCharacterIDIndustryJobsGetStatus defines model for CharactersCharacterIDIndustryJobsGet.Status.
type CharactersCharacterIDIndustryJobsGetStatus string

// CharactersCharacterIDKillmailsRecentGet defines model for CharactersCharacterIdKillmailsRecentGet.
type CharactersCharacterIDKillmailsRecentGet = []struct {
	// KillmailHash A hash of this killmail
	KillmailHash string `json:"killmail_hash"`

	// KillmailID ID of this killmail
	KillmailID int64 `json:"killmail_id"`
}

// CharactersCharacterIDLocationGet defines model for CharactersCharacterIdLocationGet.
type CharactersCharacterIDLocationGet struct {
	SolarSystemID int64  `json:"solar_system_id"`
	StationID     *int64 `json:"station_id,omitempty"`
	StructureID   *int64 `json:"structure_id,omitempty"`
}

// CharactersCharacterIDLoyaltyPointsGet defines model for CharactersCharacterIdLoyaltyPointsGet.
type CharactersCharacterIDLoyaltyPointsGet = []struct {
	CorporationID int64 `json:"corporation_id"`
	LoyaltyPoints int64 `json:"loyalty_points"`
}

// CharactersCharacterIDMailGet defines model for CharactersCharacterIdMailGet.
type CharactersCharacterIDMailGet = []struct {
	// From From whom the mail was sent
	From   *int64   `json:"from,omitempty"`
	IsRead *bool    `json:"is_read,omitempty"`
	Labels *[]int64 `json:"labels,omitempty"`
	MailID *int64   `json:"mail_id,omitempty"`

	// Recipients Recipients of the mail
	Recipients *[]struct {
		RecipientID   int64                                               `json:"recipient_id"`
		RecipientType CharactersCharacterIDMailGetRecipientsRecipientType `json:"recipient_type"`
	} `json:"recipients,omitempty"`

	// Subject Mail subject
	Subject *string `json:"subject,omitempty"`

	// Timestamp When the mail was sent
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// CharactersCharacterIDMailGetRecipientsRecipientType defines model for CharactersCharacterIDMailGet.Recipients.RecipientType.
type CharactersCharacterIDMailGetRecipientsRecipientType string

// CharactersCharacterIDMailLabelsGet defines model for CharactersCharacterIdMailLabelsGet.
type CharactersCharacterIDMailLabelsGet struct {
	Labels *[]struct {
		Color       *CharactersCharacterIDMailLabelsGetLabelsColor `json:"color,omitempty"`
		LabelID     *int64                                         `json:"label_id,omitempty"`
		Name        *string                                        `json:"name,omitempty"`
		UnreadCount *int64                                         `json:"unread_count,omitempty"`
	} `json:"labels,omitempty"`
	TotalUnreadCount *int64 `json:"total_unread_count,omitempty"`
}

// CharactersCharacterIDMailLabelsGetLabelsColor defines model for CharactersCharacterIDMailLabelsGet.Labels.Color.
type CharactersCharacterIDMailLabelsGetLabelsColor string

// CharactersCharacterIDMailLabelsPost Label ID
type CharactersCharacterIDMailLabelsPost = int64

// CharactersCharacterIDMailListsGet defines model for CharactersCharacterIdMailListsGet.
type CharactersCharacterIDMailListsGet = []struct {
	// MailingListID Mailing list ID
	MailingListID int64  `json:"mailing_list_id"`
	Name          string `json:"name"`
}

// CharactersCharacterIDMailMailIDGet defines model for CharactersCharacterIdMailMailIdGet.
type CharactersCharacterIDMailMailIDGet struct {
	// Body Mail's body
	Body *string `json:"body,omitempty"`

	// From From whom the mail was sent
	From *int64 `json:"from,omitempty"`

	// Labels Labels attached to the mail
	Labels *[]int64 `json:"labels,omitempty"`

	// Read Whether the mail is flagged as read
	Read *bool `json:"read,omitempty"`

	// Recipients Recipients of the mail
	Recipients *[]struct {
		RecipientID   int64                                                     `json:"recipient_id"`
		RecipientType CharactersCharacterIDMailMailIDGetRecipientsRecipientType `json:"recipient_type"`
	} `json:"recipients,omitempty"`

	// Subject Mail subject
	Subject *string `json:"subject,omitempty"`

	// Timestamp When the mail was sent
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// CharactersCharacterIDMailMailIDGetRecipientsRecipientType defines model for CharactersCharacterIDMailMailIDGet.Recipients.RecipientType.
type CharactersCharacterIDMailMailIDGetRecipientsRecipientType string

// CharactersCharacterIDMailPost Mail ID
type CharactersCharacterIDMailPost = int64

// CharactersCharacterIDMedalsGet defines model for CharactersCharacterIdMedalsGet.
type CharactersCharacterIDMedalsGet = []struct {
	CorporationID int64     `json:"corporation_id"`
	Date          time.Time `json:"date"`
	Description   string    `json:"description"`
	Graphics      []struct {
		Color   *int64 `json:"color,omitempty"`
		Graphic string `json:"graphic"`
		Layer   int64  `json:"layer"`
		Part    int64  `json:"part"`
	} `json:"graphics"`
	IssuerID int64                                `json:"issuer_id"`
	MedalID  int64                                `json:"medal_id"`
	Reason   string                               `json:"reason"`
	Status   CharactersCharacterIDMedalsGetStatus `json:"status"`
	Title    string                               `json:"title"`
}

// CharactersCharacterIDMedalsGetStatus defines model for CharactersCharacterIDMedalsGet.Status.
type CharactersCharacterIDMedalsGetStatus string

// CharactersCharacterIDMiningGet defines model for CharactersCharacterIdMiningGet.
type CharactersCharacterIDMiningGet = []struct {
	Date          openapi_types.Date `json:"date"`
	Quantity      int64              `json:"quantity"`
	SolarSystemID int64              `json:"solar_system_id"`
	TypeID        int64              `json:"type_id"`
}

// CharactersCharacterIDNotificationsContactsGet defines model for CharactersCharacterIdNotificationsContactsGet.
type CharactersCharacterIDNotificationsContactsGet = []struct {
	Message           string    `json:"message"`
	NotificationID    int64     `json:"notification_id"`
	SendDate          time.Time `json:"send_date"`
	SenderCharacterID int64     `json:"sender_character_id"`

	// StandingLevel A number representing the standing level the receiver has been added at by the sender. The standing levels are as follows: -10 -> Terrible | -5 -> Bad |  0 -> Neutral |  5 -> Good |  10 -> Excellent
	StandingLevel float64 `json:"standing_level"`
}

// CharactersCharacterIDNotificationsGet defines model for CharactersCharacterIdNotificationsGet.
type CharactersCharacterIDNotificationsGet = []struct {
	IsRead         *bool                                           `json:"is_read,omitempty"`
	NotificationID int64                                           `json:"notification_id"`
	SenderID       int64                                           `json:"sender_id"`
	SenderType     CharactersCharacterIDNotificationsGetSenderType `json:"sender_type"`
	Text           *string                                         `json:"text,omitempty"`
	Timestamp      time.Time                                       `json:"timestamp"`
	Type           CharactersCharacterIDNotificationsGetType       `json:"type"`
}

// CharactersCharacterIDNotificationsGetSenderType defines model for CharactersCharacterIDNotificationsGet.SenderType.
type CharactersCharacterIDNotificationsGetSenderType string

// CharactersCharacterIDNotificationsGetType defines model for CharactersCharacterIDNotificationsGet.Type.
type CharactersCharacterIDNotificationsGetType string

// CharactersCharacterIDOnlineGet defines model for CharactersCharacterIdOnlineGet.
type CharactersCharacterIDOnlineGet struct {
	// LastLogin Timestamp of the last login
	LastLogin *time.Time `json:"last_login,omitempty"`

	// LastLogout Timestamp of the last logout
	LastLogout *time.Time `json:"last_logout,omitempty"`

	// Logins Total number of times the character has logged in
	Logins *int64 `json:"logins,omitempty"`

	// Online If the character is online
	Online bool `json:"online"`
}

// CharactersCharacterIDOrdersGet defines model for CharactersCharacterIdOrdersGet.
type CharactersCharacterIDOrdersGet = []struct {
	// Duration Number of days for which order is valid (starting from the issued date). An order expires at time issued + duration
	Duration int64 `json:"duration"`

	// Escrow For buy orders, the amount of ISK in escrow
	Escrow *float64 `json:"escrow,omitempty"`

	// IsBuyOrder True if the order is a bid (buy) order
	IsBuyOrder *bool `json:"is_buy_order,omitempty"`

	// IsCorporation Signifies whether the buy/sell order was placed on behalf of a corporation.
	IsCorporation bool `json:"is_corporation"`

	// Issued Date and time when this order was issued
	Issued time.Time `json:"issued"`

	// LocationID ID of the location where order was placed
	LocationID int64 `json:"location_id"`

	// MinVolume For buy orders, the minimum quantity that will be accepted in a matching sell order
	MinVolume *int64 `json:"min_volume,omitempty"`

	// OrderID Unique order ID
	OrderID int64 `json:"order_id"`

	// Price Cost per unit for this order
	Price float64 `json:"price"`

	// Range Valid order range, numbers are ranges in jumps
	Range CharactersCharacterIDOrdersGetRange `json:"range"`

	// RegionID ID of the region where order was placed
	RegionID int64 `json:"region_id"`

	// TypeID The type ID of the item transacted in this order
	TypeID int64 `json:"type_id"`

	// VolumeRemain Quantity of items still required or offered
	VolumeRemain int64 `json:"volume_remain"`

	// VolumeTotal Quantity of items required or offered at time order was placed
	VolumeTotal int64 `json:"volume_total"`
}

// CharactersCharacterIDOrdersGetRange Valid order range, numbers are ranges in jumps
type CharactersCharacterIDOrdersGetRange string

// CharactersCharacterIDOrdersHistoryGet defines model for CharactersCharacterIdOrdersHistoryGet.
type CharactersCharacterIDOrdersHistoryGet = []struct {
	// Duration Number of days the order was valid for (starting from the issued date). An order expires at time issued + duration
	Duration int64 `json:"duration"`

	// Escrow For buy orders, the amount of ISK in escrow
	Escrow *float64 `json:"escrow,omitempty"`

	// IsBuyOrder True if the order is a bid (buy) order
	IsBuyOrder *bool `json:"is_buy_order,omitempty"`

	// IsCorporation Signifies whether the buy/sell order was placed on behalf of a corporation.
	IsCorporation bool `json:"is_corporation"`

	// Issued Date and time when this order was issued
	Issued time.Time `json:"issued"`

	// LocationID ID of the location where order was placed
	LocationID int64 `json:"location_id"`

	// MinVolume For buy orders, the minimum quantity that will be accepted in a matching sell order
	MinVolume *int64 `json:"min_volume,omitempty"`

	// OrderID Unique order ID
	OrderID int64 `json:"order_id"`

	// Price Cost per unit for this order
	Price float64 `json:"price"`

	// Range Valid order range, numbers are ranges in jumps
	Range CharactersCharacterIDOrdersHistoryGetRange `json:"range"`

	// RegionID ID of the region where order was placed
	RegionID int64 `json:"region_id"`

	// State Current order state
	State CharactersCharacterIDOrdersHistoryGetState `json:"state"`

	// TypeID The type ID of the item transacted in this order
	TypeID int64 `json:"type_id"`

	// VolumeRemain Quantity of items still required or offered
	VolumeRemain int64 `json:"volume_remain"`

	// VolumeTotal Quantity of items required or offered at time order was placed
	VolumeTotal int64 `json:"volume_total"`
}

// CharactersCharacterIDOrdersHistoryGetRange Valid order range, numbers are ranges in jumps
type CharactersCharacterIDOrdersHistoryGetRange string

// CharactersCharacterIDOrdersHistoryGetState Current order state
type CharactersCharacterIDOrdersHistoryGetState string

// CharactersCharacterIDPlanetsGet defines model for CharactersCharacterIdPlanetsGet.
type CharactersCharacterIDPlanetsGet = []struct {
	LastUpdate    time.Time                                 `json:"last_update"`
	NumPins       int64                                     `json:"num_pins"`
	OwnerID       int64                                     `json:"owner_id"`
	PlanetID      int64                                     `json:"planet_id"`
	PlanetType    CharactersCharacterIDPlanetsGetPlanetType `json:"planet_type"`
	SolarSystemID int64                                     `json:"solar_system_id"`
	UpgradeLevel  int64                                     `json:"upgrade_level"`
}

// CharactersCharacterIDPlanetsGetPlanetType defines model for CharactersCharacterIDPlanetsGet.PlanetType.
type CharactersCharacterIDPlanetsGetPlanetType string

// CharactersCharacterIDPlanetsPlanetIDGet defines model for CharactersCharacterIdPlanetsPlanetIdGet.
type CharactersCharacterIDPlanetsPlanetIDGet struct {
	Links []struct {
		DestinationPinID int64 `json:"destination_pin_id"`
		LinkLevel        int64 `json:"link_level"`
		SourcePinID      int64 `json:"source_pin_id"`
	} `json:"links"`
	Pins []struct {
		Contents *[]struct {
			Amount int64 `json:"amount"`
			TypeID int64 `json:"type_id"`
		} `json:"contents,omitempty"`
		ExpiryTime       *time.Time `json:"expiry_time,omitempty"`
		ExtractorDetails *struct {
			// CycleTime in seconds
			CycleTime  *int64   `json:"cycle_time,omitempty"`
			HeadRadius *float64 `json:"head_radius,omitempty"`
			Heads      []struct {
				HeadID    int64   `json:"head_id"`
				Latitude  float64 `json:"latitude"`
				Longitude float64 `json:"longitude"`
			} `json:"heads"`
			ProductTypeID *int64 `json:"product_type_id,omitempty"`
			QtyPerCycle   *int64 `json:"qty_per_cycle,omitempty"`
		} `json:"extractor_details,omitempty"`
		FactoryDetails *struct {
			SchematicID int64 `json:"schematic_id"`
		} `json:"factory_details,omitempty"`
		InstallTime    *time.Time `json:"install_time,omitempty"`
		LastCycleStart *time.Time `json:"last_cycle_start,omitempty"`
		Latitude       float64    `json:"latitude"`
		Longitude      float64    `json:"longitude"`
		PinID          int64      `json:"pin_id"`
		SchematicID    *int64     `json:"schematic_id,omitempty"`
		TypeID         int64      `json:"type_id"`
	} `json:"pins"`
	Routes []struct {
		ContentTypeID    int64   `json:"content_type_id"`
		DestinationPinID int64   `json:"destination_pin_id"`
		Quantity         float64 `json:"quantity"`
		RouteID          int64   `json:"route_id"`
		SourcePinID      int64   `json:"source_pin_id"`

		// Waypoints list of pin ID waypoints
		Waypoints *[]int64 `json:"waypoints,omitempty"`
	} `json:"routes"`
}

// CharactersCharacterIDPortraitGet defines model for CharactersCharacterIdPortraitGet.
type CharactersCharacterIDPortraitGet struct {
	Px128X128 *string `json:"px128x128,omitempty"`
	Px256X256 *string `json:"px256x256,omitempty"`
	Px512X512 *string `json:"px512x512,omitempty"`
	Px64X64   *string `json:"px64x64,omitempty"`
}

// CharactersCharacterIDRolesGet defines model for CharactersCharacterIdRolesGet.
type CharactersCharacterIDRolesGet struct {
	Roles        *[]CharactersCharacterIDRolesGetRoles        `json:"roles,omitempty"`
	RolesAtBase  *[]CharactersCharacterIDRolesGetRolesAtBase  `json:"roles_at_base,omitempty"`
	RolesAtHq    *[]CharactersCharacterIDRolesGetRolesAtHq    `json:"roles_at_hq,omitempty"`
	RolesAtOther *[]CharactersCharacterIDRolesGetRolesAtOther `json:"roles_at_other,omitempty"`
}

// CharactersCharacterIDRolesGetRoles role string
type CharactersCharacterIDRolesGetRoles string

// CharactersCharacterIDRolesGetRolesAtBase roles_at_base string
type CharactersCharacterIDRolesGetRolesAtBase string

// CharactersCharacterIDRolesGetRolesAtHq roles_at_hq string
type CharactersCharacterIDRolesGetRolesAtHq string

// CharactersCharacterIDRolesGetRolesAtOther roles_at_other string
type CharactersCharacterIDRolesGetRolesAtOther string

// CharactersCharacterIDSearchGet defines model for CharactersCharacterIdSearchGet.
type CharactersCharacterIDSearchGet struct {
	Agent         *[]int64 `json:"agent,omitempty"`
	Alliance      *[]int64 `json:"alliance,omitempty"`
	Character     *[]int64 `json:"character,omitempty"`
	Constellation *[]int64 `json:"constellation,omitempty"`
	Corporation   *[]int64 `json:"corporation,omitempty"`
	Faction       *[]int64 `json:"faction,omitempty"`
	InventoryType *[]int64 `json:"inventory_type,omitempty"`
	Region        *[]int64 `json:"region,omitempty"`
	SolarSystem   *[]int64 `json:"solar_system,omitempty"`
	Station       *[]int64 `json:"station,omitempty"`
	Structure     *[]int64 `json:"structure,omitempty"`
}

// CharactersCharacterIDShipGet defines model for CharactersCharacterIdShipGet.
type CharactersCharacterIDShipGet struct {
	// ShipItemID Item id's are unique to a ship and persist until it is repackaged. This value can be used to track repeated uses of a ship, or detect when a pilot changes into a different instance of the same ship type.
	ShipItemID int64  `json:"ship_item_id"`
	ShipName   string `json:"ship_name"`
	ShipTypeID int64  `json:"ship_type_id"`
}

// CharactersCharacterIDSkillqueueGet defines model for CharactersCharacterIdSkillqueueGet.
type CharactersCharacterIDSkillqueueGet = []struct {
	// FinishDate Date on which training of the skill will complete. Omitted if the skill queue is paused.
	FinishDate    *time.Time `json:"finish_date,omitempty"`
	FinishedLevel int64      `json:"finished_level"`
	LevelEndSp    *int64     `json:"level_end_sp,omitempty"`

	// LevelStartSp Amount of SP that was in the skill when it started training it's current level. Used to calculate % of current level complete.
	LevelStartSp    *int64     `json:"level_start_sp,omitempty"`
	QueuePosition   int64      `json:"queue_position"`
	SkillID         int64      `json:"skill_id"`
	StartDate       *time.Time `json:"start_date,omitempty"`
	TrainingStartSp *int64     `json:"training_start_sp,omitempty"`
}

// CharactersCharacterIDSkillsGet defines model for CharactersCharacterIdSkillsGet.
type CharactersCharacterIDSkillsGet struct {
	Skills []struct {
		ActiveSkillLevel   int64 `json:"active_skill_level"`
		SkillID            int64 `json:"skill_id"`
		SkillpointsInSkill int64 `json:"skillpoints_in_skill"`
		TrainedSkillLevel  int64 `json:"trained_skill_level"`
	} `json:"skills"`
	TotalSp int64 `json:"total_sp"`

	// UnallocatedSp Skill points available to be assigned
	UnallocatedSp *int64 `json:"unallocated_sp,omitempty"`
}

// CharactersCharacterIDStandingsGet defines model for CharactersCharacterIdStandingsGet.
type CharactersCharacterIDStandingsGet = []struct {
	FromID   int64                                     `json:"from_id"`
	FromType CharactersCharacterIDStandingsGetFromType `json:"from_type"`
	Standing float64                                   `json:"standing"`
}

// CharactersCharacterIDStandingsGetFromType defines model for CharactersCharacterIDStandingsGet.FromType.
type CharactersCharacterIDStandingsGetFromType string

// CharactersCharacterIDTitlesGet defines model for CharactersCharacterIdTitlesGet.
type CharactersCharacterIDTitlesGet = []struct {
	Name    *string `json:"name,omitempty"`
	TitleID *int64  `json:"title_id,omitempty"`
}

// CharactersCharacterIDWalletGet Wallet balance
type CharactersCharacterIDWalletGet = float64

// CharactersCharacterIDWalletJournalGet Wallet journal entries
type CharactersCharacterIDWalletJournalGet = []struct {
	// Amount The amount of ISK given or taken from the wallet as a result of the given transaction. Positive when ISK is deposited into the wallet and negative when ISK is withdrawn
	Amount *float64 `json:"amount,omitempty"`

	// Balance Wallet balance after transaction occurred
	Balance *float64 `json:"balance,omitempty"`

	// ContextID An ID that gives extra context to the particular transaction. Because of legacy reasons the context is completely different per ref_type and means different things. It is also possible to not have a context_id
	ContextID *int64 `json:"context_id,omitempty"`

	// ContextIDType The type of the given context_id if present
	ContextIDType *CharactersCharacterIDWalletJournalGetContextIDType `json:"context_id_type,omitempty"`

	// Date Date and time of transaction
	Date time.Time `json:"date"`

	// Description The reason for the transaction, mirrors what is seen in the client
	Description string `json:"description"`

	// FirstPartyID The id of the first party involved in the transaction. This attribute has no consistency and is different or non existant for particular ref_types. The description attribute will help make sense of what this attribute means. For more info about the given ID it can be dropped into the /universe/names/ ESI route to determine its type and name
	FirstPartyID *int64 `json:"first_party_id,omitempty"`

	// ID Unique journal reference ID
	ID int64 `json:"id"`

	// Reason The user stated reason for the transaction. Only applies to some ref_types
	Reason *string `json:"reason,omitempty"`

	// RefType "The transaction type for the given. transaction. Different transaction types will populate different attributes."
	RefType CharactersCharacterIDWalletJournalGetRefType `json:"ref_type"`

	// SecondPartyID The id of the second party involved in the transaction. This attribute has no consistency and is different or non existant for particular ref_types. The description attribute will help make sense of what this attribute means. For more info about the given ID it can be dropped into the /universe/names/ ESI route to determine its type and name
	SecondPartyID *int64 `json:"second_party_id,omitempty"`

	// Tax Tax amount received. Only applies to tax related transactions
	Tax *float64 `json:"tax,omitempty"`

	// TaxReceiverID The corporation ID receiving any tax paid. Only applies to tax related transactions
	TaxReceiverID *int64 `json:"tax_receiver_id,omitempty"`
}

// CharactersCharacterIDWalletJournalGetContextIDType The type of the given context_id if present
type CharactersCharacterIDWalletJournalGetContextIDType string

// CharactersCharacterIDWalletJournalGetRefType "The transaction type for the given. transaction. Different transaction types will populate different attributes."
type CharactersCharacterIDWalletJournalGetRefType string

// CharactersCharacterIDWalletTransactionsGet Wallet transactions
type CharactersCharacterIDWalletTransactionsGet = []struct {
	ClientID int64 `json:"client_id"`

	// Date Date and time of transaction
	Date         time.Time `json:"date"`
	IsBuy        bool      `json:"is_buy"`
	IsPersonal   bool      `json:"is_personal"`
	JournalRefID int64     `json:"journal_ref_id"`
	LocationID   int64     `json:"location_id"`
	Quantity     int64     `json:"quantity"`

	// TransactionID Unique transaction ID
	TransactionID int64 `json:"transaction_id"`
	TypeID        int64 `json:"type_id"`

	// UnitPrice Amount paid per unit
	UnitPrice float64 `json:"unit_price"`
}

// ContractsPublicBidsContractIDGet defines model for ContractsPublicBidsContractIdGet.
type ContractsPublicBidsContractIDGet = []struct {
	// Amount The amount bid, in ISK
	Amount float64 `json:"amount"`

	// BidID Unique ID for the bid
	BidID int64 `json:"bid_id"`

	// DateBid Datetime when the bid was placed
	DateBid time.Time `json:"date_bid"`
}

// ContractsPublicItemsContractIDGet defines model for ContractsPublicItemsContractIdGet.
type ContractsPublicItemsContractIDGet = []struct {
	IsBlueprintCopy *bool `json:"is_blueprint_copy,omitempty"`

	// IsIncluded true if the contract issuer has submitted this item with the contract, false if the isser is asking for this item in the contract
	IsIncluded bool `json:"is_included"`

	// ItemID Unique ID for the item being sold. Not present if item is being requested by contract rather than sold with contract
	ItemID *int64 `json:"item_id,omitempty"`

	// MaterialEfficiency Material Efficiency Level of the blueprint
	MaterialEfficiency *int64 `json:"material_efficiency,omitempty"`

	// Quantity Number of items in the stack
	Quantity int64 `json:"quantity"`

	// RecordID Unique ID for the item, used by the contract system
	RecordID int64 `json:"record_id"`

	// Runs Number of runs remaining if the blueprint is a copy, -1 if it is an original
	Runs *int64 `json:"runs,omitempty"`

	// TimeEfficiency Time Efficiency Level of the blueprint
	TimeEfficiency *int64 `json:"time_efficiency,omitempty"`

	// TypeID Type ID for item
	TypeID int64 `json:"type_id"`
}

// ContractsPublicRegionIDGet defines model for ContractsPublicRegionIdGet.
type ContractsPublicRegionIDGet = []struct {
	// Buyout Buyout price (for Auctions only)
	Buyout *float64 `json:"buyout,omitempty"`

	// Collateral Collateral price (for Couriers only)
	Collateral *float64 `json:"collateral,omitempty"`
	ContractID int64    `json:"contract_id"`

	// DateExpired Expiration date of the contract
	DateExpired time.Time `json:"date_expired"`

	// DateIssued Сreation date of the contract
	DateIssued time.Time `json:"date_issued"`

	// DaysToComplete Number of days to perform the contract
	DaysToComplete *int64 `json:"days_to_complete,omitempty"`

	// EndLocationID End location ID (for Couriers contract)
	EndLocationID *int64 `json:"end_location_id,omitempty"`

	// ForCorporation true if the contract was issued on behalf of the issuer's corporation
	ForCorporation *bool `json:"for_corporation,omitempty"`

	// IssuerCorporationID Character's corporation ID for the issuer
	IssuerCorporationID int64 `json:"issuer_corporation_id"`

	// IssuerID Character ID for the issuer
	IssuerID int64 `json:"issuer_id"`

	// Price Price of contract (for ItemsExchange and Auctions)
	Price *float64 `json:"price,omitempty"`

	// Reward Remuneration for contract (for Couriers only)
	Reward *float64 `json:"reward,omitempty"`

	// StartLocationID Start location ID (for Couriers contract)
	StartLocationID *int64 `json:"start_location_id,omitempty"`

	// Title Title of the contract
	Title *string `json:"title,omitempty"`

	// Type Type of the contract
	Type ContractsPublicRegionIDGetType `json:"type"`

	// Volume Volume of items in the contract
	Volume *float64 `json:"volume,omitempty"`
}

// ContractsPublicRegionIDGetType Type of the contract
type ContractsPublicRegionIDGetType string

// CorporationCorporationIDMiningExtractionsGet defines model for CorporationCorporationIdMiningExtractionsGet.
type CorporationCorporationIDMiningExtractionsGet = []struct {
	// ChunkArrivalTime The time at which the chunk being extracted will arrive and can be fractured by the moon mining drill.
	ChunkArrivalTime time.Time `json:"chunk_arrival_time"`

	// ExtractionStartTime The time at which the current extraction was initiated.
	ExtractionStartTime time.Time `json:"extraction_start_time"`
	MoonID              int64     `json:"moon_id"`

	// NaturalDecayTime The time at which the chunk being extracted will naturally fracture if it is not first fractured by the moon mining drill.
	NaturalDecayTime time.Time `json:"natural_decay_time"`
	StructureID      int64     `json:"structure_id"`
}

// CorporationCorporationIDMiningObserversGet defines model for CorporationCorporationIdMiningObserversGet.
type CorporationCorporationIDMiningObserversGet = []struct {
	LastUpdated openapi_types.Date `json:"last_updated"`

	// ObserverID The entity that was observing the asteroid field when it was mined.
	ObserverID int64 `json:"observer_id"`

	// ObserverType The category of the observing entity
	ObserverType CorporationCorporationIDMiningObserversGetObserverType `json:"observer_type"`
}

// CorporationCorporationIDMiningObserversGetObserverType The category of the observing entity
type CorporationCorporationIDMiningObserversGetObserverType string

// CorporationCorporationIDMiningObserversObserverIDGet defines model for CorporationCorporationIdMiningObserversObserverIdGet.
type CorporationCorporationIDMiningObserversObserverIDGet = []struct {
	// CharacterID The character that did the mining
	CharacterID int64              `json:"character_id"`
	LastUpdated openapi_types.Date `json:"last_updated"`
	Quantity    int64              `json:"quantity"`

	// RecordedCorporationID The corporation id of the character at the time data was recorded.
	RecordedCorporationID int64 `json:"recorded_corporation_id"`
	TypeID                int64 `json:"type_id"`
}

// CorporationID defines model for CorporationID.
type CorporationID = int64

// CorporationsCorporationIDAlliancehistoryGet defines model for CorporationsCorporationIdAlliancehistoryGet.
type CorporationsCorporationIDAlliancehistoryGet = []struct {
	AllianceID *int64 `json:"alliance_id,omitempty"`

	// IsDeleted True if the alliance has been closed
	IsDeleted *bool `json:"is_deleted,omitempty"`

	// RecordID An incrementing ID that can be used to canonically establish order of records in cases where dates may be ambiguous
	RecordID  int64     `json:"record_id"`
	StartDate time.Time `json:"start_date"`
}

// CorporationsCorporationIDAssetsGet defines model for CorporationsCorporationIdAssetsGet.
type CorporationsCorporationIDAssetsGet = []struct {
	IsBlueprintCopy *bool                                          `json:"is_blueprint_copy,omitempty"`
	IsSingleton     bool                                           `json:"is_singleton"`
	ItemID          int64                                          `json:"item_id"`
	LocationFlag    CorporationsCorporationIDAssetsGetLocationFlag `json:"location_flag"`
	LocationID      int64                                          `json:"location_id"`
	LocationType    CorporationsCorporationIDAssetsGetLocationType `json:"location_type"`
	Quantity        int64                                          `json:"quantity"`
	TypeID          int64                                          `json:"type_id"`
}

// CorporationsCorporationIDAssetsGetLocationFlag defines model for CorporationsCorporationIDAssetsGet.LocationFlag.
type CorporationsCorporationIDAssetsGetLocationFlag string

// CorporationsCorporationIDAssetsGetLocationType defines model for CorporationsCorporationIDAssetsGet.LocationType.
type CorporationsCorporationIDAssetsGetLocationType string

// CorporationsCorporationIDAssetsLocationsPost defines model for CorporationsCorporationIdAssetsLocationsPost.
type CorporationsCorporationIDAssetsLocationsPost = []struct {
	ItemID   int64 `json:"item_id"`
	Position struct {
		X float64 `json:"x"`
		Y float64 `json:"y"`
		Z float64 `json:"z"`
	} `json:"position"`
}

// CorporationsCorporationIDAssetsNamesPost defines model for CorporationsCorporationIdAssetsNamesPost.
type CorporationsCorporationIDAssetsNamesPost = []struct {
	ItemID int64  `json:"item_id"`
	Name   string `json:"name"`
}

// CorporationsCorporationIDBlueprintsGet defines model for CorporationsCorporationIdBlueprintsGet.
type CorporationsCorporationIDBlueprintsGet = []struct {
	// ItemID Unique ID for this item.
	ItemID int64 `json:"item_id"`

	// LocationFlag Type of the location_id
	LocationFlag CorporationsCorporationIDBlueprintsGetLocationFlag `json:"location_flag"`

	// LocationID References a station, a ship or an item_id if this blueprint is located within a container.
	LocationID int64 `json:"location_id"`

	// MaterialEfficiency Material Efficiency Level of the blueprint.
	MaterialEfficiency int64 `json:"material_efficiency"`

	// Quantity A range of numbers with a minimum of -2 and no maximum value where -1 is an original and -2 is a copy. It can be a positive integer if it is a stack of blueprint originals fresh from the market (e.g. no activities performed on them yet).
	Quantity int64 `json:"quantity"`

	// Runs Number of runs remaining if the blueprint is a copy, -1 if it is an original.
	Runs int64 `json:"runs"`

	// TimeEfficiency Time Efficiency Level of the blueprint.
	TimeEfficiency int64 `json:"time_efficiency"`
	TypeID         int64 `json:"type_id"`
}

// CorporationsCorporationIDBlueprintsGetLocationFlag Type of the location_id
type CorporationsCorporationIDBlueprintsGetLocationFlag string

// CorporationsCorporationIDContactsGet defines model for CorporationsCorporationIdContactsGet.
type CorporationsCorporationIDContactsGet = []struct {
	ContactID   int64                                           `json:"contact_id"`
	ContactType CorporationsCorporationIDContactsGetContactType `json:"contact_type"`

	// IsWatched Whether this contact is being watched
	IsWatched *bool    `json:"is_watched,omitempty"`
	LabelIds  *[]int64 `json:"label_ids,omitempty"`

	// Standing Standing of the contact
	Standing float64 `json:"standing"`
}

// CorporationsCorporationIDContactsGetContactType defines model for CorporationsCorporationIDContactsGet.ContactType.
type CorporationsCorporationIDContactsGetContactType string

// CorporationsCorporationIDContactsLabelsGet defines model for CorporationsCorporationIdContactsLabelsGet.
type CorporationsCorporationIDContactsLabelsGet = []struct {
	LabelID   int64  `json:"label_id"`
	LabelName string `json:"label_name"`
}

// CorporationsCorporationIDContainersLogsGet defines model for CorporationsCorporationIdContainersLogsGet.
type CorporationsCorporationIDContainersLogsGet = []struct {
	Action CorporationsCorporationIDContainersLogsGetAction `json:"action"`

	// CharacterID ID of the character who performed the action.
	CharacterID int64 `json:"character_id"`

	// ContainerID ID of the container
	ContainerID int64 `json:"container_id"`

	// ContainerTypeID Type ID of the container
	ContainerTypeID int64                                                  `json:"container_type_id"`
	LocationFlag    CorporationsCorporationIDContainersLogsGetLocationFlag `json:"location_flag"`
	LocationID      int64                                                  `json:"location_id"`

	// LoggedAt Timestamp when this log was created
	LoggedAt         time.Time `json:"logged_at"`
	NewConfigBitmask *int64    `json:"new_config_bitmask,omitempty"`
	OldConfigBitmask *int64    `json:"old_config_bitmask,omitempty"`

	// PasswordType Type of password set if action is of type SetPassword or EnterPassword
	PasswordType *CorporationsCorporationIDContainersLogsGetPasswordType `json:"password_type,omitempty"`

	// Quantity Quantity of the item being acted upon
	Quantity *int64 `json:"quantity,omitempty"`

	// TypeID Type ID of the item being acted upon
	TypeID *int64 `json:"type_id,omitempty"`
}

// CorporationsCorporationIDContainersLogsGetAction defines model for CorporationsCorporationIDContainersLogsGet.Action.
type CorporationsCorporationIDContainersLogsGetAction string

// CorporationsCorporationIDContainersLogsGetLocationFlag defines model for CorporationsCorporationIDContainersLogsGet.LocationFlag.
type CorporationsCorporationIDContainersLogsGetLocationFlag string

// CorporationsCorporationIDContainersLogsGetPasswordType Type of password set if action is of type SetPassword or EnterPassword
type CorporationsCorporationIDContainersLogsGetPasswordType string

// CorporationsCorporationIDContractsContractIDBidsGet defines model for CorporationsCorporationIdContractsContractIdBidsGet.
type CorporationsCorporationIDContractsContractIDBidsGet = []struct {
	// Amount The amount bid, in ISK
	Amount float64 `json:"amount"`

	// BidID Unique ID for the bid
	BidID int64 `json:"bid_id"`

	// BidderID Character ID of the bidder
	BidderID int64 `json:"bidder_id"`

	// DateBid Datetime when the bid was placed
	DateBid time.Time `json:"date_bid"`
}

// CorporationsCorporationIDContractsContractIDItemsGet defines model for CorporationsCorporationIdContractsContractIdItemsGet.
type CorporationsCorporationIDContractsContractIDItemsGet = []struct {
	// IsIncluded true if the contract issuer has submitted this item with the contract, false if the isser is asking for this item in the contract
	IsIncluded  bool `json:"is_included"`
	IsSingleton bool `json:"is_singleton"`

	// Quantity Number of items in the stack
	Quantity int64 `json:"quantity"`

	// RawQuantity -1 indicates that the item is a singleton (non-stackable). If the item happens to be a Blueprint, -1 is an Original and -2 is a Blueprint Copy
	RawQuantity *int64 `json:"raw_quantity,omitempty"`

	// RecordID Unique ID for the item
	RecordID int64 `json:"record_id"`

	// TypeID Type ID for item
	TypeID int64 `json:"type_id"`
}

// CorporationsCorporationIDContractsGet defines model for CorporationsCorporationIdContractsGet.
type CorporationsCorporationIDContractsGet = []struct {
	// AcceptorID Who will accept the contract
	AcceptorID int64 `json:"acceptor_id"`

	// AssigneeID ID to whom the contract is assigned, can be corporation or character ID
	AssigneeID int64 `json:"assignee_id"`

	// Availability To whom the contract is available
	Availability CorporationsCorporationIDContractsGetAvailability `json:"availability"`

	// Buyout Buyout price (for Auctions only)
	Buyout *float64 `json:"buyout,omitempty"`

	// Collateral Collateral price (for Couriers only)
	Collateral *float64 `json:"collateral,omitempty"`
	ContractID int64    `json:"contract_id"`

	// DateAccepted Date of confirmation of contract
	DateAccepted *time.Time `json:"date_accepted,omitempty"`

	// DateCompleted Date of completed of contract
	DateCompleted *time.Time `json:"date_completed,omitempty"`

	// DateExpired Expiration date of the contract
	DateExpired time.Time `json:"date_expired"`

	// DateIssued Сreation date of the contract
	DateIssued time.Time `json:"date_issued"`

	// DaysToComplete Number of days to perform the contract
	DaysToComplete *int64 `json:"days_to_complete,omitempty"`

	// EndLocationID End location ID (for Couriers contract)
	EndLocationID *int64 `json:"end_location_id,omitempty"`

	// ForCorporation true if the contract was issued on behalf of the issuer's corporation
	ForCorporation bool `json:"for_corporation"`

	// IssuerCorporationID Character's corporation ID for the issuer
	IssuerCorporationID int64 `json:"issuer_corporation_id"`

	// IssuerID Character ID for the issuer
	IssuerID int64 `json:"issuer_id"`

	// Price Price of contract (for ItemsExchange and Auctions)
	Price *float64 `json:"price,omitempty"`

	// Reward Remuneration for contract (for Couriers only)
	Reward *float64 `json:"reward,omitempty"`

	// StartLocationID Start location ID (for Couriers contract)
	StartLocationID *int64 `json:"start_location_id,omitempty"`

	// Status Status of the the contract
	Status CorporationsCorporationIDContractsGetStatus `json:"status"`

	// Title Title of the contract
	Title *string `json:"title,omitempty"`

	// Type Type of the contract
	Type CorporationsCorporationIDContractsGetType `json:"type"`

	// Volume Volume of items in the contract
	Volume *float64 `json:"volume,omitempty"`
}

// CorporationsCorporationIDContractsGetAvailability To whom the contract is available
type CorporationsCorporationIDContractsGetAvailability string

// CorporationsCorporationIDContractsGetStatus Status of the the contract
type CorporationsCorporationIDContractsGetStatus string

// CorporationsCorporationIDContractsGetType Type of the contract
type CorporationsCorporationIDContractsGetType string

// CorporationsCorporationIDCustomsOfficesGet defines model for CorporationsCorporationIdCustomsOfficesGet.
type CorporationsCorporationIDCustomsOfficesGet = []struct {
	// AllianceTaxRate Only present if alliance access is allowed
	AllianceTaxRate *float64 `json:"alliance_tax_rate,omitempty"`

	// AllowAccessWithStandings standing_level and any standing related tax rate only present when this is true
	AllowAccessWithStandings bool     `json:"allow_access_with_standings"`
	AllowAllianceAccess      bool     `json:"allow_alliance_access"`
	BadStandingTaxRate       *float64 `json:"bad_standing_tax_rate,omitempty"`
	CorporationTaxRate       *float64 `json:"corporation_tax_rate,omitempty"`

	// ExcellentStandingTaxRate Tax rate for entities with excellent level of standing, only present if this level is allowed, same for all other standing related tax rates
	ExcellentStandingTaxRate *float64 `json:"excellent_standing_tax_rate,omitempty"`
	GoodStandingTaxRate      *float64 `json:"good_standing_tax_rate,omitempty"`
	NeutralStandingTaxRate   *float64 `json:"neutral_standing_tax_rate,omitempty"`

	// OfficeID unique ID of this customs office
	OfficeID         int64 `json:"office_id"`
	ReinforceExitEnd int64 `json:"reinforce_exit_end"`

	// ReinforceExitStart Together with reinforce_exit_end, marks a 2-hour period where this customs office could exit reinforcement mode during the day after initial attack
	ReinforceExitStart int64 `json:"reinforce_exit_start"`

	// StandingLevel Access is allowed only for entities with this level of standing or better
	StandingLevel *CorporationsCorporationIDCustomsOfficesGetStandingLevel `json:"standing_level,omitempty"`

	// SystemID ID of the solar system this customs office is located in
	SystemID                int64    `json:"system_id"`
	TerribleStandingTaxRate *float64 `json:"terrible_standing_tax_rate,omitempty"`
}

// CorporationsCorporationIDCustomsOfficesGetStandingLevel Access is allowed only for entities with this level of standing or better
type CorporationsCorporationIDCustomsOfficesGetStandingLevel string

// CorporationsCorporationIDDivisionsGet defines model for CorporationsCorporationIdDivisionsGet.
type CorporationsCorporationIDDivisionsGet struct {
	Hangar *[]struct {
		Division *int64  `json:"division,omitempty"`
		Name     *string `json:"name,omitempty"`
	} `json:"hangar,omitempty"`
	Wallet *[]struct {
		Division *int64  `json:"division,omitempty"`
		Name     *string `json:"name,omitempty"`
	} `json:"wallet,omitempty"`
}

// CorporationsCorporationIDFacilitiesGet defines model for CorporationsCorporationIdFacilitiesGet.
type CorporationsCorporationIDFacilitiesGet = []struct {
	FacilityID int64 `json:"facility_id"`
	SystemID   int64 `json:"system_id"`
	TypeID     int64 `json:"type_id"`
}

// CorporationsCorporationIDFwStatsGet defines model for CorporationsCorporationIdFwStatsGet.
type CorporationsCorporationIDFwStatsGet struct {
	// EnlistedOn The enlistment date of the given corporation into faction warfare. Will not be included if corporation is not enlisted in faction warfare
	EnlistedOn *time.Time `json:"enlisted_on,omitempty"`

	// FactionID The faction the given corporation is enlisted to fight for. Will not be included if corporation is not enlisted in faction warfare
	FactionID *int64 `json:"faction_id,omitempty"`

	// Kills Summary of kills done by the given corporation against enemy factions
	Kills struct {
		// LastWeek Last week's total number of kills by members of the given corporation against enemy factions
		LastWeek int64 `json:"last_week"`

		// Total Total number of kills by members of the given corporation against enemy factions since the corporation enlisted
		Total int64 `json:"total"`

		// Yesterday Yesterday's total number of kills by members of the given corporation against enemy factions
		Yesterday int64 `json:"yesterday"`
	} `json:"kills"`

	// Pilots How many pilots the enlisted corporation has. Will not be included if corporation is not enlisted in faction warfare
	Pilots *int64 `json:"pilots,omitempty"`

	// VictoryPoints Summary of victory points gained by the given corporation for the enlisted faction
	VictoryPoints struct {
		// LastWeek Last week's victory points gained by members of the given corporation
		LastWeek int64 `json:"last_week"`

		// Total Total victory points gained since the given corporation enlisted
		Total int64 `json:"total"`

		// Yesterday Yesterday's victory points gained by members of the given corporation
		Yesterday int64 `json:"yesterday"`
	} `json:"victory_points"`
}

// CorporationsCorporationIDGet defines model for CorporationsCorporationIdGet.
type CorporationsCorporationIDGet struct {
	// AllianceID ID of the alliance that corporation is a member of, if any
	AllianceID    *int64     `json:"alliance_id,omitempty"`
	CeoID         int64      `json:"ceo_id"`
	CreatorID     int64      `json:"creator_id"`
	DateFounded   *time.Time `json:"date_founded,omitempty"`
	Description   *string    `json:"description,omitempty"`
	FactionID     *int64     `json:"faction_id,omitempty"`
	HomeStationID *int64     `json:"home_station_id,omitempty"`
	MemberCount   int64      `json:"member_count"`

	// Name the full name of the corporation
	Name    string  `json:"name"`
	Shares  *int64  `json:"shares,omitempty"`
	TaxRate float64 `json:"tax_rate"`

	// Ticker the short name of the corporation
	Ticker      string  `json:"ticker"`
	URL         *string `json:"url,omitempty"`
	WarEligible *bool   `json:"war_eligible,omitempty"`
}

// CorporationsCorporationIDIconsGet defines model for CorporationsCorporationIdIconsGet.
type CorporationsCorporationIDIconsGet struct {
	Px128X128 *string `json:"px128x128,omitempty"`
	Px256X256 *string `json:"px256x256,omitempty"`
	Px64X64   *string `json:"px64x64,omitempty"`
}

// CorporationsCorporationIDIndustryJobsGet defines model for CorporationsCorporationIdIndustryJobsGet.
type CorporationsCorporationIDIndustryJobsGet = []struct {
	// ActivityID Job activity ID
	ActivityID  int64 `json:"activity_id"`
	BlueprintID int64 `json:"blueprint_id"`

	// BlueprintLocationID Location ID of the location from which the blueprint was installed. Normally a station ID, but can also be an asset (e.g. container) or corporation facility
	BlueprintLocationID int64 `json:"blueprint_location_id"`
	BlueprintTypeID     int64 `json:"blueprint_type_id"`

	// CompletedCharacterID ID of the character which completed this job
	CompletedCharacterID *int64 `json:"completed_character_id,omitempty"`

	// CompletedDate Date and time when this job was completed
	CompletedDate *time.Time `json:"completed_date,omitempty"`

	// Cost The sume of job installation fee and industry facility tax
	Cost *float64 `json:"cost,omitempty"`

	// Duration Job duration in seconds
	Duration int64 `json:"duration"`

	// EndDate Date and time when this job finished
	EndDate time.Time `json:"end_date"`

	// FacilityID ID of the facility where this job is running
	FacilityID int64 `json:"facility_id"`

	// InstallerID ID of the character which installed this job
	InstallerID int64 `json:"installer_id"`

	// JobID Unique job ID
	JobID int64 `json:"job_id"`

	// LicensedRuns Number of runs blueprint is licensed for
	LicensedRuns *int64 `json:"licensed_runs,omitempty"`

	// LocationID ID of the location for the industry facility
	LocationID int64 `json:"location_id"`

	// OutputLocationID Location ID of the location to which the output of the job will be delivered. Normally a station ID, but can also be a corporation facility
	OutputLocationID int64 `json:"output_location_id"`

	// PauseDate Date and time when this job was paused (i.e. time when the facility where this job was installed went offline)
	PauseDate *time.Time `json:"pause_date,omitempty"`

	// Probability Chance of success for invention
	Probability *float64 `json:"probability,omitempty"`

	// ProductTypeID Type ID of product (manufactured, copied or invented)
	ProductTypeID *int64 `json:"product_type_id,omitempty"`

	// Runs Number of runs for a manufacturing job, or number of copies to make for a blueprint copy
	Runs int64 `json:"runs"`

	// StartDate Date and time when this job started
	StartDate time.Time                                      `json:"start_date"`
	Status    CorporationsCorporationIDIndustryJobsGetStatus `json:"status"`

	// SuccessfulRuns Number of successful runs for this job. Equal to runs unless this is an invention job
	SuccessfulRuns *int64 `json:"successful_runs,omitempty"`
}

// CorporationsCorporationIDIndustryJobsGetStatus defines model for CorporationsCorporationIDIndustryJobsGet.Status.
type CorporationsCorporationIDIndustryJobsGetStatus string

// CorporationsCorporationIDKillmailsRecentGet defines model for CorporationsCorporationIdKillmailsRecentGet.
type CorporationsCorporationIDKillmailsRecentGet = []struct {
	// KillmailHash A hash of this killmail
	KillmailHash string `json:"killmail_hash"`

	// KillmailID ID of this killmail
	KillmailID int64 `json:"killmail_id"`
}

// CorporationsCorporationIDMedalsGet defines model for CorporationsCorporationIdMedalsGet.
type CorporationsCorporationIDMedalsGet = []struct {
	CreatedAt time.Time `json:"created_at"`

	// CreatorID ID of the character who created this medal
	CreatorID   int64  `json:"creator_id"`
	Description string `json:"description"`
	MedalID     int64  `json:"medal_id"`
	Title       string `json:"title"`
}

// CorporationsCorporationIDMedalsIssuedGet defines model for CorporationsCorporationIdMedalsIssuedGet.
type CorporationsCorporationIDMedalsIssuedGet = []struct {
	// CharacterID ID of the character who was rewarded this medal
	CharacterID int64     `json:"character_id"`
	IssuedAt    time.Time `json:"issued_at"`

	// IssuerID ID of the character who issued the medal
	IssuerID int64                                          `json:"issuer_id"`
	MedalID  int64                                          `json:"medal_id"`
	Reason   string                                         `json:"reason"`
	Status   CorporationsCorporationIDMedalsIssuedGetStatus `json:"status"`
}

// CorporationsCorporationIDMedalsIssuedGetStatus defines model for CorporationsCorporationIDMedalsIssuedGet.Status.
type CorporationsCorporationIDMedalsIssuedGetStatus string

// CorporationsCorporationIDMembersGet A list of character IDs
type CorporationsCorporationIDMembersGet = []int64

// CorporationsCorporationIDMembersLimitGet defines model for CorporationsCorporationIdMembersLimitGet.
type CorporationsCorporationIDMembersLimitGet = int64

// CorporationsCorporationIDMembersTitlesGet defines model for CorporationsCorporationIdMembersTitlesGet.
type CorporationsCorporationIDMembersTitlesGet = []struct {
	CharacterID int64 `json:"character_id"`

	// Titles A list of title_id
	Titles []int64 `json:"titles"`
}

// CorporationsCorporationIDMembertrackingGet defines model for CorporationsCorporationIdMembertrackingGet.
type CorporationsCorporationIDMembertrackingGet = []struct {
	BaseID      *int64     `json:"base_id,omitempty"`
	CharacterID int64      `json:"character_id"`
	LocationID  *int64     `json:"location_id,omitempty"`
	LogoffDate  *time.Time `json:"logoff_date,omitempty"`
	LogonDate   *time.Time `json:"logon_date,omitempty"`
	ShipTypeID  *int64     `json:"ship_type_id,omitempty"`
	StartDate   *time.Time `json:"start_date,omitempty"`
}

// CorporationsCorporationIDOrdersGet defines model for CorporationsCorporationIdOrdersGet.
type CorporationsCorporationIDOrdersGet = []struct {
	// Duration Number of days for which order is valid (starting from the issued date). An order expires at time issued + duration
	Duration int64 `json:"duration"`

	// Escrow For buy orders, the amount of ISK in escrow
	Escrow *float64 `json:"escrow,omitempty"`

	// IsBuyOrder True if the order is a bid (buy) order
	IsBuyOrder *bool `json:"is_buy_order,omitempty"`

	// Issued Date and time when this order was issued
	Issued time.Time `json:"issued"`

	// IssuedBy The character who issued this order
	IssuedBy int64 `json:"issued_by"`

	// LocationID ID of the location where order was placed
	LocationID int64 `json:"location_id"`

	// MinVolume For buy orders, the minimum quantity that will be accepted in a matching sell order
	MinVolume *int64 `json:"min_volume,omitempty"`

	// OrderID Unique order ID
	OrderID int64 `json:"order_id"`

	// Price Cost per unit for this order
	Price float64 `json:"price"`

	// Range Valid order range, numbers are ranges in jumps
	Range CorporationsCorporationIDOrdersGetRange `json:"range"`

	// RegionID ID of the region where order was placed
	RegionID int64 `json:"region_id"`

	// TypeID The type ID of the item transacted in this order
	TypeID int64 `json:"type_id"`

	// VolumeRemain Quantity of items still required or offered
	VolumeRemain int64 `json:"volume_remain"`

	// VolumeTotal Quantity of items required or offered at time order was placed
	VolumeTotal int64 `json:"volume_total"`

	// WalletDivision The corporation wallet division used for this order.
	WalletDivision int64 `json:"wallet_division"`
}

// CorporationsCorporationIDOrdersGetRange Valid order range, numbers are ranges in jumps
type CorporationsCorporationIDOrdersGetRange string

// CorporationsCorporationIDOrdersHistoryGet defines model for CorporationsCorporationIdOrdersHistoryGet.
type CorporationsCorporationIDOrdersHistoryGet = []struct {
	// Duration Number of days the order was valid for (starting from the issued date). An order expires at time issued + duration
	Duration int64 `json:"duration"`

	// Escrow For buy orders, the amount of ISK in escrow
	Escrow *float64 `json:"escrow,omitempty"`

	// IsBuyOrder True if the order is a bid (buy) order
	IsBuyOrder *bool `json:"is_buy_order,omitempty"`

	// Issued Date and time when this order was issued
	Issued time.Time `json:"issued"`

	// IssuedBy The character who issued this order
	IssuedBy *int64 `json:"issued_by,omitempty"`

	// LocationID ID of the location where order was placed
	LocationID int64 `json:"location_id"`

	// MinVolume For buy orders, the minimum quantity that will be accepted in a matching sell order
	MinVolume *int64 `json:"min_volume,omitempty"`

	// OrderID Unique order ID
	OrderID int64 `json:"order_id"`

	// Price Cost per unit for this order
	Price float64 `json:"price"`

	// Range Valid order range, numbers are ranges in jumps
	Range CorporationsCorporationIDOrdersHistoryGetRange `json:"range"`

	// RegionID ID of the region where order was placed
	RegionID int64 `json:"region_id"`

	// State Current order state
	State CorporationsCorporationIDOrdersHistoryGetState `json:"state"`

	// TypeID The type ID of the item transacted in this order
	TypeID int64 `json:"type_id"`

	// VolumeRemain Quantity of items still required or offered
	VolumeRemain int64 `json:"volume_remain"`

	// VolumeTotal Quantity of items required or offered at time order was placed
	VolumeTotal int64 `json:"volume_total"`

	// WalletDivision The corporation wallet division used for this order
	WalletDivision int64 `json:"wallet_division"`
}

// CorporationsCorporationIDOrdersHistoryGetRange Valid order range, numbers are ranges in jumps
type CorporationsCorporationIDOrdersHistoryGetRange string

// CorporationsCorporationIDOrdersHistoryGetState Current order state
type CorporationsCorporationIDOrdersHistoryGetState string

// CorporationsCorporationIDRolesGet defines model for CorporationsCorporationIdRolesGet.
type CorporationsCorporationIDRolesGet = []struct {
	CharacterID           int64                                                     `json:"character_id"`
	GrantableRoles        *[]CorporationsCorporationIDRolesGetGrantableRoles        `json:"grantable_roles,omitempty"`
	GrantableRolesAtBase  *[]CorporationsCorporationIDRolesGetGrantableRolesAtBase  `json:"grantable_roles_at_base,omitempty"`
	GrantableRolesAtHq    *[]CorporationsCorporationIDRolesGetGrantableRolesAtHq    `json:"grantable_roles_at_hq,omitempty"`
	GrantableRolesAtOther *[]CorporationsCorporationIDRolesGetGrantableRolesAtOther `json:"grantable_roles_at_other,omitempty"`
	Roles                 *[]CorporationsCorporationIDRolesGetRoles                 `json:"roles,omitempty"`
	RolesAtBase           *[]CorporationsCorporationIDRolesGetRolesAtBase           `json:"roles_at_base,omitempty"`
	RolesAtHq             *[]CorporationsCorporationIDRolesGetRolesAtHq             `json:"roles_at_hq,omitempty"`
	RolesAtOther          *[]CorporationsCorporationIDRolesGetRolesAtOther          `json:"roles_at_other,omitempty"`
}

// CorporationsCorporationIDRolesGetGrantableRoles grantable_role string
type CorporationsCorporationIDRolesGetGrantableRoles string

// CorporationsCorporationIDRolesGetGrantableRolesAtBase grantable_roles_at_base string
type CorporationsCorporationIDRolesGetGrantableRolesAtBase string

// CorporationsCorporationIDRolesGetGrantableRolesAtHq grantable_roles_at_hq string
type CorporationsCorporationIDRolesGetGrantableRolesAtHq string

// CorporationsCorporationIDRolesGetGrantableRolesAtOther grantable_roles_at_other string
type CorporationsCorporationIDRolesGetGrantableRolesAtOther string

// CorporationsCorporationIDRolesGetRoles role string
type CorporationsCorporationIDRolesGetRoles string

// CorporationsCorporationIDRolesGetRolesAtBase roles_at_base string
type CorporationsCorporationIDRolesGetRolesAtBase string

// CorporationsCorporationIDRolesGetRolesAtHq roles_at_hq string
type CorporationsCorporationIDRolesGetRolesAtHq string

// CorporationsCorporationIDRolesGetRolesAtOther roles_at_other string
type CorporationsCorporationIDRolesGetRolesAtOther string

// CorporationsCorporationIDRolesHistoryGet defines model for CorporationsCorporationIdRolesHistoryGet.
type CorporationsCorporationIDRolesHistoryGet = []struct {
	ChangedAt time.Time `json:"changed_at"`

	// CharacterID The character whose roles are changed
	CharacterID int64 `json:"character_id"`

	// IssuerID ID of the character who issued this change
	IssuerID int64                                              `json:"issuer_id"`
	NewRoles []CorporationsCorporationIDRolesHistoryGetNewRoles `json:"new_roles"`
	OldRoles []CorporationsCorporationIDRolesHistoryGetOldRoles `json:"old_roles"`
	RoleType CorporationsCorporationIDRolesHistoryGetRoleType   `json:"role_type"`
}

// CorporationsCorporationIDRolesHistoryGetNewRoles new_role string
type CorporationsCorporationIDRolesHistoryGetNewRoles string

// CorporationsCorporationIDRolesHistoryGetOldRoles old_role string
type CorporationsCorporationIDRolesHistoryGetOldRoles string

// CorporationsCorporationIDRolesHistoryGetRoleType defines model for CorporationsCorporationIDRolesHistoryGet.RoleType.
type CorporationsCorporationIDRolesHistoryGetRoleType string

// CorporationsCorporationIDShareholdersGet List of shareholders
type CorporationsCorporationIDShareholdersGet = []struct {
	ShareCount      int64                                                   `json:"share_count"`
	ShareholderID   int64                                                   `json:"shareholder_id"`
	ShareholderType CorporationsCorporationIDShareholdersGetShareholderType `json:"shareholder_type"`
}

// CorporationsCorporationIDShareholdersGetShareholderType defines model for CorporationsCorporationIDShareholdersGet.ShareholderType.
type CorporationsCorporationIDShareholdersGetShareholderType string

// CorporationsCorporationIDStandingsGet defines model for CorporationsCorporationIdStandingsGet.
type CorporationsCorporationIDStandingsGet = []struct {
	FromID   int64                                         `json:"from_id"`
	FromType CorporationsCorporationIDStandingsGetFromType `json:"from_type"`
	Standing float64                                       `json:"standing"`
}

// CorporationsCorporationIDStandingsGetFromType defines model for CorporationsCorporationIDStandingsGet.FromType.
type CorporationsCorporationIDStandingsGetFromType string

// CorporationsCorporationIDStarbasesGet defines model for CorporationsCorporationIdStarbasesGet.
type CorporationsCorporationIDStarbasesGet = []struct {
	// MoonID The moon this starbase (POS) is anchored on, unanchored POSes do not have this information
	MoonID *int64 `json:"moon_id,omitempty"`

	// OnlinedSince When the POS onlined, for starbases (POSes) in online state
	OnlinedSince *time.Time `json:"onlined_since,omitempty"`

	// ReinforcedUntil When the POS will be out of reinforcement, for starbases (POSes) in reinforced state
	ReinforcedUntil *time.Time `json:"reinforced_until,omitempty"`

	// StarbaseID Unique ID for this starbase (POS)
	StarbaseID int64                                       `json:"starbase_id"`
	State      *CorporationsCorporationIDStarbasesGetState `json:"state,omitempty"`

	// SystemID The solar system this starbase (POS) is in, unanchored POSes have this information
	SystemID int64 `json:"system_id"`

	// TypeID Starbase (POS) type
	TypeID int64 `json:"type_id"`

	// UnanchorAt When the POS started unanchoring, for starbases (POSes) in unanchoring state
	UnanchorAt *time.Time `json:"unanchor_at,omitempty"`
}

// CorporationsCorporationIDStarbasesGetState defines model for CorporationsCorporationIDStarbasesGet.State.
type CorporationsCorporationIDStarbasesGetState string

// CorporationsCorporationIDStarbasesStarbaseIDGet defines model for CorporationsCorporationIdStarbasesStarbaseIdGet.
type CorporationsCorporationIDStarbasesStarbaseIDGet struct {
	AllowAllianceMembers    bool `json:"allow_alliance_members"`
	AllowCorporationMembers bool `json:"allow_corporation_members"`

	// Anchor Who can anchor starbase (POS) and its structures
	Anchor                              CorporationsCorporationIDStarbasesStarbaseIDGetAnchor `json:"anchor"`
	AttackIfAtWar                       bool                                                  `json:"attack_if_at_war"`
	AttackIfOtherSecurityStatusDropping bool                                                  `json:"attack_if_other_security_status_dropping"`

	// AttackSecurityStatusThreshold Starbase (POS) will attack if target's security standing is lower than this value
	AttackSecurityStatusThreshold *float64 `json:"attack_security_status_threshold,omitempty"`

	// AttackStandingThreshold Starbase (POS) will attack if target's standing is lower than this value
	AttackStandingThreshold *float64 `json:"attack_standing_threshold,omitempty"`

	// FuelBayTake Who can take fuel blocks out of the starbase (POS)'s fuel bay
	FuelBayTake CorporationsCorporationIDStarbasesStarbaseIDGetFuelBayTake `json:"fuel_bay_take"`

	// FuelBayView Who can view the starbase (POS)'s fule bay. Characters either need to have required role or belong to the starbase (POS) owner's corporation or alliance, as described by the enum, all other access settings follows the same scheme
	FuelBayView CorporationsCorporationIDStarbasesStarbaseIDGetFuelBayView `json:"fuel_bay_view"`

	// Fuels Fuel blocks and other things that will be consumed when operating a starbase (POS)
	Fuels *[]struct {
		Quantity int64 `json:"quantity"`
		TypeID   int64 `json:"type_id"`
	} `json:"fuels,omitempty"`

	// Offline Who can offline starbase (POS) and its structures
	Offline CorporationsCorporationIDStarbasesStarbaseIDGetOffline `json:"offline"`

	// Online Who can online starbase (POS) and its structures
	Online CorporationsCorporationIDStarbasesStarbaseIDGetOnline `json:"online"`

	// Unanchor Who can unanchor starbase (POS) and its structures
	Unanchor CorporationsCorporationIDStarbasesStarbaseIDGetUnanchor `json:"unanchor"`

	// UseAllianceStandings True if the starbase (POS) is using alliance standings, otherwise using corporation's
	UseAllianceStandings bool `json:"use_alliance_standings"`
}

// CorporationsCorporationIDStarbasesStarbaseIDGetAnchor Who can anchor starbase (POS) and its structures
type CorporationsCorporationIDStarbasesStarbaseIDGetAnchor string

// CorporationsCorporationIDStarbasesStarbaseIDGetFuelBayTake Who can take fuel blocks out of the starbase (POS)'s fuel bay
type CorporationsCorporationIDStarbasesStarbaseIDGetFuelBayTake string

// CorporationsCorporationIDStarbasesStarbaseIDGetFuelBayView Who can view the starbase (POS)'s fule bay. Characters either need to have required role or belong to the starbase (POS) owner's corporation or alliance, as described by the enum, all other access settings follows the same scheme
type CorporationsCorporationIDStarbasesStarbaseIDGetFuelBayView string

// CorporationsCorporationIDStarbasesStarbaseIDGetOffline Who can offline starbase (POS) and its structures
type CorporationsCorporationIDStarbasesStarbaseIDGetOffline string

// CorporationsCorporationIDStarbasesStarbaseIDGetOnline Who can online starbase (POS) and its structures
type CorporationsCorporationIDStarbasesStarbaseIDGetOnline string

// CorporationsCorporationIDStarbasesStarbaseIDGetUnanchor Who can unanchor starbase (POS) and its structures
type CorporationsCorporationIDStarbasesStarbaseIDGetUnanchor string

// CorporationsCorporationIDStructuresGet defines model for CorporationsCorporationIdStructuresGet.
type CorporationsCorporationIDStructuresGet = []struct {
	// CorporationID ID of the corporation that owns the structure
	CorporationID int64 `json:"corporation_id"`

	// FuelExpires Date on which the structure will run out of fuel
	FuelExpires *time.Time `json:"fuel_expires,omitempty"`

	// Name The structure name
	Name *string `json:"name,omitempty"`

	// NextReinforceApply The date and time when the structure's newly requested reinforcement times (e.g. next_reinforce_hour and next_reinforce_day) will take effect
	NextReinforceApply *time.Time `json:"next_reinforce_apply,omitempty"`

	// NextReinforceHour The requested change to reinforce_hour that will take effect at the time shown by next_reinforce_apply
	NextReinforceHour *int64 `json:"next_reinforce_hour,omitempty"`

	// ProfileID The id of the ACL profile for this citadel
	ProfileID int64 `json:"profile_id"`

	// ReinforceHour The hour of day that determines the four hour window when the structure will randomly exit its reinforcement periods and become vulnerable to attack against its armor and/or hull. The structure will become vulnerable at a random time that is +/- 2 hours centered on the value of this property
	ReinforceHour *int64 `json:"reinforce_hour,omitempty"`

	// Services Contains a list of service upgrades, and their state
	Services *[]struct {
		Name  string                                              `json:"name"`
		State CorporationsCorporationIDStructuresGetServicesState `json:"state"`
	} `json:"services,omitempty"`
	State CorporationsCorporationIDStructuresGetState `json:"state"`

	// StateTimerEnd Date at which the structure will move to it's next state
	StateTimerEnd *time.Time `json:"state_timer_end,omitempty"`

	// StateTimerStart Date at which the structure entered it's current state
	StateTimerStart *time.Time `json:"state_timer_start,omitempty"`

	// StructureID The Item ID of the structure
	StructureID int64 `json:"structure_id"`

	// SystemID The solar system the structure is in
	SystemID int64 `json:"system_id"`

	// TypeID The type id of the structure
	TypeID int64 `json:"type_id"`

	// UnanchorsAt Date at which the structure will unanchor
	UnanchorsAt *time.Time `json:"unanchors_at,omitempty"`
}

// CorporationsCorporationIDStructuresGetServicesState defines model for CorporationsCorporationIDStructuresGet.Services.State.
type CorporationsCorporationIDStructuresGetServicesState string

// CorporationsCorporationIDStructuresGetState defines model for CorporationsCorporationIDStructuresGet.State.
type CorporationsCorporationIDStructuresGetState string

// CorporationsCorporationIDTitlesGet defines model for CorporationsCorporationIdTitlesGet.
type CorporationsCorporationIDTitlesGet = []struct {
	GrantableRoles        *[]CorporationsCorporationIDTitlesGetGrantableRoles        `json:"grantable_roles,omitempty"`
	GrantableRolesAtBase  *[]CorporationsCorporationIDTitlesGetGrantableRolesAtBase  `json:"grantable_roles_at_base,omitempty"`
	GrantableRolesAtHq    *[]CorporationsCorporationIDTitlesGetGrantableRolesAtHq    `json:"grantable_roles_at_hq,omitempty"`
	GrantableRolesAtOther *[]CorporationsCorporationIDTitlesGetGrantableRolesAtOther `json:"grantable_roles_at_other,omitempty"`
	Name                  *string                                                    `json:"name,omitempty"`
	Roles                 *[]CorporationsCorporationIDTitlesGetRoles                 `json:"roles,omitempty"`
	RolesAtBase           *[]CorporationsCorporationIDTitlesGetRolesAtBase           `json:"roles_at_base,omitempty"`
	RolesAtHq             *[]CorporationsCorporationIDTitlesGetRolesAtHq             `json:"roles_at_hq,omitempty"`
	RolesAtOther          *[]CorporationsCorporationIDTitlesGetRolesAtOther          `json:"roles_at_other,omitempty"`
	TitleID               *int64                                                     `json:"title_id,omitempty"`
}

// CorporationsCorporationIDTitlesGetGrantableRoles grantable_role string
type CorporationsCorporationIDTitlesGetGrantableRoles string

// CorporationsCorporationIDTitlesGetGrantableRolesAtBase grantable_roles_at_base string
type CorporationsCorporationIDTitlesGetGrantableRolesAtBase string

// CorporationsCorporationIDTitlesGetGrantableRolesAtHq grantable_roles_at_hq string
type CorporationsCorporationIDTitlesGetGrantableRolesAtHq string

// CorporationsCorporationIDTitlesGetGrantableRolesAtOther grantable_roles_at_other string
type CorporationsCorporationIDTitlesGetGrantableRolesAtOther string

// CorporationsCorporationIDTitlesGetRoles role string
type CorporationsCorporationIDTitlesGetRoles string

// CorporationsCorporationIDTitlesGetRolesAtBase roles_at_base string
type CorporationsCorporationIDTitlesGetRolesAtBase string

// CorporationsCorporationIDTitlesGetRolesAtHq roles_at_hq string
type CorporationsCorporationIDTitlesGetRolesAtHq string

// CorporationsCorporationIDTitlesGetRolesAtOther roles_at_other string
type CorporationsCorporationIDTitlesGetRolesAtOther string

// CorporationsCorporationIDWalletsDivisionJournalGet Journal entries
type CorporationsCorporationIDWalletsDivisionJournalGet = []struct {
	// Amount The amount of ISK given or taken from the wallet as a result of the given transaction. Positive when ISK is deposited into the wallet and negative when ISK is withdrawn
	Amount *float64 `json:"amount,omitempty"`

	// Balance Wallet balance after transaction occurred
	Balance *float64 `json:"balance,omitempty"`

	// ContextID An ID that gives extra context to the particular transaction. Because of legacy reasons the context is completely different per ref_type and means different things. It is also possible to not have a context_id
	ContextID *int64 `json:"context_id,omitempty"`

	// ContextIDType The type of the given context_id if present
	ContextIDType *CorporationsCorporationIDWalletsDivisionJournalGetContextIDType `json:"context_id_type,omitempty"`

	// Date Date and time of transaction
	Date time.Time `json:"date"`

	// Description The reason for the transaction, mirrors what is seen in the client
	Description string `json:"description"`

	// FirstPartyID The id of the first party involved in the transaction. This attribute has no consistency and is different or non existant for particular ref_types. The description attribute will help make sense of what this attribute means. For more info about the given ID it can be dropped into the /universe/names/ ESI route to determine its type and name
	FirstPartyID *int64 `json:"first_party_id,omitempty"`

	// ID Unique journal reference ID
	ID int64 `json:"id"`

	// Reason The user stated reason for the transaction. Only applies to some ref_types
	Reason *string `json:"reason,omitempty"`

	// RefType "The transaction type for the given. transaction. Different transaction types will populate different attributes. Note: If you have an existing XML API application that is using ref_types, you will need to know which string ESI ref_type maps to which integer. You can look at the following file to see string->int mappings: https://github.com/ccpgames/eve-glue/blob/master/eve_glue/wallet_journal_ref.py"
	RefType CorporationsCorporationIDWalletsDivisionJournalGetRefType `json:"ref_type"`

	// SecondPartyID The id of the second party involved in the transaction. This attribute has no consistency and is different or non existant for particular ref_types. The description attribute will help make sense of what this attribute means. For more info about the given ID it can be dropped into the /universe/names/ ESI route to determine its type and name
	SecondPartyID *int64 `json:"second_party_id,omitempty"`

	// Tax Tax amount received. Only applies to tax related transactions
	Tax *float64 `json:"tax,omitempty"`

	// TaxReceiverID The corporation ID receiving any tax paid. Only applies to tax related transactions
	TaxReceiverID *int64 `json:"tax_receiver_id,omitempty"`
}

// CorporationsCorporationIDWalletsDivisionJournalGetContextIDType The type of the given context_id if present
type CorporationsCorporationIDWalletsDivisionJournalGetContextIDType string

// CorporationsCorporationIDWalletsDivisionJournalGetRefType "The transaction type for the given. transaction. Different transaction types will populate different attributes. Note: If you have an existing XML API application that is using ref_types, you will need to know which string ESI ref_type maps to which integer. You can look at the following file to see string->int mappings: https://github.com/ccpgames/eve-glue/blob/master/eve_glue/wallet_journal_ref.py"
type CorporationsCorporationIDWalletsDivisionJournalGetRefType string

// CorporationsCorporationIDWalletsDivisionTransactionsGet Wallet transactions
type CorporationsCorporationIDWalletsDivisionTransactionsGet = []struct {
	ClientID int64 `json:"client_id"`

	// Date Date and time of transaction
	Date  time.Time `json:"date"`
	IsBuy bool      `json:"is_buy"`

	// JournalRefID -1 if there is no corresponding wallet journal entry
	JournalRefID int64 `json:"journal_ref_id"`
	LocationID   int64 `json:"location_id"`
	Quantity     int64 `json:"quantity"`

	// TransactionID Unique transaction ID
	TransactionID int64 `json:"transaction_id"`
	TypeID        int64 `json:"type_id"`

	// UnitPrice Amount paid per unit
	UnitPrice float64 `json:"unit_price"`
}

// CorporationsCorporationIDWalletsGet defines model for CorporationsCorporationIdWalletsGet.
type CorporationsCorporationIDWalletsGet = []struct {
	Balance  float64 `json:"balance"`
	Division int64   `json:"division"`
}

// CorporationsNpccorpsGet defines model for CorporationsNpccorpsGet.
type CorporationsNpccorpsGet = []int64

// DogmaAttributesAttributeIDGet defines model for DogmaAttributesAttributeIdGet.
type DogmaAttributesAttributeIDGet struct {
	AttributeID  int64    `json:"attribute_id"`
	DefaultValue *float64 `json:"default_value,omitempty"`
	Description  *string  `json:"description,omitempty"`
	DisplayName  *string  `json:"display_name,omitempty"`
	HighIsGood   *bool    `json:"high_is_good,omitempty"`
	IconID       *int64   `json:"icon_id,omitempty"`
	Name         *string  `json:"name,omitempty"`
	Published    *bool    `json:"published,omitempty"`
	Stackable    *bool    `json:"stackable,omitempty"`
	UnitID       *int64   `json:"unit_id,omitempty"`
}

// DogmaAttributesGet defines model for DogmaAttributesGet.
type DogmaAttributesGet = []int64

// DogmaDynamicItemsTypeIDItemIDGet defines model for DogmaDynamicItemsTypeIdItemIdGet.
type DogmaDynamicItemsTypeIDItemIDGet struct {
	// CreatedBy The ID of the character who created the item
	CreatedBy       int64 `json:"created_by"`
	DogmaAttributes []struct {
		AttributeID int64   `json:"attribute_id"`
		Value       float64 `json:"value"`
	} `json:"dogma_attributes"`
	DogmaEffects []struct {
		EffectID  int64 `json:"effect_id"`
		IsDefault bool  `json:"is_default"`
	} `json:"dogma_effects"`

	// MutatorTypeID The type ID of the mutator used to generate the dynamic item.
	MutatorTypeID int64 `json:"mutator_type_id"`

	// SourceTypeID The type ID of the source item the mutator was applied to create the dynamic item.
	SourceTypeID int64 `json:"source_type_id"`
}

// DogmaEffectsEffectIDGet defines model for DogmaEffectsEffectIdGet.
type DogmaEffectsEffectIDGet struct {
	Description          *string `json:"description,omitempty"`
	DisallowAutoRepeat   *bool   `json:"disallow_auto_repeat,omitempty"`
	DischargeAttributeID *int64  `json:"discharge_attribute_id,omitempty"`
	DisplayName          *string `json:"display_name,omitempty"`
	DurationAttributeID  *int64  `json:"duration_attribute_id,omitempty"`
	EffectCategory       *int64  `json:"effect_category,omitempty"`
	EffectID             int64   `json:"effect_id"`
	ElectronicChance     *bool   `json:"electronic_chance,omitempty"`
	FalloffAttributeID   *int64  `json:"falloff_attribute_id,omitempty"`
	IconID               *int64  `json:"icon_id,omitempty"`
	IsAssistance         *bool   `json:"is_assistance,omitempty"`
	IsOffensive          *bool   `json:"is_offensive,omitempty"`
	IsWarpSafe           *bool   `json:"is_warp_safe,omitempty"`
	Modifiers            *[]struct {
		Domain               *string `json:"domain,omitempty"`
		EffectID             *int64  `json:"effect_id,omitempty"`
		Func                 string  `json:"func"`
		ModifiedAttributeID  *int64  `json:"modified_attribute_id,omitempty"`
		ModifyingAttributeID *int64  `json:"modifying_attribute_id,omitempty"`
		Operator             *int64  `json:"operator,omitempty"`
	} `json:"modifiers,omitempty"`
	Name                     *string `json:"name,omitempty"`
	PostExpression           *int64  `json:"post_expression,omitempty"`
	PreExpression            *int64  `json:"pre_expression,omitempty"`
	Published                *bool   `json:"published,omitempty"`
	RangeAttributeID         *int64  `json:"range_attribute_id,omitempty"`
	RangeChance              *bool   `json:"range_chance,omitempty"`
	TrackingSpeedAttributeID *int64  `json:"tracking_speed_attribute_id,omitempty"`
}

// DogmaEffectsGet defines model for DogmaEffectsGet.
type DogmaEffectsGet = []int64

// Error defines model for Error.
type Error struct {
	// Details List of individual error details.
	Details *[]ErrorDetail `json:"details"`

	// Error Error message.
	Error string `json:"error"`
}

// ErrorDetail defines model for ErrorDetail.
type ErrorDetail struct {
	// Location Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id'
	Location *string `json:"location,omitempty"`

	// Message Error message text
	Message *string `json:"message,omitempty"`

	// Value The value at the given location
	Value interface{} `json:"value,omitempty"`
}

// FleetsFleetIDGet defines model for FleetsFleetIdGet.
type FleetsFleetIDGet struct {
	// IsFreeMove Is free-move enabled
	IsFreeMove bool `json:"is_free_move"`

	// IsRegistered Does the fleet have an active fleet advertisement
	IsRegistered bool `json:"is_registered"`

	// IsVoiceEnabled Is EVE Voice enabled
	IsVoiceEnabled bool `json:"is_voice_enabled"`

	// Motd Fleet MOTD in CCP flavoured HTML
	Motd string `json:"motd"`
}

// FleetsFleetIDMembersGet defines model for FleetsFleetIdMembersGet.
type FleetsFleetIDMembersGet = []struct {
	CharacterID int64     `json:"character_id"`
	JoinTime    time.Time `json:"join_time"`

	// Role Member’s role in fleet
	Role FleetsFleetIDMembersGetRole `json:"role"`

	// RoleName Localized role names
	RoleName   string `json:"role_name"`
	ShipTypeID int64  `json:"ship_type_id"`

	// SolarSystemID Solar system the member is located in
	SolarSystemID int64 `json:"solar_system_id"`

	// SquadID ID of the squad the member is in. If not applicable, will be set to -1
	SquadID int64 `json:"squad_id"`

	// StationID Station in which the member is docked in, if applicable
	StationID *int64 `json:"station_id,omitempty"`

	// TakesFleetWarp Whether the member take fleet warps
	TakesFleetWarp bool `json:"takes_fleet_warp"`

	// WingID ID of the wing the member is in. If not applicable, will be set to -1
	WingID int64 `json:"wing_id"`
}

// FleetsFleetIDMembersGetRole Member’s role in fleet
type FleetsFleetIDMembersGetRole string

// FleetsFleetIDWingsGet defines model for FleetsFleetIdWingsGet.
type FleetsFleetIDWingsGet = []struct {
	ID     int64  `json:"id"`
	Name   string `json:"name"`
	Squads []struct {
		ID   int64  `json:"id"`
		Name string `json:"name"`
	} `json:"squads"`
}

// FleetsFleetIDWingsPost 201 created object
type FleetsFleetIDWingsPost struct {
	// WingID The wing_id of the newly created wing
	WingID int64 `json:"wing_id"`
}

// FleetsFleetIDWingsWingIDSquadsPost 201 created object
type FleetsFleetIDWingsWingIDSquadsPost struct {
	// SquadID The squad_id of the newly created squad
	SquadID int64 `json:"squad_id"`
}

// FwLeaderboardsCharactersGet defines model for FwLeaderboardsCharactersGet.
type FwLeaderboardsCharactersGet struct {
	// Kills Top 100 rankings of pilots by number of kills from yesterday, last week and in total
	Kills struct {
		// ActiveTotal Top 100 ranking of pilots active in faction warfare by total kills. A pilot is considered "active" if they have participated in faction warfare in the past 14 days
		ActiveTotal []struct {
			// Amount Amount of kills
			Amount      *int64 `json:"amount,omitempty"`
			CharacterID *int64 `json:"character_id,omitempty"`
		} `json:"active_total"`

		// LastWeek Top 100 ranking of pilots by kills in the past week
		LastWeek []struct {
			// Amount Amount of kills
			Amount      *int64 `json:"amount,omitempty"`
			CharacterID *int64 `json:"character_id,omitempty"`
		} `json:"last_week"`

		// Yesterday Top 100 ranking of pilots by kills in the past day
		Yesterday []struct {
			// Amount Amount of kills
			Amount      *int64 `json:"amount,omitempty"`
			CharacterID *int64 `json:"character_id,omitempty"`
		} `json:"yesterday"`
	} `json:"kills"`

	// VictoryPoints Top 100 rankings of pilots by victory points from yesterday, last week and in total
	VictoryPoints struct {
		// ActiveTotal Top 100 ranking of pilots active in faction warfare by total victory points. A pilot is considered "active" if they have participated in faction warfare in the past 14 days
		ActiveTotal []struct {
			// Amount Amount of victory points
			Amount      *int64 `json:"amount,omitempty"`
			CharacterID *int64 `json:"character_id,omitempty"`
		} `json:"active_total"`

		// LastWeek Top 100 ranking of pilots by victory points in the past week
		LastWeek []struct {
			// Amount Amount of victory points
			Amount      *int64 `json:"amount,omitempty"`
			CharacterID *int64 `json:"character_id,omitempty"`
		} `json:"last_week"`

		// Yesterday Top 100 ranking of pilots by victory points in the past day
		Yesterday []struct {
			// Amount Amount of victory points
			Amount      *int64 `json:"amount,omitempty"`
			CharacterID *int64 `json:"character_id,omitempty"`
		} `json:"yesterday"`
	} `json:"victory_points"`
}

// FwLeaderboardsCorporationsGet defines model for FwLeaderboardsCorporationsGet.
type FwLeaderboardsCorporationsGet struct {
	// Kills Top 10 rankings of corporations by number of kills from yesterday, last week and in total
	Kills struct {
		// ActiveTotal Top 10 ranking of corporations active in faction warfare by total kills. A corporation is considered "active" if they have participated in faction warfare in the past 14 days
		ActiveTotal []struct {
			// Amount Amount of kills
			Amount        *int64 `json:"amount,omitempty"`
			CorporationID *int64 `json:"corporation_id,omitempty"`
		} `json:"active_total"`

		// LastWeek Top 10 ranking of corporations by kills in the past week
		LastWeek []struct {
			// Amount Amount of kills
			Amount        *int64 `json:"amount,omitempty"`
			CorporationID *int64 `json:"corporation_id,omitempty"`
		} `json:"last_week"`

		// Yesterday Top 10 ranking of corporations by kills in the past day
		Yesterday []struct {
			// Amount Amount of kills
			Amount        *int64 `json:"amount,omitempty"`
			CorporationID *int64 `json:"corporation_id,omitempty"`
		} `json:"yesterday"`
	} `json:"kills"`

	// VictoryPoints Top 10 rankings of corporations by victory points from yesterday, last week and in total
	VictoryPoints struct {
		// ActiveTotal Top 10 ranking of corporations active in faction warfare by total victory points. A corporation is considered "active" if they have participated in faction warfare in the past 14 days
		ActiveTotal []struct {
			// Amount Amount of victory points
			Amount        *int64 `json:"amount,omitempty"`
			CorporationID *int64 `json:"corporation_id,omitempty"`
		} `json:"active_total"`

		// LastWeek Top 10 ranking of corporations by victory points in the past week
		LastWeek []struct {
			// Amount Amount of victory points
			Amount        *int64 `json:"amount,omitempty"`
			CorporationID *int64 `json:"corporation_id,omitempty"`
		} `json:"last_week"`

		// Yesterday Top 10 ranking of corporations by victory points in the past day
		Yesterday []struct {
			// Amount Amount of victory points
			Amount        *int64 `json:"amount,omitempty"`
			CorporationID *int64 `json:"corporation_id,omitempty"`
		} `json:"yesterday"`
	} `json:"victory_points"`
}

// FwLeaderboardsGet defines model for FwLeaderboardsGet.
type FwLeaderboardsGet struct {
	// Kills Top 4 rankings of factions by number of kills from yesterday, last week and in total
	Kills struct {
		// ActiveTotal Top 4 ranking of factions active in faction warfare by total kills. A faction is considered "active" if they have participated in faction warfare in the past 14 days
		ActiveTotal []struct {
			// Amount Amount of kills
			Amount    *int64 `json:"amount,omitempty"`
			FactionID *int64 `json:"faction_id,omitempty"`
		} `json:"active_total"`

		// LastWeek Top 4 ranking of factions by kills in the past week
		LastWeek []struct {
			// Amount Amount of kills
			Amount    *int64 `json:"amount,omitempty"`
			FactionID *int64 `json:"faction_id,omitempty"`
		} `json:"last_week"`

		// Yesterday Top 4 ranking of factions by kills in the past day
		Yesterday []struct {
			// Amount Amount of kills
			Amount    *int64 `json:"amount,omitempty"`
			FactionID *int64 `json:"faction_id,omitempty"`
		} `json:"yesterday"`
	} `json:"kills"`

	// VictoryPoints Top 4 rankings of factions by victory points from yesterday, last week and in total
	VictoryPoints struct {
		// ActiveTotal Top 4 ranking of factions active in faction warfare by total victory points. A faction is considered "active" if they have participated in faction warfare in the past 14 days
		ActiveTotal []struct {
			// Amount Amount of victory points
			Amount    *int64 `json:"amount,omitempty"`
			FactionID *int64 `json:"faction_id,omitempty"`
		} `json:"active_total"`

		// LastWeek Top 4 ranking of factions by victory points in the past week
		LastWeek []struct {
			// Amount Amount of victory points
			Amount    *int64 `json:"amount,omitempty"`
			FactionID *int64 `json:"faction_id,omitempty"`
		} `json:"last_week"`

		// Yesterday Top 4 ranking of factions by victory points in the past day
		Yesterday []struct {
			// Amount Amount of victory points
			Amount    *int64 `json:"amount,omitempty"`
			FactionID *int64 `json:"faction_id,omitempty"`
		} `json:"yesterday"`
	} `json:"victory_points"`
}

// FwStatsGet defines model for FwStatsGet.
type FwStatsGet = []struct {
	FactionID int64 `json:"faction_id"`

	// Kills Summary of kills against an enemy faction for the given faction
	Kills struct {
		// LastWeek Last week's total number of kills against enemy factions
		LastWeek int64 `json:"last_week"`

		// Total Total number of kills against enemy factions since faction warfare began
		Total int64 `json:"total"`

		// Yesterday Yesterday's total number of kills against enemy factions
		Yesterday int64 `json:"yesterday"`
	} `json:"kills"`

	// Pilots How many pilots fight for the given faction
	Pilots int64 `json:"pilots"`

	// SystemsControlled The number of solar systems controlled by the given faction
	SystemsControlled int64 `json:"systems_controlled"`

	// VictoryPoints Summary of victory points gained for the given faction
	VictoryPoints struct {
		// LastWeek Last week's victory points gained
		LastWeek int64 `json:"last_week"`

		// Total Total victory points gained since faction warfare began
		Total int64 `json:"total"`

		// Yesterday Yesterday's victory points gained
		Yesterday int64 `json:"yesterday"`
	} `json:"victory_points"`
}

// FwSystemsGet defines model for FwSystemsGet.
type FwSystemsGet = []struct {
	Contested              FwSystemsGetContested `json:"contested"`
	OccupierFactionID      int64                 `json:"occupier_faction_id"`
	OwnerFactionID         int64                 `json:"owner_faction_id"`
	SolarSystemID          int64                 `json:"solar_system_id"`
	VictoryPoints          int64                 `json:"victory_points"`
	VictoryPointsThreshold int64                 `json:"victory_points_threshold"`
}

// FwSystemsGetContested defines model for FwSystemsGet.Contested.
type FwSystemsGetContested string

// FwWarsGet List of factions at war
type FwWarsGet = []struct {
	// AgainstID The faction ID of the enemy faction.
	AgainstID int64 `json:"against_id"`
	FactionID int64 `json:"faction_id"`
}

// IncursionsGet defines model for IncursionsGet.
type IncursionsGet = []struct {
	// ConstellationID The constellation id in which this incursion takes place
	ConstellationID int64 `json:"constellation_id"`

	// FactionID The attacking faction's id
	FactionID int64 `json:"faction_id"`

	// HasBoss Whether the final encounter has boss or not
	HasBoss bool `json:"has_boss"`

	// InfestedSolarSystems A list of infested solar system ids that are a part of this incursion
	InfestedSolarSystems []int64 `json:"infested_solar_systems"`

	// Influence Influence of this incursion as a float from 0 to 1
	Influence float64 `json:"influence"`

	// StagingSolarSystemID Staging solar system for this incursion
	StagingSolarSystemID int64 `json:"staging_solar_system_id"`

	// State The state of this incursion
	State IncursionsGetState `json:"state"`

	// Type The type of this incursion
	Type string `json:"type"`
}

// IncursionsGetState The state of this incursion
type IncursionsGetState string

// IndustryFacilitiesGet defines model for IndustryFacilitiesGet.
type IndustryFacilitiesGet = []struct {
	// FacilityID ID of the facility
	FacilityID int64 `json:"facility_id"`

	// OwnerID Owner of the facility
	OwnerID int64 `json:"owner_id"`

	// RegionID Region ID where the facility is
	RegionID int64 `json:"region_id"`

	// SolarSystemID Solar system ID where the facility is
	SolarSystemID int64 `json:"solar_system_id"`

	// Tax Tax imposed by the facility
	Tax *float64 `json:"tax,omitempty"`

	// TypeID Type ID of the facility
	TypeID int64 `json:"type_id"`
}

// IndustrySystemsGet defines model for IndustrySystemsGet.
type IndustrySystemsGet = []struct {
	CostIndices []struct {
		Activity  IndustrySystemsGetCostIndicesActivity `json:"activity"`
		CostIndex float64                               `json:"cost_index"`
	} `json:"cost_indices"`
	SolarSystemID int64 `json:"solar_system_id"`
}

// IndustrySystemsGetCostIndicesActivity defines model for IndustrySystemsGet.CostIndices.Activity.
type IndustrySystemsGetCostIndicesActivity string

// InsurancePricesGet defines model for InsurancePricesGet.
type InsurancePricesGet = []struct {
	// Levels A list of a available insurance levels for this ship type
	Levels []struct {
		Cost float64 `json:"cost"`

		// Name Localized insurance level
		Name   string  `json:"name"`
		Payout float64 `json:"payout"`
	} `json:"levels"`
	TypeID int64 `json:"type_id"`
}

// KillmailsKillmailIDKillmailHashGet defines model for KillmailsKillmailIdKillmailHashGet.
type KillmailsKillmailIDKillmailHashGet struct {
	Attackers []struct {
		AllianceID    *int64 `json:"alliance_id,omitempty"`
		CharacterID   *int64 `json:"character_id,omitempty"`
		CorporationID *int64 `json:"corporation_id,omitempty"`
		DamageDone    int64  `json:"damage_done"`
		FactionID     *int64 `json:"faction_id,omitempty"`

		// FinalBlow Was the attacker the one to achieve the final blow
		FinalBlow bool `json:"final_blow"`

		// SecurityStatus Security status for the attacker
		SecurityStatus float64 `json:"security_status"`

		// ShipTypeID What ship was the attacker flying
		ShipTypeID *int64 `json:"ship_type_id,omitempty"`

		// WeaponTypeID What weapon was used by the attacker for the kill
		WeaponTypeID *int64 `json:"weapon_type_id,omitempty"`
	} `json:"attackers"`

	// KillmailID ID of the killmail
	KillmailID int64 `json:"killmail_id"`

	// KillmailTime Time that the victim was killed and the killmail generated
	KillmailTime time.Time `json:"killmail_time"`

	// MoonID Moon if the kill took place at one
	MoonID *int64 `json:"moon_id,omitempty"`

	// SolarSystemID Solar system that the kill took place in
	SolarSystemID int64 `json:"solar_system_id"`
	Victim        struct {
		AllianceID    *int64 `json:"alliance_id,omitempty"`
		CharacterID   *int64 `json:"character_id,omitempty"`
		CorporationID *int64 `json:"corporation_id,omitempty"`

		// DamageTaken How much total damage was taken by the victim
		DamageTaken int64  `json:"damage_taken"`
		FactionID   *int64 `json:"faction_id,omitempty"`
		Items       *[]struct {
			// Flag Flag for the location of the item
			Flag       int64 `json:"flag"`
			ItemTypeID int64 `json:"item_type_id"`
			Items      *[]struct {
				Flag              int64  `json:"flag"`
				ItemTypeID        int64  `json:"item_type_id"`
				QuantityDestroyed *int64 `json:"quantity_destroyed,omitempty"`
				QuantityDropped   *int64 `json:"quantity_dropped,omitempty"`
				Singleton         int64  `json:"singleton"`
			} `json:"items,omitempty"`

			// QuantityDestroyed How many of the item were destroyed if any
			QuantityDestroyed *int64 `json:"quantity_destroyed,omitempty"`

			// QuantityDropped How many of the item were dropped if any
			QuantityDropped *int64 `json:"quantity_dropped,omitempty"`
			Singleton       int64  `json:"singleton"`
		} `json:"items,omitempty"`

		// Position Coordinates of the victim in Cartesian space relative to the Sun
		Position *struct {
			X float64 `json:"x"`
			Y float64 `json:"y"`
			Z float64 `json:"z"`
		} `json:"position,omitempty"`

		// ShipTypeID The ship that the victim was piloting and was destroyed
		ShipTypeID int64 `json:"ship_type_id"`
	} `json:"victim"`

	// WarID War if the killmail is generated in relation to an official war
	WarID *int64 `json:"war_id,omitempty"`
}

// LoyaltyStoresCorporationIDOffersGet defines model for LoyaltyStoresCorporationIdOffersGet.
type LoyaltyStoresCorporationIDOffersGet = []struct {
	// AkCost Analysis kredit cost
	AkCost        *int64 `json:"ak_cost,omitempty"`
	IskCost       int64  `json:"isk_cost"`
	LpCost        int64  `json:"lp_cost"`
	OfferID       int64  `json:"offer_id"`
	Quantity      int64  `json:"quantity"`
	RequiredItems []struct {
		Quantity int64 `json:"quantity"`
		TypeID   int64 `json:"type_id"`
	} `json:"required_items"`
	TypeID int64 `json:"type_id"`
}

// MarketsGroupsGet defines model for MarketsGroupsGet.
type MarketsGroupsGet = []int64

// MarketsGroupsMarketGroupIDGet defines model for MarketsGroupsMarketGroupIdGet.
type MarketsGroupsMarketGroupIDGet struct {
	Description   string  `json:"description"`
	MarketGroupID int64   `json:"market_group_id"`
	Name          string  `json:"name"`
	ParentGroupID *int64  `json:"parent_group_id,omitempty"`
	Types         []int64 `json:"types"`
}

// MarketsPricesGet defines model for MarketsPricesGet.
type MarketsPricesGet = []struct {
	AdjustedPrice *float64 `json:"adjusted_price,omitempty"`
	AveragePrice  *float64 `json:"average_price,omitempty"`
	TypeID        int64    `json:"type_id"`
}

// MarketsRegionIDHistoryGet defines model for MarketsRegionIdHistoryGet.
type MarketsRegionIDHistoryGet = []struct {
	Average float64 `json:"average"`

	// Date The date of this historical statistic entry
	Date    openapi_types.Date `json:"date"`
	Highest float64            `json:"highest"`
	Lowest  float64            `json:"lowest"`

	// OrderCount Total number of orders happened that day
	OrderCount int64 `json:"order_count"`

	// Volume Total
	Volume int64 `json:"volume"`
}

// MarketsRegionIDOrdersGet defines model for MarketsRegionIdOrdersGet.
type MarketsRegionIDOrdersGet = []struct {
	Duration   int64                         `json:"duration"`
	IsBuyOrder bool                          `json:"is_buy_order"`
	Issued     time.Time                     `json:"issued"`
	LocationID int64                         `json:"location_id"`
	MinVolume  int64                         `json:"min_volume"`
	OrderID    int64                         `json:"order_id"`
	Price      float64                       `json:"price"`
	Range      MarketsRegionIDOrdersGetRange `json:"range"`

	// SystemID The solar system this order was placed
	SystemID     int64 `json:"system_id"`
	TypeID       int64 `json:"type_id"`
	VolumeRemain int64 `json:"volume_remain"`
	VolumeTotal  int64 `json:"volume_total"`
}

// MarketsRegionIDOrdersGetRange defines model for MarketsRegionIDOrdersGet.Range.
type MarketsRegionIDOrdersGetRange string

// MarketsRegionIDTypesGet defines model for MarketsRegionIdTypesGet.
type MarketsRegionIDTypesGet = []int64

// MarketsStructuresStructureIDGet defines model for MarketsStructuresStructureIdGet.
type MarketsStructuresStructureIDGet = []struct {
	Duration     int64                                `json:"duration"`
	IsBuyOrder   bool                                 `json:"is_buy_order"`
	Issued       time.Time                            `json:"issued"`
	LocationID   int64                                `json:"location_id"`
	MinVolume    int64                                `json:"min_volume"`
	OrderID      int64                                `json:"order_id"`
	Price        float64                              `json:"price"`
	Range        MarketsStructuresStructureIDGetRange `json:"range"`
	TypeID       int64                                `json:"type_id"`
	VolumeRemain int64                                `json:"volume_remain"`
	VolumeTotal  int64                                `json:"volume_total"`
}

// MarketsStructuresStructureIDGetRange defines model for MarketsStructuresStructureIDGet.Range.
type MarketsStructuresStructureIDGetRange string

// RouteOriginDestinationGet Solar systems in route
type RouteOriginDestinationGet = []int64

// SovereigntyCampaignsGet defines model for SovereigntyCampaignsGet.
type SovereigntyCampaignsGet = []struct {
	// AttackersScore Score for all attacking parties, only present in Defense Events.
	AttackersScore *float64 `json:"attackers_score,omitempty"`

	// CampaignID Unique ID for this campaign.
	CampaignID int64 `json:"campaign_id"`

	// ConstellationID The constellation in which the campaign will take place.
	ConstellationID int64 `json:"constellation_id"`

	// DefenderID Defending alliance, only present in Defense Events
	DefenderID *int64 `json:"defender_id,omitempty"`

	// DefenderScore Score for the defending alliance, only present in Defense Events.
	DefenderScore *float64 `json:"defender_score,omitempty"`

	// EventType Type of event this campaign is for. tcu_defense, ihub_defense and station_defense are referred to as "Defense Events", station_freeport as "Freeport Events".
	EventType SovereigntyCampaignsGetEventType `json:"event_type"`

	// Participants Alliance participating and their respective scores, only present in Freeport Events.
	Participants *[]struct {
		AllianceID int64   `json:"alliance_id"`
		Score      float64 `json:"score"`
	} `json:"participants,omitempty"`

	// SolarSystemID The solar system the structure is located in.
	SolarSystemID int64 `json:"solar_system_id"`

	// StartTime Time the event is scheduled to start.
	StartTime time.Time `json:"start_time"`

	// StructureID The structure item ID that is related to this campaign.
	StructureID int64 `json:"structure_id"`
}

// SovereigntyCampaignsGetEventType Type of event this campaign is for. tcu_defense, ihub_defense and station_defense are referred to as "Defense Events", station_freeport as "Freeport Events".
type SovereigntyCampaignsGetEventType string

// SovereigntyMapGet defines model for SovereigntyMapGet.
type SovereigntyMapGet = []struct {
	AllianceID    *int64 `json:"alliance_id,omitempty"`
	CorporationID *int64 `json:"corporation_id,omitempty"`
	FactionID     *int64 `json:"faction_id,omitempty"`
	SystemID      int64  `json:"system_id"`
}

// SovereigntyStructuresGet defines model for SovereigntyStructuresGet.
type SovereigntyStructuresGet = []struct {
	// AllianceID The alliance that owns the structure.
	AllianceID int64 `json:"alliance_id"`

	// SolarSystemID Solar system in which the structure is located.
	SolarSystemID int64 `json:"solar_system_id"`

	// StructureID Unique item ID for this structure.
	StructureID int64 `json:"structure_id"`

	// StructureTypeID A reference to the type of structure this is.
	StructureTypeID int64 `json:"structure_type_id"`

	// VulnerabilityOccupancyLevel The occupancy level for the next or current vulnerability window. This takes into account all development indexes and capital system bonuses. Also known as Activity Defense Multiplier from in the client. It increases the time that attackers must spend using their entosis links on the structure.
	VulnerabilityOccupancyLevel *float64 `json:"vulnerability_occupancy_level,omitempty"`

	// VulnerableEndTime The time at which the next or current vulnerability window ends. At the end of a vulnerability window the next window is recalculated and locked in along with the vulnerabilityOccupancyLevel. If the structure is not in 100% entosis control of the defender, it will go in to 'overtime' and stay vulnerable for as long as that situation persists. Only once the defenders have 100% entosis control and has the vulnerableEndTime passed does the vulnerability interval expire and a new one is calculated.
	VulnerableEndTime *time.Time `json:"vulnerable_end_time,omitempty"`

	// VulnerableStartTime The next time at which the structure will become vulnerable. Or the start time of the current window if current time is between this and vulnerableEndTime.
	VulnerableStartTime *time.Time `json:"vulnerable_start_time,omitempty"`
}

// StatusGet defines model for StatusGet.
type StatusGet struct {
	// Players Current online player count
	Players int `json:"players"`

	// ServerVersion Running version as string
	ServerVersion string `json:"server_version"`

	// StartTime Server start timestamp
	StartTime time.Time `json:"start_time"`

	// Vip If the server is in VIP mode
	Vip *bool `json:"vip,omitempty"`
}

// UniverseAncestriesGet defines model for UniverseAncestriesGet.
type UniverseAncestriesGet = []struct {
	// BloodlineID The bloodline associated with this ancestry
	BloodlineID      int64   `json:"bloodline_id"`
	Description      string  `json:"description"`
	IconID           *int64  `json:"icon_id,omitempty"`
	ID               int64   `json:"id"`
	Name             string  `json:"name"`
	ShortDescription *string `json:"short_description,omitempty"`
}

// UniverseAsteroidBeltsAsteroidBeltIDGet defines model for UniverseAsteroidBeltsAsteroidBeltIdGet.
type UniverseAsteroidBeltsAsteroidBeltIDGet struct {
	Name     string `json:"name"`
	Position struct {
		X float64 `json:"x"`
		Y float64 `json:"y"`
		Z float64 `json:"z"`
	} `json:"position"`

	// SystemID The solar system this asteroid belt is in
	SystemID int64 `json:"system_id"`
}

// UniverseBloodlinesGet defines model for UniverseBloodlinesGet.
type UniverseBloodlinesGet = []struct {
	BloodlineID   int64  `json:"bloodline_id"`
	Charisma      int64  `json:"charisma"`
	CorporationID int64  `json:"corporation_id"`
	Description   string `json:"description"`
	Intelligence  int64  `json:"intelligence"`
	Memory        int64  `json:"memory"`
	Name          string `json:"name"`
	Perception    int64  `json:"perception"`
	RaceID        int64  `json:"race_id"`
	ShipTypeID    int64  `json:"ship_type_id"`
	Willpower     int64  `json:"willpower"`
}

// UniverseCategoriesCategoryIDGet defines model for UniverseCategoriesCategoryIdGet.
type UniverseCategoriesCategoryIDGet struct {
	CategoryID int64   `json:"category_id"`
	Groups     []int64 `json:"groups"`
	Name       string  `json:"name"`
	Published  bool    `json:"published"`
}

// UniverseCategoriesGet defines model for UniverseCategoriesGet.
type UniverseCategoriesGet = []int64

// UniverseConstellationsConstellationIDGet defines model for UniverseConstellationsConstellationIdGet.
type UniverseConstellationsConstellationIDGet struct {
	ConstellationID int64  `json:"constellation_id"`
	Name            string `json:"name"`
	Position        struct {
		X float64 `json:"x"`
		Y float64 `json:"y"`
		Z float64 `json:"z"`
	} `json:"position"`

	// RegionID The region this constellation is in
	RegionID int64   `json:"region_id"`
	Systems  []int64 `json:"systems"`
}

// UniverseConstellationsGet defines model for UniverseConstellationsGet.
type UniverseConstellationsGet = []int64

// UniverseFactionsGet defines model for UniverseFactionsGet.
type UniverseFactionsGet = []struct {
	CorporationID        *int64  `json:"corporation_id,omitempty"`
	Description          string  `json:"description"`
	FactionID            int64   `json:"faction_id"`
	IsUnique             bool    `json:"is_unique"`
	MilitiaCorporationID *int64  `json:"militia_corporation_id,omitempty"`
	Name                 string  `json:"name"`
	SizeFactor           float64 `json:"size_factor"`
	SolarSystemID        *int64  `json:"solar_system_id,omitempty"`
	StationCount         int64   `json:"station_count"`
	StationSystemCount   int64   `json:"station_system_count"`
}

// UniverseGraphicsGet defines model for UniverseGraphicsGet.
type UniverseGraphicsGet = []int64

// UniverseGraphicsGraphicIDGet defines model for UniverseGraphicsGraphicIdGet.
type UniverseGraphicsGraphicIDGet struct {
	CollisionFile *string `json:"collision_file,omitempty"`
	GraphicFile   *string `json:"graphic_file,omitempty"`
	GraphicID     int64   `json:"graphic_id"`
	IconFolder    *string `json:"icon_folder,omitempty"`
	SofDna        *string `json:"sof_dna,omitempty"`
	SofFationName *string `json:"sof_fation_name,omitempty"`
	SofHullName   *string `json:"sof_hull_name,omitempty"`
	SofRaceName   *string `json:"sof_race_name,omitempty"`
}

// UniverseGroupsGet defines model for UniverseGroupsGet.
type UniverseGroupsGet = []int64

// UniverseGroupsGroupIDGet defines model for UniverseGroupsGroupIdGet.
type UniverseGroupsGroupIDGet struct {
	CategoryID int64   `json:"category_id"`
	GroupID    int64   `json:"group_id"`
	Name       string  `json:"name"`
	Published  bool    `json:"published"`
	Types      []int64 `json:"types"`
}

// UniverseIdsPost defines model for UniverseIdsPost.
type UniverseIdsPost struct {
	Agents *[]struct {
		ID   *int64  `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"agents,omitempty"`
	Alliances *[]struct {
		ID   *int64  `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"alliances,omitempty"`
	Characters *[]struct {
		ID   *int64  `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"characters,omitempty"`
	Constellations *[]struct {
		ID   *int64  `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"constellations,omitempty"`
	Corporations *[]struct {
		ID   *int64  `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"corporations,omitempty"`
	Factions *[]struct {
		ID   *int64  `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"factions,omitempty"`
	InventoryTypes *[]struct {
		ID   *int64  `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"inventory_types,omitempty"`
	Regions *[]struct {
		ID   *int64  `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"regions,omitempty"`
	Stations *[]struct {
		ID   *int64  `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"stations,omitempty"`
	Systems *[]struct {
		ID   *int64  `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"systems,omitempty"`
}

// UniverseMoonsMoonIDGet defines model for UniverseMoonsMoonIdGet.
type UniverseMoonsMoonIDGet struct {
	MoonID   int64  `json:"moon_id"`
	Name     string `json:"name"`
	Position struct {
		X float64 `json:"x"`
		Y float64 `json:"y"`
		Z float64 `json:"z"`
	} `json:"position"`

	// SystemID The solar system this moon is in
	SystemID int64 `json:"system_id"`
}

// UniverseNamesPost defines model for UniverseNamesPost.
type UniverseNamesPost = []struct {
	Category UniverseNamesPostCategory `json:"category"`
	ID       int64                     `json:"id"`
	Name     string                    `json:"name"`
}

// UniverseNamesPostCategory defines model for UniverseNamesPost.Category.
type UniverseNamesPostCategory string

// UniversePlanetsPlanetIDGet defines model for UniversePlanetsPlanetIdGet.
type UniversePlanetsPlanetIDGet struct {
	Name     string `json:"name"`
	PlanetID int64  `json:"planet_id"`
	Position struct {
		X float64 `json:"x"`
		Y float64 `json:"y"`
		Z float64 `json:"z"`
	} `json:"position"`

	// SystemID The solar system this planet is in
	SystemID int64 `json:"system_id"`
	TypeID   int64 `json:"type_id"`
}

// UniverseRacesGet defines model for UniverseRacesGet.
type UniverseRacesGet = []struct {
	// AllianceID The alliance generally associated with this race
	AllianceID  int64  `json:"alliance_id"`
	Description string `json:"description"`
	Name        string `json:"name"`
	RaceID      int64  `json:"race_id"`
}

// UniverseRegionsGet defines model for UniverseRegionsGet.
type UniverseRegionsGet = []int64

// UniverseRegionsRegionIDGet defines model for UniverseRegionsRegionIdGet.
type UniverseRegionsRegionIDGet struct {
	Constellations []int64 `json:"constellations"`
	Description    *string `json:"description,omitempty"`
	Name           string  `json:"name"`
	RegionID       int64   `json:"region_id"`
}

// UniverseSchematicsSchematicIDGet defines model for UniverseSchematicsSchematicIdGet.
type UniverseSchematicsSchematicIDGet struct {
	// CycleTime Time in seconds to process a run
	CycleTime     int64  `json:"cycle_time"`
	SchematicName string `json:"schematic_name"`
}

// UniverseStargatesStargateIDGet defines model for UniverseStargatesStargateIdGet.
type UniverseStargatesStargateIDGet struct {
	Destination struct {
		// StargateID The stargate this stargate connects to
		StargateID int64 `json:"stargate_id"`

		// SystemID The solar system this stargate connects to
		SystemID int64 `json:"system_id"`
	} `json:"destination"`
	Name     string `json:"name"`
	Position struct {
		X float64 `json:"x"`
		Y float64 `json:"y"`
		Z float64 `json:"z"`
	} `json:"position"`
	StargateID int64 `json:"stargate_id"`

	// SystemID The solar system this stargate is in
	SystemID int64 `json:"system_id"`
	TypeID   int64 `json:"type_id"`
}

// UniverseStarsStarIDGet defines model for UniverseStarsStarIdGet.
type UniverseStarsStarIDGet struct {
	// Age Age of star in years
	Age           int64                               `json:"age"`
	Luminosity    float64                             `json:"luminosity"`
	Name          string                              `json:"name"`
	Radius        int64                               `json:"radius"`
	SolarSystemID int64                               `json:"solar_system_id"`
	SpectralClass UniverseStarsStarIDGetSpectralClass `json:"spectral_class"`
	Temperature   int64                               `json:"temperature"`
	TypeID        int64                               `json:"type_id"`
}

// UniverseStarsStarIDGetSpectralClass defines model for UniverseStarsStarIDGet.SpectralClass.
type UniverseStarsStarIDGetSpectralClass string

// UniverseStationsStationIDGet defines model for UniverseStationsStationIdGet.
type UniverseStationsStationIDGet struct {
	MaxDockableShipVolume float64 `json:"max_dockable_ship_volume"`
	Name                  string  `json:"name"`
	OfficeRentalCost      float64 `json:"office_rental_cost"`

	// Owner ID of the corporation that controls this station
	Owner    *int64 `json:"owner,omitempty"`
	Position struct {
		X float64 `json:"x"`
		Y float64 `json:"y"`
		Z float64 `json:"z"`
	} `json:"position"`
	RaceID                   *int64                                 `json:"race_id,omitempty"`
	ReprocessingEfficiency   float64                                `json:"reprocessing_efficiency"`
	ReprocessingStationsTake float64                                `json:"reprocessing_stations_take"`
	Services                 []UniverseStationsStationIDGetServices `json:"services"`
	StationID                int64                                  `json:"station_id"`

	// SystemID The solar system this station is in
	SystemID int64 `json:"system_id"`
	TypeID   int64 `json:"type_id"`
}

// UniverseStationsStationIDGetServices service string
type UniverseStationsStationIDGetServices string

// UniverseStructuresGet defines model for UniverseStructuresGet.
type UniverseStructuresGet = []int64

// UniverseStructuresStructureIDGet defines model for UniverseStructuresStructureIdGet.
type UniverseStructuresStructureIDGet struct {
	// Name The full name of the structure
	Name string `json:"name"`

	// OwnerID The ID of the corporation who owns this particular structure
	OwnerID int64 `json:"owner_id"`

	// Position Coordinates of the structure in Cartesian space relative to the Sun, in metres.
	Position *struct {
		X float64 `json:"x"`
		Y float64 `json:"y"`
		Z float64 `json:"z"`
	} `json:"position,omitempty"`
	SolarSystemID int64  `json:"solar_system_id"`
	TypeID        *int64 `json:"type_id,omitempty"`
}

// UniverseSystemJumpsGet defines model for UniverseSystemJumpsGet.
type UniverseSystemJumpsGet = []struct {
	ShipJumps int64 `json:"ship_jumps"`
	SystemID  int64 `json:"system_id"`
}

// UniverseSystemKillsGet defines model for UniverseSystemKillsGet.
type UniverseSystemKillsGet = []struct {
	// NpcKills Number of NPC ships killed in this system
	NpcKills int64 `json:"npc_kills"`

	// PodKills Number of pods killed in this system
	PodKills int64 `json:"pod_kills"`

	// ShipKills Number of player ships killed in this system
	ShipKills int64 `json:"ship_kills"`
	SystemID  int64 `json:"system_id"`
}

// UniverseSystemsGet defines model for UniverseSystemsGet.
type UniverseSystemsGet = []int64

// UniverseSystemsSystemIDGet defines model for UniverseSystemsSystemIdGet.
type UniverseSystemsSystemIDGet struct {
	// ConstellationID The constellation this solar system is in
	ConstellationID int64  `json:"constellation_id"`
	Name            string `json:"name"`
	Planets         *[]struct {
		AsteroidBelts *[]int64 `json:"asteroid_belts,omitempty"`
		Moons         *[]int64 `json:"moons,omitempty"`
		PlanetID      int64    `json:"planet_id"`
	} `json:"planets,omitempty"`
	Position struct {
		X float64 `json:"x"`
		Y float64 `json:"y"`
		Z float64 `json:"z"`
	} `json:"position"`
	SecurityClass  *string  `json:"security_class,omitempty"`
	SecurityStatus float64  `json:"security_status"`
	StarID         *int64   `json:"star_id,omitempty"`
	Stargates      *[]int64 `json:"stargates,omitempty"`
	Stations       *[]int64 `json:"stations,omitempty"`
	SystemID       int64    `json:"system_id"`
}

// UniverseTypesGet defines model for UniverseTypesGet.
type UniverseTypesGet = []int64

// UniverseTypesTypeIDGet defines model for UniverseTypesTypeIdGet.
type UniverseTypesTypeIDGet struct {
	Capacity        *float64 `json:"capacity,omitempty"`
	Description     string   `json:"description"`
	DogmaAttributes *[]struct {
		AttributeID int64   `json:"attribute_id"`
		Value       float64 `json:"value"`
	} `json:"dogma_attributes,omitempty"`
	DogmaEffects *[]struct {
		EffectID  int64 `json:"effect_id"`
		IsDefault bool  `json:"is_default"`
	} `json:"dogma_effects,omitempty"`
	GraphicID *int64 `json:"graphic_id,omitempty"`
	GroupID   int64  `json:"group_id"`
	IconID    *int64 `json:"icon_id,omitempty"`

	// MarketGroupID This only exists for types that can be put on the market
	MarketGroupID  *int64   `json:"market_group_id,omitempty"`
	Mass           *float64 `json:"mass,omitempty"`
	Name           string   `json:"name"`
	PackagedVolume *float64 `json:"packaged_volume,omitempty"`
	PortionSize    *int64   `json:"portion_size,omitempty"`
	Published      bool     `json:"published"`
	Radius         *float64 `json:"radius,omitempty"`
	TypeID         int64    `json:"type_id"`
	Volume         *float64 `json:"volume,omitempty"`
}

// WarsGet defines model for WarsGet.
type WarsGet = []int64

// WarsWarIDGet defines model for WarsWarIdGet.
type WarsWarIDGet struct {
	// Aggressor The aggressor corporation or alliance that declared this war, only contains either corporation_id or alliance_id
	Aggressor struct {
		// AllianceID Alliance ID if and only if the aggressor is an alliance
		AllianceID *int64 `json:"alliance_id,omitempty"`

		// CorporationID Corporation ID if and only if the aggressor is a corporation
		CorporationID *int64 `json:"corporation_id,omitempty"`

		// IskDestroyed ISK value of ships the aggressor has destroyed
		IskDestroyed float64 `json:"isk_destroyed"`

		// ShipsKilled The number of ships the aggressor has killed
		ShipsKilled int64 `json:"ships_killed"`
	} `json:"aggressor"`

	// Allies allied corporations or alliances, each object contains either corporation_id or alliance_id
	Allies *[]struct {
		// AllianceID Alliance ID if and only if this ally is an alliance
		AllianceID *int64 `json:"alliance_id,omitempty"`

		// CorporationID Corporation ID if and only if this ally is a corporation
		CorporationID *int64 `json:"corporation_id,omitempty"`
	} `json:"allies,omitempty"`

	// Declared Time that the war was declared
	Declared time.Time `json:"declared"`

	// Defender The defending corporation or alliance that declared this war, only contains either corporation_id or alliance_id
	Defender struct {
		// AllianceID Alliance ID if and only if the defender is an alliance
		AllianceID *int64 `json:"alliance_id,omitempty"`

		// CorporationID Corporation ID if and only if the defender is a corporation
		CorporationID *int64 `json:"corporation_id,omitempty"`

		// IskDestroyed ISK value of ships the defender has killed
		IskDestroyed float64 `json:"isk_destroyed"`

		// ShipsKilled The number of ships the defender has killed
		ShipsKilled int64 `json:"ships_killed"`
	} `json:"defender"`

	// Finished Time the war ended and shooting was no longer allowed
	Finished *time.Time `json:"finished,omitempty"`

	// ID ID of the specified war
	ID int64 `json:"id"`

	// Mutual Was the war declared mutual by both parties
	Mutual bool `json:"mutual"`

	// OpenForAllies Is the war currently open for allies or not
	OpenForAllies bool `json:"open_for_allies"`

	// Retracted Time the war was retracted but both sides could still shoot each other
	Retracted *time.Time `json:"retracted,omitempty"`

	// Started Time when the war started and both sides could shoot each other
	Started *time.Time `json:"started,omitempty"`
}

// WarsWarIDKillmailsGet defines model for WarsWarIdKillmailsGet.
type WarsWarIDKillmailsGet = []struct {
	// KillmailHash A hash of this killmail
	KillmailHash string `json:"killmail_hash"`

	// KillmailID ID of this killmail
	KillmailID int64 `json:"killmail_id"`
}

// AcceptLanguage defines model for AcceptLanguage.
type AcceptLanguage string

// CompatibilityDate defines model for CompatibilityDate.
type CompatibilityDate = openapi_types.Date

// IfNoneMatch defines model for IfNoneMatch.
type IfNoneMatch = string

// Tenant defines model for Tenant.
type Tenant = string

// GetAlliancesParams defines parameters for GetAlliances.
type GetAlliancesParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetAlliancesParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetAlliancesParamsAcceptLanguage defines parameters for GetAlliances.
type GetAlliancesParamsAcceptLanguage string

// GetAlliancesAllianceIDParams defines parameters for GetAlliancesAllianceID.
type GetAlliancesAllianceIDParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetAlliancesAllianceIDParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetAlliancesAllianceIDParamsAcceptLanguage defines parameters for GetAlliancesAllianceID.
type GetAlliancesAllianceIDParamsAcceptLanguage string

// GetAlliancesAllianceIDContactsParams defines parameters for GetAlliancesAllianceIDContacts.
type GetAlliancesAllianceIDContactsParams struct {
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetAlliancesAllianceIDContactsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetAlliancesAllianceIDContactsParamsAcceptLanguage defines parameters for GetAlliancesAllianceIDContacts.
type GetAlliancesAllianceIDContactsParamsAcceptLanguage string

// GetAlliancesAllianceIDContactsLabelsParams defines parameters for GetAlliancesAllianceIDContactsLabels.
type GetAlliancesAllianceIDContactsLabelsParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetAlliancesAllianceIDContactsLabelsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetAlliancesAllianceIDContactsLabelsParamsAcceptLanguage defines parameters for GetAlliancesAllianceIDContactsLabels.
type GetAlliancesAllianceIDContactsLabelsParamsAcceptLanguage string

// GetAlliancesAllianceIDCorporationsParams defines parameters for GetAlliancesAllianceIDCorporations.
type GetAlliancesAllianceIDCorporationsParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetAlliancesAllianceIDCorporationsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetAlliancesAllianceIDCorporationsParamsAcceptLanguage defines parameters for GetAlliancesAllianceIDCorporations.
type GetAlliancesAllianceIDCorporationsParamsAcceptLanguage string

// GetAlliancesAllianceIDIconsParams defines parameters for GetAlliancesAllianceIDIcons.
type GetAlliancesAllianceIDIconsParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetAlliancesAllianceIDIconsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetAlliancesAllianceIDIconsParamsAcceptLanguage defines parameters for GetAlliancesAllianceIDIcons.
type GetAlliancesAllianceIDIconsParamsAcceptLanguage string

// PostCharactersAffiliationJSONBody defines parameters for PostCharactersAffiliation.
type PostCharactersAffiliationJSONBody = []int64

// PostCharactersAffiliationParams defines parameters for PostCharactersAffiliation.
type PostCharactersAffiliationParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *PostCharactersAffiliationParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// PostCharactersAffiliationParamsAcceptLanguage defines parameters for PostCharactersAffiliation.
type PostCharactersAffiliationParamsAcceptLanguage string

// GetCharactersCharacterIDParams defines parameters for GetCharactersCharacterID.
type GetCharactersCharacterIDParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCharactersCharacterIDParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCharactersCharacterIDParamsAcceptLanguage defines parameters for GetCharactersCharacterID.
type GetCharactersCharacterIDParamsAcceptLanguage string

// GetCharactersCharacterIDAgentsResearchParams defines parameters for GetCharactersCharacterIDAgentsResearch.
type GetCharactersCharacterIDAgentsResearchParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCharactersCharacterIDAgentsResearchParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCharactersCharacterIDAgentsResearchParamsAcceptLanguage defines parameters for GetCharactersCharacterIDAgentsResearch.
type GetCharactersCharacterIDAgentsResearchParamsAcceptLanguage string

// GetCharactersCharacterIDAssetsParams defines parameters for GetCharactersCharacterIDAssets.
type GetCharactersCharacterIDAssetsParams struct {
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCharactersCharacterIDAssetsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCharactersCharacterIDAssetsParamsAcceptLanguage defines parameters for GetCharactersCharacterIDAssets.
type GetCharactersCharacterIDAssetsParamsAcceptLanguage string

// PostCharactersCharacterIDAssetsLocationsJSONBody defines parameters for PostCharactersCharacterIDAssetsLocations.
type PostCharactersCharacterIDAssetsLocationsJSONBody = []int64

// PostCharactersCharacterIDAssetsLocationsParams defines parameters for PostCharactersCharacterIDAssetsLocations.
type PostCharactersCharacterIDAssetsLocationsParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *PostCharactersCharacterIDAssetsLocationsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// PostCharactersCharacterIDAssetsLocationsParamsAcceptLanguage defines parameters for PostCharactersCharacterIDAssetsLocations.
type PostCharactersCharacterIDAssetsLocationsParamsAcceptLanguage string

// PostCharactersCharacterIDAssetsNamesJSONBody defines parameters for PostCharactersCharacterIDAssetsNames.
type PostCharactersCharacterIDAssetsNamesJSONBody = []int64

// PostCharactersCharacterIDAssetsNamesParams defines parameters for PostCharactersCharacterIDAssetsNames.
type PostCharactersCharacterIDAssetsNamesParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *PostCharactersCharacterIDAssetsNamesParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// PostCharactersCharacterIDAssetsNamesParamsAcceptLanguage defines parameters for PostCharactersCharacterIDAssetsNames.
type PostCharactersCharacterIDAssetsNamesParamsAcceptLanguage string

// GetCharactersCharacterIDAttributesParams defines parameters for GetCharactersCharacterIDAttributes.
type GetCharactersCharacterIDAttributesParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCharactersCharacterIDAttributesParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCharactersCharacterIDAttributesParamsAcceptLanguage defines parameters for GetCharactersCharacterIDAttributes.
type GetCharactersCharacterIDAttributesParamsAcceptLanguage string

// GetCharactersCharacterIDBlueprintsParams defines parameters for GetCharactersCharacterIDBlueprints.
type GetCharactersCharacterIDBlueprintsParams struct {
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCharactersCharacterIDBlueprintsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCharactersCharacterIDBlueprintsParamsAcceptLanguage defines parameters for GetCharactersCharacterIDBlueprints.
type GetCharactersCharacterIDBlueprintsParamsAcceptLanguage string

// GetCharactersCharacterIDCalendarParams defines parameters for GetCharactersCharacterIDCalendar.
type GetCharactersCharacterIDCalendarParams struct {
	FromEvent *int64 `form:"from_event,omitempty" json:"from_event,omitempty"`

	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCharactersCharacterIDCalendarParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCharactersCharacterIDCalendarParamsAcceptLanguage defines parameters for GetCharactersCharacterIDCalendar.
type GetCharactersCharacterIDCalendarParamsAcceptLanguage string

// GetCharactersCharacterIDCalendarEventIDParams defines parameters for GetCharactersCharacterIDCalendarEventID.
type GetCharactersCharacterIDCalendarEventIDParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCharactersCharacterIDCalendarEventIDParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCharactersCharacterIDCalendarEventIDParamsAcceptLanguage defines parameters for GetCharactersCharacterIDCalendarEventID.
type GetCharactersCharacterIDCalendarEventIDParamsAcceptLanguage string

// PutCharactersCharacterIDCalendarEventIDJSONBody defines parameters for PutCharactersCharacterIDCalendarEventID.
type PutCharactersCharacterIDCalendarEventIDJSONBody struct {
	Response PutCharactersCharacterIDCalendarEventIDJSONBodyResponse `json:"response"`
}

// PutCharactersCharacterIDCalendarEventIDParams defines parameters for PutCharactersCharacterIDCalendarEventID.
type PutCharactersCharacterIDCalendarEventIDParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *PutCharactersCharacterIDCalendarEventIDParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// PutCharactersCharacterIDCalendarEventIDParamsAcceptLanguage defines parameters for PutCharactersCharacterIDCalendarEventID.
type PutCharactersCharacterIDCalendarEventIDParamsAcceptLanguage string

// PutCharactersCharacterIDCalendarEventIDJSONBodyResponse defines parameters for PutCharactersCharacterIDCalendarEventID.
type PutCharactersCharacterIDCalendarEventIDJSONBodyResponse string

// GetCharactersCharacterIDCalendarEventIDAttendeesParams defines parameters for GetCharactersCharacterIDCalendarEventIDAttendees.
type GetCharactersCharacterIDCalendarEventIDAttendeesParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCharactersCharacterIDCalendarEventIDAttendeesParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCharactersCharacterIDCalendarEventIDAttendeesParamsAcceptLanguage defines parameters for GetCharactersCharacterIDCalendarEventIDAttendees.
type GetCharactersCharacterIDCalendarEventIDAttendeesParamsAcceptLanguage string

// GetCharactersCharacterIDClonesParams defines parameters for GetCharactersCharacterIDClones.
type GetCharactersCharacterIDClonesParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCharactersCharacterIDClonesParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCharactersCharacterIDClonesParamsAcceptLanguage defines parameters for GetCharactersCharacterIDClones.
type GetCharactersCharacterIDClonesParamsAcceptLanguage string

// DeleteCharactersCharacterIDContactsParams defines parameters for DeleteCharactersCharacterIDContacts.
type DeleteCharactersCharacterIDContactsParams struct {
	ContactIds []int64 `form:"contact_ids" json:"contact_ids"`

	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *DeleteCharactersCharacterIDContactsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// DeleteCharactersCharacterIDContactsParamsAcceptLanguage defines parameters for DeleteCharactersCharacterIDContacts.
type DeleteCharactersCharacterIDContactsParamsAcceptLanguage string

// GetCharactersCharacterIDContactsParams defines parameters for GetCharactersCharacterIDContacts.
type GetCharactersCharacterIDContactsParams struct {
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCharactersCharacterIDContactsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCharactersCharacterIDContactsParamsAcceptLanguage defines parameters for GetCharactersCharacterIDContacts.
type GetCharactersCharacterIDContactsParamsAcceptLanguage string

// PostCharactersCharacterIDContactsJSONBody defines parameters for PostCharactersCharacterIDContacts.
type PostCharactersCharacterIDContactsJSONBody = []int64

// PostCharactersCharacterIDContactsParams defines parameters for PostCharactersCharacterIDContacts.
type PostCharactersCharacterIDContactsParams struct {
	LabelIds *[]int64 `form:"label_ids,omitempty" json:"label_ids,omitempty"`
	Standing float64  `form:"standing" json:"standing"`
	Watched  *bool    `form:"watched,omitempty" json:"watched,omitempty"`

	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *PostCharactersCharacterIDContactsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// PostCharactersCharacterIDContactsParamsAcceptLanguage defines parameters for PostCharactersCharacterIDContacts.
type PostCharactersCharacterIDContactsParamsAcceptLanguage string

// PutCharactersCharacterIDContactsJSONBody defines parameters for PutCharactersCharacterIDContacts.
type PutCharactersCharacterIDContactsJSONBody = []int64

// PutCharactersCharacterIDContactsParams defines parameters for PutCharactersCharacterIDContacts.
type PutCharactersCharacterIDContactsParams struct {
	LabelIds *[]int64 `form:"label_ids,omitempty" json:"label_ids,omitempty"`
	Standing float64  `form:"standing" json:"standing"`
	Watched  *bool    `form:"watched,omitempty" json:"watched,omitempty"`

	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *PutCharactersCharacterIDContactsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// PutCharactersCharacterIDContactsParamsAcceptLanguage defines parameters for PutCharactersCharacterIDContacts.
type PutCharactersCharacterIDContactsParamsAcceptLanguage string

// GetCharactersCharacterIDContactsLabelsParams defines parameters for GetCharactersCharacterIDContactsLabels.
type GetCharactersCharacterIDContactsLabelsParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCharactersCharacterIDContactsLabelsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCharactersCharacterIDContactsLabelsParamsAcceptLanguage defines parameters for GetCharactersCharacterIDContactsLabels.
type GetCharactersCharacterIDContactsLabelsParamsAcceptLanguage string

// GetCharactersCharacterIDContractsParams defines parameters for GetCharactersCharacterIDContracts.
type GetCharactersCharacterIDContractsParams struct {
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCharactersCharacterIDContractsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCharactersCharacterIDContractsParamsAcceptLanguage defines parameters for GetCharactersCharacterIDContracts.
type GetCharactersCharacterIDContractsParamsAcceptLanguage string

// GetCharactersCharacterIDContractsContractIDBidsParams defines parameters for GetCharactersCharacterIDContractsContractIDBids.
type GetCharactersCharacterIDContractsContractIDBidsParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCharactersCharacterIDContractsContractIDBidsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCharactersCharacterIDContractsContractIDBidsParamsAcceptLanguage defines parameters for GetCharactersCharacterIDContractsContractIDBids.
type GetCharactersCharacterIDContractsContractIDBidsParamsAcceptLanguage string

// GetCharactersCharacterIDContractsContractIDItemsParams defines parameters for GetCharactersCharacterIDContractsContractIDItems.
type GetCharactersCharacterIDContractsContractIDItemsParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCharactersCharacterIDContractsContractIDItemsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCharactersCharacterIDContractsContractIDItemsParamsAcceptLanguage defines parameters for GetCharactersCharacterIDContractsContractIDItems.
type GetCharactersCharacterIDContractsContractIDItemsParamsAcceptLanguage string

// GetCharactersCharacterIDCorporationhistoryParams defines parameters for GetCharactersCharacterIDCorporationhistory.
type GetCharactersCharacterIDCorporationhistoryParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCharactersCharacterIDCorporationhistoryParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCharactersCharacterIDCorporationhistoryParamsAcceptLanguage defines parameters for GetCharactersCharacterIDCorporationhistory.
type GetCharactersCharacterIDCorporationhistoryParamsAcceptLanguage string

// PostCharactersCharacterIDCspaJSONBody defines parameters for PostCharactersCharacterIDCspa.
type PostCharactersCharacterIDCspaJSONBody = []int64

// PostCharactersCharacterIDCspaParams defines parameters for PostCharactersCharacterIDCspa.
type PostCharactersCharacterIDCspaParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *PostCharactersCharacterIDCspaParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// PostCharactersCharacterIDCspaParamsAcceptLanguage defines parameters for PostCharactersCharacterIDCspa.
type PostCharactersCharacterIDCspaParamsAcceptLanguage string

// GetCharactersCharacterIDFatigueParams defines parameters for GetCharactersCharacterIDFatigue.
type GetCharactersCharacterIDFatigueParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCharactersCharacterIDFatigueParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCharactersCharacterIDFatigueParamsAcceptLanguage defines parameters for GetCharactersCharacterIDFatigue.
type GetCharactersCharacterIDFatigueParamsAcceptLanguage string

// GetCharactersCharacterIDFittingsParams defines parameters for GetCharactersCharacterIDFittings.
type GetCharactersCharacterIDFittingsParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCharactersCharacterIDFittingsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCharactersCharacterIDFittingsParamsAcceptLanguage defines parameters for GetCharactersCharacterIDFittings.
type GetCharactersCharacterIDFittingsParamsAcceptLanguage string

// PostCharactersCharacterIDFittingsJSONBody defines parameters for PostCharactersCharacterIDFittings.
type PostCharactersCharacterIDFittingsJSONBody struct {
	Description string `json:"description"`
	Items       []struct {
		// Flag Fitting location for the item. Entries placed in 'Invalid' will be discarded. If this leaves the fitting with nothing, it will cause an error.
		Flag     PostCharactersCharacterIDFittingsJSONBodyItemsFlag `json:"flag"`
		Quantity int64                                              `json:"quantity"`
		TypeID   int64                                              `json:"type_id"`
	} `json:"items"`
	Name       string `json:"name"`
	ShipTypeID int64  `json:"ship_type_id"`
}

// PostCharactersCharacterIDFittingsParams defines parameters for PostCharactersCharacterIDFittings.
type PostCharactersCharacterIDFittingsParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *PostCharactersCharacterIDFittingsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// PostCharactersCharacterIDFittingsParamsAcceptLanguage defines parameters for PostCharactersCharacterIDFittings.
type PostCharactersCharacterIDFittingsParamsAcceptLanguage string

// PostCharactersCharacterIDFittingsJSONBodyItemsFlag defines parameters for PostCharactersCharacterIDFittings.
type PostCharactersCharacterIDFittingsJSONBodyItemsFlag string

// DeleteCharactersCharacterIDFittingsFittingIDParams defines parameters for DeleteCharactersCharacterIDFittingsFittingID.
type DeleteCharactersCharacterIDFittingsFittingIDParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *DeleteCharactersCharacterIDFittingsFittingIDParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// DeleteCharactersCharacterIDFittingsFittingIDParamsAcceptLanguage defines parameters for DeleteCharactersCharacterIDFittingsFittingID.
type DeleteCharactersCharacterIDFittingsFittingIDParamsAcceptLanguage string

// GetCharactersCharacterIDFleetParams defines parameters for GetCharactersCharacterIDFleet.
type GetCharactersCharacterIDFleetParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCharactersCharacterIDFleetParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCharactersCharacterIDFleetParamsAcceptLanguage defines parameters for GetCharactersCharacterIDFleet.
type GetCharactersCharacterIDFleetParamsAcceptLanguage string

// GetCharactersCharacterIDFwStatsParams defines parameters for GetCharactersCharacterIDFwStats.
type GetCharactersCharacterIDFwStatsParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCharactersCharacterIDFwStatsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCharactersCharacterIDFwStatsParamsAcceptLanguage defines parameters for GetCharactersCharacterIDFwStats.
type GetCharactersCharacterIDFwStatsParamsAcceptLanguage string

// GetCharactersCharacterIDImplantsParams defines parameters for GetCharactersCharacterIDImplants.
type GetCharactersCharacterIDImplantsParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCharactersCharacterIDImplantsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCharactersCharacterIDImplantsParamsAcceptLanguage defines parameters for GetCharactersCharacterIDImplants.
type GetCharactersCharacterIDImplantsParamsAcceptLanguage string

// GetCharactersCharacterIDIndustryJobsParams defines parameters for GetCharactersCharacterIDIndustryJobs.
type GetCharactersCharacterIDIndustryJobsParams struct {
	IncludeCompleted *bool `form:"include_completed,omitempty" json:"include_completed,omitempty"`

	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCharactersCharacterIDIndustryJobsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCharactersCharacterIDIndustryJobsParamsAcceptLanguage defines parameters for GetCharactersCharacterIDIndustryJobs.
type GetCharactersCharacterIDIndustryJobsParamsAcceptLanguage string

// GetCharactersCharacterIDKillmailsRecentParams defines parameters for GetCharactersCharacterIDKillmailsRecent.
type GetCharactersCharacterIDKillmailsRecentParams struct {
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCharactersCharacterIDKillmailsRecentParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCharactersCharacterIDKillmailsRecentParamsAcceptLanguage defines parameters for GetCharactersCharacterIDKillmailsRecent.
type GetCharactersCharacterIDKillmailsRecentParamsAcceptLanguage string

// GetCharactersCharacterIDLocationParams defines parameters for GetCharactersCharacterIDLocation.
type GetCharactersCharacterIDLocationParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCharactersCharacterIDLocationParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCharactersCharacterIDLocationParamsAcceptLanguage defines parameters for GetCharactersCharacterIDLocation.
type GetCharactersCharacterIDLocationParamsAcceptLanguage string

// GetCharactersCharacterIDLoyaltyPointsParams defines parameters for GetCharactersCharacterIDLoyaltyPoints.
type GetCharactersCharacterIDLoyaltyPointsParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCharactersCharacterIDLoyaltyPointsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCharactersCharacterIDLoyaltyPointsParamsAcceptLanguage defines parameters for GetCharactersCharacterIDLoyaltyPoints.
type GetCharactersCharacterIDLoyaltyPointsParamsAcceptLanguage string

// GetCharactersCharacterIDMailParams defines parameters for GetCharactersCharacterIDMail.
type GetCharactersCharacterIDMailParams struct {
	Labels     *[]int64 `form:"labels,omitempty" json:"labels,omitempty"`
	LastMailID *int64   `form:"last_mail_id,omitempty" json:"last_mail_id,omitempty"`

	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCharactersCharacterIDMailParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCharactersCharacterIDMailParamsAcceptLanguage defines parameters for GetCharactersCharacterIDMail.
type GetCharactersCharacterIDMailParamsAcceptLanguage string

// PostCharactersCharacterIDMailJSONBody defines parameters for PostCharactersCharacterIDMail.
type PostCharactersCharacterIDMailJSONBody struct {
	ApprovedCost *int64 `json:"approved_cost,omitempty"`
	Body         string `json:"body"`
	Recipients   []struct {
		RecipientID   int64                                                        `json:"recipient_id"`
		RecipientType PostCharactersCharacterIDMailJSONBodyRecipientsRecipientType `json:"recipient_type"`
	} `json:"recipients"`
	Subject string `json:"subject"`
}

// PostCharactersCharacterIDMailParams defines parameters for PostCharactersCharacterIDMail.
type PostCharactersCharacterIDMailParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *PostCharactersCharacterIDMailParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// PostCharactersCharacterIDMailParamsAcceptLanguage defines parameters for PostCharactersCharacterIDMail.
type PostCharactersCharacterIDMailParamsAcceptLanguage string

// PostCharactersCharacterIDMailJSONBodyRecipientsRecipientType defines parameters for PostCharactersCharacterIDMail.
type PostCharactersCharacterIDMailJSONBodyRecipientsRecipientType string

// GetCharactersCharacterIDMailLabelsParams defines parameters for GetCharactersCharacterIDMailLabels.
type GetCharactersCharacterIDMailLabelsParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCharactersCharacterIDMailLabelsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCharactersCharacterIDMailLabelsParamsAcceptLanguage defines parameters for GetCharactersCharacterIDMailLabels.
type GetCharactersCharacterIDMailLabelsParamsAcceptLanguage string

// PostCharactersCharacterIDMailLabelsJSONBody defines parameters for PostCharactersCharacterIDMailLabels.
type PostCharactersCharacterIDMailLabelsJSONBody struct {
	// Color Hexadecimal string representing label color, in RGB format
	Color *PostCharactersCharacterIDMailLabelsJSONBodyColor `json:"color,omitempty"`
	Name  string                                            `json:"name"`
}

// PostCharactersCharacterIDMailLabelsParams defines parameters for PostCharactersCharacterIDMailLabels.
type PostCharactersCharacterIDMailLabelsParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *PostCharactersCharacterIDMailLabelsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// PostCharactersCharacterIDMailLabelsParamsAcceptLanguage defines parameters for PostCharactersCharacterIDMailLabels.
type PostCharactersCharacterIDMailLabelsParamsAcceptLanguage string

// PostCharactersCharacterIDMailLabelsJSONBodyColor defines parameters for PostCharactersCharacterIDMailLabels.
type PostCharactersCharacterIDMailLabelsJSONBodyColor string

// DeleteCharactersCharacterIDMailLabelsLabelIDParams defines parameters for DeleteCharactersCharacterIDMailLabelsLabelID.
type DeleteCharactersCharacterIDMailLabelsLabelIDParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *DeleteCharactersCharacterIDMailLabelsLabelIDParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// DeleteCharactersCharacterIDMailLabelsLabelIDParamsAcceptLanguage defines parameters for DeleteCharactersCharacterIDMailLabelsLabelID.
type DeleteCharactersCharacterIDMailLabelsLabelIDParamsAcceptLanguage string

// GetCharactersCharacterIDMailListsParams defines parameters for GetCharactersCharacterIDMailLists.
type GetCharactersCharacterIDMailListsParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCharactersCharacterIDMailListsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCharactersCharacterIDMailListsParamsAcceptLanguage defines parameters for GetCharactersCharacterIDMailLists.
type GetCharactersCharacterIDMailListsParamsAcceptLanguage string

// DeleteCharactersCharacterIDMailMailIDParams defines parameters for DeleteCharactersCharacterIDMailMailID.
type DeleteCharactersCharacterIDMailMailIDParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *DeleteCharactersCharacterIDMailMailIDParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// DeleteCharactersCharacterIDMailMailIDParamsAcceptLanguage defines parameters for DeleteCharactersCharacterIDMailMailID.
type DeleteCharactersCharacterIDMailMailIDParamsAcceptLanguage string

// GetCharactersCharacterIDMailMailIDParams defines parameters for GetCharactersCharacterIDMailMailID.
type GetCharactersCharacterIDMailMailIDParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCharactersCharacterIDMailMailIDParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCharactersCharacterIDMailMailIDParamsAcceptLanguage defines parameters for GetCharactersCharacterIDMailMailID.
type GetCharactersCharacterIDMailMailIDParamsAcceptLanguage string

// PutCharactersCharacterIDMailMailIDJSONBody defines parameters for PutCharactersCharacterIDMailMailID.
type PutCharactersCharacterIDMailMailIDJSONBody struct {
	// Labels Labels to assign to the mail. Pre-existing labels are unassigned.
	Labels *[]int64 `json:"labels,omitempty"`

	// Read Whether the mail is flagged as read
	Read *bool `json:"read,omitempty"`
}

// PutCharactersCharacterIDMailMailIDParams defines parameters for PutCharactersCharacterIDMailMailID.
type PutCharactersCharacterIDMailMailIDParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *PutCharactersCharacterIDMailMailIDParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// PutCharactersCharacterIDMailMailIDParamsAcceptLanguage defines parameters for PutCharactersCharacterIDMailMailID.
type PutCharactersCharacterIDMailMailIDParamsAcceptLanguage string

// GetCharactersCharacterIDMedalsParams defines parameters for GetCharactersCharacterIDMedals.
type GetCharactersCharacterIDMedalsParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCharactersCharacterIDMedalsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCharactersCharacterIDMedalsParamsAcceptLanguage defines parameters for GetCharactersCharacterIDMedals.
type GetCharactersCharacterIDMedalsParamsAcceptLanguage string

// GetCharactersCharacterIDMiningParams defines parameters for GetCharactersCharacterIDMining.
type GetCharactersCharacterIDMiningParams struct {
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCharactersCharacterIDMiningParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCharactersCharacterIDMiningParamsAcceptLanguage defines parameters for GetCharactersCharacterIDMining.
type GetCharactersCharacterIDMiningParamsAcceptLanguage string

// GetCharactersCharacterIDNotificationsParams defines parameters for GetCharactersCharacterIDNotifications.
type GetCharactersCharacterIDNotificationsParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCharactersCharacterIDNotificationsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCharactersCharacterIDNotificationsParamsAcceptLanguage defines parameters for GetCharactersCharacterIDNotifications.
type GetCharactersCharacterIDNotificationsParamsAcceptLanguage string

// GetCharactersCharacterIDNotificationsContactsParams defines parameters for GetCharactersCharacterIDNotificationsContacts.
type GetCharactersCharacterIDNotificationsContactsParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCharactersCharacterIDNotificationsContactsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCharactersCharacterIDNotificationsContactsParamsAcceptLanguage defines parameters for GetCharactersCharacterIDNotificationsContacts.
type GetCharactersCharacterIDNotificationsContactsParamsAcceptLanguage string

// GetCharactersCharacterIDOnlineParams defines parameters for GetCharactersCharacterIDOnline.
type GetCharactersCharacterIDOnlineParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCharactersCharacterIDOnlineParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCharactersCharacterIDOnlineParamsAcceptLanguage defines parameters for GetCharactersCharacterIDOnline.
type GetCharactersCharacterIDOnlineParamsAcceptLanguage string

// GetCharactersCharacterIDOrdersParams defines parameters for GetCharactersCharacterIDOrders.
type GetCharactersCharacterIDOrdersParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCharactersCharacterIDOrdersParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCharactersCharacterIDOrdersParamsAcceptLanguage defines parameters for GetCharactersCharacterIDOrders.
type GetCharactersCharacterIDOrdersParamsAcceptLanguage string

// GetCharactersCharacterIDOrdersHistoryParams defines parameters for GetCharactersCharacterIDOrdersHistory.
type GetCharactersCharacterIDOrdersHistoryParams struct {
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCharactersCharacterIDOrdersHistoryParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCharactersCharacterIDOrdersHistoryParamsAcceptLanguage defines parameters for GetCharactersCharacterIDOrdersHistory.
type GetCharactersCharacterIDOrdersHistoryParamsAcceptLanguage string

// GetCharactersCharacterIDPlanetsParams defines parameters for GetCharactersCharacterIDPlanets.
type GetCharactersCharacterIDPlanetsParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCharactersCharacterIDPlanetsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCharactersCharacterIDPlanetsParamsAcceptLanguage defines parameters for GetCharactersCharacterIDPlanets.
type GetCharactersCharacterIDPlanetsParamsAcceptLanguage string

// GetCharactersCharacterIDPlanetsPlanetIDParams defines parameters for GetCharactersCharacterIDPlanetsPlanetID.
type GetCharactersCharacterIDPlanetsPlanetIDParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCharactersCharacterIDPlanetsPlanetIDParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCharactersCharacterIDPlanetsPlanetIDParamsAcceptLanguage defines parameters for GetCharactersCharacterIDPlanetsPlanetID.
type GetCharactersCharacterIDPlanetsPlanetIDParamsAcceptLanguage string

// GetCharactersCharacterIDPortraitParams defines parameters for GetCharactersCharacterIDPortrait.
type GetCharactersCharacterIDPortraitParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCharactersCharacterIDPortraitParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCharactersCharacterIDPortraitParamsAcceptLanguage defines parameters for GetCharactersCharacterIDPortrait.
type GetCharactersCharacterIDPortraitParamsAcceptLanguage string

// GetCharactersCharacterIDRolesParams defines parameters for GetCharactersCharacterIDRoles.
type GetCharactersCharacterIDRolesParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCharactersCharacterIDRolesParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCharactersCharacterIDRolesParamsAcceptLanguage defines parameters for GetCharactersCharacterIDRoles.
type GetCharactersCharacterIDRolesParamsAcceptLanguage string

// GetCharactersCharacterIDSearchParams defines parameters for GetCharactersCharacterIDSearch.
type GetCharactersCharacterIDSearchParams struct {
	Categories []GetCharactersCharacterIDSearchParamsCategories `form:"categories" json:"categories"`
	Search     string                                           `form:"search" json:"search"`
	Strict     *bool                                            `form:"strict,omitempty" json:"strict,omitempty"`

	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCharactersCharacterIDSearchParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCharactersCharacterIDSearchParamsCategories defines parameters for GetCharactersCharacterIDSearch.
type GetCharactersCharacterIDSearchParamsCategories string

// GetCharactersCharacterIDSearchParamsAcceptLanguage defines parameters for GetCharactersCharacterIDSearch.
type GetCharactersCharacterIDSearchParamsAcceptLanguage string

// GetCharactersCharacterIDShipParams defines parameters for GetCharactersCharacterIDShip.
type GetCharactersCharacterIDShipParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCharactersCharacterIDShipParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCharactersCharacterIDShipParamsAcceptLanguage defines parameters for GetCharactersCharacterIDShip.
type GetCharactersCharacterIDShipParamsAcceptLanguage string

// GetCharactersCharacterIDSkillqueueParams defines parameters for GetCharactersCharacterIDSkillqueue.
type GetCharactersCharacterIDSkillqueueParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCharactersCharacterIDSkillqueueParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCharactersCharacterIDSkillqueueParamsAcceptLanguage defines parameters for GetCharactersCharacterIDSkillqueue.
type GetCharactersCharacterIDSkillqueueParamsAcceptLanguage string

// GetCharactersCharacterIDSkillsParams defines parameters for GetCharactersCharacterIDSkills.
type GetCharactersCharacterIDSkillsParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCharactersCharacterIDSkillsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCharactersCharacterIDSkillsParamsAcceptLanguage defines parameters for GetCharactersCharacterIDSkills.
type GetCharactersCharacterIDSkillsParamsAcceptLanguage string

// GetCharactersCharacterIDStandingsParams defines parameters for GetCharactersCharacterIDStandings.
type GetCharactersCharacterIDStandingsParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCharactersCharacterIDStandingsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCharactersCharacterIDStandingsParamsAcceptLanguage defines parameters for GetCharactersCharacterIDStandings.
type GetCharactersCharacterIDStandingsParamsAcceptLanguage string

// GetCharactersCharacterIDTitlesParams defines parameters for GetCharactersCharacterIDTitles.
type GetCharactersCharacterIDTitlesParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCharactersCharacterIDTitlesParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCharactersCharacterIDTitlesParamsAcceptLanguage defines parameters for GetCharactersCharacterIDTitles.
type GetCharactersCharacterIDTitlesParamsAcceptLanguage string

// GetCharactersCharacterIDWalletParams defines parameters for GetCharactersCharacterIDWallet.
type GetCharactersCharacterIDWalletParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCharactersCharacterIDWalletParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCharactersCharacterIDWalletParamsAcceptLanguage defines parameters for GetCharactersCharacterIDWallet.
type GetCharactersCharacterIDWalletParamsAcceptLanguage string

// GetCharactersCharacterIDWalletJournalParams defines parameters for GetCharactersCharacterIDWalletJournal.
type GetCharactersCharacterIDWalletJournalParams struct {
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCharactersCharacterIDWalletJournalParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCharactersCharacterIDWalletJournalParamsAcceptLanguage defines parameters for GetCharactersCharacterIDWalletJournal.
type GetCharactersCharacterIDWalletJournalParamsAcceptLanguage string

// GetCharactersCharacterIDWalletTransactionsParams defines parameters for GetCharactersCharacterIDWalletTransactions.
type GetCharactersCharacterIDWalletTransactionsParams struct {
	FromID *int64 `form:"from_id,omitempty" json:"from_id,omitempty"`

	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCharactersCharacterIDWalletTransactionsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCharactersCharacterIDWalletTransactionsParamsAcceptLanguage defines parameters for GetCharactersCharacterIDWalletTransactions.
type GetCharactersCharacterIDWalletTransactionsParamsAcceptLanguage string

// GetContractsPublicBidsContractIDParams defines parameters for GetContractsPublicBidsContractID.
type GetContractsPublicBidsContractIDParams struct {
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetContractsPublicBidsContractIDParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetContractsPublicBidsContractIDParamsAcceptLanguage defines parameters for GetContractsPublicBidsContractID.
type GetContractsPublicBidsContractIDParamsAcceptLanguage string

// GetContractsPublicItemsContractIDParams defines parameters for GetContractsPublicItemsContractID.
type GetContractsPublicItemsContractIDParams struct {
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetContractsPublicItemsContractIDParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetContractsPublicItemsContractIDParamsAcceptLanguage defines parameters for GetContractsPublicItemsContractID.
type GetContractsPublicItemsContractIDParamsAcceptLanguage string

// GetContractsPublicRegionIDParams defines parameters for GetContractsPublicRegionID.
type GetContractsPublicRegionIDParams struct {
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetContractsPublicRegionIDParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetContractsPublicRegionIDParamsAcceptLanguage defines parameters for GetContractsPublicRegionID.
type GetContractsPublicRegionIDParamsAcceptLanguage string

// GetCorporationCorporationIDMiningExtractionsParams defines parameters for GetCorporationCorporationIDMiningExtractions.
type GetCorporationCorporationIDMiningExtractionsParams struct {
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCorporationCorporationIDMiningExtractionsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCorporationCorporationIDMiningExtractionsParamsAcceptLanguage defines parameters for GetCorporationCorporationIDMiningExtractions.
type GetCorporationCorporationIDMiningExtractionsParamsAcceptLanguage string

// GetCorporationCorporationIDMiningObserversParams defines parameters for GetCorporationCorporationIDMiningObservers.
type GetCorporationCorporationIDMiningObserversParams struct {
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCorporationCorporationIDMiningObserversParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCorporationCorporationIDMiningObserversParamsAcceptLanguage defines parameters for GetCorporationCorporationIDMiningObservers.
type GetCorporationCorporationIDMiningObserversParamsAcceptLanguage string

// GetCorporationCorporationIDMiningObserversObserverIDParams defines parameters for GetCorporationCorporationIDMiningObserversObserverID.
type GetCorporationCorporationIDMiningObserversObserverIDParams struct {
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCorporationCorporationIDMiningObserversObserverIDParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCorporationCorporationIDMiningObserversObserverIDParamsAcceptLanguage defines parameters for GetCorporationCorporationIDMiningObserversObserverID.
type GetCorporationCorporationIDMiningObserversObserverIDParamsAcceptLanguage string

// GetCorporationsNpccorpsParams defines parameters for GetCorporationsNpccorps.
type GetCorporationsNpccorpsParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCorporationsNpccorpsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCorporationsNpccorpsParamsAcceptLanguage defines parameters for GetCorporationsNpccorps.
type GetCorporationsNpccorpsParamsAcceptLanguage string

// GetCorporationsCorporationIDParams defines parameters for GetCorporationsCorporationID.
type GetCorporationsCorporationIDParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCorporationsCorporationIDParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCorporationsCorporationIDParamsAcceptLanguage defines parameters for GetCorporationsCorporationID.
type GetCorporationsCorporationIDParamsAcceptLanguage string

// GetCorporationsCorporationIDAlliancehistoryParams defines parameters for GetCorporationsCorporationIDAlliancehistory.
type GetCorporationsCorporationIDAlliancehistoryParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCorporationsCorporationIDAlliancehistoryParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCorporationsCorporationIDAlliancehistoryParamsAcceptLanguage defines parameters for GetCorporationsCorporationIDAlliancehistory.
type GetCorporationsCorporationIDAlliancehistoryParamsAcceptLanguage string

// GetCorporationsCorporationIDAssetsParams defines parameters for GetCorporationsCorporationIDAssets.
type GetCorporationsCorporationIDAssetsParams struct {
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCorporationsCorporationIDAssetsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCorporationsCorporationIDAssetsParamsAcceptLanguage defines parameters for GetCorporationsCorporationIDAssets.
type GetCorporationsCorporationIDAssetsParamsAcceptLanguage string

// PostCorporationsCorporationIDAssetsLocationsJSONBody defines parameters for PostCorporationsCorporationIDAssetsLocations.
type PostCorporationsCorporationIDAssetsLocationsJSONBody = []int64

// PostCorporationsCorporationIDAssetsLocationsParams defines parameters for PostCorporationsCorporationIDAssetsLocations.
type PostCorporationsCorporationIDAssetsLocationsParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *PostCorporationsCorporationIDAssetsLocationsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// PostCorporationsCorporationIDAssetsLocationsParamsAcceptLanguage defines parameters for PostCorporationsCorporationIDAssetsLocations.
type PostCorporationsCorporationIDAssetsLocationsParamsAcceptLanguage string

// PostCorporationsCorporationIDAssetsNamesJSONBody defines parameters for PostCorporationsCorporationIDAssetsNames.
type PostCorporationsCorporationIDAssetsNamesJSONBody = []int64

// PostCorporationsCorporationIDAssetsNamesParams defines parameters for PostCorporationsCorporationIDAssetsNames.
type PostCorporationsCorporationIDAssetsNamesParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *PostCorporationsCorporationIDAssetsNamesParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// PostCorporationsCorporationIDAssetsNamesParamsAcceptLanguage defines parameters for PostCorporationsCorporationIDAssetsNames.
type PostCorporationsCorporationIDAssetsNamesParamsAcceptLanguage string

// GetCorporationsCorporationIDBlueprintsParams defines parameters for GetCorporationsCorporationIDBlueprints.
type GetCorporationsCorporationIDBlueprintsParams struct {
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCorporationsCorporationIDBlueprintsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCorporationsCorporationIDBlueprintsParamsAcceptLanguage defines parameters for GetCorporationsCorporationIDBlueprints.
type GetCorporationsCorporationIDBlueprintsParamsAcceptLanguage string

// GetCorporationsCorporationIDContactsParams defines parameters for GetCorporationsCorporationIDContacts.
type GetCorporationsCorporationIDContactsParams struct {
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCorporationsCorporationIDContactsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCorporationsCorporationIDContactsParamsAcceptLanguage defines parameters for GetCorporationsCorporationIDContacts.
type GetCorporationsCorporationIDContactsParamsAcceptLanguage string

// GetCorporationsCorporationIDContactsLabelsParams defines parameters for GetCorporationsCorporationIDContactsLabels.
type GetCorporationsCorporationIDContactsLabelsParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCorporationsCorporationIDContactsLabelsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCorporationsCorporationIDContactsLabelsParamsAcceptLanguage defines parameters for GetCorporationsCorporationIDContactsLabels.
type GetCorporationsCorporationIDContactsLabelsParamsAcceptLanguage string

// GetCorporationsCorporationIDContainersLogsParams defines parameters for GetCorporationsCorporationIDContainersLogs.
type GetCorporationsCorporationIDContainersLogsParams struct {
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCorporationsCorporationIDContainersLogsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCorporationsCorporationIDContainersLogsParamsAcceptLanguage defines parameters for GetCorporationsCorporationIDContainersLogs.
type GetCorporationsCorporationIDContainersLogsParamsAcceptLanguage string

// GetCorporationsCorporationIDContractsParams defines parameters for GetCorporationsCorporationIDContracts.
type GetCorporationsCorporationIDContractsParams struct {
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCorporationsCorporationIDContractsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCorporationsCorporationIDContractsParamsAcceptLanguage defines parameters for GetCorporationsCorporationIDContracts.
type GetCorporationsCorporationIDContractsParamsAcceptLanguage string

// GetCorporationsCorporationIDContractsContractIDBidsParams defines parameters for GetCorporationsCorporationIDContractsContractIDBids.
type GetCorporationsCorporationIDContractsContractIDBidsParams struct {
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCorporationsCorporationIDContractsContractIDBidsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCorporationsCorporationIDContractsContractIDBidsParamsAcceptLanguage defines parameters for GetCorporationsCorporationIDContractsContractIDBids.
type GetCorporationsCorporationIDContractsContractIDBidsParamsAcceptLanguage string

// GetCorporationsCorporationIDContractsContractIDItemsParams defines parameters for GetCorporationsCorporationIDContractsContractIDItems.
type GetCorporationsCorporationIDContractsContractIDItemsParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCorporationsCorporationIDContractsContractIDItemsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCorporationsCorporationIDContractsContractIDItemsParamsAcceptLanguage defines parameters for GetCorporationsCorporationIDContractsContractIDItems.
type GetCorporationsCorporationIDContractsContractIDItemsParamsAcceptLanguage string

// GetCorporationsCorporationIDCustomsOfficesParams defines parameters for GetCorporationsCorporationIDCustomsOffices.
type GetCorporationsCorporationIDCustomsOfficesParams struct {
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCorporationsCorporationIDCustomsOfficesParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCorporationsCorporationIDCustomsOfficesParamsAcceptLanguage defines parameters for GetCorporationsCorporationIDCustomsOffices.
type GetCorporationsCorporationIDCustomsOfficesParamsAcceptLanguage string

// GetCorporationsCorporationIDDivisionsParams defines parameters for GetCorporationsCorporationIDDivisions.
type GetCorporationsCorporationIDDivisionsParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCorporationsCorporationIDDivisionsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCorporationsCorporationIDDivisionsParamsAcceptLanguage defines parameters for GetCorporationsCorporationIDDivisions.
type GetCorporationsCorporationIDDivisionsParamsAcceptLanguage string

// GetCorporationsCorporationIDFacilitiesParams defines parameters for GetCorporationsCorporationIDFacilities.
type GetCorporationsCorporationIDFacilitiesParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCorporationsCorporationIDFacilitiesParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCorporationsCorporationIDFacilitiesParamsAcceptLanguage defines parameters for GetCorporationsCorporationIDFacilities.
type GetCorporationsCorporationIDFacilitiesParamsAcceptLanguage string

// GetCorporationsCorporationIDFwStatsParams defines parameters for GetCorporationsCorporationIDFwStats.
type GetCorporationsCorporationIDFwStatsParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCorporationsCorporationIDFwStatsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCorporationsCorporationIDFwStatsParamsAcceptLanguage defines parameters for GetCorporationsCorporationIDFwStats.
type GetCorporationsCorporationIDFwStatsParamsAcceptLanguage string

// GetCorporationsCorporationIDIconsParams defines parameters for GetCorporationsCorporationIDIcons.
type GetCorporationsCorporationIDIconsParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCorporationsCorporationIDIconsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCorporationsCorporationIDIconsParamsAcceptLanguage defines parameters for GetCorporationsCorporationIDIcons.
type GetCorporationsCorporationIDIconsParamsAcceptLanguage string

// GetCorporationsCorporationIDIndustryJobsParams defines parameters for GetCorporationsCorporationIDIndustryJobs.
type GetCorporationsCorporationIDIndustryJobsParams struct {
	IncludeCompleted *bool  `form:"include_completed,omitempty" json:"include_completed,omitempty"`
	Page             *int32 `form:"page,omitempty" json:"page,omitempty"`

	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCorporationsCorporationIDIndustryJobsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCorporationsCorporationIDIndustryJobsParamsAcceptLanguage defines parameters for GetCorporationsCorporationIDIndustryJobs.
type GetCorporationsCorporationIDIndustryJobsParamsAcceptLanguage string

// GetCorporationsCorporationIDKillmailsRecentParams defines parameters for GetCorporationsCorporationIDKillmailsRecent.
type GetCorporationsCorporationIDKillmailsRecentParams struct {
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCorporationsCorporationIDKillmailsRecentParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCorporationsCorporationIDKillmailsRecentParamsAcceptLanguage defines parameters for GetCorporationsCorporationIDKillmailsRecent.
type GetCorporationsCorporationIDKillmailsRecentParamsAcceptLanguage string

// GetCorporationsCorporationIDMedalsParams defines parameters for GetCorporationsCorporationIDMedals.
type GetCorporationsCorporationIDMedalsParams struct {
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCorporationsCorporationIDMedalsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCorporationsCorporationIDMedalsParamsAcceptLanguage defines parameters for GetCorporationsCorporationIDMedals.
type GetCorporationsCorporationIDMedalsParamsAcceptLanguage string

// GetCorporationsCorporationIDMedalsIssuedParams defines parameters for GetCorporationsCorporationIDMedalsIssued.
type GetCorporationsCorporationIDMedalsIssuedParams struct {
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCorporationsCorporationIDMedalsIssuedParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCorporationsCorporationIDMedalsIssuedParamsAcceptLanguage defines parameters for GetCorporationsCorporationIDMedalsIssued.
type GetCorporationsCorporationIDMedalsIssuedParamsAcceptLanguage string

// GetCorporationsCorporationIDMembersParams defines parameters for GetCorporationsCorporationIDMembers.
type GetCorporationsCorporationIDMembersParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCorporationsCorporationIDMembersParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCorporationsCorporationIDMembersParamsAcceptLanguage defines parameters for GetCorporationsCorporationIDMembers.
type GetCorporationsCorporationIDMembersParamsAcceptLanguage string

// GetCorporationsCorporationIDMembersLimitParams defines parameters for GetCorporationsCorporationIDMembersLimit.
type GetCorporationsCorporationIDMembersLimitParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCorporationsCorporationIDMembersLimitParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCorporationsCorporationIDMembersLimitParamsAcceptLanguage defines parameters for GetCorporationsCorporationIDMembersLimit.
type GetCorporationsCorporationIDMembersLimitParamsAcceptLanguage string

// GetCorporationsCorporationIDMembersTitlesParams defines parameters for GetCorporationsCorporationIDMembersTitles.
type GetCorporationsCorporationIDMembersTitlesParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCorporationsCorporationIDMembersTitlesParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCorporationsCorporationIDMembersTitlesParamsAcceptLanguage defines parameters for GetCorporationsCorporationIDMembersTitles.
type GetCorporationsCorporationIDMembersTitlesParamsAcceptLanguage string

// GetCorporationsCorporationIDMembertrackingParams defines parameters for GetCorporationsCorporationIDMembertracking.
type GetCorporationsCorporationIDMembertrackingParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCorporationsCorporationIDMembertrackingParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCorporationsCorporationIDMembertrackingParamsAcceptLanguage defines parameters for GetCorporationsCorporationIDMembertracking.
type GetCorporationsCorporationIDMembertrackingParamsAcceptLanguage string

// GetCorporationsCorporationIDOrdersParams defines parameters for GetCorporationsCorporationIDOrders.
type GetCorporationsCorporationIDOrdersParams struct {
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCorporationsCorporationIDOrdersParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCorporationsCorporationIDOrdersParamsAcceptLanguage defines parameters for GetCorporationsCorporationIDOrders.
type GetCorporationsCorporationIDOrdersParamsAcceptLanguage string

// GetCorporationsCorporationIDOrdersHistoryParams defines parameters for GetCorporationsCorporationIDOrdersHistory.
type GetCorporationsCorporationIDOrdersHistoryParams struct {
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCorporationsCorporationIDOrdersHistoryParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCorporationsCorporationIDOrdersHistoryParamsAcceptLanguage defines parameters for GetCorporationsCorporationIDOrdersHistory.
type GetCorporationsCorporationIDOrdersHistoryParamsAcceptLanguage string

// GetCorporationsCorporationIDRolesParams defines parameters for GetCorporationsCorporationIDRoles.
type GetCorporationsCorporationIDRolesParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCorporationsCorporationIDRolesParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCorporationsCorporationIDRolesParamsAcceptLanguage defines parameters for GetCorporationsCorporationIDRoles.
type GetCorporationsCorporationIDRolesParamsAcceptLanguage string

// GetCorporationsCorporationIDRolesHistoryParams defines parameters for GetCorporationsCorporationIDRolesHistory.
type GetCorporationsCorporationIDRolesHistoryParams struct {
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCorporationsCorporationIDRolesHistoryParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCorporationsCorporationIDRolesHistoryParamsAcceptLanguage defines parameters for GetCorporationsCorporationIDRolesHistory.
type GetCorporationsCorporationIDRolesHistoryParamsAcceptLanguage string

// GetCorporationsCorporationIDShareholdersParams defines parameters for GetCorporationsCorporationIDShareholders.
type GetCorporationsCorporationIDShareholdersParams struct {
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCorporationsCorporationIDShareholdersParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCorporationsCorporationIDShareholdersParamsAcceptLanguage defines parameters for GetCorporationsCorporationIDShareholders.
type GetCorporationsCorporationIDShareholdersParamsAcceptLanguage string

// GetCorporationsCorporationIDStandingsParams defines parameters for GetCorporationsCorporationIDStandings.
type GetCorporationsCorporationIDStandingsParams struct {
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCorporationsCorporationIDStandingsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCorporationsCorporationIDStandingsParamsAcceptLanguage defines parameters for GetCorporationsCorporationIDStandings.
type GetCorporationsCorporationIDStandingsParamsAcceptLanguage string

// GetCorporationsCorporationIDStarbasesParams defines parameters for GetCorporationsCorporationIDStarbases.
type GetCorporationsCorporationIDStarbasesParams struct {
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCorporationsCorporationIDStarbasesParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCorporationsCorporationIDStarbasesParamsAcceptLanguage defines parameters for GetCorporationsCorporationIDStarbases.
type GetCorporationsCorporationIDStarbasesParamsAcceptLanguage string

// GetCorporationsCorporationIDStarbasesStarbaseIDParams defines parameters for GetCorporationsCorporationIDStarbasesStarbaseID.
type GetCorporationsCorporationIDStarbasesStarbaseIDParams struct {
	SystemID int64 `form:"system_id" json:"system_id"`

	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCorporationsCorporationIDStarbasesStarbaseIDParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCorporationsCorporationIDStarbasesStarbaseIDParamsAcceptLanguage defines parameters for GetCorporationsCorporationIDStarbasesStarbaseID.
type GetCorporationsCorporationIDStarbasesStarbaseIDParamsAcceptLanguage string

// GetCorporationsCorporationIDStructuresParams defines parameters for GetCorporationsCorporationIDStructures.
type GetCorporationsCorporationIDStructuresParams struct {
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCorporationsCorporationIDStructuresParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCorporationsCorporationIDStructuresParamsAcceptLanguage defines parameters for GetCorporationsCorporationIDStructures.
type GetCorporationsCorporationIDStructuresParamsAcceptLanguage string

// GetCorporationsCorporationIDTitlesParams defines parameters for GetCorporationsCorporationIDTitles.
type GetCorporationsCorporationIDTitlesParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCorporationsCorporationIDTitlesParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCorporationsCorporationIDTitlesParamsAcceptLanguage defines parameters for GetCorporationsCorporationIDTitles.
type GetCorporationsCorporationIDTitlesParamsAcceptLanguage string

// GetCorporationsCorporationIDWalletsParams defines parameters for GetCorporationsCorporationIDWallets.
type GetCorporationsCorporationIDWalletsParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCorporationsCorporationIDWalletsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCorporationsCorporationIDWalletsParamsAcceptLanguage defines parameters for GetCorporationsCorporationIDWallets.
type GetCorporationsCorporationIDWalletsParamsAcceptLanguage string

// GetCorporationsCorporationIDWalletsDivisionJournalParams defines parameters for GetCorporationsCorporationIDWalletsDivisionJournal.
type GetCorporationsCorporationIDWalletsDivisionJournalParams struct {
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCorporationsCorporationIDWalletsDivisionJournalParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCorporationsCorporationIDWalletsDivisionJournalParamsAcceptLanguage defines parameters for GetCorporationsCorporationIDWalletsDivisionJournal.
type GetCorporationsCorporationIDWalletsDivisionJournalParamsAcceptLanguage string

// GetCorporationsCorporationIDWalletsDivisionTransactionsParams defines parameters for GetCorporationsCorporationIDWalletsDivisionTransactions.
type GetCorporationsCorporationIDWalletsDivisionTransactionsParams struct {
	FromID *int64 `form:"from_id,omitempty" json:"from_id,omitempty"`

	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetCorporationsCorporationIDWalletsDivisionTransactionsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetCorporationsCorporationIDWalletsDivisionTransactionsParamsAcceptLanguage defines parameters for GetCorporationsCorporationIDWalletsDivisionTransactions.
type GetCorporationsCorporationIDWalletsDivisionTransactionsParamsAcceptLanguage string

// GetDogmaAttributesParams defines parameters for GetDogmaAttributes.
type GetDogmaAttributesParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetDogmaAttributesParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetDogmaAttributesParamsAcceptLanguage defines parameters for GetDogmaAttributes.
type GetDogmaAttributesParamsAcceptLanguage string

// GetDogmaAttributesAttributeIDParams defines parameters for GetDogmaAttributesAttributeID.
type GetDogmaAttributesAttributeIDParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetDogmaAttributesAttributeIDParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetDogmaAttributesAttributeIDParamsAcceptLanguage defines parameters for GetDogmaAttributesAttributeID.
type GetDogmaAttributesAttributeIDParamsAcceptLanguage string

// GetDogmaDynamicItemsTypeIDItemIDParams defines parameters for GetDogmaDynamicItemsTypeIDItemID.
type GetDogmaDynamicItemsTypeIDItemIDParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetDogmaDynamicItemsTypeIDItemIDParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetDogmaDynamicItemsTypeIDItemIDParamsAcceptLanguage defines parameters for GetDogmaDynamicItemsTypeIDItemID.
type GetDogmaDynamicItemsTypeIDItemIDParamsAcceptLanguage string

// GetDogmaEffectsParams defines parameters for GetDogmaEffects.
type GetDogmaEffectsParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetDogmaEffectsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetDogmaEffectsParamsAcceptLanguage defines parameters for GetDogmaEffects.
type GetDogmaEffectsParamsAcceptLanguage string

// GetDogmaEffectsEffectIDParams defines parameters for GetDogmaEffectsEffectID.
type GetDogmaEffectsEffectIDParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetDogmaEffectsEffectIDParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetDogmaEffectsEffectIDParamsAcceptLanguage defines parameters for GetDogmaEffectsEffectID.
type GetDogmaEffectsEffectIDParamsAcceptLanguage string

// GetFleetsFleetIDParams defines parameters for GetFleetsFleetID.
type GetFleetsFleetIDParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetFleetsFleetIDParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetFleetsFleetIDParamsAcceptLanguage defines parameters for GetFleetsFleetID.
type GetFleetsFleetIDParamsAcceptLanguage string

// PutFleetsFleetIDJSONBody defines parameters for PutFleetsFleetID.
type PutFleetsFleetIDJSONBody struct {
	// IsFreeMove Should free-move be enabled in the fleet
	IsFreeMove *bool `json:"is_free_move,omitempty"`

	// Motd New fleet MOTD in CCP flavoured HTML
	Motd *string `json:"motd,omitempty"`
}

// PutFleetsFleetIDParams defines parameters for PutFleetsFleetID.
type PutFleetsFleetIDParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *PutFleetsFleetIDParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// PutFleetsFleetIDParamsAcceptLanguage defines parameters for PutFleetsFleetID.
type PutFleetsFleetIDParamsAcceptLanguage string

// GetFleetsFleetIDMembersParams defines parameters for GetFleetsFleetIDMembers.
type GetFleetsFleetIDMembersParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetFleetsFleetIDMembersParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetFleetsFleetIDMembersParamsAcceptLanguage defines parameters for GetFleetsFleetIDMembers.
type GetFleetsFleetIDMembersParamsAcceptLanguage string

// PostFleetsFleetIDMembersJSONBody defines parameters for PostFleetsFleetIDMembers.
type PostFleetsFleetIDMembersJSONBody struct {
	// CharacterID The character you want to invite
	CharacterID int64 `json:"character_id"`

	// Role If a character is invited with the `fleet_commander` role, neither `wing_id` or `squad_id` should be specified. If a character is invited with the `wing_commander` role, only `wing_id` should be specified. If a character is invited with the `squad_commander` role, both `wing_id` and `squad_id` should be specified. If a character is invited with the `squad_member` role, `wing_id` and `squad_id` should either both be specified or not specified at all. If they aren’t specified, the invited character will join any squad with available positions.
	Role    PostFleetsFleetIDMembersJSONBodyRole `json:"role"`
	SquadID *int64                               `json:"squad_id,omitempty"`
	WingID  *int64                               `json:"wing_id,omitempty"`
}

// PostFleetsFleetIDMembersParams defines parameters for PostFleetsFleetIDMembers.
type PostFleetsFleetIDMembersParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *PostFleetsFleetIDMembersParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// PostFleetsFleetIDMembersParamsAcceptLanguage defines parameters for PostFleetsFleetIDMembers.
type PostFleetsFleetIDMembersParamsAcceptLanguage string

// PostFleetsFleetIDMembersJSONBodyRole defines parameters for PostFleetsFleetIDMembers.
type PostFleetsFleetIDMembersJSONBodyRole string

// DeleteFleetsFleetIDMembersMemberIDParams defines parameters for DeleteFleetsFleetIDMembersMemberID.
type DeleteFleetsFleetIDMembersMemberIDParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *DeleteFleetsFleetIDMembersMemberIDParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// DeleteFleetsFleetIDMembersMemberIDParamsAcceptLanguage defines parameters for DeleteFleetsFleetIDMembersMemberID.
type DeleteFleetsFleetIDMembersMemberIDParamsAcceptLanguage string

// PutFleetsFleetIDMembersMemberIDJSONBody defines parameters for PutFleetsFleetIDMembersMemberID.
type PutFleetsFleetIDMembersMemberIDJSONBody struct {
	// Role If a character is moved to the `fleet_commander` role, neither `wing_id` or `squad_id` should be specified. If a character is moved to the `wing_commander` role, only `wing_id` should be specified. If a character is moved to the `squad_commander` role, both `wing_id` and `squad_id` should be specified. If a character is moved to the `squad_member` role, both `wing_id` and `squad_id` should be specified.
	Role    PutFleetsFleetIDMembersMemberIDJSONBodyRole `json:"role"`
	SquadID *int64                                      `json:"squad_id,omitempty"`
	WingID  *int64                                      `json:"wing_id,omitempty"`
}

// PutFleetsFleetIDMembersMemberIDParams defines parameters for PutFleetsFleetIDMembersMemberID.
type PutFleetsFleetIDMembersMemberIDParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *PutFleetsFleetIDMembersMemberIDParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// PutFleetsFleetIDMembersMemberIDParamsAcceptLanguage defines parameters for PutFleetsFleetIDMembersMemberID.
type PutFleetsFleetIDMembersMemberIDParamsAcceptLanguage string

// PutFleetsFleetIDMembersMemberIDJSONBodyRole defines parameters for PutFleetsFleetIDMembersMemberID.
type PutFleetsFleetIDMembersMemberIDJSONBodyRole string

// DeleteFleetsFleetIDSquadsSquadIDParams defines parameters for DeleteFleetsFleetIDSquadsSquadID.
type DeleteFleetsFleetIDSquadsSquadIDParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *DeleteFleetsFleetIDSquadsSquadIDParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// DeleteFleetsFleetIDSquadsSquadIDParamsAcceptLanguage defines parameters for DeleteFleetsFleetIDSquadsSquadID.
type DeleteFleetsFleetIDSquadsSquadIDParamsAcceptLanguage string

// PutFleetsFleetIDSquadsSquadIDJSONBody defines parameters for PutFleetsFleetIDSquadsSquadID.
type PutFleetsFleetIDSquadsSquadIDJSONBody struct {
	Name string `json:"name"`
}

// PutFleetsFleetIDSquadsSquadIDParams defines parameters for PutFleetsFleetIDSquadsSquadID.
type PutFleetsFleetIDSquadsSquadIDParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *PutFleetsFleetIDSquadsSquadIDParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// PutFleetsFleetIDSquadsSquadIDParamsAcceptLanguage defines parameters for PutFleetsFleetIDSquadsSquadID.
type PutFleetsFleetIDSquadsSquadIDParamsAcceptLanguage string

// GetFleetsFleetIDWingsParams defines parameters for GetFleetsFleetIDWings.
type GetFleetsFleetIDWingsParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetFleetsFleetIDWingsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetFleetsFleetIDWingsParamsAcceptLanguage defines parameters for GetFleetsFleetIDWings.
type GetFleetsFleetIDWingsParamsAcceptLanguage string

// PostFleetsFleetIDWingsParams defines parameters for PostFleetsFleetIDWings.
type PostFleetsFleetIDWingsParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *PostFleetsFleetIDWingsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// PostFleetsFleetIDWingsParamsAcceptLanguage defines parameters for PostFleetsFleetIDWings.
type PostFleetsFleetIDWingsParamsAcceptLanguage string

// DeleteFleetsFleetIDWingsWingIDParams defines parameters for DeleteFleetsFleetIDWingsWingID.
type DeleteFleetsFleetIDWingsWingIDParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *DeleteFleetsFleetIDWingsWingIDParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// DeleteFleetsFleetIDWingsWingIDParamsAcceptLanguage defines parameters for DeleteFleetsFleetIDWingsWingID.
type DeleteFleetsFleetIDWingsWingIDParamsAcceptLanguage string

// PutFleetsFleetIDWingsWingIDJSONBody defines parameters for PutFleetsFleetIDWingsWingID.
type PutFleetsFleetIDWingsWingIDJSONBody struct {
	Name string `json:"name"`
}

// PutFleetsFleetIDWingsWingIDParams defines parameters for PutFleetsFleetIDWingsWingID.
type PutFleetsFleetIDWingsWingIDParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *PutFleetsFleetIDWingsWingIDParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// PutFleetsFleetIDWingsWingIDParamsAcceptLanguage defines parameters for PutFleetsFleetIDWingsWingID.
type PutFleetsFleetIDWingsWingIDParamsAcceptLanguage string

// PostFleetsFleetIDWingsWingIDSquadsParams defines parameters for PostFleetsFleetIDWingsWingIDSquads.
type PostFleetsFleetIDWingsWingIDSquadsParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *PostFleetsFleetIDWingsWingIDSquadsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// PostFleetsFleetIDWingsWingIDSquadsParamsAcceptLanguage defines parameters for PostFleetsFleetIDWingsWingIDSquads.
type PostFleetsFleetIDWingsWingIDSquadsParamsAcceptLanguage string

// GetFwLeaderboardsParams defines parameters for GetFwLeaderboards.
type GetFwLeaderboardsParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetFwLeaderboardsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetFwLeaderboardsParamsAcceptLanguage defines parameters for GetFwLeaderboards.
type GetFwLeaderboardsParamsAcceptLanguage string

// GetFwLeaderboardsCharactersParams defines parameters for GetFwLeaderboardsCharacters.
type GetFwLeaderboardsCharactersParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetFwLeaderboardsCharactersParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetFwLeaderboardsCharactersParamsAcceptLanguage defines parameters for GetFwLeaderboardsCharacters.
type GetFwLeaderboardsCharactersParamsAcceptLanguage string

// GetFwLeaderboardsCorporationsParams defines parameters for GetFwLeaderboardsCorporations.
type GetFwLeaderboardsCorporationsParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetFwLeaderboardsCorporationsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetFwLeaderboardsCorporationsParamsAcceptLanguage defines parameters for GetFwLeaderboardsCorporations.
type GetFwLeaderboardsCorporationsParamsAcceptLanguage string

// GetFwStatsParams defines parameters for GetFwStats.
type GetFwStatsParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetFwStatsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetFwStatsParamsAcceptLanguage defines parameters for GetFwStats.
type GetFwStatsParamsAcceptLanguage string

// GetFwSystemsParams defines parameters for GetFwSystems.
type GetFwSystemsParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetFwSystemsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetFwSystemsParamsAcceptLanguage defines parameters for GetFwSystems.
type GetFwSystemsParamsAcceptLanguage string

// GetFwWarsParams defines parameters for GetFwWars.
type GetFwWarsParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetFwWarsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetFwWarsParamsAcceptLanguage defines parameters for GetFwWars.
type GetFwWarsParamsAcceptLanguage string

// GetIncursionsParams defines parameters for GetIncursions.
type GetIncursionsParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetIncursionsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetIncursionsParamsAcceptLanguage defines parameters for GetIncursions.
type GetIncursionsParamsAcceptLanguage string

// GetIndustryFacilitiesParams defines parameters for GetIndustryFacilities.
type GetIndustryFacilitiesParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetIndustryFacilitiesParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetIndustryFacilitiesParamsAcceptLanguage defines parameters for GetIndustryFacilities.
type GetIndustryFacilitiesParamsAcceptLanguage string

// GetIndustrySystemsParams defines parameters for GetIndustrySystems.
type GetIndustrySystemsParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetIndustrySystemsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetIndustrySystemsParamsAcceptLanguage defines parameters for GetIndustrySystems.
type GetIndustrySystemsParamsAcceptLanguage string

// GetInsurancePricesParams defines parameters for GetInsurancePrices.
type GetInsurancePricesParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetInsurancePricesParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetInsurancePricesParamsAcceptLanguage defines parameters for GetInsurancePrices.
type GetInsurancePricesParamsAcceptLanguage string

// GetKillmailsKillmailIDKillmailHashParams defines parameters for GetKillmailsKillmailIDKillmailHash.
type GetKillmailsKillmailIDKillmailHashParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetKillmailsKillmailIDKillmailHashParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetKillmailsKillmailIDKillmailHashParamsAcceptLanguage defines parameters for GetKillmailsKillmailIDKillmailHash.
type GetKillmailsKillmailIDKillmailHashParamsAcceptLanguage string

// GetLoyaltyStoresCorporationIDOffersParams defines parameters for GetLoyaltyStoresCorporationIDOffers.
type GetLoyaltyStoresCorporationIDOffersParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetLoyaltyStoresCorporationIDOffersParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetLoyaltyStoresCorporationIDOffersParamsAcceptLanguage defines parameters for GetLoyaltyStoresCorporationIDOffers.
type GetLoyaltyStoresCorporationIDOffersParamsAcceptLanguage string

// GetMarketsGroupsParams defines parameters for GetMarketsGroups.
type GetMarketsGroupsParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetMarketsGroupsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetMarketsGroupsParamsAcceptLanguage defines parameters for GetMarketsGroups.
type GetMarketsGroupsParamsAcceptLanguage string

// GetMarketsGroupsMarketGroupIDParams defines parameters for GetMarketsGroupsMarketGroupID.
type GetMarketsGroupsMarketGroupIDParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetMarketsGroupsMarketGroupIDParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetMarketsGroupsMarketGroupIDParamsAcceptLanguage defines parameters for GetMarketsGroupsMarketGroupID.
type GetMarketsGroupsMarketGroupIDParamsAcceptLanguage string

// GetMarketsPricesParams defines parameters for GetMarketsPrices.
type GetMarketsPricesParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetMarketsPricesParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetMarketsPricesParamsAcceptLanguage defines parameters for GetMarketsPrices.
type GetMarketsPricesParamsAcceptLanguage string

// GetMarketsStructuresStructureIDParams defines parameters for GetMarketsStructuresStructureID.
type GetMarketsStructuresStructureIDParams struct {
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetMarketsStructuresStructureIDParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetMarketsStructuresStructureIDParamsAcceptLanguage defines parameters for GetMarketsStructuresStructureID.
type GetMarketsStructuresStructureIDParamsAcceptLanguage string

// GetMarketsRegionIDHistoryParams defines parameters for GetMarketsRegionIDHistory.
type GetMarketsRegionIDHistoryParams struct {
	TypeID int64 `form:"type_id" json:"type_id"`

	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetMarketsRegionIDHistoryParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetMarketsRegionIDHistoryParamsAcceptLanguage defines parameters for GetMarketsRegionIDHistory.
type GetMarketsRegionIDHistoryParamsAcceptLanguage string

// GetMarketsRegionIDOrdersParams defines parameters for GetMarketsRegionIDOrders.
type GetMarketsRegionIDOrdersParams struct {
	OrderType GetMarketsRegionIDOrdersParamsOrderType `form:"order_type" json:"order_type"`
	Page      *int32                                  `form:"page,omitempty" json:"page,omitempty"`
	TypeID    *int64                                  `form:"type_id,omitempty" json:"type_id,omitempty"`

	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetMarketsRegionIDOrdersParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetMarketsRegionIDOrdersParamsOrderType defines parameters for GetMarketsRegionIDOrders.
type GetMarketsRegionIDOrdersParamsOrderType string

// GetMarketsRegionIDOrdersParamsAcceptLanguage defines parameters for GetMarketsRegionIDOrders.
type GetMarketsRegionIDOrdersParamsAcceptLanguage string

// GetMarketsRegionIDTypesParams defines parameters for GetMarketsRegionIDTypes.
type GetMarketsRegionIDTypesParams struct {
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetMarketsRegionIDTypesParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetMarketsRegionIDTypesParamsAcceptLanguage defines parameters for GetMarketsRegionIDTypes.
type GetMarketsRegionIDTypesParamsAcceptLanguage string

// GetRouteOriginDestinationParams defines parameters for GetRouteOriginDestination.
type GetRouteOriginDestinationParams struct {
	Avoid       *[]int64                             `form:"avoid,omitempty" json:"avoid,omitempty"`
	Connections *[][]int64                           `form:"connections,omitempty" json:"connections,omitempty"`
	Flag        *GetRouteOriginDestinationParamsFlag `form:"flag,omitempty" json:"flag,omitempty"`

	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetRouteOriginDestinationParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetRouteOriginDestinationParamsFlag defines parameters for GetRouteOriginDestination.
type GetRouteOriginDestinationParamsFlag string

// GetRouteOriginDestinationParamsAcceptLanguage defines parameters for GetRouteOriginDestination.
type GetRouteOriginDestinationParamsAcceptLanguage string

// GetSovereigntyCampaignsParams defines parameters for GetSovereigntyCampaigns.
type GetSovereigntyCampaignsParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetSovereigntyCampaignsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetSovereigntyCampaignsParamsAcceptLanguage defines parameters for GetSovereigntyCampaigns.
type GetSovereigntyCampaignsParamsAcceptLanguage string

// GetSovereigntyMapParams defines parameters for GetSovereigntyMap.
type GetSovereigntyMapParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetSovereigntyMapParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetSovereigntyMapParamsAcceptLanguage defines parameters for GetSovereigntyMap.
type GetSovereigntyMapParamsAcceptLanguage string

// GetSovereigntyStructuresParams defines parameters for GetSovereigntyStructures.
type GetSovereigntyStructuresParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetSovereigntyStructuresParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetSovereigntyStructuresParamsAcceptLanguage defines parameters for GetSovereigntyStructures.
type GetSovereigntyStructuresParamsAcceptLanguage string

// GetStatusParams defines parameters for GetStatus.
type GetStatusParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetStatusParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetStatusParamsAcceptLanguage defines parameters for GetStatus.
type GetStatusParamsAcceptLanguage string

// PostUIAutopilotWaypointParams defines parameters for PostUIAutopilotWaypoint.
type PostUIAutopilotWaypointParams struct {
	AddToBeginning      bool  `form:"add_to_beginning" json:"add_to_beginning"`
	ClearOtherWaypoints bool  `form:"clear_other_waypoints" json:"clear_other_waypoints"`
	DestinationID       int64 `form:"destination_id" json:"destination_id"`

	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *PostUIAutopilotWaypointParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// PostUIAutopilotWaypointParamsAcceptLanguage defines parameters for PostUIAutopilotWaypoint.
type PostUIAutopilotWaypointParamsAcceptLanguage string

// PostUIOpenwindowContractParams defines parameters for PostUIOpenwindowContract.
type PostUIOpenwindowContractParams struct {
	ContractID int64 `form:"contract_id" json:"contract_id"`

	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *PostUIOpenwindowContractParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// PostUIOpenwindowContractParamsAcceptLanguage defines parameters for PostUIOpenwindowContract.
type PostUIOpenwindowContractParamsAcceptLanguage string

// PostUIOpenwindowInformationParams defines parameters for PostUIOpenwindowInformation.
type PostUIOpenwindowInformationParams struct {
	TargetID int64 `form:"target_id" json:"target_id"`

	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *PostUIOpenwindowInformationParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// PostUIOpenwindowInformationParamsAcceptLanguage defines parameters for PostUIOpenwindowInformation.
type PostUIOpenwindowInformationParamsAcceptLanguage string

// PostUIOpenwindowMarketdetailsParams defines parameters for PostUIOpenwindowMarketdetails.
type PostUIOpenwindowMarketdetailsParams struct {
	TypeID int64 `form:"type_id" json:"type_id"`

	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *PostUIOpenwindowMarketdetailsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// PostUIOpenwindowMarketdetailsParamsAcceptLanguage defines parameters for PostUIOpenwindowMarketdetails.
type PostUIOpenwindowMarketdetailsParamsAcceptLanguage string

// PostUIOpenwindowNewmailJSONBody defines parameters for PostUIOpenwindowNewmail.
type PostUIOpenwindowNewmailJSONBody struct {
	Body               string  `json:"body"`
	Recipients         []int64 `json:"recipients"`
	Subject            string  `json:"subject"`
	ToCorpOrAllianceID *int64  `json:"to_corp_or_alliance_id,omitempty"`

	// ToMailingListID Corporations, alliances and mailing lists are all types of mailing groups. You may only send to one mailing group, at a time, so you may fill out either this field or the to_corp_or_alliance_ids field
	ToMailingListID *int64 `json:"to_mailing_list_id,omitempty"`
}

// PostUIOpenwindowNewmailParams defines parameters for PostUIOpenwindowNewmail.
type PostUIOpenwindowNewmailParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *PostUIOpenwindowNewmailParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// PostUIOpenwindowNewmailParamsAcceptLanguage defines parameters for PostUIOpenwindowNewmail.
type PostUIOpenwindowNewmailParamsAcceptLanguage string

// GetUniverseAncestriesParams defines parameters for GetUniverseAncestries.
type GetUniverseAncestriesParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetUniverseAncestriesParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetUniverseAncestriesParamsAcceptLanguage defines parameters for GetUniverseAncestries.
type GetUniverseAncestriesParamsAcceptLanguage string

// GetUniverseAsteroidBeltsAsteroidBeltIDParams defines parameters for GetUniverseAsteroidBeltsAsteroidBeltID.
type GetUniverseAsteroidBeltsAsteroidBeltIDParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetUniverseAsteroidBeltsAsteroidBeltIDParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetUniverseAsteroidBeltsAsteroidBeltIDParamsAcceptLanguage defines parameters for GetUniverseAsteroidBeltsAsteroidBeltID.
type GetUniverseAsteroidBeltsAsteroidBeltIDParamsAcceptLanguage string

// GetUniverseBloodlinesParams defines parameters for GetUniverseBloodlines.
type GetUniverseBloodlinesParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetUniverseBloodlinesParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetUniverseBloodlinesParamsAcceptLanguage defines parameters for GetUniverseBloodlines.
type GetUniverseBloodlinesParamsAcceptLanguage string

// GetUniverseCategoriesParams defines parameters for GetUniverseCategories.
type GetUniverseCategoriesParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetUniverseCategoriesParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetUniverseCategoriesParamsAcceptLanguage defines parameters for GetUniverseCategories.
type GetUniverseCategoriesParamsAcceptLanguage string

// GetUniverseCategoriesCategoryIDParams defines parameters for GetUniverseCategoriesCategoryID.
type GetUniverseCategoriesCategoryIDParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetUniverseCategoriesCategoryIDParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetUniverseCategoriesCategoryIDParamsAcceptLanguage defines parameters for GetUniverseCategoriesCategoryID.
type GetUniverseCategoriesCategoryIDParamsAcceptLanguage string

// GetUniverseConstellationsParams defines parameters for GetUniverseConstellations.
type GetUniverseConstellationsParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetUniverseConstellationsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetUniverseConstellationsParamsAcceptLanguage defines parameters for GetUniverseConstellations.
type GetUniverseConstellationsParamsAcceptLanguage string

// GetUniverseConstellationsConstellationIDParams defines parameters for GetUniverseConstellationsConstellationID.
type GetUniverseConstellationsConstellationIDParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetUniverseConstellationsConstellationIDParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetUniverseConstellationsConstellationIDParamsAcceptLanguage defines parameters for GetUniverseConstellationsConstellationID.
type GetUniverseConstellationsConstellationIDParamsAcceptLanguage string

// GetUniverseFactionsParams defines parameters for GetUniverseFactions.
type GetUniverseFactionsParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetUniverseFactionsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetUniverseFactionsParamsAcceptLanguage defines parameters for GetUniverseFactions.
type GetUniverseFactionsParamsAcceptLanguage string

// GetUniverseGraphicsParams defines parameters for GetUniverseGraphics.
type GetUniverseGraphicsParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetUniverseGraphicsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetUniverseGraphicsParamsAcceptLanguage defines parameters for GetUniverseGraphics.
type GetUniverseGraphicsParamsAcceptLanguage string

// GetUniverseGraphicsGraphicIDParams defines parameters for GetUniverseGraphicsGraphicID.
type GetUniverseGraphicsGraphicIDParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetUniverseGraphicsGraphicIDParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetUniverseGraphicsGraphicIDParamsAcceptLanguage defines parameters for GetUniverseGraphicsGraphicID.
type GetUniverseGraphicsGraphicIDParamsAcceptLanguage string

// GetUniverseGroupsParams defines parameters for GetUniverseGroups.
type GetUniverseGroupsParams struct {
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetUniverseGroupsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetUniverseGroupsParamsAcceptLanguage defines parameters for GetUniverseGroups.
type GetUniverseGroupsParamsAcceptLanguage string

// GetUniverseGroupsGroupIDParams defines parameters for GetUniverseGroupsGroupID.
type GetUniverseGroupsGroupIDParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetUniverseGroupsGroupIDParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetUniverseGroupsGroupIDParamsAcceptLanguage defines parameters for GetUniverseGroupsGroupID.
type GetUniverseGroupsGroupIDParamsAcceptLanguage string

// PostUniverseIdsJSONBody defines parameters for PostUniverseIds.
type PostUniverseIdsJSONBody = []string

// PostUniverseIdsParams defines parameters for PostUniverseIds.
type PostUniverseIdsParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *PostUniverseIdsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// PostUniverseIdsParamsAcceptLanguage defines parameters for PostUniverseIds.
type PostUniverseIdsParamsAcceptLanguage string

// GetUniverseMoonsMoonIDParams defines parameters for GetUniverseMoonsMoonID.
type GetUniverseMoonsMoonIDParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetUniverseMoonsMoonIDParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetUniverseMoonsMoonIDParamsAcceptLanguage defines parameters for GetUniverseMoonsMoonID.
type GetUniverseMoonsMoonIDParamsAcceptLanguage string

// PostUniverseNamesJSONBody defines parameters for PostUniverseNames.
type PostUniverseNamesJSONBody = []int64

// PostUniverseNamesParams defines parameters for PostUniverseNames.
type PostUniverseNamesParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *PostUniverseNamesParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// PostUniverseNamesParamsAcceptLanguage defines parameters for PostUniverseNames.
type PostUniverseNamesParamsAcceptLanguage string

// GetUniversePlanetsPlanetIDParams defines parameters for GetUniversePlanetsPlanetID.
type GetUniversePlanetsPlanetIDParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetUniversePlanetsPlanetIDParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetUniversePlanetsPlanetIDParamsAcceptLanguage defines parameters for GetUniversePlanetsPlanetID.
type GetUniversePlanetsPlanetIDParamsAcceptLanguage string

// GetUniverseRacesParams defines parameters for GetUniverseRaces.
type GetUniverseRacesParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetUniverseRacesParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetUniverseRacesParamsAcceptLanguage defines parameters for GetUniverseRaces.
type GetUniverseRacesParamsAcceptLanguage string

// GetUniverseRegionsParams defines parameters for GetUniverseRegions.
type GetUniverseRegionsParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetUniverseRegionsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetUniverseRegionsParamsAcceptLanguage defines parameters for GetUniverseRegions.
type GetUniverseRegionsParamsAcceptLanguage string

// GetUniverseRegionsRegionIDParams defines parameters for GetUniverseRegionsRegionID.
type GetUniverseRegionsRegionIDParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetUniverseRegionsRegionIDParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetUniverseRegionsRegionIDParamsAcceptLanguage defines parameters for GetUniverseRegionsRegionID.
type GetUniverseRegionsRegionIDParamsAcceptLanguage string

// GetUniverseSchematicsSchematicIDParams defines parameters for GetUniverseSchematicsSchematicID.
type GetUniverseSchematicsSchematicIDParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetUniverseSchematicsSchematicIDParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetUniverseSchematicsSchematicIDParamsAcceptLanguage defines parameters for GetUniverseSchematicsSchematicID.
type GetUniverseSchematicsSchematicIDParamsAcceptLanguage string

// GetUniverseStargatesStargateIDParams defines parameters for GetUniverseStargatesStargateID.
type GetUniverseStargatesStargateIDParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetUniverseStargatesStargateIDParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetUniverseStargatesStargateIDParamsAcceptLanguage defines parameters for GetUniverseStargatesStargateID.
type GetUniverseStargatesStargateIDParamsAcceptLanguage string

// GetUniverseStarsStarIDParams defines parameters for GetUniverseStarsStarID.
type GetUniverseStarsStarIDParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetUniverseStarsStarIDParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetUniverseStarsStarIDParamsAcceptLanguage defines parameters for GetUniverseStarsStarID.
type GetUniverseStarsStarIDParamsAcceptLanguage string

// GetUniverseStationsStationIDParams defines parameters for GetUniverseStationsStationID.
type GetUniverseStationsStationIDParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetUniverseStationsStationIDParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetUniverseStationsStationIDParamsAcceptLanguage defines parameters for GetUniverseStationsStationID.
type GetUniverseStationsStationIDParamsAcceptLanguage string

// GetUniverseStructuresParams defines parameters for GetUniverseStructures.
type GetUniverseStructuresParams struct {
	Filter *GetUniverseStructuresParamsFilter `form:"filter,omitempty" json:"filter,omitempty"`

	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetUniverseStructuresParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetUniverseStructuresParamsFilter defines parameters for GetUniverseStructures.
type GetUniverseStructuresParamsFilter string

// GetUniverseStructuresParamsAcceptLanguage defines parameters for GetUniverseStructures.
type GetUniverseStructuresParamsAcceptLanguage string

// GetUniverseStructuresStructureIDParams defines parameters for GetUniverseStructuresStructureID.
type GetUniverseStructuresStructureIDParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetUniverseStructuresStructureIDParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetUniverseStructuresStructureIDParamsAcceptLanguage defines parameters for GetUniverseStructuresStructureID.
type GetUniverseStructuresStructureIDParamsAcceptLanguage string

// GetUniverseSystemJumpsParams defines parameters for GetUniverseSystemJumps.
type GetUniverseSystemJumpsParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetUniverseSystemJumpsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetUniverseSystemJumpsParamsAcceptLanguage defines parameters for GetUniverseSystemJumps.
type GetUniverseSystemJumpsParamsAcceptLanguage string

// GetUniverseSystemKillsParams defines parameters for GetUniverseSystemKills.
type GetUniverseSystemKillsParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetUniverseSystemKillsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetUniverseSystemKillsParamsAcceptLanguage defines parameters for GetUniverseSystemKills.
type GetUniverseSystemKillsParamsAcceptLanguage string

// GetUniverseSystemsParams defines parameters for GetUniverseSystems.
type GetUniverseSystemsParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetUniverseSystemsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetUniverseSystemsParamsAcceptLanguage defines parameters for GetUniverseSystems.
type GetUniverseSystemsParamsAcceptLanguage string

// GetUniverseSystemsSystemIDParams defines parameters for GetUniverseSystemsSystemID.
type GetUniverseSystemsSystemIDParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetUniverseSystemsSystemIDParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetUniverseSystemsSystemIDParamsAcceptLanguage defines parameters for GetUniverseSystemsSystemID.
type GetUniverseSystemsSystemIDParamsAcceptLanguage string

// GetUniverseTypesParams defines parameters for GetUniverseTypes.
type GetUniverseTypesParams struct {
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetUniverseTypesParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetUniverseTypesParamsAcceptLanguage defines parameters for GetUniverseTypes.
type GetUniverseTypesParamsAcceptLanguage string

// GetUniverseTypesTypeIDParams defines parameters for GetUniverseTypesTypeID.
type GetUniverseTypesTypeIDParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetUniverseTypesTypeIDParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetUniverseTypesTypeIDParamsAcceptLanguage defines parameters for GetUniverseTypesTypeID.
type GetUniverseTypesTypeIDParamsAcceptLanguage string

// GetWarsParams defines parameters for GetWars.
type GetWarsParams struct {
	MaxWarID *int64 `form:"max_war_id,omitempty" json:"max_war_id,omitempty"`

	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetWarsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetWarsParamsAcceptLanguage defines parameters for GetWars.
type GetWarsParamsAcceptLanguage string

// GetWarsWarIDParams defines parameters for GetWarsWarID.
type GetWarsWarIDParams struct {
	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetWarsWarIDParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetWarsWarIDParamsAcceptLanguage defines parameters for GetWarsWarID.
type GetWarsWarIDParamsAcceptLanguage string

// GetWarsWarIDKillmailsParams defines parameters for GetWarsWarIDKillmails.
type GetWarsWarIDKillmailsParams struct {
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// AcceptLanguage The language to use for the response. Defaults to 'en'.
	AcceptLanguage *GetWarsWarIDKillmailsParamsAcceptLanguage `json:"Accept-Language,omitempty"`

	// IfNoneMatch The ETag of the previous request. A 304 will be returned if this matches the current ETag.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`

	// XCompatibilityDate The compatibility date for the request.
	XCompatibilityDate CompatibilityDate `json:"X-Compatibility-Date"`

	// XTenant The tenant ID for the request. Defaults to 'tranquility'.
	XTenant *Tenant `json:"X-Tenant,omitempty"`
}

// GetWarsWarIDKillmailsParamsAcceptLanguage defines parameters for GetWarsWarIDKillmails.
type GetWarsWarIDKillmailsParamsAcceptLanguage string

// PostCharactersAffiliationJSONRequestBody defines body for PostCharactersAffiliation for application/json ContentType.
type PostCharactersAffiliationJSONRequestBody = PostCharactersAffiliationJSONBody

// PostCharactersCharacterIDAssetsLocationsJSONRequestBody defines body for PostCharactersCharacterIDAssetsLocations for application/json ContentType.
type PostCharactersCharacterIDAssetsLocationsJSONRequestBody = PostCharactersCharacterIDAssetsLocationsJSONBody

// PostCharactersCharacterIDAssetsNamesJSONRequestBody defines body for PostCharactersCharacterIDAssetsNames for application/json ContentType.
type PostCharactersCharacterIDAssetsNamesJSONRequestBody = PostCharactersCharacterIDAssetsNamesJSONBody

// PutCharactersCharacterIDCalendarEventIDJSONRequestBody defines body for PutCharactersCharacterIDCalendarEventID for application/json ContentType.
type PutCharactersCharacterIDCalendarEventIDJSONRequestBody PutCharactersCharacterIDCalendarEventIDJSONBody

// PostCharactersCharacterIDContactsJSONRequestBody defines body for PostCharactersCharacterIDContacts for application/json ContentType.
type PostCharactersCharacterIDContactsJSONRequestBody = PostCharactersCharacterIDContactsJSONBody

// PutCharactersCharacterIDContactsJSONRequestBody defines body for PutCharactersCharacterIDContacts for application/json ContentType.
type PutCharactersCharacterIDContactsJSONRequestBody = PutCharactersCharacterIDContactsJSONBody

// PostCharactersCharacterIDCspaJSONRequestBody defines body for PostCharactersCharacterIDCspa for application/json ContentType.
type PostCharactersCharacterIDCspaJSONRequestBody = PostCharactersCharacterIDCspaJSONBody

// PostCharactersCharacterIDFittingsJSONRequestBody defines body for PostCharactersCharacterIDFittings for application/json ContentType.
type PostCharactersCharacterIDFittingsJSONRequestBody PostCharactersCharacterIDFittingsJSONBody

// PostCharactersCharacterIDMailJSONRequestBody defines body for PostCharactersCharacterIDMail for application/json ContentType.
type PostCharactersCharacterIDMailJSONRequestBody PostCharactersCharacterIDMailJSONBody

// PostCharactersCharacterIDMailLabelsJSONRequestBody defines body for PostCharactersCharacterIDMailLabels for application/json ContentType.
type PostCharactersCharacterIDMailLabelsJSONRequestBody PostCharactersCharacterIDMailLabelsJSONBody

// PutCharactersCharacterIDMailMailIDJSONRequestBody defines body for PutCharactersCharacterIDMailMailID for application/json ContentType.
type PutCharactersCharacterIDMailMailIDJSONRequestBody PutCharactersCharacterIDMailMailIDJSONBody

// PostCorporationsCorporationIDAssetsLocationsJSONRequestBody defines body for PostCorporationsCorporationIDAssetsLocations for application/json ContentType.
type PostCorporationsCorporationIDAssetsLocationsJSONRequestBody = PostCorporationsCorporationIDAssetsLocationsJSONBody

// PostCorporationsCorporationIDAssetsNamesJSONRequestBody defines body for PostCorporationsCorporationIDAssetsNames for application/json ContentType.
type PostCorporationsCorporationIDAssetsNamesJSONRequestBody = PostCorporationsCorporationIDAssetsNamesJSONBody

// PutFleetsFleetIDJSONRequestBody defines body for PutFleetsFleetID for application/json ContentType.
type PutFleetsFleetIDJSONRequestBody PutFleetsFleetIDJSONBody

// PostFleetsFleetIDMembersJSONRequestBody defines body for PostFleetsFleetIDMembers for application/json ContentType.
type PostFleetsFleetIDMembersJSONRequestBody PostFleetsFleetIDMembersJSONBody

// PutFleetsFleetIDMembersMemberIDJSONRequestBody defines body for PutFleetsFleetIDMembersMemberID for application/json ContentType.
type PutFleetsFleetIDMembersMemberIDJSONRequestBody PutFleetsFleetIDMembersMemberIDJSONBody

// PutFleetsFleetIDSquadsSquadIDJSONRequestBody defines body for PutFleetsFleetIDSquadsSquadID for application/json ContentType.
type PutFleetsFleetIDSquadsSquadIDJSONRequestBody PutFleetsFleetIDSquadsSquadIDJSONBody

// PutFleetsFleetIDWingsWingIDJSONRequestBody defines body for PutFleetsFleetIDWingsWingID for application/json ContentType.
type PutFleetsFleetIDWingsWingIDJSONRequestBody PutFleetsFleetIDWingsWingIDJSONBody

// PostUIOpenwindowNewmailJSONRequestBody defines body for PostUIOpenwindowNewmail for application/json ContentType.
type PostUIOpenwindowNewmailJSONRequestBody PostUIOpenwindowNewmailJSONBody

// PostUniverseIdsJSONRequestBody defines body for PostUniverseIds for application/json ContentType.
type PostUniverseIdsJSONRequestBody = PostUniverseIdsJSONBody

// PostUniverseNamesJSONRequestBody defines body for PostUniverseNames for application/json ContentType.
type PostUniverseNamesJSONRequestBody = PostUniverseNamesJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAlliances request
	GetAlliances(ctx context.Context, params *GetAlliancesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlliancesAllianceID request
	GetAlliancesAllianceID(ctx context.Context, allianceID AllianceID, params *GetAlliancesAllianceIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlliancesAllianceIDContacts request
	GetAlliancesAllianceIDContacts(ctx context.Context, allianceID AllianceID, params *GetAlliancesAllianceIDContactsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlliancesAllianceIDContactsLabels request
	GetAlliancesAllianceIDContactsLabels(ctx context.Context, allianceID AllianceID, params *GetAlliancesAllianceIDContactsLabelsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlliancesAllianceIDCorporations request
	GetAlliancesAllianceIDCorporations(ctx context.Context, allianceID AllianceID, params *GetAlliancesAllianceIDCorporationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlliancesAllianceIDIcons request
	GetAlliancesAllianceIDIcons(ctx context.Context, allianceID AllianceID, params *GetAlliancesAllianceIDIconsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCharactersAffiliationWithBody request with any body
	PostCharactersAffiliationWithBody(ctx context.Context, params *PostCharactersAffiliationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCharactersAffiliation(ctx context.Context, params *PostCharactersAffiliationParams, body PostCharactersAffiliationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharactersCharacterID request
	GetCharactersCharacterID(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharactersCharacterIDAgentsResearch request
	GetCharactersCharacterIDAgentsResearch(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDAgentsResearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharactersCharacterIDAssets request
	GetCharactersCharacterIDAssets(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDAssetsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCharactersCharacterIDAssetsLocationsWithBody request with any body
	PostCharactersCharacterIDAssetsLocationsWithBody(ctx context.Context, characterID CharacterID, params *PostCharactersCharacterIDAssetsLocationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCharactersCharacterIDAssetsLocations(ctx context.Context, characterID CharacterID, params *PostCharactersCharacterIDAssetsLocationsParams, body PostCharactersCharacterIDAssetsLocationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCharactersCharacterIDAssetsNamesWithBody request with any body
	PostCharactersCharacterIDAssetsNamesWithBody(ctx context.Context, characterID CharacterID, params *PostCharactersCharacterIDAssetsNamesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCharactersCharacterIDAssetsNames(ctx context.Context, characterID CharacterID, params *PostCharactersCharacterIDAssetsNamesParams, body PostCharactersCharacterIDAssetsNamesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharactersCharacterIDAttributes request
	GetCharactersCharacterIDAttributes(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDAttributesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharactersCharacterIDBlueprints request
	GetCharactersCharacterIDBlueprints(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDBlueprintsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharactersCharacterIDCalendar request
	GetCharactersCharacterIDCalendar(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDCalendarParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharactersCharacterIDCalendarEventID request
	GetCharactersCharacterIDCalendarEventID(ctx context.Context, characterID CharacterID, eventID int64, params *GetCharactersCharacterIDCalendarEventIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCharactersCharacterIDCalendarEventIDWithBody request with any body
	PutCharactersCharacterIDCalendarEventIDWithBody(ctx context.Context, characterID CharacterID, eventID int64, params *PutCharactersCharacterIDCalendarEventIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCharactersCharacterIDCalendarEventID(ctx context.Context, characterID CharacterID, eventID int64, params *PutCharactersCharacterIDCalendarEventIDParams, body PutCharactersCharacterIDCalendarEventIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharactersCharacterIDCalendarEventIDAttendees request
	GetCharactersCharacterIDCalendarEventIDAttendees(ctx context.Context, characterID CharacterID, eventID int64, params *GetCharactersCharacterIDCalendarEventIDAttendeesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharactersCharacterIDClones request
	GetCharactersCharacterIDClones(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDClonesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCharactersCharacterIDContacts request
	DeleteCharactersCharacterIDContacts(ctx context.Context, characterID CharacterID, params *DeleteCharactersCharacterIDContactsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharactersCharacterIDContacts request
	GetCharactersCharacterIDContacts(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDContactsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCharactersCharacterIDContactsWithBody request with any body
	PostCharactersCharacterIDContactsWithBody(ctx context.Context, characterID CharacterID, params *PostCharactersCharacterIDContactsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCharactersCharacterIDContacts(ctx context.Context, characterID CharacterID, params *PostCharactersCharacterIDContactsParams, body PostCharactersCharacterIDContactsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCharactersCharacterIDContactsWithBody request with any body
	PutCharactersCharacterIDContactsWithBody(ctx context.Context, characterID CharacterID, params *PutCharactersCharacterIDContactsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCharactersCharacterIDContacts(ctx context.Context, characterID CharacterID, params *PutCharactersCharacterIDContactsParams, body PutCharactersCharacterIDContactsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharactersCharacterIDContactsLabels request
	GetCharactersCharacterIDContactsLabels(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDContactsLabelsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharactersCharacterIDContracts request
	GetCharactersCharacterIDContracts(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDContractsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharactersCharacterIDContractsContractIDBids request
	GetCharactersCharacterIDContractsContractIDBids(ctx context.Context, characterID CharacterID, contractID int64, params *GetCharactersCharacterIDContractsContractIDBidsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharactersCharacterIDContractsContractIDItems request
	GetCharactersCharacterIDContractsContractIDItems(ctx context.Context, characterID CharacterID, contractID int64, params *GetCharactersCharacterIDContractsContractIDItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharactersCharacterIDCorporationhistory request
	GetCharactersCharacterIDCorporationhistory(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDCorporationhistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCharactersCharacterIDCspaWithBody request with any body
	PostCharactersCharacterIDCspaWithBody(ctx context.Context, characterID CharacterID, params *PostCharactersCharacterIDCspaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCharactersCharacterIDCspa(ctx context.Context, characterID CharacterID, params *PostCharactersCharacterIDCspaParams, body PostCharactersCharacterIDCspaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharactersCharacterIDFatigue request
	GetCharactersCharacterIDFatigue(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDFatigueParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharactersCharacterIDFittings request
	GetCharactersCharacterIDFittings(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDFittingsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCharactersCharacterIDFittingsWithBody request with any body
	PostCharactersCharacterIDFittingsWithBody(ctx context.Context, characterID CharacterID, params *PostCharactersCharacterIDFittingsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCharactersCharacterIDFittings(ctx context.Context, characterID CharacterID, params *PostCharactersCharacterIDFittingsParams, body PostCharactersCharacterIDFittingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCharactersCharacterIDFittingsFittingID request
	DeleteCharactersCharacterIDFittingsFittingID(ctx context.Context, characterID CharacterID, fittingID int64, params *DeleteCharactersCharacterIDFittingsFittingIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharactersCharacterIDFleet request
	GetCharactersCharacterIDFleet(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDFleetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharactersCharacterIDFwStats request
	GetCharactersCharacterIDFwStats(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDFwStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharactersCharacterIDImplants request
	GetCharactersCharacterIDImplants(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDImplantsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharactersCharacterIDIndustryJobs request
	GetCharactersCharacterIDIndustryJobs(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDIndustryJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharactersCharacterIDKillmailsRecent request
	GetCharactersCharacterIDKillmailsRecent(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDKillmailsRecentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharactersCharacterIDLocation request
	GetCharactersCharacterIDLocation(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDLocationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharactersCharacterIDLoyaltyPoints request
	GetCharactersCharacterIDLoyaltyPoints(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDLoyaltyPointsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharactersCharacterIDMail request
	GetCharactersCharacterIDMail(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDMailParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCharactersCharacterIDMailWithBody request with any body
	PostCharactersCharacterIDMailWithBody(ctx context.Context, characterID CharacterID, params *PostCharactersCharacterIDMailParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCharactersCharacterIDMail(ctx context.Context, characterID CharacterID, params *PostCharactersCharacterIDMailParams, body PostCharactersCharacterIDMailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharactersCharacterIDMailLabels request
	GetCharactersCharacterIDMailLabels(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDMailLabelsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCharactersCharacterIDMailLabelsWithBody request with any body
	PostCharactersCharacterIDMailLabelsWithBody(ctx context.Context, characterID CharacterID, params *PostCharactersCharacterIDMailLabelsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCharactersCharacterIDMailLabels(ctx context.Context, characterID CharacterID, params *PostCharactersCharacterIDMailLabelsParams, body PostCharactersCharacterIDMailLabelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCharactersCharacterIDMailLabelsLabelID request
	DeleteCharactersCharacterIDMailLabelsLabelID(ctx context.Context, characterID CharacterID, labelID int64, params *DeleteCharactersCharacterIDMailLabelsLabelIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharactersCharacterIDMailLists request
	GetCharactersCharacterIDMailLists(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDMailListsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCharactersCharacterIDMailMailID request
	DeleteCharactersCharacterIDMailMailID(ctx context.Context, characterID CharacterID, mailID int64, params *DeleteCharactersCharacterIDMailMailIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharactersCharacterIDMailMailID request
	GetCharactersCharacterIDMailMailID(ctx context.Context, characterID CharacterID, mailID int64, params *GetCharactersCharacterIDMailMailIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCharactersCharacterIDMailMailIDWithBody request with any body
	PutCharactersCharacterIDMailMailIDWithBody(ctx context.Context, characterID CharacterID, mailID int64, params *PutCharactersCharacterIDMailMailIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCharactersCharacterIDMailMailID(ctx context.Context, characterID CharacterID, mailID int64, params *PutCharactersCharacterIDMailMailIDParams, body PutCharactersCharacterIDMailMailIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharactersCharacterIDMedals request
	GetCharactersCharacterIDMedals(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDMedalsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharactersCharacterIDMining request
	GetCharactersCharacterIDMining(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDMiningParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharactersCharacterIDNotifications request
	GetCharactersCharacterIDNotifications(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDNotificationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharactersCharacterIDNotificationsContacts request
	GetCharactersCharacterIDNotificationsContacts(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDNotificationsContactsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharactersCharacterIDOnline request
	GetCharactersCharacterIDOnline(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDOnlineParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharactersCharacterIDOrders request
	GetCharactersCharacterIDOrders(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDOrdersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharactersCharacterIDOrdersHistory request
	GetCharactersCharacterIDOrdersHistory(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDOrdersHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharactersCharacterIDPlanets request
	GetCharactersCharacterIDPlanets(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDPlanetsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharactersCharacterIDPlanetsPlanetID request
	GetCharactersCharacterIDPlanetsPlanetID(ctx context.Context, characterID CharacterID, planetID int64, params *GetCharactersCharacterIDPlanetsPlanetIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharactersCharacterIDPortrait request
	GetCharactersCharacterIDPortrait(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDPortraitParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharactersCharacterIDRoles request
	GetCharactersCharacterIDRoles(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharactersCharacterIDSearch request
	GetCharactersCharacterIDSearch(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharactersCharacterIDShip request
	GetCharactersCharacterIDShip(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDShipParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharactersCharacterIDSkillqueue request
	GetCharactersCharacterIDSkillqueue(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDSkillqueueParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharactersCharacterIDSkills request
	GetCharactersCharacterIDSkills(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDSkillsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharactersCharacterIDStandings request
	GetCharactersCharacterIDStandings(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDStandingsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharactersCharacterIDTitles request
	GetCharactersCharacterIDTitles(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDTitlesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharactersCharacterIDWallet request
	GetCharactersCharacterIDWallet(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDWalletParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharactersCharacterIDWalletJournal request
	GetCharactersCharacterIDWalletJournal(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDWalletJournalParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharactersCharacterIDWalletTransactions request
	GetCharactersCharacterIDWalletTransactions(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDWalletTransactionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContractsPublicBidsContractID request
	GetContractsPublicBidsContractID(ctx context.Context, contractID int64, params *GetContractsPublicBidsContractIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContractsPublicItemsContractID request
	GetContractsPublicItemsContractID(ctx context.Context, contractID int64, params *GetContractsPublicItemsContractIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContractsPublicRegionID request
	GetContractsPublicRegionID(ctx context.Context, regionID int64, params *GetContractsPublicRegionIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCorporationCorporationIDMiningExtractions request
	GetCorporationCorporationIDMiningExtractions(ctx context.Context, corporationID CorporationID, params *GetCorporationCorporationIDMiningExtractionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCorporationCorporationIDMiningObservers request
	GetCorporationCorporationIDMiningObservers(ctx context.Context, corporationID CorporationID, params *GetCorporationCorporationIDMiningObserversParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCorporationCorporationIDMiningObserversObserverID request
	GetCorporationCorporationIDMiningObserversObserverID(ctx context.Context, corporationID CorporationID, observerID int64, params *GetCorporationCorporationIDMiningObserversObserverIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCorporationsNpccorps request
	GetCorporationsNpccorps(ctx context.Context, params *GetCorporationsNpccorpsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCorporationsCorporationID request
	GetCorporationsCorporationID(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCorporationsCorporationIDAlliancehistory request
	GetCorporationsCorporationIDAlliancehistory(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDAlliancehistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCorporationsCorporationIDAssets request
	GetCorporationsCorporationIDAssets(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDAssetsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCorporationsCorporationIDAssetsLocationsWithBody request with any body
	PostCorporationsCorporationIDAssetsLocationsWithBody(ctx context.Context, corporationID CorporationID, params *PostCorporationsCorporationIDAssetsLocationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCorporationsCorporationIDAssetsLocations(ctx context.Context, corporationID CorporationID, params *PostCorporationsCorporationIDAssetsLocationsParams, body PostCorporationsCorporationIDAssetsLocationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCorporationsCorporationIDAssetsNamesWithBody request with any body
	PostCorporationsCorporationIDAssetsNamesWithBody(ctx context.Context, corporationID CorporationID, params *PostCorporationsCorporationIDAssetsNamesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCorporationsCorporationIDAssetsNames(ctx context.Context, corporationID CorporationID, params *PostCorporationsCorporationIDAssetsNamesParams, body PostCorporationsCorporationIDAssetsNamesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCorporationsCorporationIDBlueprints request
	GetCorporationsCorporationIDBlueprints(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDBlueprintsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCorporationsCorporationIDContacts request
	GetCorporationsCorporationIDContacts(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDContactsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCorporationsCorporationIDContactsLabels request
	GetCorporationsCorporationIDContactsLabels(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDContactsLabelsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCorporationsCorporationIDContainersLogs request
	GetCorporationsCorporationIDContainersLogs(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDContainersLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCorporationsCorporationIDContracts request
	GetCorporationsCorporationIDContracts(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDContractsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCorporationsCorporationIDContractsContractIDBids request
	GetCorporationsCorporationIDContractsContractIDBids(ctx context.Context, corporationID CorporationID, contractID int64, params *GetCorporationsCorporationIDContractsContractIDBidsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCorporationsCorporationIDContractsContractIDItems request
	GetCorporationsCorporationIDContractsContractIDItems(ctx context.Context, corporationID CorporationID, contractID int64, params *GetCorporationsCorporationIDContractsContractIDItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCorporationsCorporationIDCustomsOffices request
	GetCorporationsCorporationIDCustomsOffices(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDCustomsOfficesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCorporationsCorporationIDDivisions request
	GetCorporationsCorporationIDDivisions(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDDivisionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCorporationsCorporationIDFacilities request
	GetCorporationsCorporationIDFacilities(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDFacilitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCorporationsCorporationIDFwStats request
	GetCorporationsCorporationIDFwStats(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDFwStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCorporationsCorporationIDIcons request
	GetCorporationsCorporationIDIcons(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDIconsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCorporationsCorporationIDIndustryJobs request
	GetCorporationsCorporationIDIndustryJobs(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDIndustryJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCorporationsCorporationIDKillmailsRecent request
	GetCorporationsCorporationIDKillmailsRecent(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDKillmailsRecentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCorporationsCorporationIDMedals request
	GetCorporationsCorporationIDMedals(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDMedalsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCorporationsCorporationIDMedalsIssued request
	GetCorporationsCorporationIDMedalsIssued(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDMedalsIssuedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCorporationsCorporationIDMembers request
	GetCorporationsCorporationIDMembers(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDMembersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCorporationsCorporationIDMembersLimit request
	GetCorporationsCorporationIDMembersLimit(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDMembersLimitParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCorporationsCorporationIDMembersTitles request
	GetCorporationsCorporationIDMembersTitles(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDMembersTitlesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCorporationsCorporationIDMembertracking request
	GetCorporationsCorporationIDMembertracking(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDMembertrackingParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCorporationsCorporationIDOrders request
	GetCorporationsCorporationIDOrders(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDOrdersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCorporationsCorporationIDOrdersHistory request
	GetCorporationsCorporationIDOrdersHistory(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDOrdersHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCorporationsCorporationIDRoles request
	GetCorporationsCorporationIDRoles(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCorporationsCorporationIDRolesHistory request
	GetCorporationsCorporationIDRolesHistory(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDRolesHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCorporationsCorporationIDShareholders request
	GetCorporationsCorporationIDShareholders(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDShareholdersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCorporationsCorporationIDStandings request
	GetCorporationsCorporationIDStandings(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDStandingsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCorporationsCorporationIDStarbases request
	GetCorporationsCorporationIDStarbases(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDStarbasesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCorporationsCorporationIDStarbasesStarbaseID request
	GetCorporationsCorporationIDStarbasesStarbaseID(ctx context.Context, corporationID CorporationID, starbaseID int64, params *GetCorporationsCorporationIDStarbasesStarbaseIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCorporationsCorporationIDStructures request
	GetCorporationsCorporationIDStructures(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDStructuresParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCorporationsCorporationIDTitles request
	GetCorporationsCorporationIDTitles(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDTitlesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCorporationsCorporationIDWallets request
	GetCorporationsCorporationIDWallets(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDWalletsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCorporationsCorporationIDWalletsDivisionJournal request
	GetCorporationsCorporationIDWalletsDivisionJournal(ctx context.Context, corporationID CorporationID, division int64, params *GetCorporationsCorporationIDWalletsDivisionJournalParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCorporationsCorporationIDWalletsDivisionTransactions request
	GetCorporationsCorporationIDWalletsDivisionTransactions(ctx context.Context, corporationID CorporationID, division int64, params *GetCorporationsCorporationIDWalletsDivisionTransactionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDogmaAttributes request
	GetDogmaAttributes(ctx context.Context, params *GetDogmaAttributesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDogmaAttributesAttributeID request
	GetDogmaAttributesAttributeID(ctx context.Context, attributeID int64, params *GetDogmaAttributesAttributeIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDogmaDynamicItemsTypeIDItemID request
	GetDogmaDynamicItemsTypeIDItemID(ctx context.Context, typeID int64, itemID int64, params *GetDogmaDynamicItemsTypeIDItemIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDogmaEffects request
	GetDogmaEffects(ctx context.Context, params *GetDogmaEffectsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDogmaEffectsEffectID request
	GetDogmaEffectsEffectID(ctx context.Context, effectID int64, params *GetDogmaEffectsEffectIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFleetsFleetID request
	GetFleetsFleetID(ctx context.Context, fleetID int64, params *GetFleetsFleetIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutFleetsFleetIDWithBody request with any body
	PutFleetsFleetIDWithBody(ctx context.Context, fleetID int64, params *PutFleetsFleetIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutFleetsFleetID(ctx context.Context, fleetID int64, params *PutFleetsFleetIDParams, body PutFleetsFleetIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFleetsFleetIDMembers request
	GetFleetsFleetIDMembers(ctx context.Context, fleetID int64, params *GetFleetsFleetIDMembersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFleetsFleetIDMembersWithBody request with any body
	PostFleetsFleetIDMembersWithBody(ctx context.Context, fleetID int64, params *PostFleetsFleetIDMembersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFleetsFleetIDMembers(ctx context.Context, fleetID int64, params *PostFleetsFleetIDMembersParams, body PostFleetsFleetIDMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFleetsFleetIDMembersMemberID request
	DeleteFleetsFleetIDMembersMemberID(ctx context.Context, fleetID int64, memberID int64, params *DeleteFleetsFleetIDMembersMemberIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutFleetsFleetIDMembersMemberIDWithBody request with any body
	PutFleetsFleetIDMembersMemberIDWithBody(ctx context.Context, fleetID int64, memberID int64, params *PutFleetsFleetIDMembersMemberIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutFleetsFleetIDMembersMemberID(ctx context.Context, fleetID int64, memberID int64, params *PutFleetsFleetIDMembersMemberIDParams, body PutFleetsFleetIDMembersMemberIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFleetsFleetIDSquadsSquadID request
	DeleteFleetsFleetIDSquadsSquadID(ctx context.Context, fleetID int64, squadID int64, params *DeleteFleetsFleetIDSquadsSquadIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutFleetsFleetIDSquadsSquadIDWithBody request with any body
	PutFleetsFleetIDSquadsSquadIDWithBody(ctx context.Context, fleetID int64, squadID int64, params *PutFleetsFleetIDSquadsSquadIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutFleetsFleetIDSquadsSquadID(ctx context.Context, fleetID int64, squadID int64, params *PutFleetsFleetIDSquadsSquadIDParams, body PutFleetsFleetIDSquadsSquadIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFleetsFleetIDWings request
	GetFleetsFleetIDWings(ctx context.Context, fleetID int64, params *GetFleetsFleetIDWingsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFleetsFleetIDWings request
	PostFleetsFleetIDWings(ctx context.Context, fleetID int64, params *PostFleetsFleetIDWingsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFleetsFleetIDWingsWingID request
	DeleteFleetsFleetIDWingsWingID(ctx context.Context, fleetID int64, wingID int64, params *DeleteFleetsFleetIDWingsWingIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutFleetsFleetIDWingsWingIDWithBody request with any body
	PutFleetsFleetIDWingsWingIDWithBody(ctx context.Context, fleetID int64, wingID int64, params *PutFleetsFleetIDWingsWingIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutFleetsFleetIDWingsWingID(ctx context.Context, fleetID int64, wingID int64, params *PutFleetsFleetIDWingsWingIDParams, body PutFleetsFleetIDWingsWingIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFleetsFleetIDWingsWingIDSquads request
	PostFleetsFleetIDWingsWingIDSquads(ctx context.Context, fleetID int64, wingID int64, params *PostFleetsFleetIDWingsWingIDSquadsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFwLeaderboards request
	GetFwLeaderboards(ctx context.Context, params *GetFwLeaderboardsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFwLeaderboardsCharacters request
	GetFwLeaderboardsCharacters(ctx context.Context, params *GetFwLeaderboardsCharactersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFwLeaderboardsCorporations request
	GetFwLeaderboardsCorporations(ctx context.Context, params *GetFwLeaderboardsCorporationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFwStats request
	GetFwStats(ctx context.Context, params *GetFwStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFwSystems request
	GetFwSystems(ctx context.Context, params *GetFwSystemsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFwWars request
	GetFwWars(ctx context.Context, params *GetFwWarsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncursions request
	GetIncursions(ctx context.Context, params *GetIncursionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndustryFacilities request
	GetIndustryFacilities(ctx context.Context, params *GetIndustryFacilitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndustrySystems request
	GetIndustrySystems(ctx context.Context, params *GetIndustrySystemsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInsurancePrices request
	GetInsurancePrices(ctx context.Context, params *GetInsurancePricesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKillmailsKillmailIDKillmailHash request
	GetKillmailsKillmailIDKillmailHash(ctx context.Context, killmailID int64, killmailHash string, params *GetKillmailsKillmailIDKillmailHashParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLoyaltyStoresCorporationIDOffers request
	GetLoyaltyStoresCorporationIDOffers(ctx context.Context, corporationID CorporationID, params *GetLoyaltyStoresCorporationIDOffersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMarketsGroups request
	GetMarketsGroups(ctx context.Context, params *GetMarketsGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMarketsGroupsMarketGroupID request
	GetMarketsGroupsMarketGroupID(ctx context.Context, marketGroupID int64, params *GetMarketsGroupsMarketGroupIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMarketsPrices request
	GetMarketsPrices(ctx context.Context, params *GetMarketsPricesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMarketsStructuresStructureID request
	GetMarketsStructuresStructureID(ctx context.Context, structureID int64, params *GetMarketsStructuresStructureIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMarketsRegionIDHistory request
	GetMarketsRegionIDHistory(ctx context.Context, regionID int64, params *GetMarketsRegionIDHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMarketsRegionIDOrders request
	GetMarketsRegionIDOrders(ctx context.Context, regionID int64, params *GetMarketsRegionIDOrdersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMarketsRegionIDTypes request
	GetMarketsRegionIDTypes(ctx context.Context, regionID int64, params *GetMarketsRegionIDTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRouteOriginDestination request
	GetRouteOriginDestination(ctx context.Context, origin int64, destination int64, params *GetRouteOriginDestinationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSovereigntyCampaigns request
	GetSovereigntyCampaigns(ctx context.Context, params *GetSovereigntyCampaignsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSovereigntyMap request
	GetSovereigntyMap(ctx context.Context, params *GetSovereigntyMapParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSovereigntyStructures request
	GetSovereigntyStructures(ctx context.Context, params *GetSovereigntyStructuresParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatus request
	GetStatus(ctx context.Context, params *GetStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUIAutopilotWaypoint request
	PostUIAutopilotWaypoint(ctx context.Context, params *PostUIAutopilotWaypointParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUIOpenwindowContract request
	PostUIOpenwindowContract(ctx context.Context, params *PostUIOpenwindowContractParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUIOpenwindowInformation request
	PostUIOpenwindowInformation(ctx context.Context, params *PostUIOpenwindowInformationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUIOpenwindowMarketdetails request
	PostUIOpenwindowMarketdetails(ctx context.Context, params *PostUIOpenwindowMarketdetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUIOpenwindowNewmailWithBody request with any body
	PostUIOpenwindowNewmailWithBody(ctx context.Context, params *PostUIOpenwindowNewmailParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUIOpenwindowNewmail(ctx context.Context, params *PostUIOpenwindowNewmailParams, body PostUIOpenwindowNewmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUniverseAncestries request
	GetUniverseAncestries(ctx context.Context, params *GetUniverseAncestriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUniverseAsteroidBeltsAsteroidBeltID request
	GetUniverseAsteroidBeltsAsteroidBeltID(ctx context.Context, asteroidBeltID int64, params *GetUniverseAsteroidBeltsAsteroidBeltIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUniverseBloodlines request
	GetUniverseBloodlines(ctx context.Context, params *GetUniverseBloodlinesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUniverseCategories request
	GetUniverseCategories(ctx context.Context, params *GetUniverseCategoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUniverseCategoriesCategoryID request
	GetUniverseCategoriesCategoryID(ctx context.Context, categoryID int64, params *GetUniverseCategoriesCategoryIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUniverseConstellations request
	GetUniverseConstellations(ctx context.Context, params *GetUniverseConstellationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUniverseConstellationsConstellationID request
	GetUniverseConstellationsConstellationID(ctx context.Context, constellationID int64, params *GetUniverseConstellationsConstellationIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUniverseFactions request
	GetUniverseFactions(ctx context.Context, params *GetUniverseFactionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUniverseGraphics request
	GetUniverseGraphics(ctx context.Context, params *GetUniverseGraphicsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUniverseGraphicsGraphicID request
	GetUniverseGraphicsGraphicID(ctx context.Context, graphicID int64, params *GetUniverseGraphicsGraphicIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUniverseGroups request
	GetUniverseGroups(ctx context.Context, params *GetUniverseGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUniverseGroupsGroupID request
	GetUniverseGroupsGroupID(ctx context.Context, groupID int64, params *GetUniverseGroupsGroupIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUniverseIdsWithBody request with any body
	PostUniverseIdsWithBody(ctx context.Context, params *PostUniverseIdsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUniverseIds(ctx context.Context, params *PostUniverseIdsParams, body PostUniverseIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUniverseMoonsMoonID request
	GetUniverseMoonsMoonID(ctx context.Context, moonID int64, params *GetUniverseMoonsMoonIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUniverseNamesWithBody request with any body
	PostUniverseNamesWithBody(ctx context.Context, params *PostUniverseNamesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUniverseNames(ctx context.Context, params *PostUniverseNamesParams, body PostUniverseNamesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUniversePlanetsPlanetID request
	GetUniversePlanetsPlanetID(ctx context.Context, planetID int64, params *GetUniversePlanetsPlanetIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUniverseRaces request
	GetUniverseRaces(ctx context.Context, params *GetUniverseRacesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUniverseRegions request
	GetUniverseRegions(ctx context.Context, params *GetUniverseRegionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUniverseRegionsRegionID request
	GetUniverseRegionsRegionID(ctx context.Context, regionID int64, params *GetUniverseRegionsRegionIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUniverseSchematicsSchematicID request
	GetUniverseSchematicsSchematicID(ctx context.Context, schematicID int64, params *GetUniverseSchematicsSchematicIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUniverseStargatesStargateID request
	GetUniverseStargatesStargateID(ctx context.Context, stargateID int64, params *GetUniverseStargatesStargateIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUniverseStarsStarID request
	GetUniverseStarsStarID(ctx context.Context, starID int64, params *GetUniverseStarsStarIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUniverseStationsStationID request
	GetUniverseStationsStationID(ctx context.Context, stationID int64, params *GetUniverseStationsStationIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUniverseStructures request
	GetUniverseStructures(ctx context.Context, params *GetUniverseStructuresParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUniverseStructuresStructureID request
	GetUniverseStructuresStructureID(ctx context.Context, structureID int64, params *GetUniverseStructuresStructureIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUniverseSystemJumps request
	GetUniverseSystemJumps(ctx context.Context, params *GetUniverseSystemJumpsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUniverseSystemKills request
	GetUniverseSystemKills(ctx context.Context, params *GetUniverseSystemKillsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUniverseSystems request
	GetUniverseSystems(ctx context.Context, params *GetUniverseSystemsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUniverseSystemsSystemID request
	GetUniverseSystemsSystemID(ctx context.Context, systemID int64, params *GetUniverseSystemsSystemIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUniverseTypes request
	GetUniverseTypes(ctx context.Context, params *GetUniverseTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUniverseTypesTypeID request
	GetUniverseTypesTypeID(ctx context.Context, typeID int64, params *GetUniverseTypesTypeIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWars request
	GetWars(ctx context.Context, params *GetWarsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWarsWarID request
	GetWarsWarID(ctx context.Context, warID int64, params *GetWarsWarIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWarsWarIDKillmails request
	GetWarsWarIDKillmails(ctx context.Context, warID int64, params *GetWarsWarIDKillmailsParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAlliances(ctx context.Context, params *GetAlliancesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlliancesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlliancesAllianceID(ctx context.Context, allianceID AllianceID, params *GetAlliancesAllianceIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlliancesAllianceIDRequest(c.Server, allianceID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlliancesAllianceIDContacts(ctx context.Context, allianceID AllianceID, params *GetAlliancesAllianceIDContactsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlliancesAllianceIDContactsRequest(c.Server, allianceID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlliancesAllianceIDContactsLabels(ctx context.Context, allianceID AllianceID, params *GetAlliancesAllianceIDContactsLabelsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlliancesAllianceIDContactsLabelsRequest(c.Server, allianceID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlliancesAllianceIDCorporations(ctx context.Context, allianceID AllianceID, params *GetAlliancesAllianceIDCorporationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlliancesAllianceIDCorporationsRequest(c.Server, allianceID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlliancesAllianceIDIcons(ctx context.Context, allianceID AllianceID, params *GetAlliancesAllianceIDIconsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlliancesAllianceIDIconsRequest(c.Server, allianceID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCharactersAffiliationWithBody(ctx context.Context, params *PostCharactersAffiliationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCharactersAffiliationRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCharactersAffiliation(ctx context.Context, params *PostCharactersAffiliationParams, body PostCharactersAffiliationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCharactersAffiliationRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharactersCharacterID(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharactersCharacterIDRequest(c.Server, characterID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharactersCharacterIDAgentsResearch(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDAgentsResearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharactersCharacterIDAgentsResearchRequest(c.Server, characterID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharactersCharacterIDAssets(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDAssetsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharactersCharacterIDAssetsRequest(c.Server, characterID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCharactersCharacterIDAssetsLocationsWithBody(ctx context.Context, characterID CharacterID, params *PostCharactersCharacterIDAssetsLocationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCharactersCharacterIDAssetsLocationsRequestWithBody(c.Server, characterID, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCharactersCharacterIDAssetsLocations(ctx context.Context, characterID CharacterID, params *PostCharactersCharacterIDAssetsLocationsParams, body PostCharactersCharacterIDAssetsLocationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCharactersCharacterIDAssetsLocationsRequest(c.Server, characterID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCharactersCharacterIDAssetsNamesWithBody(ctx context.Context, characterID CharacterID, params *PostCharactersCharacterIDAssetsNamesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCharactersCharacterIDAssetsNamesRequestWithBody(c.Server, characterID, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCharactersCharacterIDAssetsNames(ctx context.Context, characterID CharacterID, params *PostCharactersCharacterIDAssetsNamesParams, body PostCharactersCharacterIDAssetsNamesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCharactersCharacterIDAssetsNamesRequest(c.Server, characterID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharactersCharacterIDAttributes(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDAttributesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharactersCharacterIDAttributesRequest(c.Server, characterID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharactersCharacterIDBlueprints(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDBlueprintsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharactersCharacterIDBlueprintsRequest(c.Server, characterID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharactersCharacterIDCalendar(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDCalendarParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharactersCharacterIDCalendarRequest(c.Server, characterID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharactersCharacterIDCalendarEventID(ctx context.Context, characterID CharacterID, eventID int64, params *GetCharactersCharacterIDCalendarEventIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharactersCharacterIDCalendarEventIDRequest(c.Server, characterID, eventID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCharactersCharacterIDCalendarEventIDWithBody(ctx context.Context, characterID CharacterID, eventID int64, params *PutCharactersCharacterIDCalendarEventIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCharactersCharacterIDCalendarEventIDRequestWithBody(c.Server, characterID, eventID, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCharactersCharacterIDCalendarEventID(ctx context.Context, characterID CharacterID, eventID int64, params *PutCharactersCharacterIDCalendarEventIDParams, body PutCharactersCharacterIDCalendarEventIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCharactersCharacterIDCalendarEventIDRequest(c.Server, characterID, eventID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharactersCharacterIDCalendarEventIDAttendees(ctx context.Context, characterID CharacterID, eventID int64, params *GetCharactersCharacterIDCalendarEventIDAttendeesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharactersCharacterIDCalendarEventIDAttendeesRequest(c.Server, characterID, eventID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharactersCharacterIDClones(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDClonesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharactersCharacterIDClonesRequest(c.Server, characterID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCharactersCharacterIDContacts(ctx context.Context, characterID CharacterID, params *DeleteCharactersCharacterIDContactsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCharactersCharacterIDContactsRequest(c.Server, characterID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharactersCharacterIDContacts(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDContactsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharactersCharacterIDContactsRequest(c.Server, characterID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCharactersCharacterIDContactsWithBody(ctx context.Context, characterID CharacterID, params *PostCharactersCharacterIDContactsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCharactersCharacterIDContactsRequestWithBody(c.Server, characterID, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCharactersCharacterIDContacts(ctx context.Context, characterID CharacterID, params *PostCharactersCharacterIDContactsParams, body PostCharactersCharacterIDContactsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCharactersCharacterIDContactsRequest(c.Server, characterID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCharactersCharacterIDContactsWithBody(ctx context.Context, characterID CharacterID, params *PutCharactersCharacterIDContactsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCharactersCharacterIDContactsRequestWithBody(c.Server, characterID, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCharactersCharacterIDContacts(ctx context.Context, characterID CharacterID, params *PutCharactersCharacterIDContactsParams, body PutCharactersCharacterIDContactsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCharactersCharacterIDContactsRequest(c.Server, characterID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharactersCharacterIDContactsLabels(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDContactsLabelsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharactersCharacterIDContactsLabelsRequest(c.Server, characterID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharactersCharacterIDContracts(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDContractsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharactersCharacterIDContractsRequest(c.Server, characterID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharactersCharacterIDContractsContractIDBids(ctx context.Context, characterID CharacterID, contractID int64, params *GetCharactersCharacterIDContractsContractIDBidsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharactersCharacterIDContractsContractIDBidsRequest(c.Server, characterID, contractID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharactersCharacterIDContractsContractIDItems(ctx context.Context, characterID CharacterID, contractID int64, params *GetCharactersCharacterIDContractsContractIDItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharactersCharacterIDContractsContractIDItemsRequest(c.Server, characterID, contractID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharactersCharacterIDCorporationhistory(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDCorporationhistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharactersCharacterIDCorporationhistoryRequest(c.Server, characterID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCharactersCharacterIDCspaWithBody(ctx context.Context, characterID CharacterID, params *PostCharactersCharacterIDCspaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCharactersCharacterIDCspaRequestWithBody(c.Server, characterID, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCharactersCharacterIDCspa(ctx context.Context, characterID CharacterID, params *PostCharactersCharacterIDCspaParams, body PostCharactersCharacterIDCspaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCharactersCharacterIDCspaRequest(c.Server, characterID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharactersCharacterIDFatigue(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDFatigueParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharactersCharacterIDFatigueRequest(c.Server, characterID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharactersCharacterIDFittings(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDFittingsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharactersCharacterIDFittingsRequest(c.Server, characterID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCharactersCharacterIDFittingsWithBody(ctx context.Context, characterID CharacterID, params *PostCharactersCharacterIDFittingsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCharactersCharacterIDFittingsRequestWithBody(c.Server, characterID, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCharactersCharacterIDFittings(ctx context.Context, characterID CharacterID, params *PostCharactersCharacterIDFittingsParams, body PostCharactersCharacterIDFittingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCharactersCharacterIDFittingsRequest(c.Server, characterID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCharactersCharacterIDFittingsFittingID(ctx context.Context, characterID CharacterID, fittingID int64, params *DeleteCharactersCharacterIDFittingsFittingIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCharactersCharacterIDFittingsFittingIDRequest(c.Server, characterID, fittingID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharactersCharacterIDFleet(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDFleetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharactersCharacterIDFleetRequest(c.Server, characterID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharactersCharacterIDFwStats(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDFwStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharactersCharacterIDFwStatsRequest(c.Server, characterID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharactersCharacterIDImplants(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDImplantsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharactersCharacterIDImplantsRequest(c.Server, characterID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharactersCharacterIDIndustryJobs(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDIndustryJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharactersCharacterIDIndustryJobsRequest(c.Server, characterID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharactersCharacterIDKillmailsRecent(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDKillmailsRecentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharactersCharacterIDKillmailsRecentRequest(c.Server, characterID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharactersCharacterIDLocation(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDLocationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharactersCharacterIDLocationRequest(c.Server, characterID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharactersCharacterIDLoyaltyPoints(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDLoyaltyPointsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharactersCharacterIDLoyaltyPointsRequest(c.Server, characterID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharactersCharacterIDMail(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDMailParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharactersCharacterIDMailRequest(c.Server, characterID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCharactersCharacterIDMailWithBody(ctx context.Context, characterID CharacterID, params *PostCharactersCharacterIDMailParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCharactersCharacterIDMailRequestWithBody(c.Server, characterID, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCharactersCharacterIDMail(ctx context.Context, characterID CharacterID, params *PostCharactersCharacterIDMailParams, body PostCharactersCharacterIDMailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCharactersCharacterIDMailRequest(c.Server, characterID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharactersCharacterIDMailLabels(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDMailLabelsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharactersCharacterIDMailLabelsRequest(c.Server, characterID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCharactersCharacterIDMailLabelsWithBody(ctx context.Context, characterID CharacterID, params *PostCharactersCharacterIDMailLabelsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCharactersCharacterIDMailLabelsRequestWithBody(c.Server, characterID, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCharactersCharacterIDMailLabels(ctx context.Context, characterID CharacterID, params *PostCharactersCharacterIDMailLabelsParams, body PostCharactersCharacterIDMailLabelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCharactersCharacterIDMailLabelsRequest(c.Server, characterID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCharactersCharacterIDMailLabelsLabelID(ctx context.Context, characterID CharacterID, labelID int64, params *DeleteCharactersCharacterIDMailLabelsLabelIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCharactersCharacterIDMailLabelsLabelIDRequest(c.Server, characterID, labelID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharactersCharacterIDMailLists(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDMailListsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharactersCharacterIDMailListsRequest(c.Server, characterID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCharactersCharacterIDMailMailID(ctx context.Context, characterID CharacterID, mailID int64, params *DeleteCharactersCharacterIDMailMailIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCharactersCharacterIDMailMailIDRequest(c.Server, characterID, mailID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharactersCharacterIDMailMailID(ctx context.Context, characterID CharacterID, mailID int64, params *GetCharactersCharacterIDMailMailIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharactersCharacterIDMailMailIDRequest(c.Server, characterID, mailID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCharactersCharacterIDMailMailIDWithBody(ctx context.Context, characterID CharacterID, mailID int64, params *PutCharactersCharacterIDMailMailIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCharactersCharacterIDMailMailIDRequestWithBody(c.Server, characterID, mailID, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCharactersCharacterIDMailMailID(ctx context.Context, characterID CharacterID, mailID int64, params *PutCharactersCharacterIDMailMailIDParams, body PutCharactersCharacterIDMailMailIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCharactersCharacterIDMailMailIDRequest(c.Server, characterID, mailID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharactersCharacterIDMedals(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDMedalsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharactersCharacterIDMedalsRequest(c.Server, characterID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharactersCharacterIDMining(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDMiningParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharactersCharacterIDMiningRequest(c.Server, characterID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharactersCharacterIDNotifications(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDNotificationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharactersCharacterIDNotificationsRequest(c.Server, characterID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharactersCharacterIDNotificationsContacts(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDNotificationsContactsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharactersCharacterIDNotificationsContactsRequest(c.Server, characterID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharactersCharacterIDOnline(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDOnlineParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharactersCharacterIDOnlineRequest(c.Server, characterID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharactersCharacterIDOrders(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDOrdersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharactersCharacterIDOrdersRequest(c.Server, characterID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharactersCharacterIDOrdersHistory(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDOrdersHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharactersCharacterIDOrdersHistoryRequest(c.Server, characterID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharactersCharacterIDPlanets(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDPlanetsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharactersCharacterIDPlanetsRequest(c.Server, characterID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharactersCharacterIDPlanetsPlanetID(ctx context.Context, characterID CharacterID, planetID int64, params *GetCharactersCharacterIDPlanetsPlanetIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharactersCharacterIDPlanetsPlanetIDRequest(c.Server, characterID, planetID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharactersCharacterIDPortrait(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDPortraitParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharactersCharacterIDPortraitRequest(c.Server, characterID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharactersCharacterIDRoles(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharactersCharacterIDRolesRequest(c.Server, characterID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharactersCharacterIDSearch(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharactersCharacterIDSearchRequest(c.Server, characterID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharactersCharacterIDShip(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDShipParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharactersCharacterIDShipRequest(c.Server, characterID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharactersCharacterIDSkillqueue(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDSkillqueueParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharactersCharacterIDSkillqueueRequest(c.Server, characterID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharactersCharacterIDSkills(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDSkillsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharactersCharacterIDSkillsRequest(c.Server, characterID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharactersCharacterIDStandings(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDStandingsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharactersCharacterIDStandingsRequest(c.Server, characterID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharactersCharacterIDTitles(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDTitlesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharactersCharacterIDTitlesRequest(c.Server, characterID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharactersCharacterIDWallet(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDWalletParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharactersCharacterIDWalletRequest(c.Server, characterID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharactersCharacterIDWalletJournal(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDWalletJournalParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharactersCharacterIDWalletJournalRequest(c.Server, characterID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharactersCharacterIDWalletTransactions(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDWalletTransactionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharactersCharacterIDWalletTransactionsRequest(c.Server, characterID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContractsPublicBidsContractID(ctx context.Context, contractID int64, params *GetContractsPublicBidsContractIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContractsPublicBidsContractIDRequest(c.Server, contractID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContractsPublicItemsContractID(ctx context.Context, contractID int64, params *GetContractsPublicItemsContractIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContractsPublicItemsContractIDRequest(c.Server, contractID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContractsPublicRegionID(ctx context.Context, regionID int64, params *GetContractsPublicRegionIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContractsPublicRegionIDRequest(c.Server, regionID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCorporationCorporationIDMiningExtractions(ctx context.Context, corporationID CorporationID, params *GetCorporationCorporationIDMiningExtractionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCorporationCorporationIDMiningExtractionsRequest(c.Server, corporationID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCorporationCorporationIDMiningObservers(ctx context.Context, corporationID CorporationID, params *GetCorporationCorporationIDMiningObserversParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCorporationCorporationIDMiningObserversRequest(c.Server, corporationID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCorporationCorporationIDMiningObserversObserverID(ctx context.Context, corporationID CorporationID, observerID int64, params *GetCorporationCorporationIDMiningObserversObserverIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCorporationCorporationIDMiningObserversObserverIDRequest(c.Server, corporationID, observerID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCorporationsNpccorps(ctx context.Context, params *GetCorporationsNpccorpsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCorporationsNpccorpsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCorporationsCorporationID(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCorporationsCorporationIDRequest(c.Server, corporationID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCorporationsCorporationIDAlliancehistory(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDAlliancehistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCorporationsCorporationIDAlliancehistoryRequest(c.Server, corporationID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCorporationsCorporationIDAssets(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDAssetsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCorporationsCorporationIDAssetsRequest(c.Server, corporationID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCorporationsCorporationIDAssetsLocationsWithBody(ctx context.Context, corporationID CorporationID, params *PostCorporationsCorporationIDAssetsLocationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCorporationsCorporationIDAssetsLocationsRequestWithBody(c.Server, corporationID, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCorporationsCorporationIDAssetsLocations(ctx context.Context, corporationID CorporationID, params *PostCorporationsCorporationIDAssetsLocationsParams, body PostCorporationsCorporationIDAssetsLocationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCorporationsCorporationIDAssetsLocationsRequest(c.Server, corporationID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCorporationsCorporationIDAssetsNamesWithBody(ctx context.Context, corporationID CorporationID, params *PostCorporationsCorporationIDAssetsNamesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCorporationsCorporationIDAssetsNamesRequestWithBody(c.Server, corporationID, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCorporationsCorporationIDAssetsNames(ctx context.Context, corporationID CorporationID, params *PostCorporationsCorporationIDAssetsNamesParams, body PostCorporationsCorporationIDAssetsNamesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCorporationsCorporationIDAssetsNamesRequest(c.Server, corporationID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCorporationsCorporationIDBlueprints(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDBlueprintsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCorporationsCorporationIDBlueprintsRequest(c.Server, corporationID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCorporationsCorporationIDContacts(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDContactsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCorporationsCorporationIDContactsRequest(c.Server, corporationID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCorporationsCorporationIDContactsLabels(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDContactsLabelsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCorporationsCorporationIDContactsLabelsRequest(c.Server, corporationID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCorporationsCorporationIDContainersLogs(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDContainersLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCorporationsCorporationIDContainersLogsRequest(c.Server, corporationID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCorporationsCorporationIDContracts(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDContractsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCorporationsCorporationIDContractsRequest(c.Server, corporationID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCorporationsCorporationIDContractsContractIDBids(ctx context.Context, corporationID CorporationID, contractID int64, params *GetCorporationsCorporationIDContractsContractIDBidsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCorporationsCorporationIDContractsContractIDBidsRequest(c.Server, corporationID, contractID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCorporationsCorporationIDContractsContractIDItems(ctx context.Context, corporationID CorporationID, contractID int64, params *GetCorporationsCorporationIDContractsContractIDItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCorporationsCorporationIDContractsContractIDItemsRequest(c.Server, corporationID, contractID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCorporationsCorporationIDCustomsOffices(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDCustomsOfficesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCorporationsCorporationIDCustomsOfficesRequest(c.Server, corporationID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCorporationsCorporationIDDivisions(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDDivisionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCorporationsCorporationIDDivisionsRequest(c.Server, corporationID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCorporationsCorporationIDFacilities(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDFacilitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCorporationsCorporationIDFacilitiesRequest(c.Server, corporationID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCorporationsCorporationIDFwStats(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDFwStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCorporationsCorporationIDFwStatsRequest(c.Server, corporationID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCorporationsCorporationIDIcons(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDIconsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCorporationsCorporationIDIconsRequest(c.Server, corporationID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCorporationsCorporationIDIndustryJobs(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDIndustryJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCorporationsCorporationIDIndustryJobsRequest(c.Server, corporationID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCorporationsCorporationIDKillmailsRecent(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDKillmailsRecentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCorporationsCorporationIDKillmailsRecentRequest(c.Server, corporationID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCorporationsCorporationIDMedals(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDMedalsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCorporationsCorporationIDMedalsRequest(c.Server, corporationID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCorporationsCorporationIDMedalsIssued(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDMedalsIssuedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCorporationsCorporationIDMedalsIssuedRequest(c.Server, corporationID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCorporationsCorporationIDMembers(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDMembersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCorporationsCorporationIDMembersRequest(c.Server, corporationID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCorporationsCorporationIDMembersLimit(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDMembersLimitParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCorporationsCorporationIDMembersLimitRequest(c.Server, corporationID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCorporationsCorporationIDMembersTitles(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDMembersTitlesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCorporationsCorporationIDMembersTitlesRequest(c.Server, corporationID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCorporationsCorporationIDMembertracking(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDMembertrackingParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCorporationsCorporationIDMembertrackingRequest(c.Server, corporationID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCorporationsCorporationIDOrders(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDOrdersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCorporationsCorporationIDOrdersRequest(c.Server, corporationID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCorporationsCorporationIDOrdersHistory(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDOrdersHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCorporationsCorporationIDOrdersHistoryRequest(c.Server, corporationID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCorporationsCorporationIDRoles(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCorporationsCorporationIDRolesRequest(c.Server, corporationID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCorporationsCorporationIDRolesHistory(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDRolesHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCorporationsCorporationIDRolesHistoryRequest(c.Server, corporationID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCorporationsCorporationIDShareholders(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDShareholdersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCorporationsCorporationIDShareholdersRequest(c.Server, corporationID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCorporationsCorporationIDStandings(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDStandingsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCorporationsCorporationIDStandingsRequest(c.Server, corporationID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCorporationsCorporationIDStarbases(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDStarbasesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCorporationsCorporationIDStarbasesRequest(c.Server, corporationID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCorporationsCorporationIDStarbasesStarbaseID(ctx context.Context, corporationID CorporationID, starbaseID int64, params *GetCorporationsCorporationIDStarbasesStarbaseIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCorporationsCorporationIDStarbasesStarbaseIDRequest(c.Server, corporationID, starbaseID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCorporationsCorporationIDStructures(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDStructuresParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCorporationsCorporationIDStructuresRequest(c.Server, corporationID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCorporationsCorporationIDTitles(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDTitlesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCorporationsCorporationIDTitlesRequest(c.Server, corporationID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCorporationsCorporationIDWallets(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDWalletsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCorporationsCorporationIDWalletsRequest(c.Server, corporationID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCorporationsCorporationIDWalletsDivisionJournal(ctx context.Context, corporationID CorporationID, division int64, params *GetCorporationsCorporationIDWalletsDivisionJournalParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCorporationsCorporationIDWalletsDivisionJournalRequest(c.Server, corporationID, division, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCorporationsCorporationIDWalletsDivisionTransactions(ctx context.Context, corporationID CorporationID, division int64, params *GetCorporationsCorporationIDWalletsDivisionTransactionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCorporationsCorporationIDWalletsDivisionTransactionsRequest(c.Server, corporationID, division, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDogmaAttributes(ctx context.Context, params *GetDogmaAttributesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDogmaAttributesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDogmaAttributesAttributeID(ctx context.Context, attributeID int64, params *GetDogmaAttributesAttributeIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDogmaAttributesAttributeIDRequest(c.Server, attributeID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDogmaDynamicItemsTypeIDItemID(ctx context.Context, typeID int64, itemID int64, params *GetDogmaDynamicItemsTypeIDItemIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDogmaDynamicItemsTypeIDItemIDRequest(c.Server, typeID, itemID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDogmaEffects(ctx context.Context, params *GetDogmaEffectsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDogmaEffectsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDogmaEffectsEffectID(ctx context.Context, effectID int64, params *GetDogmaEffectsEffectIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDogmaEffectsEffectIDRequest(c.Server, effectID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFleetsFleetID(ctx context.Context, fleetID int64, params *GetFleetsFleetIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFleetsFleetIDRequest(c.Server, fleetID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutFleetsFleetIDWithBody(ctx context.Context, fleetID int64, params *PutFleetsFleetIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutFleetsFleetIDRequestWithBody(c.Server, fleetID, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutFleetsFleetID(ctx context.Context, fleetID int64, params *PutFleetsFleetIDParams, body PutFleetsFleetIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutFleetsFleetIDRequest(c.Server, fleetID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFleetsFleetIDMembers(ctx context.Context, fleetID int64, params *GetFleetsFleetIDMembersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFleetsFleetIDMembersRequest(c.Server, fleetID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFleetsFleetIDMembersWithBody(ctx context.Context, fleetID int64, params *PostFleetsFleetIDMembersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFleetsFleetIDMembersRequestWithBody(c.Server, fleetID, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFleetsFleetIDMembers(ctx context.Context, fleetID int64, params *PostFleetsFleetIDMembersParams, body PostFleetsFleetIDMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFleetsFleetIDMembersRequest(c.Server, fleetID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFleetsFleetIDMembersMemberID(ctx context.Context, fleetID int64, memberID int64, params *DeleteFleetsFleetIDMembersMemberIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFleetsFleetIDMembersMemberIDRequest(c.Server, fleetID, memberID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutFleetsFleetIDMembersMemberIDWithBody(ctx context.Context, fleetID int64, memberID int64, params *PutFleetsFleetIDMembersMemberIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutFleetsFleetIDMembersMemberIDRequestWithBody(c.Server, fleetID, memberID, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutFleetsFleetIDMembersMemberID(ctx context.Context, fleetID int64, memberID int64, params *PutFleetsFleetIDMembersMemberIDParams, body PutFleetsFleetIDMembersMemberIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutFleetsFleetIDMembersMemberIDRequest(c.Server, fleetID, memberID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFleetsFleetIDSquadsSquadID(ctx context.Context, fleetID int64, squadID int64, params *DeleteFleetsFleetIDSquadsSquadIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFleetsFleetIDSquadsSquadIDRequest(c.Server, fleetID, squadID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutFleetsFleetIDSquadsSquadIDWithBody(ctx context.Context, fleetID int64, squadID int64, params *PutFleetsFleetIDSquadsSquadIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutFleetsFleetIDSquadsSquadIDRequestWithBody(c.Server, fleetID, squadID, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutFleetsFleetIDSquadsSquadID(ctx context.Context, fleetID int64, squadID int64, params *PutFleetsFleetIDSquadsSquadIDParams, body PutFleetsFleetIDSquadsSquadIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutFleetsFleetIDSquadsSquadIDRequest(c.Server, fleetID, squadID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFleetsFleetIDWings(ctx context.Context, fleetID int64, params *GetFleetsFleetIDWingsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFleetsFleetIDWingsRequest(c.Server, fleetID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFleetsFleetIDWings(ctx context.Context, fleetID int64, params *PostFleetsFleetIDWingsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFleetsFleetIDWingsRequest(c.Server, fleetID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFleetsFleetIDWingsWingID(ctx context.Context, fleetID int64, wingID int64, params *DeleteFleetsFleetIDWingsWingIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFleetsFleetIDWingsWingIDRequest(c.Server, fleetID, wingID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutFleetsFleetIDWingsWingIDWithBody(ctx context.Context, fleetID int64, wingID int64, params *PutFleetsFleetIDWingsWingIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutFleetsFleetIDWingsWingIDRequestWithBody(c.Server, fleetID, wingID, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutFleetsFleetIDWingsWingID(ctx context.Context, fleetID int64, wingID int64, params *PutFleetsFleetIDWingsWingIDParams, body PutFleetsFleetIDWingsWingIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutFleetsFleetIDWingsWingIDRequest(c.Server, fleetID, wingID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFleetsFleetIDWingsWingIDSquads(ctx context.Context, fleetID int64, wingID int64, params *PostFleetsFleetIDWingsWingIDSquadsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFleetsFleetIDWingsWingIDSquadsRequest(c.Server, fleetID, wingID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFwLeaderboards(ctx context.Context, params *GetFwLeaderboardsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFwLeaderboardsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFwLeaderboardsCharacters(ctx context.Context, params *GetFwLeaderboardsCharactersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFwLeaderboardsCharactersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFwLeaderboardsCorporations(ctx context.Context, params *GetFwLeaderboardsCorporationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFwLeaderboardsCorporationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFwStats(ctx context.Context, params *GetFwStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFwStatsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFwSystems(ctx context.Context, params *GetFwSystemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFwSystemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFwWars(ctx context.Context, params *GetFwWarsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFwWarsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncursions(ctx context.Context, params *GetIncursionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncursionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndustryFacilities(ctx context.Context, params *GetIndustryFacilitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndustryFacilitiesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndustrySystems(ctx context.Context, params *GetIndustrySystemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndustrySystemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInsurancePrices(ctx context.Context, params *GetInsurancePricesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInsurancePricesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKillmailsKillmailIDKillmailHash(ctx context.Context, killmailID int64, killmailHash string, params *GetKillmailsKillmailIDKillmailHashParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKillmailsKillmailIDKillmailHashRequest(c.Server, killmailID, killmailHash, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLoyaltyStoresCorporationIDOffers(ctx context.Context, corporationID CorporationID, params *GetLoyaltyStoresCorporationIDOffersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLoyaltyStoresCorporationIDOffersRequest(c.Server, corporationID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMarketsGroups(ctx context.Context, params *GetMarketsGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMarketsGroupsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMarketsGroupsMarketGroupID(ctx context.Context, marketGroupID int64, params *GetMarketsGroupsMarketGroupIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMarketsGroupsMarketGroupIDRequest(c.Server, marketGroupID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMarketsPrices(ctx context.Context, params *GetMarketsPricesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMarketsPricesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMarketsStructuresStructureID(ctx context.Context, structureID int64, params *GetMarketsStructuresStructureIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMarketsStructuresStructureIDRequest(c.Server, structureID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMarketsRegionIDHistory(ctx context.Context, regionID int64, params *GetMarketsRegionIDHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMarketsRegionIDHistoryRequest(c.Server, regionID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMarketsRegionIDOrders(ctx context.Context, regionID int64, params *GetMarketsRegionIDOrdersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMarketsRegionIDOrdersRequest(c.Server, regionID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMarketsRegionIDTypes(ctx context.Context, regionID int64, params *GetMarketsRegionIDTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMarketsRegionIDTypesRequest(c.Server, regionID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRouteOriginDestination(ctx context.Context, origin int64, destination int64, params *GetRouteOriginDestinationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRouteOriginDestinationRequest(c.Server, origin, destination, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSovereigntyCampaigns(ctx context.Context, params *GetSovereigntyCampaignsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSovereigntyCampaignsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSovereigntyMap(ctx context.Context, params *GetSovereigntyMapParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSovereigntyMapRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSovereigntyStructures(ctx context.Context, params *GetSovereigntyStructuresParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSovereigntyStructuresRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatus(ctx context.Context, params *GetStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUIAutopilotWaypoint(ctx context.Context, params *PostUIAutopilotWaypointParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUIAutopilotWaypointRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUIOpenwindowContract(ctx context.Context, params *PostUIOpenwindowContractParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUIOpenwindowContractRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUIOpenwindowInformation(ctx context.Context, params *PostUIOpenwindowInformationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUIOpenwindowInformationRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUIOpenwindowMarketdetails(ctx context.Context, params *PostUIOpenwindowMarketdetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUIOpenwindowMarketdetailsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUIOpenwindowNewmailWithBody(ctx context.Context, params *PostUIOpenwindowNewmailParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUIOpenwindowNewmailRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUIOpenwindowNewmail(ctx context.Context, params *PostUIOpenwindowNewmailParams, body PostUIOpenwindowNewmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUIOpenwindowNewmailRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUniverseAncestries(ctx context.Context, params *GetUniverseAncestriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUniverseAncestriesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUniverseAsteroidBeltsAsteroidBeltID(ctx context.Context, asteroidBeltID int64, params *GetUniverseAsteroidBeltsAsteroidBeltIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUniverseAsteroidBeltsAsteroidBeltIDRequest(c.Server, asteroidBeltID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUniverseBloodlines(ctx context.Context, params *GetUniverseBloodlinesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUniverseBloodlinesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUniverseCategories(ctx context.Context, params *GetUniverseCategoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUniverseCategoriesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUniverseCategoriesCategoryID(ctx context.Context, categoryID int64, params *GetUniverseCategoriesCategoryIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUniverseCategoriesCategoryIDRequest(c.Server, categoryID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUniverseConstellations(ctx context.Context, params *GetUniverseConstellationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUniverseConstellationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUniverseConstellationsConstellationID(ctx context.Context, constellationID int64, params *GetUniverseConstellationsConstellationIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUniverseConstellationsConstellationIDRequest(c.Server, constellationID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUniverseFactions(ctx context.Context, params *GetUniverseFactionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUniverseFactionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUniverseGraphics(ctx context.Context, params *GetUniverseGraphicsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUniverseGraphicsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUniverseGraphicsGraphicID(ctx context.Context, graphicID int64, params *GetUniverseGraphicsGraphicIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUniverseGraphicsGraphicIDRequest(c.Server, graphicID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUniverseGroups(ctx context.Context, params *GetUniverseGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUniverseGroupsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUniverseGroupsGroupID(ctx context.Context, groupID int64, params *GetUniverseGroupsGroupIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUniverseGroupsGroupIDRequest(c.Server, groupID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUniverseIdsWithBody(ctx context.Context, params *PostUniverseIdsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUniverseIdsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUniverseIds(ctx context.Context, params *PostUniverseIdsParams, body PostUniverseIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUniverseIdsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUniverseMoonsMoonID(ctx context.Context, moonID int64, params *GetUniverseMoonsMoonIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUniverseMoonsMoonIDRequest(c.Server, moonID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUniverseNamesWithBody(ctx context.Context, params *PostUniverseNamesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUniverseNamesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUniverseNames(ctx context.Context, params *PostUniverseNamesParams, body PostUniverseNamesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUniverseNamesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUniversePlanetsPlanetID(ctx context.Context, planetID int64, params *GetUniversePlanetsPlanetIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUniversePlanetsPlanetIDRequest(c.Server, planetID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUniverseRaces(ctx context.Context, params *GetUniverseRacesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUniverseRacesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUniverseRegions(ctx context.Context, params *GetUniverseRegionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUniverseRegionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUniverseRegionsRegionID(ctx context.Context, regionID int64, params *GetUniverseRegionsRegionIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUniverseRegionsRegionIDRequest(c.Server, regionID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUniverseSchematicsSchematicID(ctx context.Context, schematicID int64, params *GetUniverseSchematicsSchematicIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUniverseSchematicsSchematicIDRequest(c.Server, schematicID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUniverseStargatesStargateID(ctx context.Context, stargateID int64, params *GetUniverseStargatesStargateIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUniverseStargatesStargateIDRequest(c.Server, stargateID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUniverseStarsStarID(ctx context.Context, starID int64, params *GetUniverseStarsStarIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUniverseStarsStarIDRequest(c.Server, starID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUniverseStationsStationID(ctx context.Context, stationID int64, params *GetUniverseStationsStationIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUniverseStationsStationIDRequest(c.Server, stationID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUniverseStructures(ctx context.Context, params *GetUniverseStructuresParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUniverseStructuresRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUniverseStructuresStructureID(ctx context.Context, structureID int64, params *GetUniverseStructuresStructureIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUniverseStructuresStructureIDRequest(c.Server, structureID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUniverseSystemJumps(ctx context.Context, params *GetUniverseSystemJumpsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUniverseSystemJumpsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUniverseSystemKills(ctx context.Context, params *GetUniverseSystemKillsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUniverseSystemKillsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUniverseSystems(ctx context.Context, params *GetUniverseSystemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUniverseSystemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUniverseSystemsSystemID(ctx context.Context, systemID int64, params *GetUniverseSystemsSystemIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUniverseSystemsSystemIDRequest(c.Server, systemID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUniverseTypes(ctx context.Context, params *GetUniverseTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUniverseTypesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUniverseTypesTypeID(ctx context.Context, typeID int64, params *GetUniverseTypesTypeIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUniverseTypesTypeIDRequest(c.Server, typeID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWars(ctx context.Context, params *GetWarsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWarsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWarsWarID(ctx context.Context, warID int64, params *GetWarsWarIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWarsWarIDRequest(c.Server, warID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWarsWarIDKillmails(ctx context.Context, warID int64, params *GetWarsWarIDKillmailsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWarsWarIDKillmailsRequest(c.Server, warID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAlliancesRequest generates requests for GetAlliances
func NewGetAlliancesRequest(server string, params *GetAlliancesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/alliances")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetAlliancesAllianceIDRequest generates requests for GetAlliancesAllianceID
func NewGetAlliancesAllianceIDRequest(server string, allianceID AllianceID, params *GetAlliancesAllianceIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "alliance_id", runtime.ParamLocationPath, allianceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/alliances/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetAlliancesAllianceIDContactsRequest generates requests for GetAlliancesAllianceIDContacts
func NewGetAlliancesAllianceIDContactsRequest(server string, allianceID AllianceID, params *GetAlliancesAllianceIDContactsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "alliance_id", runtime.ParamLocationPath, allianceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/alliances/%s/contacts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetAlliancesAllianceIDContactsLabelsRequest generates requests for GetAlliancesAllianceIDContactsLabels
func NewGetAlliancesAllianceIDContactsLabelsRequest(server string, allianceID AllianceID, params *GetAlliancesAllianceIDContactsLabelsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "alliance_id", runtime.ParamLocationPath, allianceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/alliances/%s/contacts/labels", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetAlliancesAllianceIDCorporationsRequest generates requests for GetAlliancesAllianceIDCorporations
func NewGetAlliancesAllianceIDCorporationsRequest(server string, allianceID AllianceID, params *GetAlliancesAllianceIDCorporationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "alliance_id", runtime.ParamLocationPath, allianceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/alliances/%s/corporations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetAlliancesAllianceIDIconsRequest generates requests for GetAlliancesAllianceIDIcons
func NewGetAlliancesAllianceIDIconsRequest(server string, allianceID AllianceID, params *GetAlliancesAllianceIDIconsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "alliance_id", runtime.ParamLocationPath, allianceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/alliances/%s/icons", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewPostCharactersAffiliationRequest calls the generic PostCharactersAffiliation builder with application/json body
func NewPostCharactersAffiliationRequest(server string, params *PostCharactersAffiliationParams, body PostCharactersAffiliationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCharactersAffiliationRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostCharactersAffiliationRequestWithBody generates requests for PostCharactersAffiliation with any type of body
func NewPostCharactersAffiliationRequestWithBody(server string, params *PostCharactersAffiliationParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/affiliation")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCharactersCharacterIDRequest generates requests for GetCharactersCharacterID
func NewGetCharactersCharacterIDRequest(server string, characterID CharacterID, params *GetCharactersCharacterIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCharactersCharacterIDAgentsResearchRequest generates requests for GetCharactersCharacterIDAgentsResearch
func NewGetCharactersCharacterIDAgentsResearchRequest(server string, characterID CharacterID, params *GetCharactersCharacterIDAgentsResearchParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/agents_research", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCharactersCharacterIDAssetsRequest generates requests for GetCharactersCharacterIDAssets
func NewGetCharactersCharacterIDAssetsRequest(server string, characterID CharacterID, params *GetCharactersCharacterIDAssetsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/assets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewPostCharactersCharacterIDAssetsLocationsRequest calls the generic PostCharactersCharacterIDAssetsLocations builder with application/json body
func NewPostCharactersCharacterIDAssetsLocationsRequest(server string, characterID CharacterID, params *PostCharactersCharacterIDAssetsLocationsParams, body PostCharactersCharacterIDAssetsLocationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCharactersCharacterIDAssetsLocationsRequestWithBody(server, characterID, params, "application/json", bodyReader)
}

// NewPostCharactersCharacterIDAssetsLocationsRequestWithBody generates requests for PostCharactersCharacterIDAssetsLocations with any type of body
func NewPostCharactersCharacterIDAssetsLocationsRequestWithBody(server string, characterID CharacterID, params *PostCharactersCharacterIDAssetsLocationsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/assets/locations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewPostCharactersCharacterIDAssetsNamesRequest calls the generic PostCharactersCharacterIDAssetsNames builder with application/json body
func NewPostCharactersCharacterIDAssetsNamesRequest(server string, characterID CharacterID, params *PostCharactersCharacterIDAssetsNamesParams, body PostCharactersCharacterIDAssetsNamesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCharactersCharacterIDAssetsNamesRequestWithBody(server, characterID, params, "application/json", bodyReader)
}

// NewPostCharactersCharacterIDAssetsNamesRequestWithBody generates requests for PostCharactersCharacterIDAssetsNames with any type of body
func NewPostCharactersCharacterIDAssetsNamesRequestWithBody(server string, characterID CharacterID, params *PostCharactersCharacterIDAssetsNamesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/assets/names", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCharactersCharacterIDAttributesRequest generates requests for GetCharactersCharacterIDAttributes
func NewGetCharactersCharacterIDAttributesRequest(server string, characterID CharacterID, params *GetCharactersCharacterIDAttributesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/attributes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCharactersCharacterIDBlueprintsRequest generates requests for GetCharactersCharacterIDBlueprints
func NewGetCharactersCharacterIDBlueprintsRequest(server string, characterID CharacterID, params *GetCharactersCharacterIDBlueprintsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/blueprints", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCharactersCharacterIDCalendarRequest generates requests for GetCharactersCharacterIDCalendar
func NewGetCharactersCharacterIDCalendarRequest(server string, characterID CharacterID, params *GetCharactersCharacterIDCalendarParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/calendar", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FromEvent != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from_event", runtime.ParamLocationQuery, *params.FromEvent); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCharactersCharacterIDCalendarEventIDRequest generates requests for GetCharactersCharacterIDCalendarEventID
func NewGetCharactersCharacterIDCalendarEventIDRequest(server string, characterID CharacterID, eventID int64, params *GetCharactersCharacterIDCalendarEventIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "event_id", runtime.ParamLocationPath, eventID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/calendar/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewPutCharactersCharacterIDCalendarEventIDRequest calls the generic PutCharactersCharacterIDCalendarEventID builder with application/json body
func NewPutCharactersCharacterIDCalendarEventIDRequest(server string, characterID CharacterID, eventID int64, params *PutCharactersCharacterIDCalendarEventIDParams, body PutCharactersCharacterIDCalendarEventIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCharactersCharacterIDCalendarEventIDRequestWithBody(server, characterID, eventID, params, "application/json", bodyReader)
}

// NewPutCharactersCharacterIDCalendarEventIDRequestWithBody generates requests for PutCharactersCharacterIDCalendarEventID with any type of body
func NewPutCharactersCharacterIDCalendarEventIDRequestWithBody(server string, characterID CharacterID, eventID int64, params *PutCharactersCharacterIDCalendarEventIDParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "event_id", runtime.ParamLocationPath, eventID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/calendar/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCharactersCharacterIDCalendarEventIDAttendeesRequest generates requests for GetCharactersCharacterIDCalendarEventIDAttendees
func NewGetCharactersCharacterIDCalendarEventIDAttendeesRequest(server string, characterID CharacterID, eventID int64, params *GetCharactersCharacterIDCalendarEventIDAttendeesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "event_id", runtime.ParamLocationPath, eventID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/calendar/%s/attendees", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCharactersCharacterIDClonesRequest generates requests for GetCharactersCharacterIDClones
func NewGetCharactersCharacterIDClonesRequest(server string, characterID CharacterID, params *GetCharactersCharacterIDClonesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/clones", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewDeleteCharactersCharacterIDContactsRequest generates requests for DeleteCharactersCharacterIDContacts
func NewDeleteCharactersCharacterIDContactsRequest(server string, characterID CharacterID, params *DeleteCharactersCharacterIDContactsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/contacts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contact_ids", runtime.ParamLocationQuery, params.ContactIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCharactersCharacterIDContactsRequest generates requests for GetCharactersCharacterIDContacts
func NewGetCharactersCharacterIDContactsRequest(server string, characterID CharacterID, params *GetCharactersCharacterIDContactsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/contacts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewPostCharactersCharacterIDContactsRequest calls the generic PostCharactersCharacterIDContacts builder with application/json body
func NewPostCharactersCharacterIDContactsRequest(server string, characterID CharacterID, params *PostCharactersCharacterIDContactsParams, body PostCharactersCharacterIDContactsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCharactersCharacterIDContactsRequestWithBody(server, characterID, params, "application/json", bodyReader)
}

// NewPostCharactersCharacterIDContactsRequestWithBody generates requests for PostCharactersCharacterIDContacts with any type of body
func NewPostCharactersCharacterIDContactsRequestWithBody(server string, characterID CharacterID, params *PostCharactersCharacterIDContactsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/contacts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.LabelIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "label_ids", runtime.ParamLocationQuery, *params.LabelIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "standing", runtime.ParamLocationQuery, params.Standing); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Watched != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "watched", runtime.ParamLocationQuery, *params.Watched); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewPutCharactersCharacterIDContactsRequest calls the generic PutCharactersCharacterIDContacts builder with application/json body
func NewPutCharactersCharacterIDContactsRequest(server string, characterID CharacterID, params *PutCharactersCharacterIDContactsParams, body PutCharactersCharacterIDContactsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCharactersCharacterIDContactsRequestWithBody(server, characterID, params, "application/json", bodyReader)
}

// NewPutCharactersCharacterIDContactsRequestWithBody generates requests for PutCharactersCharacterIDContacts with any type of body
func NewPutCharactersCharacterIDContactsRequestWithBody(server string, characterID CharacterID, params *PutCharactersCharacterIDContactsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/contacts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.LabelIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "label_ids", runtime.ParamLocationQuery, *params.LabelIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "standing", runtime.ParamLocationQuery, params.Standing); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Watched != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "watched", runtime.ParamLocationQuery, *params.Watched); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCharactersCharacterIDContactsLabelsRequest generates requests for GetCharactersCharacterIDContactsLabels
func NewGetCharactersCharacterIDContactsLabelsRequest(server string, characterID CharacterID, params *GetCharactersCharacterIDContactsLabelsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/contacts/labels", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCharactersCharacterIDContractsRequest generates requests for GetCharactersCharacterIDContracts
func NewGetCharactersCharacterIDContractsRequest(server string, characterID CharacterID, params *GetCharactersCharacterIDContractsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/contracts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCharactersCharacterIDContractsContractIDBidsRequest generates requests for GetCharactersCharacterIDContractsContractIDBids
func NewGetCharactersCharacterIDContractsContractIDBidsRequest(server string, characterID CharacterID, contractID int64, params *GetCharactersCharacterIDContractsContractIDBidsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "contract_id", runtime.ParamLocationPath, contractID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/contracts/%s/bids", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCharactersCharacterIDContractsContractIDItemsRequest generates requests for GetCharactersCharacterIDContractsContractIDItems
func NewGetCharactersCharacterIDContractsContractIDItemsRequest(server string, characterID CharacterID, contractID int64, params *GetCharactersCharacterIDContractsContractIDItemsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "contract_id", runtime.ParamLocationPath, contractID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/contracts/%s/items", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCharactersCharacterIDCorporationhistoryRequest generates requests for GetCharactersCharacterIDCorporationhistory
func NewGetCharactersCharacterIDCorporationhistoryRequest(server string, characterID CharacterID, params *GetCharactersCharacterIDCorporationhistoryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/corporationhistory", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewPostCharactersCharacterIDCspaRequest calls the generic PostCharactersCharacterIDCspa builder with application/json body
func NewPostCharactersCharacterIDCspaRequest(server string, characterID CharacterID, params *PostCharactersCharacterIDCspaParams, body PostCharactersCharacterIDCspaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCharactersCharacterIDCspaRequestWithBody(server, characterID, params, "application/json", bodyReader)
}

// NewPostCharactersCharacterIDCspaRequestWithBody generates requests for PostCharactersCharacterIDCspa with any type of body
func NewPostCharactersCharacterIDCspaRequestWithBody(server string, characterID CharacterID, params *PostCharactersCharacterIDCspaParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/cspa", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCharactersCharacterIDFatigueRequest generates requests for GetCharactersCharacterIDFatigue
func NewGetCharactersCharacterIDFatigueRequest(server string, characterID CharacterID, params *GetCharactersCharacterIDFatigueParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/fatigue", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCharactersCharacterIDFittingsRequest generates requests for GetCharactersCharacterIDFittings
func NewGetCharactersCharacterIDFittingsRequest(server string, characterID CharacterID, params *GetCharactersCharacterIDFittingsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/fittings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewPostCharactersCharacterIDFittingsRequest calls the generic PostCharactersCharacterIDFittings builder with application/json body
func NewPostCharactersCharacterIDFittingsRequest(server string, characterID CharacterID, params *PostCharactersCharacterIDFittingsParams, body PostCharactersCharacterIDFittingsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCharactersCharacterIDFittingsRequestWithBody(server, characterID, params, "application/json", bodyReader)
}

// NewPostCharactersCharacterIDFittingsRequestWithBody generates requests for PostCharactersCharacterIDFittings with any type of body
func NewPostCharactersCharacterIDFittingsRequestWithBody(server string, characterID CharacterID, params *PostCharactersCharacterIDFittingsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/fittings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewDeleteCharactersCharacterIDFittingsFittingIDRequest generates requests for DeleteCharactersCharacterIDFittingsFittingID
func NewDeleteCharactersCharacterIDFittingsFittingIDRequest(server string, characterID CharacterID, fittingID int64, params *DeleteCharactersCharacterIDFittingsFittingIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "fitting_id", runtime.ParamLocationPath, fittingID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/fittings/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCharactersCharacterIDFleetRequest generates requests for GetCharactersCharacterIDFleet
func NewGetCharactersCharacterIDFleetRequest(server string, characterID CharacterID, params *GetCharactersCharacterIDFleetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/fleet", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCharactersCharacterIDFwStatsRequest generates requests for GetCharactersCharacterIDFwStats
func NewGetCharactersCharacterIDFwStatsRequest(server string, characterID CharacterID, params *GetCharactersCharacterIDFwStatsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/fw/stats", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCharactersCharacterIDImplantsRequest generates requests for GetCharactersCharacterIDImplants
func NewGetCharactersCharacterIDImplantsRequest(server string, characterID CharacterID, params *GetCharactersCharacterIDImplantsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/implants", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCharactersCharacterIDIndustryJobsRequest generates requests for GetCharactersCharacterIDIndustryJobs
func NewGetCharactersCharacterIDIndustryJobsRequest(server string, characterID CharacterID, params *GetCharactersCharacterIDIndustryJobsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/industry/jobs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IncludeCompleted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_completed", runtime.ParamLocationQuery, *params.IncludeCompleted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCharactersCharacterIDKillmailsRecentRequest generates requests for GetCharactersCharacterIDKillmailsRecent
func NewGetCharactersCharacterIDKillmailsRecentRequest(server string, characterID CharacterID, params *GetCharactersCharacterIDKillmailsRecentParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/killmails/recent", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCharactersCharacterIDLocationRequest generates requests for GetCharactersCharacterIDLocation
func NewGetCharactersCharacterIDLocationRequest(server string, characterID CharacterID, params *GetCharactersCharacterIDLocationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/location", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCharactersCharacterIDLoyaltyPointsRequest generates requests for GetCharactersCharacterIDLoyaltyPoints
func NewGetCharactersCharacterIDLoyaltyPointsRequest(server string, characterID CharacterID, params *GetCharactersCharacterIDLoyaltyPointsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/loyalty/points", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCharactersCharacterIDMailRequest generates requests for GetCharactersCharacterIDMail
func NewGetCharactersCharacterIDMailRequest(server string, characterID CharacterID, params *GetCharactersCharacterIDMailParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/mail", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Labels != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "labels", runtime.ParamLocationQuery, *params.Labels); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastMailID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_mail_id", runtime.ParamLocationQuery, *params.LastMailID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewPostCharactersCharacterIDMailRequest calls the generic PostCharactersCharacterIDMail builder with application/json body
func NewPostCharactersCharacterIDMailRequest(server string, characterID CharacterID, params *PostCharactersCharacterIDMailParams, body PostCharactersCharacterIDMailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCharactersCharacterIDMailRequestWithBody(server, characterID, params, "application/json", bodyReader)
}

// NewPostCharactersCharacterIDMailRequestWithBody generates requests for PostCharactersCharacterIDMail with any type of body
func NewPostCharactersCharacterIDMailRequestWithBody(server string, characterID CharacterID, params *PostCharactersCharacterIDMailParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/mail", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCharactersCharacterIDMailLabelsRequest generates requests for GetCharactersCharacterIDMailLabels
func NewGetCharactersCharacterIDMailLabelsRequest(server string, characterID CharacterID, params *GetCharactersCharacterIDMailLabelsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/mail/labels", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewPostCharactersCharacterIDMailLabelsRequest calls the generic PostCharactersCharacterIDMailLabels builder with application/json body
func NewPostCharactersCharacterIDMailLabelsRequest(server string, characterID CharacterID, params *PostCharactersCharacterIDMailLabelsParams, body PostCharactersCharacterIDMailLabelsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCharactersCharacterIDMailLabelsRequestWithBody(server, characterID, params, "application/json", bodyReader)
}

// NewPostCharactersCharacterIDMailLabelsRequestWithBody generates requests for PostCharactersCharacterIDMailLabels with any type of body
func NewPostCharactersCharacterIDMailLabelsRequestWithBody(server string, characterID CharacterID, params *PostCharactersCharacterIDMailLabelsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/mail/labels", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewDeleteCharactersCharacterIDMailLabelsLabelIDRequest generates requests for DeleteCharactersCharacterIDMailLabelsLabelID
func NewDeleteCharactersCharacterIDMailLabelsLabelIDRequest(server string, characterID CharacterID, labelID int64, params *DeleteCharactersCharacterIDMailLabelsLabelIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "label_id", runtime.ParamLocationPath, labelID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/mail/labels/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCharactersCharacterIDMailListsRequest generates requests for GetCharactersCharacterIDMailLists
func NewGetCharactersCharacterIDMailListsRequest(server string, characterID CharacterID, params *GetCharactersCharacterIDMailListsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/mail/lists", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewDeleteCharactersCharacterIDMailMailIDRequest generates requests for DeleteCharactersCharacterIDMailMailID
func NewDeleteCharactersCharacterIDMailMailIDRequest(server string, characterID CharacterID, mailID int64, params *DeleteCharactersCharacterIDMailMailIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "mail_id", runtime.ParamLocationPath, mailID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/mail/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCharactersCharacterIDMailMailIDRequest generates requests for GetCharactersCharacterIDMailMailID
func NewGetCharactersCharacterIDMailMailIDRequest(server string, characterID CharacterID, mailID int64, params *GetCharactersCharacterIDMailMailIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "mail_id", runtime.ParamLocationPath, mailID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/mail/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewPutCharactersCharacterIDMailMailIDRequest calls the generic PutCharactersCharacterIDMailMailID builder with application/json body
func NewPutCharactersCharacterIDMailMailIDRequest(server string, characterID CharacterID, mailID int64, params *PutCharactersCharacterIDMailMailIDParams, body PutCharactersCharacterIDMailMailIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCharactersCharacterIDMailMailIDRequestWithBody(server, characterID, mailID, params, "application/json", bodyReader)
}

// NewPutCharactersCharacterIDMailMailIDRequestWithBody generates requests for PutCharactersCharacterIDMailMailID with any type of body
func NewPutCharactersCharacterIDMailMailIDRequestWithBody(server string, characterID CharacterID, mailID int64, params *PutCharactersCharacterIDMailMailIDParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "mail_id", runtime.ParamLocationPath, mailID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/mail/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCharactersCharacterIDMedalsRequest generates requests for GetCharactersCharacterIDMedals
func NewGetCharactersCharacterIDMedalsRequest(server string, characterID CharacterID, params *GetCharactersCharacterIDMedalsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/medals", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCharactersCharacterIDMiningRequest generates requests for GetCharactersCharacterIDMining
func NewGetCharactersCharacterIDMiningRequest(server string, characterID CharacterID, params *GetCharactersCharacterIDMiningParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/mining", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCharactersCharacterIDNotificationsRequest generates requests for GetCharactersCharacterIDNotifications
func NewGetCharactersCharacterIDNotificationsRequest(server string, characterID CharacterID, params *GetCharactersCharacterIDNotificationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/notifications", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCharactersCharacterIDNotificationsContactsRequest generates requests for GetCharactersCharacterIDNotificationsContacts
func NewGetCharactersCharacterIDNotificationsContactsRequest(server string, characterID CharacterID, params *GetCharactersCharacterIDNotificationsContactsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/notifications/contacts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCharactersCharacterIDOnlineRequest generates requests for GetCharactersCharacterIDOnline
func NewGetCharactersCharacterIDOnlineRequest(server string, characterID CharacterID, params *GetCharactersCharacterIDOnlineParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/online", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCharactersCharacterIDOrdersRequest generates requests for GetCharactersCharacterIDOrders
func NewGetCharactersCharacterIDOrdersRequest(server string, characterID CharacterID, params *GetCharactersCharacterIDOrdersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/orders", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCharactersCharacterIDOrdersHistoryRequest generates requests for GetCharactersCharacterIDOrdersHistory
func NewGetCharactersCharacterIDOrdersHistoryRequest(server string, characterID CharacterID, params *GetCharactersCharacterIDOrdersHistoryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/orders/history", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCharactersCharacterIDPlanetsRequest generates requests for GetCharactersCharacterIDPlanets
func NewGetCharactersCharacterIDPlanetsRequest(server string, characterID CharacterID, params *GetCharactersCharacterIDPlanetsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/planets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCharactersCharacterIDPlanetsPlanetIDRequest generates requests for GetCharactersCharacterIDPlanetsPlanetID
func NewGetCharactersCharacterIDPlanetsPlanetIDRequest(server string, characterID CharacterID, planetID int64, params *GetCharactersCharacterIDPlanetsPlanetIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "planet_id", runtime.ParamLocationPath, planetID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/planets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCharactersCharacterIDPortraitRequest generates requests for GetCharactersCharacterIDPortrait
func NewGetCharactersCharacterIDPortraitRequest(server string, characterID CharacterID, params *GetCharactersCharacterIDPortraitParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/portrait", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCharactersCharacterIDRolesRequest generates requests for GetCharactersCharacterIDRoles
func NewGetCharactersCharacterIDRolesRequest(server string, characterID CharacterID, params *GetCharactersCharacterIDRolesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/roles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCharactersCharacterIDSearchRequest generates requests for GetCharactersCharacterIDSearch
func NewGetCharactersCharacterIDSearchRequest(server string, characterID CharacterID, params *GetCharactersCharacterIDSearchParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/search", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "categories", runtime.ParamLocationQuery, params.Categories); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Strict != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "strict", runtime.ParamLocationQuery, *params.Strict); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCharactersCharacterIDShipRequest generates requests for GetCharactersCharacterIDShip
func NewGetCharactersCharacterIDShipRequest(server string, characterID CharacterID, params *GetCharactersCharacterIDShipParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/ship", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCharactersCharacterIDSkillqueueRequest generates requests for GetCharactersCharacterIDSkillqueue
func NewGetCharactersCharacterIDSkillqueueRequest(server string, characterID CharacterID, params *GetCharactersCharacterIDSkillqueueParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/skillqueue", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCharactersCharacterIDSkillsRequest generates requests for GetCharactersCharacterIDSkills
func NewGetCharactersCharacterIDSkillsRequest(server string, characterID CharacterID, params *GetCharactersCharacterIDSkillsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/skills", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCharactersCharacterIDStandingsRequest generates requests for GetCharactersCharacterIDStandings
func NewGetCharactersCharacterIDStandingsRequest(server string, characterID CharacterID, params *GetCharactersCharacterIDStandingsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/standings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCharactersCharacterIDTitlesRequest generates requests for GetCharactersCharacterIDTitles
func NewGetCharactersCharacterIDTitlesRequest(server string, characterID CharacterID, params *GetCharactersCharacterIDTitlesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/titles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCharactersCharacterIDWalletRequest generates requests for GetCharactersCharacterIDWallet
func NewGetCharactersCharacterIDWalletRequest(server string, characterID CharacterID, params *GetCharactersCharacterIDWalletParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/wallet", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCharactersCharacterIDWalletJournalRequest generates requests for GetCharactersCharacterIDWalletJournal
func NewGetCharactersCharacterIDWalletJournalRequest(server string, characterID CharacterID, params *GetCharactersCharacterIDWalletJournalParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/wallet/journal", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCharactersCharacterIDWalletTransactionsRequest generates requests for GetCharactersCharacterIDWalletTransactions
func NewGetCharactersCharacterIDWalletTransactionsRequest(server string, characterID CharacterID, params *GetCharactersCharacterIDWalletTransactionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "character_id", runtime.ParamLocationPath, characterID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/wallet/transactions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FromID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from_id", runtime.ParamLocationQuery, *params.FromID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetContractsPublicBidsContractIDRequest generates requests for GetContractsPublicBidsContractID
func NewGetContractsPublicBidsContractIDRequest(server string, contractID int64, params *GetContractsPublicBidsContractIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contract_id", runtime.ParamLocationPath, contractID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contracts/public/bids/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetContractsPublicItemsContractIDRequest generates requests for GetContractsPublicItemsContractID
func NewGetContractsPublicItemsContractIDRequest(server string, contractID int64, params *GetContractsPublicItemsContractIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contract_id", runtime.ParamLocationPath, contractID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contracts/public/items/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetContractsPublicRegionIDRequest generates requests for GetContractsPublicRegionID
func NewGetContractsPublicRegionIDRequest(server string, regionID int64, params *GetContractsPublicRegionIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "region_id", runtime.ParamLocationPath, regionID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contracts/public/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCorporationCorporationIDMiningExtractionsRequest generates requests for GetCorporationCorporationIDMiningExtractions
func NewGetCorporationCorporationIDMiningExtractionsRequest(server string, corporationID CorporationID, params *GetCorporationCorporationIDMiningExtractionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "corporation_id", runtime.ParamLocationPath, corporationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/corporation/%s/mining/extractions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCorporationCorporationIDMiningObserversRequest generates requests for GetCorporationCorporationIDMiningObservers
func NewGetCorporationCorporationIDMiningObserversRequest(server string, corporationID CorporationID, params *GetCorporationCorporationIDMiningObserversParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "corporation_id", runtime.ParamLocationPath, corporationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/corporation/%s/mining/observers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCorporationCorporationIDMiningObserversObserverIDRequest generates requests for GetCorporationCorporationIDMiningObserversObserverID
func NewGetCorporationCorporationIDMiningObserversObserverIDRequest(server string, corporationID CorporationID, observerID int64, params *GetCorporationCorporationIDMiningObserversObserverIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "corporation_id", runtime.ParamLocationPath, corporationID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "observer_id", runtime.ParamLocationPath, observerID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/corporation/%s/mining/observers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCorporationsNpccorpsRequest generates requests for GetCorporationsNpccorps
func NewGetCorporationsNpccorpsRequest(server string, params *GetCorporationsNpccorpsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/corporations/npccorps")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCorporationsCorporationIDRequest generates requests for GetCorporationsCorporationID
func NewGetCorporationsCorporationIDRequest(server string, corporationID CorporationID, params *GetCorporationsCorporationIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "corporation_id", runtime.ParamLocationPath, corporationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/corporations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCorporationsCorporationIDAlliancehistoryRequest generates requests for GetCorporationsCorporationIDAlliancehistory
func NewGetCorporationsCorporationIDAlliancehistoryRequest(server string, corporationID CorporationID, params *GetCorporationsCorporationIDAlliancehistoryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "corporation_id", runtime.ParamLocationPath, corporationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/corporations/%s/alliancehistory", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCorporationsCorporationIDAssetsRequest generates requests for GetCorporationsCorporationIDAssets
func NewGetCorporationsCorporationIDAssetsRequest(server string, corporationID CorporationID, params *GetCorporationsCorporationIDAssetsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "corporation_id", runtime.ParamLocationPath, corporationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/corporations/%s/assets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewPostCorporationsCorporationIDAssetsLocationsRequest calls the generic PostCorporationsCorporationIDAssetsLocations builder with application/json body
func NewPostCorporationsCorporationIDAssetsLocationsRequest(server string, corporationID CorporationID, params *PostCorporationsCorporationIDAssetsLocationsParams, body PostCorporationsCorporationIDAssetsLocationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCorporationsCorporationIDAssetsLocationsRequestWithBody(server, corporationID, params, "application/json", bodyReader)
}

// NewPostCorporationsCorporationIDAssetsLocationsRequestWithBody generates requests for PostCorporationsCorporationIDAssetsLocations with any type of body
func NewPostCorporationsCorporationIDAssetsLocationsRequestWithBody(server string, corporationID CorporationID, params *PostCorporationsCorporationIDAssetsLocationsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "corporation_id", runtime.ParamLocationPath, corporationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/corporations/%s/assets/locations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewPostCorporationsCorporationIDAssetsNamesRequest calls the generic PostCorporationsCorporationIDAssetsNames builder with application/json body
func NewPostCorporationsCorporationIDAssetsNamesRequest(server string, corporationID CorporationID, params *PostCorporationsCorporationIDAssetsNamesParams, body PostCorporationsCorporationIDAssetsNamesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCorporationsCorporationIDAssetsNamesRequestWithBody(server, corporationID, params, "application/json", bodyReader)
}

// NewPostCorporationsCorporationIDAssetsNamesRequestWithBody generates requests for PostCorporationsCorporationIDAssetsNames with any type of body
func NewPostCorporationsCorporationIDAssetsNamesRequestWithBody(server string, corporationID CorporationID, params *PostCorporationsCorporationIDAssetsNamesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "corporation_id", runtime.ParamLocationPath, corporationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/corporations/%s/assets/names", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCorporationsCorporationIDBlueprintsRequest generates requests for GetCorporationsCorporationIDBlueprints
func NewGetCorporationsCorporationIDBlueprintsRequest(server string, corporationID CorporationID, params *GetCorporationsCorporationIDBlueprintsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "corporation_id", runtime.ParamLocationPath, corporationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/corporations/%s/blueprints", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCorporationsCorporationIDContactsRequest generates requests for GetCorporationsCorporationIDContacts
func NewGetCorporationsCorporationIDContactsRequest(server string, corporationID CorporationID, params *GetCorporationsCorporationIDContactsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "corporation_id", runtime.ParamLocationPath, corporationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/corporations/%s/contacts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCorporationsCorporationIDContactsLabelsRequest generates requests for GetCorporationsCorporationIDContactsLabels
func NewGetCorporationsCorporationIDContactsLabelsRequest(server string, corporationID CorporationID, params *GetCorporationsCorporationIDContactsLabelsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "corporation_id", runtime.ParamLocationPath, corporationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/corporations/%s/contacts/labels", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCorporationsCorporationIDContainersLogsRequest generates requests for GetCorporationsCorporationIDContainersLogs
func NewGetCorporationsCorporationIDContainersLogsRequest(server string, corporationID CorporationID, params *GetCorporationsCorporationIDContainersLogsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "corporation_id", runtime.ParamLocationPath, corporationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/corporations/%s/containers/logs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCorporationsCorporationIDContractsRequest generates requests for GetCorporationsCorporationIDContracts
func NewGetCorporationsCorporationIDContractsRequest(server string, corporationID CorporationID, params *GetCorporationsCorporationIDContractsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "corporation_id", runtime.ParamLocationPath, corporationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/corporations/%s/contracts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCorporationsCorporationIDContractsContractIDBidsRequest generates requests for GetCorporationsCorporationIDContractsContractIDBids
func NewGetCorporationsCorporationIDContractsContractIDBidsRequest(server string, corporationID CorporationID, contractID int64, params *GetCorporationsCorporationIDContractsContractIDBidsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "corporation_id", runtime.ParamLocationPath, corporationID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "contract_id", runtime.ParamLocationPath, contractID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/corporations/%s/contracts/%s/bids", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCorporationsCorporationIDContractsContractIDItemsRequest generates requests for GetCorporationsCorporationIDContractsContractIDItems
func NewGetCorporationsCorporationIDContractsContractIDItemsRequest(server string, corporationID CorporationID, contractID int64, params *GetCorporationsCorporationIDContractsContractIDItemsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "corporation_id", runtime.ParamLocationPath, corporationID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "contract_id", runtime.ParamLocationPath, contractID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/corporations/%s/contracts/%s/items", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCorporationsCorporationIDCustomsOfficesRequest generates requests for GetCorporationsCorporationIDCustomsOffices
func NewGetCorporationsCorporationIDCustomsOfficesRequest(server string, corporationID CorporationID, params *GetCorporationsCorporationIDCustomsOfficesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "corporation_id", runtime.ParamLocationPath, corporationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/corporations/%s/customs_offices", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCorporationsCorporationIDDivisionsRequest generates requests for GetCorporationsCorporationIDDivisions
func NewGetCorporationsCorporationIDDivisionsRequest(server string, corporationID CorporationID, params *GetCorporationsCorporationIDDivisionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "corporation_id", runtime.ParamLocationPath, corporationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/corporations/%s/divisions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCorporationsCorporationIDFacilitiesRequest generates requests for GetCorporationsCorporationIDFacilities
func NewGetCorporationsCorporationIDFacilitiesRequest(server string, corporationID CorporationID, params *GetCorporationsCorporationIDFacilitiesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "corporation_id", runtime.ParamLocationPath, corporationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/corporations/%s/facilities", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCorporationsCorporationIDFwStatsRequest generates requests for GetCorporationsCorporationIDFwStats
func NewGetCorporationsCorporationIDFwStatsRequest(server string, corporationID CorporationID, params *GetCorporationsCorporationIDFwStatsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "corporation_id", runtime.ParamLocationPath, corporationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/corporations/%s/fw/stats", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCorporationsCorporationIDIconsRequest generates requests for GetCorporationsCorporationIDIcons
func NewGetCorporationsCorporationIDIconsRequest(server string, corporationID CorporationID, params *GetCorporationsCorporationIDIconsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "corporation_id", runtime.ParamLocationPath, corporationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/corporations/%s/icons", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCorporationsCorporationIDIndustryJobsRequest generates requests for GetCorporationsCorporationIDIndustryJobs
func NewGetCorporationsCorporationIDIndustryJobsRequest(server string, corporationID CorporationID, params *GetCorporationsCorporationIDIndustryJobsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "corporation_id", runtime.ParamLocationPath, corporationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/corporations/%s/industry/jobs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IncludeCompleted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_completed", runtime.ParamLocationQuery, *params.IncludeCompleted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCorporationsCorporationIDKillmailsRecentRequest generates requests for GetCorporationsCorporationIDKillmailsRecent
func NewGetCorporationsCorporationIDKillmailsRecentRequest(server string, corporationID CorporationID, params *GetCorporationsCorporationIDKillmailsRecentParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "corporation_id", runtime.ParamLocationPath, corporationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/corporations/%s/killmails/recent", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCorporationsCorporationIDMedalsRequest generates requests for GetCorporationsCorporationIDMedals
func NewGetCorporationsCorporationIDMedalsRequest(server string, corporationID CorporationID, params *GetCorporationsCorporationIDMedalsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "corporation_id", runtime.ParamLocationPath, corporationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/corporations/%s/medals", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCorporationsCorporationIDMedalsIssuedRequest generates requests for GetCorporationsCorporationIDMedalsIssued
func NewGetCorporationsCorporationIDMedalsIssuedRequest(server string, corporationID CorporationID, params *GetCorporationsCorporationIDMedalsIssuedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "corporation_id", runtime.ParamLocationPath, corporationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/corporations/%s/medals/issued", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCorporationsCorporationIDMembersRequest generates requests for GetCorporationsCorporationIDMembers
func NewGetCorporationsCorporationIDMembersRequest(server string, corporationID CorporationID, params *GetCorporationsCorporationIDMembersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "corporation_id", runtime.ParamLocationPath, corporationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/corporations/%s/members", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCorporationsCorporationIDMembersLimitRequest generates requests for GetCorporationsCorporationIDMembersLimit
func NewGetCorporationsCorporationIDMembersLimitRequest(server string, corporationID CorporationID, params *GetCorporationsCorporationIDMembersLimitParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "corporation_id", runtime.ParamLocationPath, corporationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/corporations/%s/members/limit", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCorporationsCorporationIDMembersTitlesRequest generates requests for GetCorporationsCorporationIDMembersTitles
func NewGetCorporationsCorporationIDMembersTitlesRequest(server string, corporationID CorporationID, params *GetCorporationsCorporationIDMembersTitlesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "corporation_id", runtime.ParamLocationPath, corporationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/corporations/%s/members/titles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCorporationsCorporationIDMembertrackingRequest generates requests for GetCorporationsCorporationIDMembertracking
func NewGetCorporationsCorporationIDMembertrackingRequest(server string, corporationID CorporationID, params *GetCorporationsCorporationIDMembertrackingParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "corporation_id", runtime.ParamLocationPath, corporationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/corporations/%s/membertracking", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCorporationsCorporationIDOrdersRequest generates requests for GetCorporationsCorporationIDOrders
func NewGetCorporationsCorporationIDOrdersRequest(server string, corporationID CorporationID, params *GetCorporationsCorporationIDOrdersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "corporation_id", runtime.ParamLocationPath, corporationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/corporations/%s/orders", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCorporationsCorporationIDOrdersHistoryRequest generates requests for GetCorporationsCorporationIDOrdersHistory
func NewGetCorporationsCorporationIDOrdersHistoryRequest(server string, corporationID CorporationID, params *GetCorporationsCorporationIDOrdersHistoryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "corporation_id", runtime.ParamLocationPath, corporationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/corporations/%s/orders/history", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCorporationsCorporationIDRolesRequest generates requests for GetCorporationsCorporationIDRoles
func NewGetCorporationsCorporationIDRolesRequest(server string, corporationID CorporationID, params *GetCorporationsCorporationIDRolesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "corporation_id", runtime.ParamLocationPath, corporationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/corporations/%s/roles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCorporationsCorporationIDRolesHistoryRequest generates requests for GetCorporationsCorporationIDRolesHistory
func NewGetCorporationsCorporationIDRolesHistoryRequest(server string, corporationID CorporationID, params *GetCorporationsCorporationIDRolesHistoryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "corporation_id", runtime.ParamLocationPath, corporationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/corporations/%s/roles/history", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCorporationsCorporationIDShareholdersRequest generates requests for GetCorporationsCorporationIDShareholders
func NewGetCorporationsCorporationIDShareholdersRequest(server string, corporationID CorporationID, params *GetCorporationsCorporationIDShareholdersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "corporation_id", runtime.ParamLocationPath, corporationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/corporations/%s/shareholders", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCorporationsCorporationIDStandingsRequest generates requests for GetCorporationsCorporationIDStandings
func NewGetCorporationsCorporationIDStandingsRequest(server string, corporationID CorporationID, params *GetCorporationsCorporationIDStandingsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "corporation_id", runtime.ParamLocationPath, corporationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/corporations/%s/standings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCorporationsCorporationIDStarbasesRequest generates requests for GetCorporationsCorporationIDStarbases
func NewGetCorporationsCorporationIDStarbasesRequest(server string, corporationID CorporationID, params *GetCorporationsCorporationIDStarbasesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "corporation_id", runtime.ParamLocationPath, corporationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/corporations/%s/starbases", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCorporationsCorporationIDStarbasesStarbaseIDRequest generates requests for GetCorporationsCorporationIDStarbasesStarbaseID
func NewGetCorporationsCorporationIDStarbasesStarbaseIDRequest(server string, corporationID CorporationID, starbaseID int64, params *GetCorporationsCorporationIDStarbasesStarbaseIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "corporation_id", runtime.ParamLocationPath, corporationID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "starbase_id", runtime.ParamLocationPath, starbaseID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/corporations/%s/starbases/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "system_id", runtime.ParamLocationQuery, params.SystemID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCorporationsCorporationIDStructuresRequest generates requests for GetCorporationsCorporationIDStructures
func NewGetCorporationsCorporationIDStructuresRequest(server string, corporationID CorporationID, params *GetCorporationsCorporationIDStructuresParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "corporation_id", runtime.ParamLocationPath, corporationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/corporations/%s/structures", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCorporationsCorporationIDTitlesRequest generates requests for GetCorporationsCorporationIDTitles
func NewGetCorporationsCorporationIDTitlesRequest(server string, corporationID CorporationID, params *GetCorporationsCorporationIDTitlesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "corporation_id", runtime.ParamLocationPath, corporationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/corporations/%s/titles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCorporationsCorporationIDWalletsRequest generates requests for GetCorporationsCorporationIDWallets
func NewGetCorporationsCorporationIDWalletsRequest(server string, corporationID CorporationID, params *GetCorporationsCorporationIDWalletsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "corporation_id", runtime.ParamLocationPath, corporationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/corporations/%s/wallets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCorporationsCorporationIDWalletsDivisionJournalRequest generates requests for GetCorporationsCorporationIDWalletsDivisionJournal
func NewGetCorporationsCorporationIDWalletsDivisionJournalRequest(server string, corporationID CorporationID, division int64, params *GetCorporationsCorporationIDWalletsDivisionJournalParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "corporation_id", runtime.ParamLocationPath, corporationID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "division", runtime.ParamLocationPath, division)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/corporations/%s/wallets/%s/journal", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetCorporationsCorporationIDWalletsDivisionTransactionsRequest generates requests for GetCorporationsCorporationIDWalletsDivisionTransactions
func NewGetCorporationsCorporationIDWalletsDivisionTransactionsRequest(server string, corporationID CorporationID, division int64, params *GetCorporationsCorporationIDWalletsDivisionTransactionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "corporation_id", runtime.ParamLocationPath, corporationID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "division", runtime.ParamLocationPath, division)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/corporations/%s/wallets/%s/transactions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FromID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from_id", runtime.ParamLocationQuery, *params.FromID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetDogmaAttributesRequest generates requests for GetDogmaAttributes
func NewGetDogmaAttributesRequest(server string, params *GetDogmaAttributesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dogma/attributes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetDogmaAttributesAttributeIDRequest generates requests for GetDogmaAttributesAttributeID
func NewGetDogmaAttributesAttributeIDRequest(server string, attributeID int64, params *GetDogmaAttributesAttributeIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "attribute_id", runtime.ParamLocationPath, attributeID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dogma/attributes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetDogmaDynamicItemsTypeIDItemIDRequest generates requests for GetDogmaDynamicItemsTypeIDItemID
func NewGetDogmaDynamicItemsTypeIDItemIDRequest(server string, typeID int64, itemID int64, params *GetDogmaDynamicItemsTypeIDItemIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type_id", runtime.ParamLocationPath, typeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "item_id", runtime.ParamLocationPath, itemID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dogma/dynamic/items/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetDogmaEffectsRequest generates requests for GetDogmaEffects
func NewGetDogmaEffectsRequest(server string, params *GetDogmaEffectsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dogma/effects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetDogmaEffectsEffectIDRequest generates requests for GetDogmaEffectsEffectID
func NewGetDogmaEffectsEffectIDRequest(server string, effectID int64, params *GetDogmaEffectsEffectIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "effect_id", runtime.ParamLocationPath, effectID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dogma/effects/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetFleetsFleetIDRequest generates requests for GetFleetsFleetID
func NewGetFleetsFleetIDRequest(server string, fleetID int64, params *GetFleetsFleetIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fleet_id", runtime.ParamLocationPath, fleetID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fleets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewPutFleetsFleetIDRequest calls the generic PutFleetsFleetID builder with application/json body
func NewPutFleetsFleetIDRequest(server string, fleetID int64, params *PutFleetsFleetIDParams, body PutFleetsFleetIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutFleetsFleetIDRequestWithBody(server, fleetID, params, "application/json", bodyReader)
}

// NewPutFleetsFleetIDRequestWithBody generates requests for PutFleetsFleetID with any type of body
func NewPutFleetsFleetIDRequestWithBody(server string, fleetID int64, params *PutFleetsFleetIDParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fleet_id", runtime.ParamLocationPath, fleetID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fleets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetFleetsFleetIDMembersRequest generates requests for GetFleetsFleetIDMembers
func NewGetFleetsFleetIDMembersRequest(server string, fleetID int64, params *GetFleetsFleetIDMembersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fleet_id", runtime.ParamLocationPath, fleetID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fleets/%s/members", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewPostFleetsFleetIDMembersRequest calls the generic PostFleetsFleetIDMembers builder with application/json body
func NewPostFleetsFleetIDMembersRequest(server string, fleetID int64, params *PostFleetsFleetIDMembersParams, body PostFleetsFleetIDMembersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFleetsFleetIDMembersRequestWithBody(server, fleetID, params, "application/json", bodyReader)
}

// NewPostFleetsFleetIDMembersRequestWithBody generates requests for PostFleetsFleetIDMembers with any type of body
func NewPostFleetsFleetIDMembersRequestWithBody(server string, fleetID int64, params *PostFleetsFleetIDMembersParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fleet_id", runtime.ParamLocationPath, fleetID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fleets/%s/members", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewDeleteFleetsFleetIDMembersMemberIDRequest generates requests for DeleteFleetsFleetIDMembersMemberID
func NewDeleteFleetsFleetIDMembersMemberIDRequest(server string, fleetID int64, memberID int64, params *DeleteFleetsFleetIDMembersMemberIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fleet_id", runtime.ParamLocationPath, fleetID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "member_id", runtime.ParamLocationPath, memberID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fleets/%s/members/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewPutFleetsFleetIDMembersMemberIDRequest calls the generic PutFleetsFleetIDMembersMemberID builder with application/json body
func NewPutFleetsFleetIDMembersMemberIDRequest(server string, fleetID int64, memberID int64, params *PutFleetsFleetIDMembersMemberIDParams, body PutFleetsFleetIDMembersMemberIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutFleetsFleetIDMembersMemberIDRequestWithBody(server, fleetID, memberID, params, "application/json", bodyReader)
}

// NewPutFleetsFleetIDMembersMemberIDRequestWithBody generates requests for PutFleetsFleetIDMembersMemberID with any type of body
func NewPutFleetsFleetIDMembersMemberIDRequestWithBody(server string, fleetID int64, memberID int64, params *PutFleetsFleetIDMembersMemberIDParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fleet_id", runtime.ParamLocationPath, fleetID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "member_id", runtime.ParamLocationPath, memberID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fleets/%s/members/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewDeleteFleetsFleetIDSquadsSquadIDRequest generates requests for DeleteFleetsFleetIDSquadsSquadID
func NewDeleteFleetsFleetIDSquadsSquadIDRequest(server string, fleetID int64, squadID int64, params *DeleteFleetsFleetIDSquadsSquadIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fleet_id", runtime.ParamLocationPath, fleetID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "squad_id", runtime.ParamLocationPath, squadID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fleets/%s/squads/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewPutFleetsFleetIDSquadsSquadIDRequest calls the generic PutFleetsFleetIDSquadsSquadID builder with application/json body
func NewPutFleetsFleetIDSquadsSquadIDRequest(server string, fleetID int64, squadID int64, params *PutFleetsFleetIDSquadsSquadIDParams, body PutFleetsFleetIDSquadsSquadIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutFleetsFleetIDSquadsSquadIDRequestWithBody(server, fleetID, squadID, params, "application/json", bodyReader)
}

// NewPutFleetsFleetIDSquadsSquadIDRequestWithBody generates requests for PutFleetsFleetIDSquadsSquadID with any type of body
func NewPutFleetsFleetIDSquadsSquadIDRequestWithBody(server string, fleetID int64, squadID int64, params *PutFleetsFleetIDSquadsSquadIDParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fleet_id", runtime.ParamLocationPath, fleetID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "squad_id", runtime.ParamLocationPath, squadID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fleets/%s/squads/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetFleetsFleetIDWingsRequest generates requests for GetFleetsFleetIDWings
func NewGetFleetsFleetIDWingsRequest(server string, fleetID int64, params *GetFleetsFleetIDWingsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fleet_id", runtime.ParamLocationPath, fleetID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fleets/%s/wings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewPostFleetsFleetIDWingsRequest generates requests for PostFleetsFleetIDWings
func NewPostFleetsFleetIDWingsRequest(server string, fleetID int64, params *PostFleetsFleetIDWingsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fleet_id", runtime.ParamLocationPath, fleetID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fleets/%s/wings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewDeleteFleetsFleetIDWingsWingIDRequest generates requests for DeleteFleetsFleetIDWingsWingID
func NewDeleteFleetsFleetIDWingsWingIDRequest(server string, fleetID int64, wingID int64, params *DeleteFleetsFleetIDWingsWingIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fleet_id", runtime.ParamLocationPath, fleetID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "wing_id", runtime.ParamLocationPath, wingID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fleets/%s/wings/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewPutFleetsFleetIDWingsWingIDRequest calls the generic PutFleetsFleetIDWingsWingID builder with application/json body
func NewPutFleetsFleetIDWingsWingIDRequest(server string, fleetID int64, wingID int64, params *PutFleetsFleetIDWingsWingIDParams, body PutFleetsFleetIDWingsWingIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutFleetsFleetIDWingsWingIDRequestWithBody(server, fleetID, wingID, params, "application/json", bodyReader)
}

// NewPutFleetsFleetIDWingsWingIDRequestWithBody generates requests for PutFleetsFleetIDWingsWingID with any type of body
func NewPutFleetsFleetIDWingsWingIDRequestWithBody(server string, fleetID int64, wingID int64, params *PutFleetsFleetIDWingsWingIDParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fleet_id", runtime.ParamLocationPath, fleetID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "wing_id", runtime.ParamLocationPath, wingID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fleets/%s/wings/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewPostFleetsFleetIDWingsWingIDSquadsRequest generates requests for PostFleetsFleetIDWingsWingIDSquads
func NewPostFleetsFleetIDWingsWingIDSquadsRequest(server string, fleetID int64, wingID int64, params *PostFleetsFleetIDWingsWingIDSquadsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fleet_id", runtime.ParamLocationPath, fleetID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "wing_id", runtime.ParamLocationPath, wingID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fleets/%s/wings/%s/squads", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetFwLeaderboardsRequest generates requests for GetFwLeaderboards
func NewGetFwLeaderboardsRequest(server string, params *GetFwLeaderboardsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fw/leaderboards")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetFwLeaderboardsCharactersRequest generates requests for GetFwLeaderboardsCharacters
func NewGetFwLeaderboardsCharactersRequest(server string, params *GetFwLeaderboardsCharactersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fw/leaderboards/characters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetFwLeaderboardsCorporationsRequest generates requests for GetFwLeaderboardsCorporations
func NewGetFwLeaderboardsCorporationsRequest(server string, params *GetFwLeaderboardsCorporationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fw/leaderboards/corporations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetFwStatsRequest generates requests for GetFwStats
func NewGetFwStatsRequest(server string, params *GetFwStatsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fw/stats")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetFwSystemsRequest generates requests for GetFwSystems
func NewGetFwSystemsRequest(server string, params *GetFwSystemsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fw/systems")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetFwWarsRequest generates requests for GetFwWars
func NewGetFwWarsRequest(server string, params *GetFwWarsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fw/wars")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetIncursionsRequest generates requests for GetIncursions
func NewGetIncursionsRequest(server string, params *GetIncursionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/incursions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetIndustryFacilitiesRequest generates requests for GetIndustryFacilities
func NewGetIndustryFacilitiesRequest(server string, params *GetIndustryFacilitiesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/industry/facilities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetIndustrySystemsRequest generates requests for GetIndustrySystems
func NewGetIndustrySystemsRequest(server string, params *GetIndustrySystemsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/industry/systems")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetInsurancePricesRequest generates requests for GetInsurancePrices
func NewGetInsurancePricesRequest(server string, params *GetInsurancePricesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/insurance/prices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetKillmailsKillmailIDKillmailHashRequest generates requests for GetKillmailsKillmailIDKillmailHash
func NewGetKillmailsKillmailIDKillmailHashRequest(server string, killmailID int64, killmailHash string, params *GetKillmailsKillmailIDKillmailHashParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "killmail_id", runtime.ParamLocationPath, killmailID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "killmail_hash", runtime.ParamLocationPath, killmailHash)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/killmails/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetLoyaltyStoresCorporationIDOffersRequest generates requests for GetLoyaltyStoresCorporationIDOffers
func NewGetLoyaltyStoresCorporationIDOffersRequest(server string, corporationID CorporationID, params *GetLoyaltyStoresCorporationIDOffersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "corporation_id", runtime.ParamLocationPath, corporationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/loyalty/stores/%s/offers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetMarketsGroupsRequest generates requests for GetMarketsGroups
func NewGetMarketsGroupsRequest(server string, params *GetMarketsGroupsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/markets/groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetMarketsGroupsMarketGroupIDRequest generates requests for GetMarketsGroupsMarketGroupID
func NewGetMarketsGroupsMarketGroupIDRequest(server string, marketGroupID int64, params *GetMarketsGroupsMarketGroupIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "market_group_id", runtime.ParamLocationPath, marketGroupID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/markets/groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetMarketsPricesRequest generates requests for GetMarketsPrices
func NewGetMarketsPricesRequest(server string, params *GetMarketsPricesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/markets/prices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetMarketsStructuresStructureIDRequest generates requests for GetMarketsStructuresStructureID
func NewGetMarketsStructuresStructureIDRequest(server string, structureID int64, params *GetMarketsStructuresStructureIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "structure_id", runtime.ParamLocationPath, structureID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/markets/structures/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetMarketsRegionIDHistoryRequest generates requests for GetMarketsRegionIDHistory
func NewGetMarketsRegionIDHistoryRequest(server string, regionID int64, params *GetMarketsRegionIDHistoryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "region_id", runtime.ParamLocationPath, regionID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/markets/%s/history", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type_id", runtime.ParamLocationQuery, params.TypeID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetMarketsRegionIDOrdersRequest generates requests for GetMarketsRegionIDOrders
func NewGetMarketsRegionIDOrdersRequest(server string, regionID int64, params *GetMarketsRegionIDOrdersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "region_id", runtime.ParamLocationPath, regionID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/markets/%s/orders", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_type", runtime.ParamLocationQuery, params.OrderType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type_id", runtime.ParamLocationQuery, *params.TypeID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetMarketsRegionIDTypesRequest generates requests for GetMarketsRegionIDTypes
func NewGetMarketsRegionIDTypesRequest(server string, regionID int64, params *GetMarketsRegionIDTypesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "region_id", runtime.ParamLocationPath, regionID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/markets/%s/types", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetRouteOriginDestinationRequest generates requests for GetRouteOriginDestination
func NewGetRouteOriginDestinationRequest(server string, origin int64, destination int64, params *GetRouteOriginDestinationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "origin", runtime.ParamLocationPath, origin)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "destination", runtime.ParamLocationPath, destination)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/route/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Avoid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "avoid", runtime.ParamLocationQuery, *params.Avoid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Connections != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "connections", runtime.ParamLocationQuery, *params.Connections); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Flag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "flag", runtime.ParamLocationQuery, *params.Flag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetSovereigntyCampaignsRequest generates requests for GetSovereigntyCampaigns
func NewGetSovereigntyCampaignsRequest(server string, params *GetSovereigntyCampaignsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sovereignty/campaigns")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetSovereigntyMapRequest generates requests for GetSovereigntyMap
func NewGetSovereigntyMapRequest(server string, params *GetSovereigntyMapParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sovereignty/map")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetSovereigntyStructuresRequest generates requests for GetSovereigntyStructures
func NewGetSovereigntyStructuresRequest(server string, params *GetSovereigntyStructuresParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sovereignty/structures")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetStatusRequest generates requests for GetStatus
func NewGetStatusRequest(server string, params *GetStatusParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewPostUIAutopilotWaypointRequest generates requests for PostUIAutopilotWaypoint
func NewPostUIAutopilotWaypointRequest(server string, params *PostUIAutopilotWaypointParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ui/autopilot/waypoint")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "add_to_beginning", runtime.ParamLocationQuery, params.AddToBeginning); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clear_other_waypoints", runtime.ParamLocationQuery, params.ClearOtherWaypoints); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "destination_id", runtime.ParamLocationQuery, params.DestinationID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewPostUIOpenwindowContractRequest generates requests for PostUIOpenwindowContract
func NewPostUIOpenwindowContractRequest(server string, params *PostUIOpenwindowContractParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ui/openwindow/contract")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contract_id", runtime.ParamLocationQuery, params.ContractID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewPostUIOpenwindowInformationRequest generates requests for PostUIOpenwindowInformation
func NewPostUIOpenwindowInformationRequest(server string, params *PostUIOpenwindowInformationParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ui/openwindow/information")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "target_id", runtime.ParamLocationQuery, params.TargetID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewPostUIOpenwindowMarketdetailsRequest generates requests for PostUIOpenwindowMarketdetails
func NewPostUIOpenwindowMarketdetailsRequest(server string, params *PostUIOpenwindowMarketdetailsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ui/openwindow/marketdetails")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type_id", runtime.ParamLocationQuery, params.TypeID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewPostUIOpenwindowNewmailRequest calls the generic PostUIOpenwindowNewmail builder with application/json body
func NewPostUIOpenwindowNewmailRequest(server string, params *PostUIOpenwindowNewmailParams, body PostUIOpenwindowNewmailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUIOpenwindowNewmailRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostUIOpenwindowNewmailRequestWithBody generates requests for PostUIOpenwindowNewmail with any type of body
func NewPostUIOpenwindowNewmailRequestWithBody(server string, params *PostUIOpenwindowNewmailParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ui/openwindow/newmail")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetUniverseAncestriesRequest generates requests for GetUniverseAncestries
func NewGetUniverseAncestriesRequest(server string, params *GetUniverseAncestriesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/universe/ancestries")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetUniverseAsteroidBeltsAsteroidBeltIDRequest generates requests for GetUniverseAsteroidBeltsAsteroidBeltID
func NewGetUniverseAsteroidBeltsAsteroidBeltIDRequest(server string, asteroidBeltID int64, params *GetUniverseAsteroidBeltsAsteroidBeltIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "asteroid_belt_id", runtime.ParamLocationPath, asteroidBeltID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/universe/asteroid_belts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetUniverseBloodlinesRequest generates requests for GetUniverseBloodlines
func NewGetUniverseBloodlinesRequest(server string, params *GetUniverseBloodlinesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/universe/bloodlines")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetUniverseCategoriesRequest generates requests for GetUniverseCategories
func NewGetUniverseCategoriesRequest(server string, params *GetUniverseCategoriesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/universe/categories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetUniverseCategoriesCategoryIDRequest generates requests for GetUniverseCategoriesCategoryID
func NewGetUniverseCategoriesCategoryIDRequest(server string, categoryID int64, params *GetUniverseCategoriesCategoryIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "category_id", runtime.ParamLocationPath, categoryID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/universe/categories/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetUniverseConstellationsRequest generates requests for GetUniverseConstellations
func NewGetUniverseConstellationsRequest(server string, params *GetUniverseConstellationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/universe/constellations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetUniverseConstellationsConstellationIDRequest generates requests for GetUniverseConstellationsConstellationID
func NewGetUniverseConstellationsConstellationIDRequest(server string, constellationID int64, params *GetUniverseConstellationsConstellationIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "constellation_id", runtime.ParamLocationPath, constellationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/universe/constellations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetUniverseFactionsRequest generates requests for GetUniverseFactions
func NewGetUniverseFactionsRequest(server string, params *GetUniverseFactionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/universe/factions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetUniverseGraphicsRequest generates requests for GetUniverseGraphics
func NewGetUniverseGraphicsRequest(server string, params *GetUniverseGraphicsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/universe/graphics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetUniverseGraphicsGraphicIDRequest generates requests for GetUniverseGraphicsGraphicID
func NewGetUniverseGraphicsGraphicIDRequest(server string, graphicID int64, params *GetUniverseGraphicsGraphicIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "graphic_id", runtime.ParamLocationPath, graphicID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/universe/graphics/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetUniverseGroupsRequest generates requests for GetUniverseGroups
func NewGetUniverseGroupsRequest(server string, params *GetUniverseGroupsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/universe/groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetUniverseGroupsGroupIDRequest generates requests for GetUniverseGroupsGroupID
func NewGetUniverseGroupsGroupIDRequest(server string, groupID int64, params *GetUniverseGroupsGroupIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/universe/groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewPostUniverseIdsRequest calls the generic PostUniverseIds builder with application/json body
func NewPostUniverseIdsRequest(server string, params *PostUniverseIdsParams, body PostUniverseIdsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUniverseIdsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostUniverseIdsRequestWithBody generates requests for PostUniverseIds with any type of body
func NewPostUniverseIdsRequestWithBody(server string, params *PostUniverseIdsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/universe/ids")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetUniverseMoonsMoonIDRequest generates requests for GetUniverseMoonsMoonID
func NewGetUniverseMoonsMoonIDRequest(server string, moonID int64, params *GetUniverseMoonsMoonIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "moon_id", runtime.ParamLocationPath, moonID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/universe/moons/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewPostUniverseNamesRequest calls the generic PostUniverseNames builder with application/json body
func NewPostUniverseNamesRequest(server string, params *PostUniverseNamesParams, body PostUniverseNamesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUniverseNamesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostUniverseNamesRequestWithBody generates requests for PostUniverseNames with any type of body
func NewPostUniverseNamesRequestWithBody(server string, params *PostUniverseNamesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/universe/names")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetUniversePlanetsPlanetIDRequest generates requests for GetUniversePlanetsPlanetID
func NewGetUniversePlanetsPlanetIDRequest(server string, planetID int64, params *GetUniversePlanetsPlanetIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "planet_id", runtime.ParamLocationPath, planetID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/universe/planets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetUniverseRacesRequest generates requests for GetUniverseRaces
func NewGetUniverseRacesRequest(server string, params *GetUniverseRacesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/universe/races")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetUniverseRegionsRequest generates requests for GetUniverseRegions
func NewGetUniverseRegionsRequest(server string, params *GetUniverseRegionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/universe/regions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetUniverseRegionsRegionIDRequest generates requests for GetUniverseRegionsRegionID
func NewGetUniverseRegionsRegionIDRequest(server string, regionID int64, params *GetUniverseRegionsRegionIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "region_id", runtime.ParamLocationPath, regionID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/universe/regions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetUniverseSchematicsSchematicIDRequest generates requests for GetUniverseSchematicsSchematicID
func NewGetUniverseSchematicsSchematicIDRequest(server string, schematicID int64, params *GetUniverseSchematicsSchematicIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "schematic_id", runtime.ParamLocationPath, schematicID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/universe/schematics/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetUniverseStargatesStargateIDRequest generates requests for GetUniverseStargatesStargateID
func NewGetUniverseStargatesStargateIDRequest(server string, stargateID int64, params *GetUniverseStargatesStargateIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "stargate_id", runtime.ParamLocationPath, stargateID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/universe/stargates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetUniverseStarsStarIDRequest generates requests for GetUniverseStarsStarID
func NewGetUniverseStarsStarIDRequest(server string, starID int64, params *GetUniverseStarsStarIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "star_id", runtime.ParamLocationPath, starID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/universe/stars/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetUniverseStationsStationIDRequest generates requests for GetUniverseStationsStationID
func NewGetUniverseStationsStationIDRequest(server string, stationID int64, params *GetUniverseStationsStationIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "station_id", runtime.ParamLocationPath, stationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/universe/stations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetUniverseStructuresRequest generates requests for GetUniverseStructures
func NewGetUniverseStructuresRequest(server string, params *GetUniverseStructuresParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/universe/structures")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetUniverseStructuresStructureIDRequest generates requests for GetUniverseStructuresStructureID
func NewGetUniverseStructuresStructureIDRequest(server string, structureID int64, params *GetUniverseStructuresStructureIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "structure_id", runtime.ParamLocationPath, structureID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/universe/structures/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetUniverseSystemJumpsRequest generates requests for GetUniverseSystemJumps
func NewGetUniverseSystemJumpsRequest(server string, params *GetUniverseSystemJumpsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/universe/system_jumps")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetUniverseSystemKillsRequest generates requests for GetUniverseSystemKills
func NewGetUniverseSystemKillsRequest(server string, params *GetUniverseSystemKillsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/universe/system_kills")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetUniverseSystemsRequest generates requests for GetUniverseSystems
func NewGetUniverseSystemsRequest(server string, params *GetUniverseSystemsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/universe/systems")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetUniverseSystemsSystemIDRequest generates requests for GetUniverseSystemsSystemID
func NewGetUniverseSystemsSystemIDRequest(server string, systemID int64, params *GetUniverseSystemsSystemIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_id", runtime.ParamLocationPath, systemID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/universe/systems/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetUniverseTypesRequest generates requests for GetUniverseTypes
func NewGetUniverseTypesRequest(server string, params *GetUniverseTypesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/universe/types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetUniverseTypesTypeIDRequest generates requests for GetUniverseTypesTypeID
func NewGetUniverseTypesTypeIDRequest(server string, typeID int64, params *GetUniverseTypesTypeIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type_id", runtime.ParamLocationPath, typeID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/universe/types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetWarsRequest generates requests for GetWars
func NewGetWarsRequest(server string, params *GetWarsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/wars")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.MaxWarID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max_war_id", runtime.ParamLocationQuery, *params.MaxWarID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetWarsWarIDRequest generates requests for GetWarsWarID
func NewGetWarsWarIDRequest(server string, warID int64, params *GetWarsWarIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "war_id", runtime.ParamLocationPath, warID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/wars/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

// NewGetWarsWarIDKillmailsRequest generates requests for GetWarsWarIDKillmails
func NewGetWarsWarIDKillmailsRequest(server string, warID int64, params *GetWarsWarIDKillmailsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "war_id", runtime.ParamLocationPath, warID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/wars/%s/killmails", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.AcceptLanguage != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Language", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Compatibility-Date", runtime.ParamLocationHeader, params.XCompatibilityDate)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Compatibility-Date", headerParam2)

		if params.XTenant != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-Tenant", runtime.ParamLocationHeader, *params.XTenant)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Tenant", headerParam3)
		}

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAlliancesWithResponse request
	GetAlliancesWithResponse(ctx context.Context, params *GetAlliancesParams, reqEditors ...RequestEditorFn) (*GetAlliancesResponse, error)

	// GetAlliancesAllianceIDWithResponse request
	GetAlliancesAllianceIDWithResponse(ctx context.Context, allianceID AllianceID, params *GetAlliancesAllianceIDParams, reqEditors ...RequestEditorFn) (*GetAlliancesAllianceIDResponse, error)

	// GetAlliancesAllianceIDContactsWithResponse request
	GetAlliancesAllianceIDContactsWithResponse(ctx context.Context, allianceID AllianceID, params *GetAlliancesAllianceIDContactsParams, reqEditors ...RequestEditorFn) (*GetAlliancesAllianceIDContactsResponse, error)

	// GetAlliancesAllianceIDContactsLabelsWithResponse request
	GetAlliancesAllianceIDContactsLabelsWithResponse(ctx context.Context, allianceID AllianceID, params *GetAlliancesAllianceIDContactsLabelsParams, reqEditors ...RequestEditorFn) (*GetAlliancesAllianceIDContactsLabelsResponse, error)

	// GetAlliancesAllianceIDCorporationsWithResponse request
	GetAlliancesAllianceIDCorporationsWithResponse(ctx context.Context, allianceID AllianceID, params *GetAlliancesAllianceIDCorporationsParams, reqEditors ...RequestEditorFn) (*GetAlliancesAllianceIDCorporationsResponse, error)

	// GetAlliancesAllianceIDIconsWithResponse request
	GetAlliancesAllianceIDIconsWithResponse(ctx context.Context, allianceID AllianceID, params *GetAlliancesAllianceIDIconsParams, reqEditors ...RequestEditorFn) (*GetAlliancesAllianceIDIconsResponse, error)

	// PostCharactersAffiliationWithBodyWithResponse request with any body
	PostCharactersAffiliationWithBodyWithResponse(ctx context.Context, params *PostCharactersAffiliationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCharactersAffiliationResponse, error)

	PostCharactersAffiliationWithResponse(ctx context.Context, params *PostCharactersAffiliationParams, body PostCharactersAffiliationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCharactersAffiliationResponse, error)

	// GetCharactersCharacterIDWithResponse request
	GetCharactersCharacterIDWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDResponse, error)

	// GetCharactersCharacterIDAgentsResearchWithResponse request
	GetCharactersCharacterIDAgentsResearchWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDAgentsResearchParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDAgentsResearchResponse, error)

	// GetCharactersCharacterIDAssetsWithResponse request
	GetCharactersCharacterIDAssetsWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDAssetsParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDAssetsResponse, error)

	// PostCharactersCharacterIDAssetsLocationsWithBodyWithResponse request with any body
	PostCharactersCharacterIDAssetsLocationsWithBodyWithResponse(ctx context.Context, characterID CharacterID, params *PostCharactersCharacterIDAssetsLocationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCharactersCharacterIDAssetsLocationsResponse, error)

	PostCharactersCharacterIDAssetsLocationsWithResponse(ctx context.Context, characterID CharacterID, params *PostCharactersCharacterIDAssetsLocationsParams, body PostCharactersCharacterIDAssetsLocationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCharactersCharacterIDAssetsLocationsResponse, error)

	// PostCharactersCharacterIDAssetsNamesWithBodyWithResponse request with any body
	PostCharactersCharacterIDAssetsNamesWithBodyWithResponse(ctx context.Context, characterID CharacterID, params *PostCharactersCharacterIDAssetsNamesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCharactersCharacterIDAssetsNamesResponse, error)

	PostCharactersCharacterIDAssetsNamesWithResponse(ctx context.Context, characterID CharacterID, params *PostCharactersCharacterIDAssetsNamesParams, body PostCharactersCharacterIDAssetsNamesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCharactersCharacterIDAssetsNamesResponse, error)

	// GetCharactersCharacterIDAttributesWithResponse request
	GetCharactersCharacterIDAttributesWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDAttributesParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDAttributesResponse, error)

	// GetCharactersCharacterIDBlueprintsWithResponse request
	GetCharactersCharacterIDBlueprintsWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDBlueprintsParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDBlueprintsResponse, error)

	// GetCharactersCharacterIDCalendarWithResponse request
	GetCharactersCharacterIDCalendarWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDCalendarParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDCalendarResponse, error)

	// GetCharactersCharacterIDCalendarEventIDWithResponse request
	GetCharactersCharacterIDCalendarEventIDWithResponse(ctx context.Context, characterID CharacterID, eventID int64, params *GetCharactersCharacterIDCalendarEventIDParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDCalendarEventIDResponse, error)

	// PutCharactersCharacterIDCalendarEventIDWithBodyWithResponse request with any body
	PutCharactersCharacterIDCalendarEventIDWithBodyWithResponse(ctx context.Context, characterID CharacterID, eventID int64, params *PutCharactersCharacterIDCalendarEventIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCharactersCharacterIDCalendarEventIDResponse, error)

	PutCharactersCharacterIDCalendarEventIDWithResponse(ctx context.Context, characterID CharacterID, eventID int64, params *PutCharactersCharacterIDCalendarEventIDParams, body PutCharactersCharacterIDCalendarEventIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCharactersCharacterIDCalendarEventIDResponse, error)

	// GetCharactersCharacterIDCalendarEventIDAttendeesWithResponse request
	GetCharactersCharacterIDCalendarEventIDAttendeesWithResponse(ctx context.Context, characterID CharacterID, eventID int64, params *GetCharactersCharacterIDCalendarEventIDAttendeesParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDCalendarEventIDAttendeesResponse, error)

	// GetCharactersCharacterIDClonesWithResponse request
	GetCharactersCharacterIDClonesWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDClonesParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDClonesResponse, error)

	// DeleteCharactersCharacterIDContactsWithResponse request
	DeleteCharactersCharacterIDContactsWithResponse(ctx context.Context, characterID CharacterID, params *DeleteCharactersCharacterIDContactsParams, reqEditors ...RequestEditorFn) (*DeleteCharactersCharacterIDContactsResponse, error)

	// GetCharactersCharacterIDContactsWithResponse request
	GetCharactersCharacterIDContactsWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDContactsParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDContactsResponse, error)

	// PostCharactersCharacterIDContactsWithBodyWithResponse request with any body
	PostCharactersCharacterIDContactsWithBodyWithResponse(ctx context.Context, characterID CharacterID, params *PostCharactersCharacterIDContactsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCharactersCharacterIDContactsResponse, error)

	PostCharactersCharacterIDContactsWithResponse(ctx context.Context, characterID CharacterID, params *PostCharactersCharacterIDContactsParams, body PostCharactersCharacterIDContactsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCharactersCharacterIDContactsResponse, error)

	// PutCharactersCharacterIDContactsWithBodyWithResponse request with any body
	PutCharactersCharacterIDContactsWithBodyWithResponse(ctx context.Context, characterID CharacterID, params *PutCharactersCharacterIDContactsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCharactersCharacterIDContactsResponse, error)

	PutCharactersCharacterIDContactsWithResponse(ctx context.Context, characterID CharacterID, params *PutCharactersCharacterIDContactsParams, body PutCharactersCharacterIDContactsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCharactersCharacterIDContactsResponse, error)

	// GetCharactersCharacterIDContactsLabelsWithResponse request
	GetCharactersCharacterIDContactsLabelsWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDContactsLabelsParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDContactsLabelsResponse, error)

	// GetCharactersCharacterIDContractsWithResponse request
	GetCharactersCharacterIDContractsWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDContractsParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDContractsResponse, error)

	// GetCharactersCharacterIDContractsContractIDBidsWithResponse request
	GetCharactersCharacterIDContractsContractIDBidsWithResponse(ctx context.Context, characterID CharacterID, contractID int64, params *GetCharactersCharacterIDContractsContractIDBidsParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDContractsContractIDBidsResponse, error)

	// GetCharactersCharacterIDContractsContractIDItemsWithResponse request
	GetCharactersCharacterIDContractsContractIDItemsWithResponse(ctx context.Context, characterID CharacterID, contractID int64, params *GetCharactersCharacterIDContractsContractIDItemsParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDContractsContractIDItemsResponse, error)

	// GetCharactersCharacterIDCorporationhistoryWithResponse request
	GetCharactersCharacterIDCorporationhistoryWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDCorporationhistoryParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDCorporationhistoryResponse, error)

	// PostCharactersCharacterIDCspaWithBodyWithResponse request with any body
	PostCharactersCharacterIDCspaWithBodyWithResponse(ctx context.Context, characterID CharacterID, params *PostCharactersCharacterIDCspaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCharactersCharacterIDCspaResponse, error)

	PostCharactersCharacterIDCspaWithResponse(ctx context.Context, characterID CharacterID, params *PostCharactersCharacterIDCspaParams, body PostCharactersCharacterIDCspaJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCharactersCharacterIDCspaResponse, error)

	// GetCharactersCharacterIDFatigueWithResponse request
	GetCharactersCharacterIDFatigueWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDFatigueParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDFatigueResponse, error)

	// GetCharactersCharacterIDFittingsWithResponse request
	GetCharactersCharacterIDFittingsWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDFittingsParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDFittingsResponse, error)

	// PostCharactersCharacterIDFittingsWithBodyWithResponse request with any body
	PostCharactersCharacterIDFittingsWithBodyWithResponse(ctx context.Context, characterID CharacterID, params *PostCharactersCharacterIDFittingsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCharactersCharacterIDFittingsResponse, error)

	PostCharactersCharacterIDFittingsWithResponse(ctx context.Context, characterID CharacterID, params *PostCharactersCharacterIDFittingsParams, body PostCharactersCharacterIDFittingsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCharactersCharacterIDFittingsResponse, error)

	// DeleteCharactersCharacterIDFittingsFittingIDWithResponse request
	DeleteCharactersCharacterIDFittingsFittingIDWithResponse(ctx context.Context, characterID CharacterID, fittingID int64, params *DeleteCharactersCharacterIDFittingsFittingIDParams, reqEditors ...RequestEditorFn) (*DeleteCharactersCharacterIDFittingsFittingIDResponse, error)

	// GetCharactersCharacterIDFleetWithResponse request
	GetCharactersCharacterIDFleetWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDFleetParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDFleetResponse, error)

	// GetCharactersCharacterIDFwStatsWithResponse request
	GetCharactersCharacterIDFwStatsWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDFwStatsParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDFwStatsResponse, error)

	// GetCharactersCharacterIDImplantsWithResponse request
	GetCharactersCharacterIDImplantsWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDImplantsParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDImplantsResponse, error)

	// GetCharactersCharacterIDIndustryJobsWithResponse request
	GetCharactersCharacterIDIndustryJobsWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDIndustryJobsParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDIndustryJobsResponse, error)

	// GetCharactersCharacterIDKillmailsRecentWithResponse request
	GetCharactersCharacterIDKillmailsRecentWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDKillmailsRecentParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDKillmailsRecentResponse, error)

	// GetCharactersCharacterIDLocationWithResponse request
	GetCharactersCharacterIDLocationWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDLocationParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDLocationResponse, error)

	// GetCharactersCharacterIDLoyaltyPointsWithResponse request
	GetCharactersCharacterIDLoyaltyPointsWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDLoyaltyPointsParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDLoyaltyPointsResponse, error)

	// GetCharactersCharacterIDMailWithResponse request
	GetCharactersCharacterIDMailWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDMailParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDMailResponse, error)

	// PostCharactersCharacterIDMailWithBodyWithResponse request with any body
	PostCharactersCharacterIDMailWithBodyWithResponse(ctx context.Context, characterID CharacterID, params *PostCharactersCharacterIDMailParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCharactersCharacterIDMailResponse, error)

	PostCharactersCharacterIDMailWithResponse(ctx context.Context, characterID CharacterID, params *PostCharactersCharacterIDMailParams, body PostCharactersCharacterIDMailJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCharactersCharacterIDMailResponse, error)

	// GetCharactersCharacterIDMailLabelsWithResponse request
	GetCharactersCharacterIDMailLabelsWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDMailLabelsParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDMailLabelsResponse, error)

	// PostCharactersCharacterIDMailLabelsWithBodyWithResponse request with any body
	PostCharactersCharacterIDMailLabelsWithBodyWithResponse(ctx context.Context, characterID CharacterID, params *PostCharactersCharacterIDMailLabelsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCharactersCharacterIDMailLabelsResponse, error)

	PostCharactersCharacterIDMailLabelsWithResponse(ctx context.Context, characterID CharacterID, params *PostCharactersCharacterIDMailLabelsParams, body PostCharactersCharacterIDMailLabelsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCharactersCharacterIDMailLabelsResponse, error)

	// DeleteCharactersCharacterIDMailLabelsLabelIDWithResponse request
	DeleteCharactersCharacterIDMailLabelsLabelIDWithResponse(ctx context.Context, characterID CharacterID, labelID int64, params *DeleteCharactersCharacterIDMailLabelsLabelIDParams, reqEditors ...RequestEditorFn) (*DeleteCharactersCharacterIDMailLabelsLabelIDResponse, error)

	// GetCharactersCharacterIDMailListsWithResponse request
	GetCharactersCharacterIDMailListsWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDMailListsParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDMailListsResponse, error)

	// DeleteCharactersCharacterIDMailMailIDWithResponse request
	DeleteCharactersCharacterIDMailMailIDWithResponse(ctx context.Context, characterID CharacterID, mailID int64, params *DeleteCharactersCharacterIDMailMailIDParams, reqEditors ...RequestEditorFn) (*DeleteCharactersCharacterIDMailMailIDResponse, error)

	// GetCharactersCharacterIDMailMailIDWithResponse request
	GetCharactersCharacterIDMailMailIDWithResponse(ctx context.Context, characterID CharacterID, mailID int64, params *GetCharactersCharacterIDMailMailIDParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDMailMailIDResponse, error)

	// PutCharactersCharacterIDMailMailIDWithBodyWithResponse request with any body
	PutCharactersCharacterIDMailMailIDWithBodyWithResponse(ctx context.Context, characterID CharacterID, mailID int64, params *PutCharactersCharacterIDMailMailIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCharactersCharacterIDMailMailIDResponse, error)

	PutCharactersCharacterIDMailMailIDWithResponse(ctx context.Context, characterID CharacterID, mailID int64, params *PutCharactersCharacterIDMailMailIDParams, body PutCharactersCharacterIDMailMailIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCharactersCharacterIDMailMailIDResponse, error)

	// GetCharactersCharacterIDMedalsWithResponse request
	GetCharactersCharacterIDMedalsWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDMedalsParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDMedalsResponse, error)

	// GetCharactersCharacterIDMiningWithResponse request
	GetCharactersCharacterIDMiningWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDMiningParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDMiningResponse, error)

	// GetCharactersCharacterIDNotificationsWithResponse request
	GetCharactersCharacterIDNotificationsWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDNotificationsParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDNotificationsResponse, error)

	// GetCharactersCharacterIDNotificationsContactsWithResponse request
	GetCharactersCharacterIDNotificationsContactsWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDNotificationsContactsParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDNotificationsContactsResponse, error)

	// GetCharactersCharacterIDOnlineWithResponse request
	GetCharactersCharacterIDOnlineWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDOnlineParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDOnlineResponse, error)

	// GetCharactersCharacterIDOrdersWithResponse request
	GetCharactersCharacterIDOrdersWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDOrdersParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDOrdersResponse, error)

	// GetCharactersCharacterIDOrdersHistoryWithResponse request
	GetCharactersCharacterIDOrdersHistoryWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDOrdersHistoryParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDOrdersHistoryResponse, error)

	// GetCharactersCharacterIDPlanetsWithResponse request
	GetCharactersCharacterIDPlanetsWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDPlanetsParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDPlanetsResponse, error)

	// GetCharactersCharacterIDPlanetsPlanetIDWithResponse request
	GetCharactersCharacterIDPlanetsPlanetIDWithResponse(ctx context.Context, characterID CharacterID, planetID int64, params *GetCharactersCharacterIDPlanetsPlanetIDParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDPlanetsPlanetIDResponse, error)

	// GetCharactersCharacterIDPortraitWithResponse request
	GetCharactersCharacterIDPortraitWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDPortraitParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDPortraitResponse, error)

	// GetCharactersCharacterIDRolesWithResponse request
	GetCharactersCharacterIDRolesWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDRolesParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDRolesResponse, error)

	// GetCharactersCharacterIDSearchWithResponse request
	GetCharactersCharacterIDSearchWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDSearchParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDSearchResponse, error)

	// GetCharactersCharacterIDShipWithResponse request
	GetCharactersCharacterIDShipWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDShipParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDShipResponse, error)

	// GetCharactersCharacterIDSkillqueueWithResponse request
	GetCharactersCharacterIDSkillqueueWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDSkillqueueParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDSkillqueueResponse, error)

	// GetCharactersCharacterIDSkillsWithResponse request
	GetCharactersCharacterIDSkillsWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDSkillsParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDSkillsResponse, error)

	// GetCharactersCharacterIDStandingsWithResponse request
	GetCharactersCharacterIDStandingsWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDStandingsParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDStandingsResponse, error)

	// GetCharactersCharacterIDTitlesWithResponse request
	GetCharactersCharacterIDTitlesWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDTitlesParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDTitlesResponse, error)

	// GetCharactersCharacterIDWalletWithResponse request
	GetCharactersCharacterIDWalletWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDWalletParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDWalletResponse, error)

	// GetCharactersCharacterIDWalletJournalWithResponse request
	GetCharactersCharacterIDWalletJournalWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDWalletJournalParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDWalletJournalResponse, error)

	// GetCharactersCharacterIDWalletTransactionsWithResponse request
	GetCharactersCharacterIDWalletTransactionsWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDWalletTransactionsParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDWalletTransactionsResponse, error)

	// GetContractsPublicBidsContractIDWithResponse request
	GetContractsPublicBidsContractIDWithResponse(ctx context.Context, contractID int64, params *GetContractsPublicBidsContractIDParams, reqEditors ...RequestEditorFn) (*GetContractsPublicBidsContractIDResponse, error)

	// GetContractsPublicItemsContractIDWithResponse request
	GetContractsPublicItemsContractIDWithResponse(ctx context.Context, contractID int64, params *GetContractsPublicItemsContractIDParams, reqEditors ...RequestEditorFn) (*GetContractsPublicItemsContractIDResponse, error)

	// GetContractsPublicRegionIDWithResponse request
	GetContractsPublicRegionIDWithResponse(ctx context.Context, regionID int64, params *GetContractsPublicRegionIDParams, reqEditors ...RequestEditorFn) (*GetContractsPublicRegionIDResponse, error)

	// GetCorporationCorporationIDMiningExtractionsWithResponse request
	GetCorporationCorporationIDMiningExtractionsWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationCorporationIDMiningExtractionsParams, reqEditors ...RequestEditorFn) (*GetCorporationCorporationIDMiningExtractionsResponse, error)

	// GetCorporationCorporationIDMiningObserversWithResponse request
	GetCorporationCorporationIDMiningObserversWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationCorporationIDMiningObserversParams, reqEditors ...RequestEditorFn) (*GetCorporationCorporationIDMiningObserversResponse, error)

	// GetCorporationCorporationIDMiningObserversObserverIDWithResponse request
	GetCorporationCorporationIDMiningObserversObserverIDWithResponse(ctx context.Context, corporationID CorporationID, observerID int64, params *GetCorporationCorporationIDMiningObserversObserverIDParams, reqEditors ...RequestEditorFn) (*GetCorporationCorporationIDMiningObserversObserverIDResponse, error)

	// GetCorporationsNpccorpsWithResponse request
	GetCorporationsNpccorpsWithResponse(ctx context.Context, params *GetCorporationsNpccorpsParams, reqEditors ...RequestEditorFn) (*GetCorporationsNpccorpsResponse, error)

	// GetCorporationsCorporationIDWithResponse request
	GetCorporationsCorporationIDWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDResponse, error)

	// GetCorporationsCorporationIDAlliancehistoryWithResponse request
	GetCorporationsCorporationIDAlliancehistoryWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDAlliancehistoryParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDAlliancehistoryResponse, error)

	// GetCorporationsCorporationIDAssetsWithResponse request
	GetCorporationsCorporationIDAssetsWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDAssetsParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDAssetsResponse, error)

	// PostCorporationsCorporationIDAssetsLocationsWithBodyWithResponse request with any body
	PostCorporationsCorporationIDAssetsLocationsWithBodyWithResponse(ctx context.Context, corporationID CorporationID, params *PostCorporationsCorporationIDAssetsLocationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCorporationsCorporationIDAssetsLocationsResponse, error)

	PostCorporationsCorporationIDAssetsLocationsWithResponse(ctx context.Context, corporationID CorporationID, params *PostCorporationsCorporationIDAssetsLocationsParams, body PostCorporationsCorporationIDAssetsLocationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCorporationsCorporationIDAssetsLocationsResponse, error)

	// PostCorporationsCorporationIDAssetsNamesWithBodyWithResponse request with any body
	PostCorporationsCorporationIDAssetsNamesWithBodyWithResponse(ctx context.Context, corporationID CorporationID, params *PostCorporationsCorporationIDAssetsNamesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCorporationsCorporationIDAssetsNamesResponse, error)

	PostCorporationsCorporationIDAssetsNamesWithResponse(ctx context.Context, corporationID CorporationID, params *PostCorporationsCorporationIDAssetsNamesParams, body PostCorporationsCorporationIDAssetsNamesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCorporationsCorporationIDAssetsNamesResponse, error)

	// GetCorporationsCorporationIDBlueprintsWithResponse request
	GetCorporationsCorporationIDBlueprintsWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDBlueprintsParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDBlueprintsResponse, error)

	// GetCorporationsCorporationIDContactsWithResponse request
	GetCorporationsCorporationIDContactsWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDContactsParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDContactsResponse, error)

	// GetCorporationsCorporationIDContactsLabelsWithResponse request
	GetCorporationsCorporationIDContactsLabelsWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDContactsLabelsParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDContactsLabelsResponse, error)

	// GetCorporationsCorporationIDContainersLogsWithResponse request
	GetCorporationsCorporationIDContainersLogsWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDContainersLogsParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDContainersLogsResponse, error)

	// GetCorporationsCorporationIDContractsWithResponse request
	GetCorporationsCorporationIDContractsWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDContractsParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDContractsResponse, error)

	// GetCorporationsCorporationIDContractsContractIDBidsWithResponse request
	GetCorporationsCorporationIDContractsContractIDBidsWithResponse(ctx context.Context, corporationID CorporationID, contractID int64, params *GetCorporationsCorporationIDContractsContractIDBidsParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDContractsContractIDBidsResponse, error)

	// GetCorporationsCorporationIDContractsContractIDItemsWithResponse request
	GetCorporationsCorporationIDContractsContractIDItemsWithResponse(ctx context.Context, corporationID CorporationID, contractID int64, params *GetCorporationsCorporationIDContractsContractIDItemsParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDContractsContractIDItemsResponse, error)

	// GetCorporationsCorporationIDCustomsOfficesWithResponse request
	GetCorporationsCorporationIDCustomsOfficesWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDCustomsOfficesParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDCustomsOfficesResponse, error)

	// GetCorporationsCorporationIDDivisionsWithResponse request
	GetCorporationsCorporationIDDivisionsWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDDivisionsParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDDivisionsResponse, error)

	// GetCorporationsCorporationIDFacilitiesWithResponse request
	GetCorporationsCorporationIDFacilitiesWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDFacilitiesParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDFacilitiesResponse, error)

	// GetCorporationsCorporationIDFwStatsWithResponse request
	GetCorporationsCorporationIDFwStatsWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDFwStatsParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDFwStatsResponse, error)

	// GetCorporationsCorporationIDIconsWithResponse request
	GetCorporationsCorporationIDIconsWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDIconsParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDIconsResponse, error)

	// GetCorporationsCorporationIDIndustryJobsWithResponse request
	GetCorporationsCorporationIDIndustryJobsWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDIndustryJobsParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDIndustryJobsResponse, error)

	// GetCorporationsCorporationIDKillmailsRecentWithResponse request
	GetCorporationsCorporationIDKillmailsRecentWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDKillmailsRecentParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDKillmailsRecentResponse, error)

	// GetCorporationsCorporationIDMedalsWithResponse request
	GetCorporationsCorporationIDMedalsWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDMedalsParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDMedalsResponse, error)

	// GetCorporationsCorporationIDMedalsIssuedWithResponse request
	GetCorporationsCorporationIDMedalsIssuedWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDMedalsIssuedParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDMedalsIssuedResponse, error)

	// GetCorporationsCorporationIDMembersWithResponse request
	GetCorporationsCorporationIDMembersWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDMembersParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDMembersResponse, error)

	// GetCorporationsCorporationIDMembersLimitWithResponse request
	GetCorporationsCorporationIDMembersLimitWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDMembersLimitParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDMembersLimitResponse, error)

	// GetCorporationsCorporationIDMembersTitlesWithResponse request
	GetCorporationsCorporationIDMembersTitlesWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDMembersTitlesParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDMembersTitlesResponse, error)

	// GetCorporationsCorporationIDMembertrackingWithResponse request
	GetCorporationsCorporationIDMembertrackingWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDMembertrackingParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDMembertrackingResponse, error)

	// GetCorporationsCorporationIDOrdersWithResponse request
	GetCorporationsCorporationIDOrdersWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDOrdersParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDOrdersResponse, error)

	// GetCorporationsCorporationIDOrdersHistoryWithResponse request
	GetCorporationsCorporationIDOrdersHistoryWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDOrdersHistoryParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDOrdersHistoryResponse, error)

	// GetCorporationsCorporationIDRolesWithResponse request
	GetCorporationsCorporationIDRolesWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDRolesParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDRolesResponse, error)

	// GetCorporationsCorporationIDRolesHistoryWithResponse request
	GetCorporationsCorporationIDRolesHistoryWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDRolesHistoryParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDRolesHistoryResponse, error)

	// GetCorporationsCorporationIDShareholdersWithResponse request
	GetCorporationsCorporationIDShareholdersWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDShareholdersParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDShareholdersResponse, error)

	// GetCorporationsCorporationIDStandingsWithResponse request
	GetCorporationsCorporationIDStandingsWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDStandingsParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDStandingsResponse, error)

	// GetCorporationsCorporationIDStarbasesWithResponse request
	GetCorporationsCorporationIDStarbasesWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDStarbasesParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDStarbasesResponse, error)

	// GetCorporationsCorporationIDStarbasesStarbaseIDWithResponse request
	GetCorporationsCorporationIDStarbasesStarbaseIDWithResponse(ctx context.Context, corporationID CorporationID, starbaseID int64, params *GetCorporationsCorporationIDStarbasesStarbaseIDParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDStarbasesStarbaseIDResponse, error)

	// GetCorporationsCorporationIDStructuresWithResponse request
	GetCorporationsCorporationIDStructuresWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDStructuresParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDStructuresResponse, error)

	// GetCorporationsCorporationIDTitlesWithResponse request
	GetCorporationsCorporationIDTitlesWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDTitlesParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDTitlesResponse, error)

	// GetCorporationsCorporationIDWalletsWithResponse request
	GetCorporationsCorporationIDWalletsWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDWalletsParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDWalletsResponse, error)

	// GetCorporationsCorporationIDWalletsDivisionJournalWithResponse request
	GetCorporationsCorporationIDWalletsDivisionJournalWithResponse(ctx context.Context, corporationID CorporationID, division int64, params *GetCorporationsCorporationIDWalletsDivisionJournalParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDWalletsDivisionJournalResponse, error)

	// GetCorporationsCorporationIDWalletsDivisionTransactionsWithResponse request
	GetCorporationsCorporationIDWalletsDivisionTransactionsWithResponse(ctx context.Context, corporationID CorporationID, division int64, params *GetCorporationsCorporationIDWalletsDivisionTransactionsParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDWalletsDivisionTransactionsResponse, error)

	// GetDogmaAttributesWithResponse request
	GetDogmaAttributesWithResponse(ctx context.Context, params *GetDogmaAttributesParams, reqEditors ...RequestEditorFn) (*GetDogmaAttributesResponse, error)

	// GetDogmaAttributesAttributeIDWithResponse request
	GetDogmaAttributesAttributeIDWithResponse(ctx context.Context, attributeID int64, params *GetDogmaAttributesAttributeIDParams, reqEditors ...RequestEditorFn) (*GetDogmaAttributesAttributeIDResponse, error)

	// GetDogmaDynamicItemsTypeIDItemIDWithResponse request
	GetDogmaDynamicItemsTypeIDItemIDWithResponse(ctx context.Context, typeID int64, itemID int64, params *GetDogmaDynamicItemsTypeIDItemIDParams, reqEditors ...RequestEditorFn) (*GetDogmaDynamicItemsTypeIDItemIDResponse, error)

	// GetDogmaEffectsWithResponse request
	GetDogmaEffectsWithResponse(ctx context.Context, params *GetDogmaEffectsParams, reqEditors ...RequestEditorFn) (*GetDogmaEffectsResponse, error)

	// GetDogmaEffectsEffectIDWithResponse request
	GetDogmaEffectsEffectIDWithResponse(ctx context.Context, effectID int64, params *GetDogmaEffectsEffectIDParams, reqEditors ...RequestEditorFn) (*GetDogmaEffectsEffectIDResponse, error)

	// GetFleetsFleetIDWithResponse request
	GetFleetsFleetIDWithResponse(ctx context.Context, fleetID int64, params *GetFleetsFleetIDParams, reqEditors ...RequestEditorFn) (*GetFleetsFleetIDResponse, error)

	// PutFleetsFleetIDWithBodyWithResponse request with any body
	PutFleetsFleetIDWithBodyWithResponse(ctx context.Context, fleetID int64, params *PutFleetsFleetIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutFleetsFleetIDResponse, error)

	PutFleetsFleetIDWithResponse(ctx context.Context, fleetID int64, params *PutFleetsFleetIDParams, body PutFleetsFleetIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutFleetsFleetIDResponse, error)

	// GetFleetsFleetIDMembersWithResponse request
	GetFleetsFleetIDMembersWithResponse(ctx context.Context, fleetID int64, params *GetFleetsFleetIDMembersParams, reqEditors ...RequestEditorFn) (*GetFleetsFleetIDMembersResponse, error)

	// PostFleetsFleetIDMembersWithBodyWithResponse request with any body
	PostFleetsFleetIDMembersWithBodyWithResponse(ctx context.Context, fleetID int64, params *PostFleetsFleetIDMembersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFleetsFleetIDMembersResponse, error)

	PostFleetsFleetIDMembersWithResponse(ctx context.Context, fleetID int64, params *PostFleetsFleetIDMembersParams, body PostFleetsFleetIDMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFleetsFleetIDMembersResponse, error)

	// DeleteFleetsFleetIDMembersMemberIDWithResponse request
	DeleteFleetsFleetIDMembersMemberIDWithResponse(ctx context.Context, fleetID int64, memberID int64, params *DeleteFleetsFleetIDMembersMemberIDParams, reqEditors ...RequestEditorFn) (*DeleteFleetsFleetIDMembersMemberIDResponse, error)

	// PutFleetsFleetIDMembersMemberIDWithBodyWithResponse request with any body
	PutFleetsFleetIDMembersMemberIDWithBodyWithResponse(ctx context.Context, fleetID int64, memberID int64, params *PutFleetsFleetIDMembersMemberIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutFleetsFleetIDMembersMemberIDResponse, error)

	PutFleetsFleetIDMembersMemberIDWithResponse(ctx context.Context, fleetID int64, memberID int64, params *PutFleetsFleetIDMembersMemberIDParams, body PutFleetsFleetIDMembersMemberIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutFleetsFleetIDMembersMemberIDResponse, error)

	// DeleteFleetsFleetIDSquadsSquadIDWithResponse request
	DeleteFleetsFleetIDSquadsSquadIDWithResponse(ctx context.Context, fleetID int64, squadID int64, params *DeleteFleetsFleetIDSquadsSquadIDParams, reqEditors ...RequestEditorFn) (*DeleteFleetsFleetIDSquadsSquadIDResponse, error)

	// PutFleetsFleetIDSquadsSquadIDWithBodyWithResponse request with any body
	PutFleetsFleetIDSquadsSquadIDWithBodyWithResponse(ctx context.Context, fleetID int64, squadID int64, params *PutFleetsFleetIDSquadsSquadIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutFleetsFleetIDSquadsSquadIDResponse, error)

	PutFleetsFleetIDSquadsSquadIDWithResponse(ctx context.Context, fleetID int64, squadID int64, params *PutFleetsFleetIDSquadsSquadIDParams, body PutFleetsFleetIDSquadsSquadIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutFleetsFleetIDSquadsSquadIDResponse, error)

	// GetFleetsFleetIDWingsWithResponse request
	GetFleetsFleetIDWingsWithResponse(ctx context.Context, fleetID int64, params *GetFleetsFleetIDWingsParams, reqEditors ...RequestEditorFn) (*GetFleetsFleetIDWingsResponse, error)

	// PostFleetsFleetIDWingsWithResponse request
	PostFleetsFleetIDWingsWithResponse(ctx context.Context, fleetID int64, params *PostFleetsFleetIDWingsParams, reqEditors ...RequestEditorFn) (*PostFleetsFleetIDWingsResponse, error)

	// DeleteFleetsFleetIDWingsWingIDWithResponse request
	DeleteFleetsFleetIDWingsWingIDWithResponse(ctx context.Context, fleetID int64, wingID int64, params *DeleteFleetsFleetIDWingsWingIDParams, reqEditors ...RequestEditorFn) (*DeleteFleetsFleetIDWingsWingIDResponse, error)

	// PutFleetsFleetIDWingsWingIDWithBodyWithResponse request with any body
	PutFleetsFleetIDWingsWingIDWithBodyWithResponse(ctx context.Context, fleetID int64, wingID int64, params *PutFleetsFleetIDWingsWingIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutFleetsFleetIDWingsWingIDResponse, error)

	PutFleetsFleetIDWingsWingIDWithResponse(ctx context.Context, fleetID int64, wingID int64, params *PutFleetsFleetIDWingsWingIDParams, body PutFleetsFleetIDWingsWingIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutFleetsFleetIDWingsWingIDResponse, error)

	// PostFleetsFleetIDWingsWingIDSquadsWithResponse request
	PostFleetsFleetIDWingsWingIDSquadsWithResponse(ctx context.Context, fleetID int64, wingID int64, params *PostFleetsFleetIDWingsWingIDSquadsParams, reqEditors ...RequestEditorFn) (*PostFleetsFleetIDWingsWingIDSquadsResponse, error)

	// GetFwLeaderboardsWithResponse request
	GetFwLeaderboardsWithResponse(ctx context.Context, params *GetFwLeaderboardsParams, reqEditors ...RequestEditorFn) (*GetFwLeaderboardsResponse, error)

	// GetFwLeaderboardsCharactersWithResponse request
	GetFwLeaderboardsCharactersWithResponse(ctx context.Context, params *GetFwLeaderboardsCharactersParams, reqEditors ...RequestEditorFn) (*GetFwLeaderboardsCharactersResponse, error)

	// GetFwLeaderboardsCorporationsWithResponse request
	GetFwLeaderboardsCorporationsWithResponse(ctx context.Context, params *GetFwLeaderboardsCorporationsParams, reqEditors ...RequestEditorFn) (*GetFwLeaderboardsCorporationsResponse, error)

	// GetFwStatsWithResponse request
	GetFwStatsWithResponse(ctx context.Context, params *GetFwStatsParams, reqEditors ...RequestEditorFn) (*GetFwStatsResponse, error)

	// GetFwSystemsWithResponse request
	GetFwSystemsWithResponse(ctx context.Context, params *GetFwSystemsParams, reqEditors ...RequestEditorFn) (*GetFwSystemsResponse, error)

	// GetFwWarsWithResponse request
	GetFwWarsWithResponse(ctx context.Context, params *GetFwWarsParams, reqEditors ...RequestEditorFn) (*GetFwWarsResponse, error)

	// GetIncursionsWithResponse request
	GetIncursionsWithResponse(ctx context.Context, params *GetIncursionsParams, reqEditors ...RequestEditorFn) (*GetIncursionsResponse, error)

	// GetIndustryFacilitiesWithResponse request
	GetIndustryFacilitiesWithResponse(ctx context.Context, params *GetIndustryFacilitiesParams, reqEditors ...RequestEditorFn) (*GetIndustryFacilitiesResponse, error)

	// GetIndustrySystemsWithResponse request
	GetIndustrySystemsWithResponse(ctx context.Context, params *GetIndustrySystemsParams, reqEditors ...RequestEditorFn) (*GetIndustrySystemsResponse, error)

	// GetInsurancePricesWithResponse request
	GetInsurancePricesWithResponse(ctx context.Context, params *GetInsurancePricesParams, reqEditors ...RequestEditorFn) (*GetInsurancePricesResponse, error)

	// GetKillmailsKillmailIDKillmailHashWithResponse request
	GetKillmailsKillmailIDKillmailHashWithResponse(ctx context.Context, killmailID int64, killmailHash string, params *GetKillmailsKillmailIDKillmailHashParams, reqEditors ...RequestEditorFn) (*GetKillmailsKillmailIDKillmailHashResponse, error)

	// GetLoyaltyStoresCorporationIDOffersWithResponse request
	GetLoyaltyStoresCorporationIDOffersWithResponse(ctx context.Context, corporationID CorporationID, params *GetLoyaltyStoresCorporationIDOffersParams, reqEditors ...RequestEditorFn) (*GetLoyaltyStoresCorporationIDOffersResponse, error)

	// GetMarketsGroupsWithResponse request
	GetMarketsGroupsWithResponse(ctx context.Context, params *GetMarketsGroupsParams, reqEditors ...RequestEditorFn) (*GetMarketsGroupsResponse, error)

	// GetMarketsGroupsMarketGroupIDWithResponse request
	GetMarketsGroupsMarketGroupIDWithResponse(ctx context.Context, marketGroupID int64, params *GetMarketsGroupsMarketGroupIDParams, reqEditors ...RequestEditorFn) (*GetMarketsGroupsMarketGroupIDResponse, error)

	// GetMarketsPricesWithResponse request
	GetMarketsPricesWithResponse(ctx context.Context, params *GetMarketsPricesParams, reqEditors ...RequestEditorFn) (*GetMarketsPricesResponse, error)

	// GetMarketsStructuresStructureIDWithResponse request
	GetMarketsStructuresStructureIDWithResponse(ctx context.Context, structureID int64, params *GetMarketsStructuresStructureIDParams, reqEditors ...RequestEditorFn) (*GetMarketsStructuresStructureIDResponse, error)

	// GetMarketsRegionIDHistoryWithResponse request
	GetMarketsRegionIDHistoryWithResponse(ctx context.Context, regionID int64, params *GetMarketsRegionIDHistoryParams, reqEditors ...RequestEditorFn) (*GetMarketsRegionIDHistoryResponse, error)

	// GetMarketsRegionIDOrdersWithResponse request
	GetMarketsRegionIDOrdersWithResponse(ctx context.Context, regionID int64, params *GetMarketsRegionIDOrdersParams, reqEditors ...RequestEditorFn) (*GetMarketsRegionIDOrdersResponse, error)

	// GetMarketsRegionIDTypesWithResponse request
	GetMarketsRegionIDTypesWithResponse(ctx context.Context, regionID int64, params *GetMarketsRegionIDTypesParams, reqEditors ...RequestEditorFn) (*GetMarketsRegionIDTypesResponse, error)

	// GetRouteOriginDestinationWithResponse request
	GetRouteOriginDestinationWithResponse(ctx context.Context, origin int64, destination int64, params *GetRouteOriginDestinationParams, reqEditors ...RequestEditorFn) (*GetRouteOriginDestinationResponse, error)

	// GetSovereigntyCampaignsWithResponse request
	GetSovereigntyCampaignsWithResponse(ctx context.Context, params *GetSovereigntyCampaignsParams, reqEditors ...RequestEditorFn) (*GetSovereigntyCampaignsResponse, error)

	// GetSovereigntyMapWithResponse request
	GetSovereigntyMapWithResponse(ctx context.Context, params *GetSovereigntyMapParams, reqEditors ...RequestEditorFn) (*GetSovereigntyMapResponse, error)

	// GetSovereigntyStructuresWithResponse request
	GetSovereigntyStructuresWithResponse(ctx context.Context, params *GetSovereigntyStructuresParams, reqEditors ...RequestEditorFn) (*GetSovereigntyStructuresResponse, error)

	// GetStatusWithResponse request
	GetStatusWithResponse(ctx context.Context, params *GetStatusParams, reqEditors ...RequestEditorFn) (*GetStatusResponse, error)

	// PostUIAutopilotWaypointWithResponse request
	PostUIAutopilotWaypointWithResponse(ctx context.Context, params *PostUIAutopilotWaypointParams, reqEditors ...RequestEditorFn) (*PostUIAutopilotWaypointResponse, error)

	// PostUIOpenwindowContractWithResponse request
	PostUIOpenwindowContractWithResponse(ctx context.Context, params *PostUIOpenwindowContractParams, reqEditors ...RequestEditorFn) (*PostUIOpenwindowContractResponse, error)

	// PostUIOpenwindowInformationWithResponse request
	PostUIOpenwindowInformationWithResponse(ctx context.Context, params *PostUIOpenwindowInformationParams, reqEditors ...RequestEditorFn) (*PostUIOpenwindowInformationResponse, error)

	// PostUIOpenwindowMarketdetailsWithResponse request
	PostUIOpenwindowMarketdetailsWithResponse(ctx context.Context, params *PostUIOpenwindowMarketdetailsParams, reqEditors ...RequestEditorFn) (*PostUIOpenwindowMarketdetailsResponse, error)

	// PostUIOpenwindowNewmailWithBodyWithResponse request with any body
	PostUIOpenwindowNewmailWithBodyWithResponse(ctx context.Context, params *PostUIOpenwindowNewmailParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUIOpenwindowNewmailResponse, error)

	PostUIOpenwindowNewmailWithResponse(ctx context.Context, params *PostUIOpenwindowNewmailParams, body PostUIOpenwindowNewmailJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUIOpenwindowNewmailResponse, error)

	// GetUniverseAncestriesWithResponse request
	GetUniverseAncestriesWithResponse(ctx context.Context, params *GetUniverseAncestriesParams, reqEditors ...RequestEditorFn) (*GetUniverseAncestriesResponse, error)

	// GetUniverseAsteroidBeltsAsteroidBeltIDWithResponse request
	GetUniverseAsteroidBeltsAsteroidBeltIDWithResponse(ctx context.Context, asteroidBeltID int64, params *GetUniverseAsteroidBeltsAsteroidBeltIDParams, reqEditors ...RequestEditorFn) (*GetUniverseAsteroidBeltsAsteroidBeltIDResponse, error)

	// GetUniverseBloodlinesWithResponse request
	GetUniverseBloodlinesWithResponse(ctx context.Context, params *GetUniverseBloodlinesParams, reqEditors ...RequestEditorFn) (*GetUniverseBloodlinesResponse, error)

	// GetUniverseCategoriesWithResponse request
	GetUniverseCategoriesWithResponse(ctx context.Context, params *GetUniverseCategoriesParams, reqEditors ...RequestEditorFn) (*GetUniverseCategoriesResponse, error)

	// GetUniverseCategoriesCategoryIDWithResponse request
	GetUniverseCategoriesCategoryIDWithResponse(ctx context.Context, categoryID int64, params *GetUniverseCategoriesCategoryIDParams, reqEditors ...RequestEditorFn) (*GetUniverseCategoriesCategoryIDResponse, error)

	// GetUniverseConstellationsWithResponse request
	GetUniverseConstellationsWithResponse(ctx context.Context, params *GetUniverseConstellationsParams, reqEditors ...RequestEditorFn) (*GetUniverseConstellationsResponse, error)

	// GetUniverseConstellationsConstellationIDWithResponse request
	GetUniverseConstellationsConstellationIDWithResponse(ctx context.Context, constellationID int64, params *GetUniverseConstellationsConstellationIDParams, reqEditors ...RequestEditorFn) (*GetUniverseConstellationsConstellationIDResponse, error)

	// GetUniverseFactionsWithResponse request
	GetUniverseFactionsWithResponse(ctx context.Context, params *GetUniverseFactionsParams, reqEditors ...RequestEditorFn) (*GetUniverseFactionsResponse, error)

	// GetUniverseGraphicsWithResponse request
	GetUniverseGraphicsWithResponse(ctx context.Context, params *GetUniverseGraphicsParams, reqEditors ...RequestEditorFn) (*GetUniverseGraphicsResponse, error)

	// GetUniverseGraphicsGraphicIDWithResponse request
	GetUniverseGraphicsGraphicIDWithResponse(ctx context.Context, graphicID int64, params *GetUniverseGraphicsGraphicIDParams, reqEditors ...RequestEditorFn) (*GetUniverseGraphicsGraphicIDResponse, error)

	// GetUniverseGroupsWithResponse request
	GetUniverseGroupsWithResponse(ctx context.Context, params *GetUniverseGroupsParams, reqEditors ...RequestEditorFn) (*GetUniverseGroupsResponse, error)

	// GetUniverseGroupsGroupIDWithResponse request
	GetUniverseGroupsGroupIDWithResponse(ctx context.Context, groupID int64, params *GetUniverseGroupsGroupIDParams, reqEditors ...RequestEditorFn) (*GetUniverseGroupsGroupIDResponse, error)

	// PostUniverseIdsWithBodyWithResponse request with any body
	PostUniverseIdsWithBodyWithResponse(ctx context.Context, params *PostUniverseIdsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUniverseIdsResponse, error)

	PostUniverseIdsWithResponse(ctx context.Context, params *PostUniverseIdsParams, body PostUniverseIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUniverseIdsResponse, error)

	// GetUniverseMoonsMoonIDWithResponse request
	GetUniverseMoonsMoonIDWithResponse(ctx context.Context, moonID int64, params *GetUniverseMoonsMoonIDParams, reqEditors ...RequestEditorFn) (*GetUniverseMoonsMoonIDResponse, error)

	// PostUniverseNamesWithBodyWithResponse request with any body
	PostUniverseNamesWithBodyWithResponse(ctx context.Context, params *PostUniverseNamesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUniverseNamesResponse, error)

	PostUniverseNamesWithResponse(ctx context.Context, params *PostUniverseNamesParams, body PostUniverseNamesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUniverseNamesResponse, error)

	// GetUniversePlanetsPlanetIDWithResponse request
	GetUniversePlanetsPlanetIDWithResponse(ctx context.Context, planetID int64, params *GetUniversePlanetsPlanetIDParams, reqEditors ...RequestEditorFn) (*GetUniversePlanetsPlanetIDResponse, error)

	// GetUniverseRacesWithResponse request
	GetUniverseRacesWithResponse(ctx context.Context, params *GetUniverseRacesParams, reqEditors ...RequestEditorFn) (*GetUniverseRacesResponse, error)

	// GetUniverseRegionsWithResponse request
	GetUniverseRegionsWithResponse(ctx context.Context, params *GetUniverseRegionsParams, reqEditors ...RequestEditorFn) (*GetUniverseRegionsResponse, error)

	// GetUniverseRegionsRegionIDWithResponse request
	GetUniverseRegionsRegionIDWithResponse(ctx context.Context, regionID int64, params *GetUniverseRegionsRegionIDParams, reqEditors ...RequestEditorFn) (*GetUniverseRegionsRegionIDResponse, error)

	// GetUniverseSchematicsSchematicIDWithResponse request
	GetUniverseSchematicsSchematicIDWithResponse(ctx context.Context, schematicID int64, params *GetUniverseSchematicsSchematicIDParams, reqEditors ...RequestEditorFn) (*GetUniverseSchematicsSchematicIDResponse, error)

	// GetUniverseStargatesStargateIDWithResponse request
	GetUniverseStargatesStargateIDWithResponse(ctx context.Context, stargateID int64, params *GetUniverseStargatesStargateIDParams, reqEditors ...RequestEditorFn) (*GetUniverseStargatesStargateIDResponse, error)

	// GetUniverseStarsStarIDWithResponse request
	GetUniverseStarsStarIDWithResponse(ctx context.Context, starID int64, params *GetUniverseStarsStarIDParams, reqEditors ...RequestEditorFn) (*GetUniverseStarsStarIDResponse, error)

	// GetUniverseStationsStationIDWithResponse request
	GetUniverseStationsStationIDWithResponse(ctx context.Context, stationID int64, params *GetUniverseStationsStationIDParams, reqEditors ...RequestEditorFn) (*GetUniverseStationsStationIDResponse, error)

	// GetUniverseStructuresWithResponse request
	GetUniverseStructuresWithResponse(ctx context.Context, params *GetUniverseStructuresParams, reqEditors ...RequestEditorFn) (*GetUniverseStructuresResponse, error)

	// GetUniverseStructuresStructureIDWithResponse request
	GetUniverseStructuresStructureIDWithResponse(ctx context.Context, structureID int64, params *GetUniverseStructuresStructureIDParams, reqEditors ...RequestEditorFn) (*GetUniverseStructuresStructureIDResponse, error)

	// GetUniverseSystemJumpsWithResponse request
	GetUniverseSystemJumpsWithResponse(ctx context.Context, params *GetUniverseSystemJumpsParams, reqEditors ...RequestEditorFn) (*GetUniverseSystemJumpsResponse, error)

	// GetUniverseSystemKillsWithResponse request
	GetUniverseSystemKillsWithResponse(ctx context.Context, params *GetUniverseSystemKillsParams, reqEditors ...RequestEditorFn) (*GetUniverseSystemKillsResponse, error)

	// GetUniverseSystemsWithResponse request
	GetUniverseSystemsWithResponse(ctx context.Context, params *GetUniverseSystemsParams, reqEditors ...RequestEditorFn) (*GetUniverseSystemsResponse, error)

	// GetUniverseSystemsSystemIDWithResponse request
	GetUniverseSystemsSystemIDWithResponse(ctx context.Context, systemID int64, params *GetUniverseSystemsSystemIDParams, reqEditors ...RequestEditorFn) (*GetUniverseSystemsSystemIDResponse, error)

	// GetUniverseTypesWithResponse request
	GetUniverseTypesWithResponse(ctx context.Context, params *GetUniverseTypesParams, reqEditors ...RequestEditorFn) (*GetUniverseTypesResponse, error)

	// GetUniverseTypesTypeIDWithResponse request
	GetUniverseTypesTypeIDWithResponse(ctx context.Context, typeID int64, params *GetUniverseTypesTypeIDParams, reqEditors ...RequestEditorFn) (*GetUniverseTypesTypeIDResponse, error)

	// GetWarsWithResponse request
	GetWarsWithResponse(ctx context.Context, params *GetWarsParams, reqEditors ...RequestEditorFn) (*GetWarsResponse, error)

	// GetWarsWarIDWithResponse request
	GetWarsWarIDWithResponse(ctx context.Context, warID int64, params *GetWarsWarIDParams, reqEditors ...RequestEditorFn) (*GetWarsWarIDResponse, error)

	// GetWarsWarIDKillmailsWithResponse request
	GetWarsWarIDKillmailsWithResponse(ctx context.Context, warID int64, params *GetWarsWarIDKillmailsParams, reqEditors ...RequestEditorFn) (*GetWarsWarIDKillmailsResponse, error)
}

type GetAlliancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AlliancesGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetAlliancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlliancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlliancesAllianceIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AlliancesAllianceIDGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetAlliancesAllianceIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlliancesAllianceIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlliancesAllianceIDContactsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AlliancesAllianceIDContactsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetAlliancesAllianceIDContactsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlliancesAllianceIDContactsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlliancesAllianceIDContactsLabelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AlliancesAllianceIDContactsLabelsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetAlliancesAllianceIDContactsLabelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlliancesAllianceIDContactsLabelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlliancesAllianceIDCorporationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AlliancesAllianceIDCorporationsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetAlliancesAllianceIDCorporationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlliancesAllianceIDCorporationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlliancesAllianceIDIconsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AlliancesAllianceIDIconsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetAlliancesAllianceIDIconsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlliancesAllianceIDIconsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCharactersAffiliationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharactersAffiliationPost
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PostCharactersAffiliationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCharactersAffiliationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharactersCharacterIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharactersCharacterIDGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCharactersCharacterIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharactersCharacterIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharactersCharacterIDAgentsResearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharactersCharacterIDAgentsResearchGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCharactersCharacterIDAgentsResearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharactersCharacterIDAgentsResearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharactersCharacterIDAssetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharactersCharacterIDAssetsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCharactersCharacterIDAssetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharactersCharacterIDAssetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCharactersCharacterIDAssetsLocationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharactersCharacterIDAssetsLocationsPost
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PostCharactersCharacterIDAssetsLocationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCharactersCharacterIDAssetsLocationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCharactersCharacterIDAssetsNamesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharactersCharacterIDAssetsNamesPost
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PostCharactersCharacterIDAssetsNamesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCharactersCharacterIDAssetsNamesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharactersCharacterIDAttributesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharactersCharacterIDAttributesGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCharactersCharacterIDAttributesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharactersCharacterIDAttributesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharactersCharacterIDBlueprintsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharactersCharacterIDBlueprintsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCharactersCharacterIDBlueprintsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharactersCharacterIDBlueprintsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharactersCharacterIDCalendarResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharactersCharacterIDCalendarGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCharactersCharacterIDCalendarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharactersCharacterIDCalendarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharactersCharacterIDCalendarEventIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharactersCharacterIDCalendarEventIDGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCharactersCharacterIDCalendarEventIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharactersCharacterIDCalendarEventIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCharactersCharacterIDCalendarEventIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *interface{}
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PutCharactersCharacterIDCalendarEventIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCharactersCharacterIDCalendarEventIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharactersCharacterIDCalendarEventIDAttendeesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharactersCharacterIDCalendarEventIDAttendeesGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCharactersCharacterIDCalendarEventIDAttendeesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharactersCharacterIDCalendarEventIDAttendeesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharactersCharacterIDClonesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharactersCharacterIDClonesGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCharactersCharacterIDClonesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharactersCharacterIDClonesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCharactersCharacterIDContactsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *interface{}
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r DeleteCharactersCharacterIDContactsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCharactersCharacterIDContactsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharactersCharacterIDContactsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharactersCharacterIDContactsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCharactersCharacterIDContactsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharactersCharacterIDContactsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCharactersCharacterIDContactsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CharactersCharacterIDContactsPost
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PostCharactersCharacterIDContactsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCharactersCharacterIDContactsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCharactersCharacterIDContactsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *interface{}
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PutCharactersCharacterIDContactsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCharactersCharacterIDContactsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharactersCharacterIDContactsLabelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharactersCharacterIDContactsLabelsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCharactersCharacterIDContactsLabelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharactersCharacterIDContactsLabelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharactersCharacterIDContractsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharactersCharacterIDContractsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCharactersCharacterIDContractsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharactersCharacterIDContractsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharactersCharacterIDContractsContractIDBidsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharactersCharacterIDContractsContractIDBidsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCharactersCharacterIDContractsContractIDBidsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharactersCharacterIDContractsContractIDBidsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharactersCharacterIDContractsContractIDItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharactersCharacterIDContractsContractIDItemsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCharactersCharacterIDContractsContractIDItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharactersCharacterIDContractsContractIDItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharactersCharacterIDCorporationhistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharactersCharacterIDCorporationhistoryGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCharactersCharacterIDCorporationhistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharactersCharacterIDCorporationhistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCharactersCharacterIDCspaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CharactersCharacterIDCspaPost
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PostCharactersCharacterIDCspaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCharactersCharacterIDCspaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharactersCharacterIDFatigueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharactersCharacterIDFatigueGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCharactersCharacterIDFatigueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharactersCharacterIDFatigueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharactersCharacterIDFittingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharactersCharacterIDFittingsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCharactersCharacterIDFittingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharactersCharacterIDFittingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCharactersCharacterIDFittingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CharactersCharacterIDFittingsPost
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PostCharactersCharacterIDFittingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCharactersCharacterIDFittingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCharactersCharacterIDFittingsFittingIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *interface{}
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r DeleteCharactersCharacterIDFittingsFittingIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCharactersCharacterIDFittingsFittingIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharactersCharacterIDFleetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharactersCharacterIDFleetGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCharactersCharacterIDFleetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharactersCharacterIDFleetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharactersCharacterIDFwStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharactersCharacterIDFwStatsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCharactersCharacterIDFwStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharactersCharacterIDFwStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharactersCharacterIDImplantsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharactersCharacterIDImplantsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCharactersCharacterIDImplantsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharactersCharacterIDImplantsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharactersCharacterIDIndustryJobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharactersCharacterIDIndustryJobsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCharactersCharacterIDIndustryJobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharactersCharacterIDIndustryJobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharactersCharacterIDKillmailsRecentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharactersCharacterIDKillmailsRecentGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCharactersCharacterIDKillmailsRecentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharactersCharacterIDKillmailsRecentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharactersCharacterIDLocationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharactersCharacterIDLocationGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCharactersCharacterIDLocationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharactersCharacterIDLocationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharactersCharacterIDLoyaltyPointsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharactersCharacterIDLoyaltyPointsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCharactersCharacterIDLoyaltyPointsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharactersCharacterIDLoyaltyPointsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharactersCharacterIDMailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharactersCharacterIDMailGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCharactersCharacterIDMailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharactersCharacterIDMailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCharactersCharacterIDMailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CharactersCharacterIDMailPost
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PostCharactersCharacterIDMailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCharactersCharacterIDMailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharactersCharacterIDMailLabelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharactersCharacterIDMailLabelsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCharactersCharacterIDMailLabelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharactersCharacterIDMailLabelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCharactersCharacterIDMailLabelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CharactersCharacterIDMailLabelsPost
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PostCharactersCharacterIDMailLabelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCharactersCharacterIDMailLabelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCharactersCharacterIDMailLabelsLabelIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *interface{}
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r DeleteCharactersCharacterIDMailLabelsLabelIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCharactersCharacterIDMailLabelsLabelIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharactersCharacterIDMailListsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharactersCharacterIDMailListsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCharactersCharacterIDMailListsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharactersCharacterIDMailListsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCharactersCharacterIDMailMailIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *interface{}
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r DeleteCharactersCharacterIDMailMailIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCharactersCharacterIDMailMailIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharactersCharacterIDMailMailIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharactersCharacterIDMailMailIDGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCharactersCharacterIDMailMailIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharactersCharacterIDMailMailIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCharactersCharacterIDMailMailIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *interface{}
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PutCharactersCharacterIDMailMailIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCharactersCharacterIDMailMailIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharactersCharacterIDMedalsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharactersCharacterIDMedalsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCharactersCharacterIDMedalsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharactersCharacterIDMedalsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharactersCharacterIDMiningResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharactersCharacterIDMiningGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCharactersCharacterIDMiningResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharactersCharacterIDMiningResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharactersCharacterIDNotificationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharactersCharacterIDNotificationsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCharactersCharacterIDNotificationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharactersCharacterIDNotificationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharactersCharacterIDNotificationsContactsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharactersCharacterIDNotificationsContactsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCharactersCharacterIDNotificationsContactsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharactersCharacterIDNotificationsContactsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharactersCharacterIDOnlineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharactersCharacterIDOnlineGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCharactersCharacterIDOnlineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharactersCharacterIDOnlineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharactersCharacterIDOrdersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharactersCharacterIDOrdersGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCharactersCharacterIDOrdersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharactersCharacterIDOrdersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharactersCharacterIDOrdersHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharactersCharacterIDOrdersHistoryGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCharactersCharacterIDOrdersHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharactersCharacterIDOrdersHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharactersCharacterIDPlanetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharactersCharacterIDPlanetsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCharactersCharacterIDPlanetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharactersCharacterIDPlanetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharactersCharacterIDPlanetsPlanetIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharactersCharacterIDPlanetsPlanetIDGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCharactersCharacterIDPlanetsPlanetIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharactersCharacterIDPlanetsPlanetIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharactersCharacterIDPortraitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharactersCharacterIDPortraitGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCharactersCharacterIDPortraitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharactersCharacterIDPortraitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharactersCharacterIDRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharactersCharacterIDRolesGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCharactersCharacterIDRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharactersCharacterIDRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharactersCharacterIDSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharactersCharacterIDSearchGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCharactersCharacterIDSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharactersCharacterIDSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharactersCharacterIDShipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharactersCharacterIDShipGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCharactersCharacterIDShipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharactersCharacterIDShipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharactersCharacterIDSkillqueueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharactersCharacterIDSkillqueueGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCharactersCharacterIDSkillqueueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharactersCharacterIDSkillqueueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharactersCharacterIDSkillsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharactersCharacterIDSkillsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCharactersCharacterIDSkillsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharactersCharacterIDSkillsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharactersCharacterIDStandingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharactersCharacterIDStandingsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCharactersCharacterIDStandingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharactersCharacterIDStandingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharactersCharacterIDTitlesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharactersCharacterIDTitlesGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCharactersCharacterIDTitlesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharactersCharacterIDTitlesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharactersCharacterIDWalletResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharactersCharacterIDWalletGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCharactersCharacterIDWalletResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharactersCharacterIDWalletResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharactersCharacterIDWalletJournalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharactersCharacterIDWalletJournalGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCharactersCharacterIDWalletJournalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharactersCharacterIDWalletJournalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharactersCharacterIDWalletTransactionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharactersCharacterIDWalletTransactionsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCharactersCharacterIDWalletTransactionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharactersCharacterIDWalletTransactionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContractsPublicBidsContractIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContractsPublicBidsContractIDGet
	JSON204      *interface{}
}

// Status returns HTTPResponse.Status
func (r GetContractsPublicBidsContractIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContractsPublicBidsContractIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContractsPublicItemsContractIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContractsPublicItemsContractIDGet
	JSON204      *interface{}
}

// Status returns HTTPResponse.Status
func (r GetContractsPublicItemsContractIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContractsPublicItemsContractIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContractsPublicRegionIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContractsPublicRegionIDGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetContractsPublicRegionIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContractsPublicRegionIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCorporationCorporationIDMiningExtractionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CorporationCorporationIDMiningExtractionsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCorporationCorporationIDMiningExtractionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCorporationCorporationIDMiningExtractionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCorporationCorporationIDMiningObserversResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CorporationCorporationIDMiningObserversGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCorporationCorporationIDMiningObserversResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCorporationCorporationIDMiningObserversResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCorporationCorporationIDMiningObserversObserverIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CorporationCorporationIDMiningObserversObserverIDGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCorporationCorporationIDMiningObserversObserverIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCorporationCorporationIDMiningObserversObserverIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCorporationsNpccorpsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CorporationsNpccorpsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCorporationsNpccorpsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCorporationsNpccorpsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCorporationsCorporationIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CorporationsCorporationIDGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCorporationsCorporationIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCorporationsCorporationIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCorporationsCorporationIDAlliancehistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CorporationsCorporationIDAlliancehistoryGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCorporationsCorporationIDAlliancehistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCorporationsCorporationIDAlliancehistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCorporationsCorporationIDAssetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CorporationsCorporationIDAssetsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCorporationsCorporationIDAssetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCorporationsCorporationIDAssetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCorporationsCorporationIDAssetsLocationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CorporationsCorporationIDAssetsLocationsPost
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PostCorporationsCorporationIDAssetsLocationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCorporationsCorporationIDAssetsLocationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCorporationsCorporationIDAssetsNamesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CorporationsCorporationIDAssetsNamesPost
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PostCorporationsCorporationIDAssetsNamesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCorporationsCorporationIDAssetsNamesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCorporationsCorporationIDBlueprintsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CorporationsCorporationIDBlueprintsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCorporationsCorporationIDBlueprintsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCorporationsCorporationIDBlueprintsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCorporationsCorporationIDContactsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CorporationsCorporationIDContactsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCorporationsCorporationIDContactsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCorporationsCorporationIDContactsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCorporationsCorporationIDContactsLabelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CorporationsCorporationIDContactsLabelsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCorporationsCorporationIDContactsLabelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCorporationsCorporationIDContactsLabelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCorporationsCorporationIDContainersLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CorporationsCorporationIDContainersLogsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCorporationsCorporationIDContainersLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCorporationsCorporationIDContainersLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCorporationsCorporationIDContractsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CorporationsCorporationIDContractsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCorporationsCorporationIDContractsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCorporationsCorporationIDContractsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCorporationsCorporationIDContractsContractIDBidsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CorporationsCorporationIDContractsContractIDBidsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCorporationsCorporationIDContractsContractIDBidsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCorporationsCorporationIDContractsContractIDBidsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCorporationsCorporationIDContractsContractIDItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CorporationsCorporationIDContractsContractIDItemsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCorporationsCorporationIDContractsContractIDItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCorporationsCorporationIDContractsContractIDItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCorporationsCorporationIDCustomsOfficesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CorporationsCorporationIDCustomsOfficesGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCorporationsCorporationIDCustomsOfficesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCorporationsCorporationIDCustomsOfficesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCorporationsCorporationIDDivisionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CorporationsCorporationIDDivisionsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCorporationsCorporationIDDivisionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCorporationsCorporationIDDivisionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCorporationsCorporationIDFacilitiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CorporationsCorporationIDFacilitiesGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCorporationsCorporationIDFacilitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCorporationsCorporationIDFacilitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCorporationsCorporationIDFwStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CorporationsCorporationIDFwStatsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCorporationsCorporationIDFwStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCorporationsCorporationIDFwStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCorporationsCorporationIDIconsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CorporationsCorporationIDIconsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCorporationsCorporationIDIconsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCorporationsCorporationIDIconsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCorporationsCorporationIDIndustryJobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CorporationsCorporationIDIndustryJobsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCorporationsCorporationIDIndustryJobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCorporationsCorporationIDIndustryJobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCorporationsCorporationIDKillmailsRecentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CorporationsCorporationIDKillmailsRecentGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCorporationsCorporationIDKillmailsRecentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCorporationsCorporationIDKillmailsRecentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCorporationsCorporationIDMedalsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CorporationsCorporationIDMedalsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCorporationsCorporationIDMedalsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCorporationsCorporationIDMedalsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCorporationsCorporationIDMedalsIssuedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CorporationsCorporationIDMedalsIssuedGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCorporationsCorporationIDMedalsIssuedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCorporationsCorporationIDMedalsIssuedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCorporationsCorporationIDMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CorporationsCorporationIDMembersGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCorporationsCorporationIDMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCorporationsCorporationIDMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCorporationsCorporationIDMembersLimitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CorporationsCorporationIDMembersLimitGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCorporationsCorporationIDMembersLimitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCorporationsCorporationIDMembersLimitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCorporationsCorporationIDMembersTitlesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CorporationsCorporationIDMembersTitlesGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCorporationsCorporationIDMembersTitlesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCorporationsCorporationIDMembersTitlesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCorporationsCorporationIDMembertrackingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CorporationsCorporationIDMembertrackingGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCorporationsCorporationIDMembertrackingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCorporationsCorporationIDMembertrackingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCorporationsCorporationIDOrdersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CorporationsCorporationIDOrdersGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCorporationsCorporationIDOrdersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCorporationsCorporationIDOrdersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCorporationsCorporationIDOrdersHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CorporationsCorporationIDOrdersHistoryGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCorporationsCorporationIDOrdersHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCorporationsCorporationIDOrdersHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCorporationsCorporationIDRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CorporationsCorporationIDRolesGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCorporationsCorporationIDRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCorporationsCorporationIDRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCorporationsCorporationIDRolesHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CorporationsCorporationIDRolesHistoryGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCorporationsCorporationIDRolesHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCorporationsCorporationIDRolesHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCorporationsCorporationIDShareholdersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CorporationsCorporationIDShareholdersGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCorporationsCorporationIDShareholdersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCorporationsCorporationIDShareholdersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCorporationsCorporationIDStandingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CorporationsCorporationIDStandingsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCorporationsCorporationIDStandingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCorporationsCorporationIDStandingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCorporationsCorporationIDStarbasesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CorporationsCorporationIDStarbasesGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCorporationsCorporationIDStarbasesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCorporationsCorporationIDStarbasesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCorporationsCorporationIDStarbasesStarbaseIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CorporationsCorporationIDStarbasesStarbaseIDGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCorporationsCorporationIDStarbasesStarbaseIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCorporationsCorporationIDStarbasesStarbaseIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCorporationsCorporationIDStructuresResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CorporationsCorporationIDStructuresGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCorporationsCorporationIDStructuresResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCorporationsCorporationIDStructuresResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCorporationsCorporationIDTitlesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CorporationsCorporationIDTitlesGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCorporationsCorporationIDTitlesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCorporationsCorporationIDTitlesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCorporationsCorporationIDWalletsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CorporationsCorporationIDWalletsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCorporationsCorporationIDWalletsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCorporationsCorporationIDWalletsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCorporationsCorporationIDWalletsDivisionJournalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CorporationsCorporationIDWalletsDivisionJournalGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCorporationsCorporationIDWalletsDivisionJournalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCorporationsCorporationIDWalletsDivisionJournalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCorporationsCorporationIDWalletsDivisionTransactionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CorporationsCorporationIDWalletsDivisionTransactionsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetCorporationsCorporationIDWalletsDivisionTransactionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCorporationsCorporationIDWalletsDivisionTransactionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDogmaAttributesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DogmaAttributesGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetDogmaAttributesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDogmaAttributesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDogmaAttributesAttributeIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DogmaAttributesAttributeIDGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetDogmaAttributesAttributeIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDogmaAttributesAttributeIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDogmaDynamicItemsTypeIDItemIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DogmaDynamicItemsTypeIDItemIDGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetDogmaDynamicItemsTypeIDItemIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDogmaDynamicItemsTypeIDItemIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDogmaEffectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DogmaEffectsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetDogmaEffectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDogmaEffectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDogmaEffectsEffectIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DogmaEffectsEffectIDGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetDogmaEffectsEffectIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDogmaEffectsEffectIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFleetsFleetIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FleetsFleetIDGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetFleetsFleetIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFleetsFleetIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutFleetsFleetIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *interface{}
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PutFleetsFleetIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutFleetsFleetIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFleetsFleetIDMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FleetsFleetIDMembersGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetFleetsFleetIDMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFleetsFleetIDMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFleetsFleetIDMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *interface{}
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PostFleetsFleetIDMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFleetsFleetIDMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFleetsFleetIDMembersMemberIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *interface{}
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r DeleteFleetsFleetIDMembersMemberIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFleetsFleetIDMembersMemberIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutFleetsFleetIDMembersMemberIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *interface{}
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PutFleetsFleetIDMembersMemberIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutFleetsFleetIDMembersMemberIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFleetsFleetIDSquadsSquadIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *interface{}
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r DeleteFleetsFleetIDSquadsSquadIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFleetsFleetIDSquadsSquadIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutFleetsFleetIDSquadsSquadIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *interface{}
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PutFleetsFleetIDSquadsSquadIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutFleetsFleetIDSquadsSquadIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFleetsFleetIDWingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FleetsFleetIDWingsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetFleetsFleetIDWingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFleetsFleetIDWingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFleetsFleetIDWingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *FleetsFleetIDWingsPost
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PostFleetsFleetIDWingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFleetsFleetIDWingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFleetsFleetIDWingsWingIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *interface{}
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r DeleteFleetsFleetIDWingsWingIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFleetsFleetIDWingsWingIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutFleetsFleetIDWingsWingIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *interface{}
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PutFleetsFleetIDWingsWingIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutFleetsFleetIDWingsWingIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFleetsFleetIDWingsWingIDSquadsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *FleetsFleetIDWingsWingIDSquadsPost
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PostFleetsFleetIDWingsWingIDSquadsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFleetsFleetIDWingsWingIDSquadsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFwLeaderboardsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FwLeaderboardsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetFwLeaderboardsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFwLeaderboardsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFwLeaderboardsCharactersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FwLeaderboardsCharactersGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetFwLeaderboardsCharactersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFwLeaderboardsCharactersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFwLeaderboardsCorporationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FwLeaderboardsCorporationsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetFwLeaderboardsCorporationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFwLeaderboardsCorporationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFwStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FwStatsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetFwStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFwStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFwSystemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FwSystemsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetFwSystemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFwSystemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFwWarsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FwWarsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetFwWarsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFwWarsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncursionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IncursionsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetIncursionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncursionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndustryFacilitiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IndustryFacilitiesGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetIndustryFacilitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndustryFacilitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndustrySystemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IndustrySystemsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetIndustrySystemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndustrySystemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInsurancePricesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsurancePricesGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetInsurancePricesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInsurancePricesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKillmailsKillmailIDKillmailHashResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *KillmailsKillmailIDKillmailHashGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetKillmailsKillmailIDKillmailHashResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKillmailsKillmailIDKillmailHashResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLoyaltyStoresCorporationIDOffersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LoyaltyStoresCorporationIDOffersGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetLoyaltyStoresCorporationIDOffersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLoyaltyStoresCorporationIDOffersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMarketsGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MarketsGroupsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetMarketsGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMarketsGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMarketsGroupsMarketGroupIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MarketsGroupsMarketGroupIDGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetMarketsGroupsMarketGroupIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMarketsGroupsMarketGroupIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMarketsPricesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MarketsPricesGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetMarketsPricesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMarketsPricesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMarketsStructuresStructureIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MarketsStructuresStructureIDGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetMarketsStructuresStructureIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMarketsStructuresStructureIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMarketsRegionIDHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MarketsRegionIDHistoryGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetMarketsRegionIDHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMarketsRegionIDHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMarketsRegionIDOrdersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MarketsRegionIDOrdersGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetMarketsRegionIDOrdersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMarketsRegionIDOrdersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMarketsRegionIDTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MarketsRegionIDTypesGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetMarketsRegionIDTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMarketsRegionIDTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRouteOriginDestinationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RouteOriginDestinationGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetRouteOriginDestinationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRouteOriginDestinationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSovereigntyCampaignsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SovereigntyCampaignsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetSovereigntyCampaignsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSovereigntyCampaignsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSovereigntyMapResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SovereigntyMapGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetSovereigntyMapResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSovereigntyMapResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSovereigntyStructuresResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SovereigntyStructuresGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetSovereigntyStructuresResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSovereigntyStructuresResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUIAutopilotWaypointResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *interface{}
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PostUIAutopilotWaypointResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUIAutopilotWaypointResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUIOpenwindowContractResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *interface{}
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PostUIOpenwindowContractResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUIOpenwindowContractResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUIOpenwindowInformationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *interface{}
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PostUIOpenwindowInformationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUIOpenwindowInformationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUIOpenwindowMarketdetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *interface{}
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PostUIOpenwindowMarketdetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUIOpenwindowMarketdetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUIOpenwindowNewmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *interface{}
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PostUIOpenwindowNewmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUIOpenwindowNewmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUniverseAncestriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UniverseAncestriesGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetUniverseAncestriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUniverseAncestriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUniverseAsteroidBeltsAsteroidBeltIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UniverseAsteroidBeltsAsteroidBeltIDGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetUniverseAsteroidBeltsAsteroidBeltIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUniverseAsteroidBeltsAsteroidBeltIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUniverseBloodlinesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UniverseBloodlinesGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetUniverseBloodlinesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUniverseBloodlinesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUniverseCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UniverseCategoriesGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetUniverseCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUniverseCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUniverseCategoriesCategoryIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UniverseCategoriesCategoryIDGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetUniverseCategoriesCategoryIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUniverseCategoriesCategoryIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUniverseConstellationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UniverseConstellationsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetUniverseConstellationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUniverseConstellationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUniverseConstellationsConstellationIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UniverseConstellationsConstellationIDGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetUniverseConstellationsConstellationIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUniverseConstellationsConstellationIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUniverseFactionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UniverseFactionsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetUniverseFactionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUniverseFactionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUniverseGraphicsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UniverseGraphicsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetUniverseGraphicsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUniverseGraphicsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUniverseGraphicsGraphicIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UniverseGraphicsGraphicIDGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetUniverseGraphicsGraphicIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUniverseGraphicsGraphicIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUniverseGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UniverseGroupsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetUniverseGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUniverseGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUniverseGroupsGroupIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UniverseGroupsGroupIDGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetUniverseGroupsGroupIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUniverseGroupsGroupIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUniverseIdsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UniverseIdsPost
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PostUniverseIdsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUniverseIdsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUniverseMoonsMoonIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UniverseMoonsMoonIDGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetUniverseMoonsMoonIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUniverseMoonsMoonIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUniverseNamesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UniverseNamesPost
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PostUniverseNamesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUniverseNamesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUniversePlanetsPlanetIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UniversePlanetsPlanetIDGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetUniversePlanetsPlanetIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUniversePlanetsPlanetIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUniverseRacesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UniverseRacesGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetUniverseRacesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUniverseRacesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUniverseRegionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UniverseRegionsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetUniverseRegionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUniverseRegionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUniverseRegionsRegionIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UniverseRegionsRegionIDGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetUniverseRegionsRegionIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUniverseRegionsRegionIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUniverseSchematicsSchematicIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UniverseSchematicsSchematicIDGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetUniverseSchematicsSchematicIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUniverseSchematicsSchematicIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUniverseStargatesStargateIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UniverseStargatesStargateIDGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetUniverseStargatesStargateIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUniverseStargatesStargateIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUniverseStarsStarIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UniverseStarsStarIDGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetUniverseStarsStarIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUniverseStarsStarIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUniverseStationsStationIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UniverseStationsStationIDGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetUniverseStationsStationIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUniverseStationsStationIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUniverseStructuresResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UniverseStructuresGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetUniverseStructuresResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUniverseStructuresResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUniverseStructuresStructureIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UniverseStructuresStructureIDGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetUniverseStructuresStructureIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUniverseStructuresStructureIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUniverseSystemJumpsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UniverseSystemJumpsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetUniverseSystemJumpsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUniverseSystemJumpsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUniverseSystemKillsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UniverseSystemKillsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetUniverseSystemKillsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUniverseSystemKillsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUniverseSystemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UniverseSystemsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetUniverseSystemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUniverseSystemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUniverseSystemsSystemIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UniverseSystemsSystemIDGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetUniverseSystemsSystemIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUniverseSystemsSystemIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUniverseTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UniverseTypesGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetUniverseTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUniverseTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUniverseTypesTypeIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UniverseTypesTypeIDGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetUniverseTypesTypeIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUniverseTypesTypeIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWarsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WarsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetWarsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWarsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWarsWarIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WarsWarIDGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetWarsWarIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWarsWarIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWarsWarIDKillmailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WarsWarIDKillmailsGet
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetWarsWarIDKillmailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWarsWarIDKillmailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAlliancesWithResponse request returning *GetAlliancesResponse
func (c *ClientWithResponses) GetAlliancesWithResponse(ctx context.Context, params *GetAlliancesParams, reqEditors ...RequestEditorFn) (*GetAlliancesResponse, error) {
	rsp, err := c.GetAlliances(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlliancesResponse(rsp)
}

// GetAlliancesAllianceIDWithResponse request returning *GetAlliancesAllianceIDResponse
func (c *ClientWithResponses) GetAlliancesAllianceIDWithResponse(ctx context.Context, allianceID AllianceID, params *GetAlliancesAllianceIDParams, reqEditors ...RequestEditorFn) (*GetAlliancesAllianceIDResponse, error) {
	rsp, err := c.GetAlliancesAllianceID(ctx, allianceID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlliancesAllianceIDResponse(rsp)
}

// GetAlliancesAllianceIDContactsWithResponse request returning *GetAlliancesAllianceIDContactsResponse
func (c *ClientWithResponses) GetAlliancesAllianceIDContactsWithResponse(ctx context.Context, allianceID AllianceID, params *GetAlliancesAllianceIDContactsParams, reqEditors ...RequestEditorFn) (*GetAlliancesAllianceIDContactsResponse, error) {
	rsp, err := c.GetAlliancesAllianceIDContacts(ctx, allianceID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlliancesAllianceIDContactsResponse(rsp)
}

// GetAlliancesAllianceIDContactsLabelsWithResponse request returning *GetAlliancesAllianceIDContactsLabelsResponse
func (c *ClientWithResponses) GetAlliancesAllianceIDContactsLabelsWithResponse(ctx context.Context, allianceID AllianceID, params *GetAlliancesAllianceIDContactsLabelsParams, reqEditors ...RequestEditorFn) (*GetAlliancesAllianceIDContactsLabelsResponse, error) {
	rsp, err := c.GetAlliancesAllianceIDContactsLabels(ctx, allianceID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlliancesAllianceIDContactsLabelsResponse(rsp)
}

// GetAlliancesAllianceIDCorporationsWithResponse request returning *GetAlliancesAllianceIDCorporationsResponse
func (c *ClientWithResponses) GetAlliancesAllianceIDCorporationsWithResponse(ctx context.Context, allianceID AllianceID, params *GetAlliancesAllianceIDCorporationsParams, reqEditors ...RequestEditorFn) (*GetAlliancesAllianceIDCorporationsResponse, error) {
	rsp, err := c.GetAlliancesAllianceIDCorporations(ctx, allianceID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlliancesAllianceIDCorporationsResponse(rsp)
}

// GetAlliancesAllianceIDIconsWithResponse request returning *GetAlliancesAllianceIDIconsResponse
func (c *ClientWithResponses) GetAlliancesAllianceIDIconsWithResponse(ctx context.Context, allianceID AllianceID, params *GetAlliancesAllianceIDIconsParams, reqEditors ...RequestEditorFn) (*GetAlliancesAllianceIDIconsResponse, error) {
	rsp, err := c.GetAlliancesAllianceIDIcons(ctx, allianceID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlliancesAllianceIDIconsResponse(rsp)
}

// PostCharactersAffiliationWithBodyWithResponse request with arbitrary body returning *PostCharactersAffiliationResponse
func (c *ClientWithResponses) PostCharactersAffiliationWithBodyWithResponse(ctx context.Context, params *PostCharactersAffiliationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCharactersAffiliationResponse, error) {
	rsp, err := c.PostCharactersAffiliationWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCharactersAffiliationResponse(rsp)
}

func (c *ClientWithResponses) PostCharactersAffiliationWithResponse(ctx context.Context, params *PostCharactersAffiliationParams, body PostCharactersAffiliationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCharactersAffiliationResponse, error) {
	rsp, err := c.PostCharactersAffiliation(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCharactersAffiliationResponse(rsp)
}

// GetCharactersCharacterIDWithResponse request returning *GetCharactersCharacterIDResponse
func (c *ClientWithResponses) GetCharactersCharacterIDWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDResponse, error) {
	rsp, err := c.GetCharactersCharacterID(ctx, characterID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharactersCharacterIDResponse(rsp)
}

// GetCharactersCharacterIDAgentsResearchWithResponse request returning *GetCharactersCharacterIDAgentsResearchResponse
func (c *ClientWithResponses) GetCharactersCharacterIDAgentsResearchWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDAgentsResearchParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDAgentsResearchResponse, error) {
	rsp, err := c.GetCharactersCharacterIDAgentsResearch(ctx, characterID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharactersCharacterIDAgentsResearchResponse(rsp)
}

// GetCharactersCharacterIDAssetsWithResponse request returning *GetCharactersCharacterIDAssetsResponse
func (c *ClientWithResponses) GetCharactersCharacterIDAssetsWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDAssetsParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDAssetsResponse, error) {
	rsp, err := c.GetCharactersCharacterIDAssets(ctx, characterID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharactersCharacterIDAssetsResponse(rsp)
}

// PostCharactersCharacterIDAssetsLocationsWithBodyWithResponse request with arbitrary body returning *PostCharactersCharacterIDAssetsLocationsResponse
func (c *ClientWithResponses) PostCharactersCharacterIDAssetsLocationsWithBodyWithResponse(ctx context.Context, characterID CharacterID, params *PostCharactersCharacterIDAssetsLocationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCharactersCharacterIDAssetsLocationsResponse, error) {
	rsp, err := c.PostCharactersCharacterIDAssetsLocationsWithBody(ctx, characterID, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCharactersCharacterIDAssetsLocationsResponse(rsp)
}

func (c *ClientWithResponses) PostCharactersCharacterIDAssetsLocationsWithResponse(ctx context.Context, characterID CharacterID, params *PostCharactersCharacterIDAssetsLocationsParams, body PostCharactersCharacterIDAssetsLocationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCharactersCharacterIDAssetsLocationsResponse, error) {
	rsp, err := c.PostCharactersCharacterIDAssetsLocations(ctx, characterID, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCharactersCharacterIDAssetsLocationsResponse(rsp)
}

// PostCharactersCharacterIDAssetsNamesWithBodyWithResponse request with arbitrary body returning *PostCharactersCharacterIDAssetsNamesResponse
func (c *ClientWithResponses) PostCharactersCharacterIDAssetsNamesWithBodyWithResponse(ctx context.Context, characterID CharacterID, params *PostCharactersCharacterIDAssetsNamesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCharactersCharacterIDAssetsNamesResponse, error) {
	rsp, err := c.PostCharactersCharacterIDAssetsNamesWithBody(ctx, characterID, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCharactersCharacterIDAssetsNamesResponse(rsp)
}

func (c *ClientWithResponses) PostCharactersCharacterIDAssetsNamesWithResponse(ctx context.Context, characterID CharacterID, params *PostCharactersCharacterIDAssetsNamesParams, body PostCharactersCharacterIDAssetsNamesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCharactersCharacterIDAssetsNamesResponse, error) {
	rsp, err := c.PostCharactersCharacterIDAssetsNames(ctx, characterID, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCharactersCharacterIDAssetsNamesResponse(rsp)
}

// GetCharactersCharacterIDAttributesWithResponse request returning *GetCharactersCharacterIDAttributesResponse
func (c *ClientWithResponses) GetCharactersCharacterIDAttributesWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDAttributesParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDAttributesResponse, error) {
	rsp, err := c.GetCharactersCharacterIDAttributes(ctx, characterID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharactersCharacterIDAttributesResponse(rsp)
}

// GetCharactersCharacterIDBlueprintsWithResponse request returning *GetCharactersCharacterIDBlueprintsResponse
func (c *ClientWithResponses) GetCharactersCharacterIDBlueprintsWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDBlueprintsParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDBlueprintsResponse, error) {
	rsp, err := c.GetCharactersCharacterIDBlueprints(ctx, characterID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharactersCharacterIDBlueprintsResponse(rsp)
}

// GetCharactersCharacterIDCalendarWithResponse request returning *GetCharactersCharacterIDCalendarResponse
func (c *ClientWithResponses) GetCharactersCharacterIDCalendarWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDCalendarParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDCalendarResponse, error) {
	rsp, err := c.GetCharactersCharacterIDCalendar(ctx, characterID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharactersCharacterIDCalendarResponse(rsp)
}

// GetCharactersCharacterIDCalendarEventIDWithResponse request returning *GetCharactersCharacterIDCalendarEventIDResponse
func (c *ClientWithResponses) GetCharactersCharacterIDCalendarEventIDWithResponse(ctx context.Context, characterID CharacterID, eventID int64, params *GetCharactersCharacterIDCalendarEventIDParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDCalendarEventIDResponse, error) {
	rsp, err := c.GetCharactersCharacterIDCalendarEventID(ctx, characterID, eventID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharactersCharacterIDCalendarEventIDResponse(rsp)
}

// PutCharactersCharacterIDCalendarEventIDWithBodyWithResponse request with arbitrary body returning *PutCharactersCharacterIDCalendarEventIDResponse
func (c *ClientWithResponses) PutCharactersCharacterIDCalendarEventIDWithBodyWithResponse(ctx context.Context, characterID CharacterID, eventID int64, params *PutCharactersCharacterIDCalendarEventIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCharactersCharacterIDCalendarEventIDResponse, error) {
	rsp, err := c.PutCharactersCharacterIDCalendarEventIDWithBody(ctx, characterID, eventID, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCharactersCharacterIDCalendarEventIDResponse(rsp)
}

func (c *ClientWithResponses) PutCharactersCharacterIDCalendarEventIDWithResponse(ctx context.Context, characterID CharacterID, eventID int64, params *PutCharactersCharacterIDCalendarEventIDParams, body PutCharactersCharacterIDCalendarEventIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCharactersCharacterIDCalendarEventIDResponse, error) {
	rsp, err := c.PutCharactersCharacterIDCalendarEventID(ctx, characterID, eventID, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCharactersCharacterIDCalendarEventIDResponse(rsp)
}

// GetCharactersCharacterIDCalendarEventIDAttendeesWithResponse request returning *GetCharactersCharacterIDCalendarEventIDAttendeesResponse
func (c *ClientWithResponses) GetCharactersCharacterIDCalendarEventIDAttendeesWithResponse(ctx context.Context, characterID CharacterID, eventID int64, params *GetCharactersCharacterIDCalendarEventIDAttendeesParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDCalendarEventIDAttendeesResponse, error) {
	rsp, err := c.GetCharactersCharacterIDCalendarEventIDAttendees(ctx, characterID, eventID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharactersCharacterIDCalendarEventIDAttendeesResponse(rsp)
}

// GetCharactersCharacterIDClonesWithResponse request returning *GetCharactersCharacterIDClonesResponse
func (c *ClientWithResponses) GetCharactersCharacterIDClonesWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDClonesParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDClonesResponse, error) {
	rsp, err := c.GetCharactersCharacterIDClones(ctx, characterID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharactersCharacterIDClonesResponse(rsp)
}

// DeleteCharactersCharacterIDContactsWithResponse request returning *DeleteCharactersCharacterIDContactsResponse
func (c *ClientWithResponses) DeleteCharactersCharacterIDContactsWithResponse(ctx context.Context, characterID CharacterID, params *DeleteCharactersCharacterIDContactsParams, reqEditors ...RequestEditorFn) (*DeleteCharactersCharacterIDContactsResponse, error) {
	rsp, err := c.DeleteCharactersCharacterIDContacts(ctx, characterID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCharactersCharacterIDContactsResponse(rsp)
}

// GetCharactersCharacterIDContactsWithResponse request returning *GetCharactersCharacterIDContactsResponse
func (c *ClientWithResponses) GetCharactersCharacterIDContactsWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDContactsParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDContactsResponse, error) {
	rsp, err := c.GetCharactersCharacterIDContacts(ctx, characterID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharactersCharacterIDContactsResponse(rsp)
}

// PostCharactersCharacterIDContactsWithBodyWithResponse request with arbitrary body returning *PostCharactersCharacterIDContactsResponse
func (c *ClientWithResponses) PostCharactersCharacterIDContactsWithBodyWithResponse(ctx context.Context, characterID CharacterID, params *PostCharactersCharacterIDContactsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCharactersCharacterIDContactsResponse, error) {
	rsp, err := c.PostCharactersCharacterIDContactsWithBody(ctx, characterID, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCharactersCharacterIDContactsResponse(rsp)
}

func (c *ClientWithResponses) PostCharactersCharacterIDContactsWithResponse(ctx context.Context, characterID CharacterID, params *PostCharactersCharacterIDContactsParams, body PostCharactersCharacterIDContactsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCharactersCharacterIDContactsResponse, error) {
	rsp, err := c.PostCharactersCharacterIDContacts(ctx, characterID, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCharactersCharacterIDContactsResponse(rsp)
}

// PutCharactersCharacterIDContactsWithBodyWithResponse request with arbitrary body returning *PutCharactersCharacterIDContactsResponse
func (c *ClientWithResponses) PutCharactersCharacterIDContactsWithBodyWithResponse(ctx context.Context, characterID CharacterID, params *PutCharactersCharacterIDContactsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCharactersCharacterIDContactsResponse, error) {
	rsp, err := c.PutCharactersCharacterIDContactsWithBody(ctx, characterID, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCharactersCharacterIDContactsResponse(rsp)
}

func (c *ClientWithResponses) PutCharactersCharacterIDContactsWithResponse(ctx context.Context, characterID CharacterID, params *PutCharactersCharacterIDContactsParams, body PutCharactersCharacterIDContactsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCharactersCharacterIDContactsResponse, error) {
	rsp, err := c.PutCharactersCharacterIDContacts(ctx, characterID, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCharactersCharacterIDContactsResponse(rsp)
}

// GetCharactersCharacterIDContactsLabelsWithResponse request returning *GetCharactersCharacterIDContactsLabelsResponse
func (c *ClientWithResponses) GetCharactersCharacterIDContactsLabelsWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDContactsLabelsParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDContactsLabelsResponse, error) {
	rsp, err := c.GetCharactersCharacterIDContactsLabels(ctx, characterID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharactersCharacterIDContactsLabelsResponse(rsp)
}

// GetCharactersCharacterIDContractsWithResponse request returning *GetCharactersCharacterIDContractsResponse
func (c *ClientWithResponses) GetCharactersCharacterIDContractsWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDContractsParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDContractsResponse, error) {
	rsp, err := c.GetCharactersCharacterIDContracts(ctx, characterID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharactersCharacterIDContractsResponse(rsp)
}

// GetCharactersCharacterIDContractsContractIDBidsWithResponse request returning *GetCharactersCharacterIDContractsContractIDBidsResponse
func (c *ClientWithResponses) GetCharactersCharacterIDContractsContractIDBidsWithResponse(ctx context.Context, characterID CharacterID, contractID int64, params *GetCharactersCharacterIDContractsContractIDBidsParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDContractsContractIDBidsResponse, error) {
	rsp, err := c.GetCharactersCharacterIDContractsContractIDBids(ctx, characterID, contractID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharactersCharacterIDContractsContractIDBidsResponse(rsp)
}

// GetCharactersCharacterIDContractsContractIDItemsWithResponse request returning *GetCharactersCharacterIDContractsContractIDItemsResponse
func (c *ClientWithResponses) GetCharactersCharacterIDContractsContractIDItemsWithResponse(ctx context.Context, characterID CharacterID, contractID int64, params *GetCharactersCharacterIDContractsContractIDItemsParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDContractsContractIDItemsResponse, error) {
	rsp, err := c.GetCharactersCharacterIDContractsContractIDItems(ctx, characterID, contractID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharactersCharacterIDContractsContractIDItemsResponse(rsp)
}

// GetCharactersCharacterIDCorporationhistoryWithResponse request returning *GetCharactersCharacterIDCorporationhistoryResponse
func (c *ClientWithResponses) GetCharactersCharacterIDCorporationhistoryWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDCorporationhistoryParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDCorporationhistoryResponse, error) {
	rsp, err := c.GetCharactersCharacterIDCorporationhistory(ctx, characterID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharactersCharacterIDCorporationhistoryResponse(rsp)
}

// PostCharactersCharacterIDCspaWithBodyWithResponse request with arbitrary body returning *PostCharactersCharacterIDCspaResponse
func (c *ClientWithResponses) PostCharactersCharacterIDCspaWithBodyWithResponse(ctx context.Context, characterID CharacterID, params *PostCharactersCharacterIDCspaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCharactersCharacterIDCspaResponse, error) {
	rsp, err := c.PostCharactersCharacterIDCspaWithBody(ctx, characterID, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCharactersCharacterIDCspaResponse(rsp)
}

func (c *ClientWithResponses) PostCharactersCharacterIDCspaWithResponse(ctx context.Context, characterID CharacterID, params *PostCharactersCharacterIDCspaParams, body PostCharactersCharacterIDCspaJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCharactersCharacterIDCspaResponse, error) {
	rsp, err := c.PostCharactersCharacterIDCspa(ctx, characterID, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCharactersCharacterIDCspaResponse(rsp)
}

// GetCharactersCharacterIDFatigueWithResponse request returning *GetCharactersCharacterIDFatigueResponse
func (c *ClientWithResponses) GetCharactersCharacterIDFatigueWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDFatigueParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDFatigueResponse, error) {
	rsp, err := c.GetCharactersCharacterIDFatigue(ctx, characterID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharactersCharacterIDFatigueResponse(rsp)
}

// GetCharactersCharacterIDFittingsWithResponse request returning *GetCharactersCharacterIDFittingsResponse
func (c *ClientWithResponses) GetCharactersCharacterIDFittingsWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDFittingsParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDFittingsResponse, error) {
	rsp, err := c.GetCharactersCharacterIDFittings(ctx, characterID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharactersCharacterIDFittingsResponse(rsp)
}

// PostCharactersCharacterIDFittingsWithBodyWithResponse request with arbitrary body returning *PostCharactersCharacterIDFittingsResponse
func (c *ClientWithResponses) PostCharactersCharacterIDFittingsWithBodyWithResponse(ctx context.Context, characterID CharacterID, params *PostCharactersCharacterIDFittingsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCharactersCharacterIDFittingsResponse, error) {
	rsp, err := c.PostCharactersCharacterIDFittingsWithBody(ctx, characterID, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCharactersCharacterIDFittingsResponse(rsp)
}

func (c *ClientWithResponses) PostCharactersCharacterIDFittingsWithResponse(ctx context.Context, characterID CharacterID, params *PostCharactersCharacterIDFittingsParams, body PostCharactersCharacterIDFittingsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCharactersCharacterIDFittingsResponse, error) {
	rsp, err := c.PostCharactersCharacterIDFittings(ctx, characterID, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCharactersCharacterIDFittingsResponse(rsp)
}

// DeleteCharactersCharacterIDFittingsFittingIDWithResponse request returning *DeleteCharactersCharacterIDFittingsFittingIDResponse
func (c *ClientWithResponses) DeleteCharactersCharacterIDFittingsFittingIDWithResponse(ctx context.Context, characterID CharacterID, fittingID int64, params *DeleteCharactersCharacterIDFittingsFittingIDParams, reqEditors ...RequestEditorFn) (*DeleteCharactersCharacterIDFittingsFittingIDResponse, error) {
	rsp, err := c.DeleteCharactersCharacterIDFittingsFittingID(ctx, characterID, fittingID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCharactersCharacterIDFittingsFittingIDResponse(rsp)
}

// GetCharactersCharacterIDFleetWithResponse request returning *GetCharactersCharacterIDFleetResponse
func (c *ClientWithResponses) GetCharactersCharacterIDFleetWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDFleetParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDFleetResponse, error) {
	rsp, err := c.GetCharactersCharacterIDFleet(ctx, characterID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharactersCharacterIDFleetResponse(rsp)
}

// GetCharactersCharacterIDFwStatsWithResponse request returning *GetCharactersCharacterIDFwStatsResponse
func (c *ClientWithResponses) GetCharactersCharacterIDFwStatsWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDFwStatsParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDFwStatsResponse, error) {
	rsp, err := c.GetCharactersCharacterIDFwStats(ctx, characterID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharactersCharacterIDFwStatsResponse(rsp)
}

// GetCharactersCharacterIDImplantsWithResponse request returning *GetCharactersCharacterIDImplantsResponse
func (c *ClientWithResponses) GetCharactersCharacterIDImplantsWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDImplantsParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDImplantsResponse, error) {
	rsp, err := c.GetCharactersCharacterIDImplants(ctx, characterID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharactersCharacterIDImplantsResponse(rsp)
}

// GetCharactersCharacterIDIndustryJobsWithResponse request returning *GetCharactersCharacterIDIndustryJobsResponse
func (c *ClientWithResponses) GetCharactersCharacterIDIndustryJobsWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDIndustryJobsParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDIndustryJobsResponse, error) {
	rsp, err := c.GetCharactersCharacterIDIndustryJobs(ctx, characterID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharactersCharacterIDIndustryJobsResponse(rsp)
}

// GetCharactersCharacterIDKillmailsRecentWithResponse request returning *GetCharactersCharacterIDKillmailsRecentResponse
func (c *ClientWithResponses) GetCharactersCharacterIDKillmailsRecentWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDKillmailsRecentParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDKillmailsRecentResponse, error) {
	rsp, err := c.GetCharactersCharacterIDKillmailsRecent(ctx, characterID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharactersCharacterIDKillmailsRecentResponse(rsp)
}

// GetCharactersCharacterIDLocationWithResponse request returning *GetCharactersCharacterIDLocationResponse
func (c *ClientWithResponses) GetCharactersCharacterIDLocationWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDLocationParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDLocationResponse, error) {
	rsp, err := c.GetCharactersCharacterIDLocation(ctx, characterID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharactersCharacterIDLocationResponse(rsp)
}

// GetCharactersCharacterIDLoyaltyPointsWithResponse request returning *GetCharactersCharacterIDLoyaltyPointsResponse
func (c *ClientWithResponses) GetCharactersCharacterIDLoyaltyPointsWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDLoyaltyPointsParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDLoyaltyPointsResponse, error) {
	rsp, err := c.GetCharactersCharacterIDLoyaltyPoints(ctx, characterID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharactersCharacterIDLoyaltyPointsResponse(rsp)
}

// GetCharactersCharacterIDMailWithResponse request returning *GetCharactersCharacterIDMailResponse
func (c *ClientWithResponses) GetCharactersCharacterIDMailWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDMailParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDMailResponse, error) {
	rsp, err := c.GetCharactersCharacterIDMail(ctx, characterID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharactersCharacterIDMailResponse(rsp)
}

// PostCharactersCharacterIDMailWithBodyWithResponse request with arbitrary body returning *PostCharactersCharacterIDMailResponse
func (c *ClientWithResponses) PostCharactersCharacterIDMailWithBodyWithResponse(ctx context.Context, characterID CharacterID, params *PostCharactersCharacterIDMailParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCharactersCharacterIDMailResponse, error) {
	rsp, err := c.PostCharactersCharacterIDMailWithBody(ctx, characterID, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCharactersCharacterIDMailResponse(rsp)
}

func (c *ClientWithResponses) PostCharactersCharacterIDMailWithResponse(ctx context.Context, characterID CharacterID, params *PostCharactersCharacterIDMailParams, body PostCharactersCharacterIDMailJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCharactersCharacterIDMailResponse, error) {
	rsp, err := c.PostCharactersCharacterIDMail(ctx, characterID, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCharactersCharacterIDMailResponse(rsp)
}

// GetCharactersCharacterIDMailLabelsWithResponse request returning *GetCharactersCharacterIDMailLabelsResponse
func (c *ClientWithResponses) GetCharactersCharacterIDMailLabelsWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDMailLabelsParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDMailLabelsResponse, error) {
	rsp, err := c.GetCharactersCharacterIDMailLabels(ctx, characterID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharactersCharacterIDMailLabelsResponse(rsp)
}

// PostCharactersCharacterIDMailLabelsWithBodyWithResponse request with arbitrary body returning *PostCharactersCharacterIDMailLabelsResponse
func (c *ClientWithResponses) PostCharactersCharacterIDMailLabelsWithBodyWithResponse(ctx context.Context, characterID CharacterID, params *PostCharactersCharacterIDMailLabelsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCharactersCharacterIDMailLabelsResponse, error) {
	rsp, err := c.PostCharactersCharacterIDMailLabelsWithBody(ctx, characterID, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCharactersCharacterIDMailLabelsResponse(rsp)
}

func (c *ClientWithResponses) PostCharactersCharacterIDMailLabelsWithResponse(ctx context.Context, characterID CharacterID, params *PostCharactersCharacterIDMailLabelsParams, body PostCharactersCharacterIDMailLabelsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCharactersCharacterIDMailLabelsResponse, error) {
	rsp, err := c.PostCharactersCharacterIDMailLabels(ctx, characterID, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCharactersCharacterIDMailLabelsResponse(rsp)
}

// DeleteCharactersCharacterIDMailLabelsLabelIDWithResponse request returning *DeleteCharactersCharacterIDMailLabelsLabelIDResponse
func (c *ClientWithResponses) DeleteCharactersCharacterIDMailLabelsLabelIDWithResponse(ctx context.Context, characterID CharacterID, labelID int64, params *DeleteCharactersCharacterIDMailLabelsLabelIDParams, reqEditors ...RequestEditorFn) (*DeleteCharactersCharacterIDMailLabelsLabelIDResponse, error) {
	rsp, err := c.DeleteCharactersCharacterIDMailLabelsLabelID(ctx, characterID, labelID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCharactersCharacterIDMailLabelsLabelIDResponse(rsp)
}

// GetCharactersCharacterIDMailListsWithResponse request returning *GetCharactersCharacterIDMailListsResponse
func (c *ClientWithResponses) GetCharactersCharacterIDMailListsWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDMailListsParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDMailListsResponse, error) {
	rsp, err := c.GetCharactersCharacterIDMailLists(ctx, characterID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharactersCharacterIDMailListsResponse(rsp)
}

// DeleteCharactersCharacterIDMailMailIDWithResponse request returning *DeleteCharactersCharacterIDMailMailIDResponse
func (c *ClientWithResponses) DeleteCharactersCharacterIDMailMailIDWithResponse(ctx context.Context, characterID CharacterID, mailID int64, params *DeleteCharactersCharacterIDMailMailIDParams, reqEditors ...RequestEditorFn) (*DeleteCharactersCharacterIDMailMailIDResponse, error) {
	rsp, err := c.DeleteCharactersCharacterIDMailMailID(ctx, characterID, mailID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCharactersCharacterIDMailMailIDResponse(rsp)
}

// GetCharactersCharacterIDMailMailIDWithResponse request returning *GetCharactersCharacterIDMailMailIDResponse
func (c *ClientWithResponses) GetCharactersCharacterIDMailMailIDWithResponse(ctx context.Context, characterID CharacterID, mailID int64, params *GetCharactersCharacterIDMailMailIDParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDMailMailIDResponse, error) {
	rsp, err := c.GetCharactersCharacterIDMailMailID(ctx, characterID, mailID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharactersCharacterIDMailMailIDResponse(rsp)
}

// PutCharactersCharacterIDMailMailIDWithBodyWithResponse request with arbitrary body returning *PutCharactersCharacterIDMailMailIDResponse
func (c *ClientWithResponses) PutCharactersCharacterIDMailMailIDWithBodyWithResponse(ctx context.Context, characterID CharacterID, mailID int64, params *PutCharactersCharacterIDMailMailIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCharactersCharacterIDMailMailIDResponse, error) {
	rsp, err := c.PutCharactersCharacterIDMailMailIDWithBody(ctx, characterID, mailID, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCharactersCharacterIDMailMailIDResponse(rsp)
}

func (c *ClientWithResponses) PutCharactersCharacterIDMailMailIDWithResponse(ctx context.Context, characterID CharacterID, mailID int64, params *PutCharactersCharacterIDMailMailIDParams, body PutCharactersCharacterIDMailMailIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCharactersCharacterIDMailMailIDResponse, error) {
	rsp, err := c.PutCharactersCharacterIDMailMailID(ctx, characterID, mailID, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCharactersCharacterIDMailMailIDResponse(rsp)
}

// GetCharactersCharacterIDMedalsWithResponse request returning *GetCharactersCharacterIDMedalsResponse
func (c *ClientWithResponses) GetCharactersCharacterIDMedalsWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDMedalsParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDMedalsResponse, error) {
	rsp, err := c.GetCharactersCharacterIDMedals(ctx, characterID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharactersCharacterIDMedalsResponse(rsp)
}

// GetCharactersCharacterIDMiningWithResponse request returning *GetCharactersCharacterIDMiningResponse
func (c *ClientWithResponses) GetCharactersCharacterIDMiningWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDMiningParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDMiningResponse, error) {
	rsp, err := c.GetCharactersCharacterIDMining(ctx, characterID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharactersCharacterIDMiningResponse(rsp)
}

// GetCharactersCharacterIDNotificationsWithResponse request returning *GetCharactersCharacterIDNotificationsResponse
func (c *ClientWithResponses) GetCharactersCharacterIDNotificationsWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDNotificationsParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDNotificationsResponse, error) {
	rsp, err := c.GetCharactersCharacterIDNotifications(ctx, characterID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharactersCharacterIDNotificationsResponse(rsp)
}

// GetCharactersCharacterIDNotificationsContactsWithResponse request returning *GetCharactersCharacterIDNotificationsContactsResponse
func (c *ClientWithResponses) GetCharactersCharacterIDNotificationsContactsWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDNotificationsContactsParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDNotificationsContactsResponse, error) {
	rsp, err := c.GetCharactersCharacterIDNotificationsContacts(ctx, characterID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharactersCharacterIDNotificationsContactsResponse(rsp)
}

// GetCharactersCharacterIDOnlineWithResponse request returning *GetCharactersCharacterIDOnlineResponse
func (c *ClientWithResponses) GetCharactersCharacterIDOnlineWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDOnlineParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDOnlineResponse, error) {
	rsp, err := c.GetCharactersCharacterIDOnline(ctx, characterID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharactersCharacterIDOnlineResponse(rsp)
}

// GetCharactersCharacterIDOrdersWithResponse request returning *GetCharactersCharacterIDOrdersResponse
func (c *ClientWithResponses) GetCharactersCharacterIDOrdersWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDOrdersParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDOrdersResponse, error) {
	rsp, err := c.GetCharactersCharacterIDOrders(ctx, characterID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharactersCharacterIDOrdersResponse(rsp)
}

// GetCharactersCharacterIDOrdersHistoryWithResponse request returning *GetCharactersCharacterIDOrdersHistoryResponse
func (c *ClientWithResponses) GetCharactersCharacterIDOrdersHistoryWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDOrdersHistoryParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDOrdersHistoryResponse, error) {
	rsp, err := c.GetCharactersCharacterIDOrdersHistory(ctx, characterID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharactersCharacterIDOrdersHistoryResponse(rsp)
}

// GetCharactersCharacterIDPlanetsWithResponse request returning *GetCharactersCharacterIDPlanetsResponse
func (c *ClientWithResponses) GetCharactersCharacterIDPlanetsWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDPlanetsParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDPlanetsResponse, error) {
	rsp, err := c.GetCharactersCharacterIDPlanets(ctx, characterID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharactersCharacterIDPlanetsResponse(rsp)
}

// GetCharactersCharacterIDPlanetsPlanetIDWithResponse request returning *GetCharactersCharacterIDPlanetsPlanetIDResponse
func (c *ClientWithResponses) GetCharactersCharacterIDPlanetsPlanetIDWithResponse(ctx context.Context, characterID CharacterID, planetID int64, params *GetCharactersCharacterIDPlanetsPlanetIDParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDPlanetsPlanetIDResponse, error) {
	rsp, err := c.GetCharactersCharacterIDPlanetsPlanetID(ctx, characterID, planetID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharactersCharacterIDPlanetsPlanetIDResponse(rsp)
}

// GetCharactersCharacterIDPortraitWithResponse request returning *GetCharactersCharacterIDPortraitResponse
func (c *ClientWithResponses) GetCharactersCharacterIDPortraitWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDPortraitParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDPortraitResponse, error) {
	rsp, err := c.GetCharactersCharacterIDPortrait(ctx, characterID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharactersCharacterIDPortraitResponse(rsp)
}

// GetCharactersCharacterIDRolesWithResponse request returning *GetCharactersCharacterIDRolesResponse
func (c *ClientWithResponses) GetCharactersCharacterIDRolesWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDRolesParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDRolesResponse, error) {
	rsp, err := c.GetCharactersCharacterIDRoles(ctx, characterID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharactersCharacterIDRolesResponse(rsp)
}

// GetCharactersCharacterIDSearchWithResponse request returning *GetCharactersCharacterIDSearchResponse
func (c *ClientWithResponses) GetCharactersCharacterIDSearchWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDSearchParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDSearchResponse, error) {
	rsp, err := c.GetCharactersCharacterIDSearch(ctx, characterID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharactersCharacterIDSearchResponse(rsp)
}

// GetCharactersCharacterIDShipWithResponse request returning *GetCharactersCharacterIDShipResponse
func (c *ClientWithResponses) GetCharactersCharacterIDShipWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDShipParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDShipResponse, error) {
	rsp, err := c.GetCharactersCharacterIDShip(ctx, characterID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharactersCharacterIDShipResponse(rsp)
}

// GetCharactersCharacterIDSkillqueueWithResponse request returning *GetCharactersCharacterIDSkillqueueResponse
func (c *ClientWithResponses) GetCharactersCharacterIDSkillqueueWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDSkillqueueParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDSkillqueueResponse, error) {
	rsp, err := c.GetCharactersCharacterIDSkillqueue(ctx, characterID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharactersCharacterIDSkillqueueResponse(rsp)
}

// GetCharactersCharacterIDSkillsWithResponse request returning *GetCharactersCharacterIDSkillsResponse
func (c *ClientWithResponses) GetCharactersCharacterIDSkillsWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDSkillsParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDSkillsResponse, error) {
	rsp, err := c.GetCharactersCharacterIDSkills(ctx, characterID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharactersCharacterIDSkillsResponse(rsp)
}

// GetCharactersCharacterIDStandingsWithResponse request returning *GetCharactersCharacterIDStandingsResponse
func (c *ClientWithResponses) GetCharactersCharacterIDStandingsWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDStandingsParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDStandingsResponse, error) {
	rsp, err := c.GetCharactersCharacterIDStandings(ctx, characterID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharactersCharacterIDStandingsResponse(rsp)
}

// GetCharactersCharacterIDTitlesWithResponse request returning *GetCharactersCharacterIDTitlesResponse
func (c *ClientWithResponses) GetCharactersCharacterIDTitlesWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDTitlesParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDTitlesResponse, error) {
	rsp, err := c.GetCharactersCharacterIDTitles(ctx, characterID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharactersCharacterIDTitlesResponse(rsp)
}

// GetCharactersCharacterIDWalletWithResponse request returning *GetCharactersCharacterIDWalletResponse
func (c *ClientWithResponses) GetCharactersCharacterIDWalletWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDWalletParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDWalletResponse, error) {
	rsp, err := c.GetCharactersCharacterIDWallet(ctx, characterID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharactersCharacterIDWalletResponse(rsp)
}

// GetCharactersCharacterIDWalletJournalWithResponse request returning *GetCharactersCharacterIDWalletJournalResponse
func (c *ClientWithResponses) GetCharactersCharacterIDWalletJournalWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDWalletJournalParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDWalletJournalResponse, error) {
	rsp, err := c.GetCharactersCharacterIDWalletJournal(ctx, characterID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharactersCharacterIDWalletJournalResponse(rsp)
}

// GetCharactersCharacterIDWalletTransactionsWithResponse request returning *GetCharactersCharacterIDWalletTransactionsResponse
func (c *ClientWithResponses) GetCharactersCharacterIDWalletTransactionsWithResponse(ctx context.Context, characterID CharacterID, params *GetCharactersCharacterIDWalletTransactionsParams, reqEditors ...RequestEditorFn) (*GetCharactersCharacterIDWalletTransactionsResponse, error) {
	rsp, err := c.GetCharactersCharacterIDWalletTransactions(ctx, characterID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharactersCharacterIDWalletTransactionsResponse(rsp)
}

// GetContractsPublicBidsContractIDWithResponse request returning *GetContractsPublicBidsContractIDResponse
func (c *ClientWithResponses) GetContractsPublicBidsContractIDWithResponse(ctx context.Context, contractID int64, params *GetContractsPublicBidsContractIDParams, reqEditors ...RequestEditorFn) (*GetContractsPublicBidsContractIDResponse, error) {
	rsp, err := c.GetContractsPublicBidsContractID(ctx, contractID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContractsPublicBidsContractIDResponse(rsp)
}

// GetContractsPublicItemsContractIDWithResponse request returning *GetContractsPublicItemsContractIDResponse
func (c *ClientWithResponses) GetContractsPublicItemsContractIDWithResponse(ctx context.Context, contractID int64, params *GetContractsPublicItemsContractIDParams, reqEditors ...RequestEditorFn) (*GetContractsPublicItemsContractIDResponse, error) {
	rsp, err := c.GetContractsPublicItemsContractID(ctx, contractID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContractsPublicItemsContractIDResponse(rsp)
}

// GetContractsPublicRegionIDWithResponse request returning *GetContractsPublicRegionIDResponse
func (c *ClientWithResponses) GetContractsPublicRegionIDWithResponse(ctx context.Context, regionID int64, params *GetContractsPublicRegionIDParams, reqEditors ...RequestEditorFn) (*GetContractsPublicRegionIDResponse, error) {
	rsp, err := c.GetContractsPublicRegionID(ctx, regionID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContractsPublicRegionIDResponse(rsp)
}

// GetCorporationCorporationIDMiningExtractionsWithResponse request returning *GetCorporationCorporationIDMiningExtractionsResponse
func (c *ClientWithResponses) GetCorporationCorporationIDMiningExtractionsWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationCorporationIDMiningExtractionsParams, reqEditors ...RequestEditorFn) (*GetCorporationCorporationIDMiningExtractionsResponse, error) {
	rsp, err := c.GetCorporationCorporationIDMiningExtractions(ctx, corporationID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCorporationCorporationIDMiningExtractionsResponse(rsp)
}

// GetCorporationCorporationIDMiningObserversWithResponse request returning *GetCorporationCorporationIDMiningObserversResponse
func (c *ClientWithResponses) GetCorporationCorporationIDMiningObserversWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationCorporationIDMiningObserversParams, reqEditors ...RequestEditorFn) (*GetCorporationCorporationIDMiningObserversResponse, error) {
	rsp, err := c.GetCorporationCorporationIDMiningObservers(ctx, corporationID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCorporationCorporationIDMiningObserversResponse(rsp)
}

// GetCorporationCorporationIDMiningObserversObserverIDWithResponse request returning *GetCorporationCorporationIDMiningObserversObserverIDResponse
func (c *ClientWithResponses) GetCorporationCorporationIDMiningObserversObserverIDWithResponse(ctx context.Context, corporationID CorporationID, observerID int64, params *GetCorporationCorporationIDMiningObserversObserverIDParams, reqEditors ...RequestEditorFn) (*GetCorporationCorporationIDMiningObserversObserverIDResponse, error) {
	rsp, err := c.GetCorporationCorporationIDMiningObserversObserverID(ctx, corporationID, observerID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCorporationCorporationIDMiningObserversObserverIDResponse(rsp)
}

// GetCorporationsNpccorpsWithResponse request returning *GetCorporationsNpccorpsResponse
func (c *ClientWithResponses) GetCorporationsNpccorpsWithResponse(ctx context.Context, params *GetCorporationsNpccorpsParams, reqEditors ...RequestEditorFn) (*GetCorporationsNpccorpsResponse, error) {
	rsp, err := c.GetCorporationsNpccorps(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCorporationsNpccorpsResponse(rsp)
}

// GetCorporationsCorporationIDWithResponse request returning *GetCorporationsCorporationIDResponse
func (c *ClientWithResponses) GetCorporationsCorporationIDWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDResponse, error) {
	rsp, err := c.GetCorporationsCorporationID(ctx, corporationID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCorporationsCorporationIDResponse(rsp)
}

// GetCorporationsCorporationIDAlliancehistoryWithResponse request returning *GetCorporationsCorporationIDAlliancehistoryResponse
func (c *ClientWithResponses) GetCorporationsCorporationIDAlliancehistoryWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDAlliancehistoryParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDAlliancehistoryResponse, error) {
	rsp, err := c.GetCorporationsCorporationIDAlliancehistory(ctx, corporationID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCorporationsCorporationIDAlliancehistoryResponse(rsp)
}

// GetCorporationsCorporationIDAssetsWithResponse request returning *GetCorporationsCorporationIDAssetsResponse
func (c *ClientWithResponses) GetCorporationsCorporationIDAssetsWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDAssetsParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDAssetsResponse, error) {
	rsp, err := c.GetCorporationsCorporationIDAssets(ctx, corporationID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCorporationsCorporationIDAssetsResponse(rsp)
}

// PostCorporationsCorporationIDAssetsLocationsWithBodyWithResponse request with arbitrary body returning *PostCorporationsCorporationIDAssetsLocationsResponse
func (c *ClientWithResponses) PostCorporationsCorporationIDAssetsLocationsWithBodyWithResponse(ctx context.Context, corporationID CorporationID, params *PostCorporationsCorporationIDAssetsLocationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCorporationsCorporationIDAssetsLocationsResponse, error) {
	rsp, err := c.PostCorporationsCorporationIDAssetsLocationsWithBody(ctx, corporationID, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCorporationsCorporationIDAssetsLocationsResponse(rsp)
}

func (c *ClientWithResponses) PostCorporationsCorporationIDAssetsLocationsWithResponse(ctx context.Context, corporationID CorporationID, params *PostCorporationsCorporationIDAssetsLocationsParams, body PostCorporationsCorporationIDAssetsLocationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCorporationsCorporationIDAssetsLocationsResponse, error) {
	rsp, err := c.PostCorporationsCorporationIDAssetsLocations(ctx, corporationID, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCorporationsCorporationIDAssetsLocationsResponse(rsp)
}

// PostCorporationsCorporationIDAssetsNamesWithBodyWithResponse request with arbitrary body returning *PostCorporationsCorporationIDAssetsNamesResponse
func (c *ClientWithResponses) PostCorporationsCorporationIDAssetsNamesWithBodyWithResponse(ctx context.Context, corporationID CorporationID, params *PostCorporationsCorporationIDAssetsNamesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCorporationsCorporationIDAssetsNamesResponse, error) {
	rsp, err := c.PostCorporationsCorporationIDAssetsNamesWithBody(ctx, corporationID, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCorporationsCorporationIDAssetsNamesResponse(rsp)
}

func (c *ClientWithResponses) PostCorporationsCorporationIDAssetsNamesWithResponse(ctx context.Context, corporationID CorporationID, params *PostCorporationsCorporationIDAssetsNamesParams, body PostCorporationsCorporationIDAssetsNamesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCorporationsCorporationIDAssetsNamesResponse, error) {
	rsp, err := c.PostCorporationsCorporationIDAssetsNames(ctx, corporationID, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCorporationsCorporationIDAssetsNamesResponse(rsp)
}

// GetCorporationsCorporationIDBlueprintsWithResponse request returning *GetCorporationsCorporationIDBlueprintsResponse
func (c *ClientWithResponses) GetCorporationsCorporationIDBlueprintsWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDBlueprintsParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDBlueprintsResponse, error) {
	rsp, err := c.GetCorporationsCorporationIDBlueprints(ctx, corporationID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCorporationsCorporationIDBlueprintsResponse(rsp)
}

// GetCorporationsCorporationIDContactsWithResponse request returning *GetCorporationsCorporationIDContactsResponse
func (c *ClientWithResponses) GetCorporationsCorporationIDContactsWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDContactsParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDContactsResponse, error) {
	rsp, err := c.GetCorporationsCorporationIDContacts(ctx, corporationID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCorporationsCorporationIDContactsResponse(rsp)
}

// GetCorporationsCorporationIDContactsLabelsWithResponse request returning *GetCorporationsCorporationIDContactsLabelsResponse
func (c *ClientWithResponses) GetCorporationsCorporationIDContactsLabelsWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDContactsLabelsParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDContactsLabelsResponse, error) {
	rsp, err := c.GetCorporationsCorporationIDContactsLabels(ctx, corporationID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCorporationsCorporationIDContactsLabelsResponse(rsp)
}

// GetCorporationsCorporationIDContainersLogsWithResponse request returning *GetCorporationsCorporationIDContainersLogsResponse
func (c *ClientWithResponses) GetCorporationsCorporationIDContainersLogsWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDContainersLogsParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDContainersLogsResponse, error) {
	rsp, err := c.GetCorporationsCorporationIDContainersLogs(ctx, corporationID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCorporationsCorporationIDContainersLogsResponse(rsp)
}

// GetCorporationsCorporationIDContractsWithResponse request returning *GetCorporationsCorporationIDContractsResponse
func (c *ClientWithResponses) GetCorporationsCorporationIDContractsWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDContractsParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDContractsResponse, error) {
	rsp, err := c.GetCorporationsCorporationIDContracts(ctx, corporationID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCorporationsCorporationIDContractsResponse(rsp)
}

// GetCorporationsCorporationIDContractsContractIDBidsWithResponse request returning *GetCorporationsCorporationIDContractsContractIDBidsResponse
func (c *ClientWithResponses) GetCorporationsCorporationIDContractsContractIDBidsWithResponse(ctx context.Context, corporationID CorporationID, contractID int64, params *GetCorporationsCorporationIDContractsContractIDBidsParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDContractsContractIDBidsResponse, error) {
	rsp, err := c.GetCorporationsCorporationIDContractsContractIDBids(ctx, corporationID, contractID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCorporationsCorporationIDContractsContractIDBidsResponse(rsp)
}

// GetCorporationsCorporationIDContractsContractIDItemsWithResponse request returning *GetCorporationsCorporationIDContractsContractIDItemsResponse
func (c *ClientWithResponses) GetCorporationsCorporationIDContractsContractIDItemsWithResponse(ctx context.Context, corporationID CorporationID, contractID int64, params *GetCorporationsCorporationIDContractsContractIDItemsParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDContractsContractIDItemsResponse, error) {
	rsp, err := c.GetCorporationsCorporationIDContractsContractIDItems(ctx, corporationID, contractID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCorporationsCorporationIDContractsContractIDItemsResponse(rsp)
}

// GetCorporationsCorporationIDCustomsOfficesWithResponse request returning *GetCorporationsCorporationIDCustomsOfficesResponse
func (c *ClientWithResponses) GetCorporationsCorporationIDCustomsOfficesWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDCustomsOfficesParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDCustomsOfficesResponse, error) {
	rsp, err := c.GetCorporationsCorporationIDCustomsOffices(ctx, corporationID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCorporationsCorporationIDCustomsOfficesResponse(rsp)
}

// GetCorporationsCorporationIDDivisionsWithResponse request returning *GetCorporationsCorporationIDDivisionsResponse
func (c *ClientWithResponses) GetCorporationsCorporationIDDivisionsWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDDivisionsParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDDivisionsResponse, error) {
	rsp, err := c.GetCorporationsCorporationIDDivisions(ctx, corporationID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCorporationsCorporationIDDivisionsResponse(rsp)
}

// GetCorporationsCorporationIDFacilitiesWithResponse request returning *GetCorporationsCorporationIDFacilitiesResponse
func (c *ClientWithResponses) GetCorporationsCorporationIDFacilitiesWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDFacilitiesParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDFacilitiesResponse, error) {
	rsp, err := c.GetCorporationsCorporationIDFacilities(ctx, corporationID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCorporationsCorporationIDFacilitiesResponse(rsp)
}

// GetCorporationsCorporationIDFwStatsWithResponse request returning *GetCorporationsCorporationIDFwStatsResponse
func (c *ClientWithResponses) GetCorporationsCorporationIDFwStatsWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDFwStatsParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDFwStatsResponse, error) {
	rsp, err := c.GetCorporationsCorporationIDFwStats(ctx, corporationID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCorporationsCorporationIDFwStatsResponse(rsp)
}

// GetCorporationsCorporationIDIconsWithResponse request returning *GetCorporationsCorporationIDIconsResponse
func (c *ClientWithResponses) GetCorporationsCorporationIDIconsWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDIconsParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDIconsResponse, error) {
	rsp, err := c.GetCorporationsCorporationIDIcons(ctx, corporationID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCorporationsCorporationIDIconsResponse(rsp)
}

// GetCorporationsCorporationIDIndustryJobsWithResponse request returning *GetCorporationsCorporationIDIndustryJobsResponse
func (c *ClientWithResponses) GetCorporationsCorporationIDIndustryJobsWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDIndustryJobsParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDIndustryJobsResponse, error) {
	rsp, err := c.GetCorporationsCorporationIDIndustryJobs(ctx, corporationID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCorporationsCorporationIDIndustryJobsResponse(rsp)
}

// GetCorporationsCorporationIDKillmailsRecentWithResponse request returning *GetCorporationsCorporationIDKillmailsRecentResponse
func (c *ClientWithResponses) GetCorporationsCorporationIDKillmailsRecentWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDKillmailsRecentParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDKillmailsRecentResponse, error) {
	rsp, err := c.GetCorporationsCorporationIDKillmailsRecent(ctx, corporationID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCorporationsCorporationIDKillmailsRecentResponse(rsp)
}

// GetCorporationsCorporationIDMedalsWithResponse request returning *GetCorporationsCorporationIDMedalsResponse
func (c *ClientWithResponses) GetCorporationsCorporationIDMedalsWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDMedalsParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDMedalsResponse, error) {
	rsp, err := c.GetCorporationsCorporationIDMedals(ctx, corporationID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCorporationsCorporationIDMedalsResponse(rsp)
}

// GetCorporationsCorporationIDMedalsIssuedWithResponse request returning *GetCorporationsCorporationIDMedalsIssuedResponse
func (c *ClientWithResponses) GetCorporationsCorporationIDMedalsIssuedWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDMedalsIssuedParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDMedalsIssuedResponse, error) {
	rsp, err := c.GetCorporationsCorporationIDMedalsIssued(ctx, corporationID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCorporationsCorporationIDMedalsIssuedResponse(rsp)
}

// GetCorporationsCorporationIDMembersWithResponse request returning *GetCorporationsCorporationIDMembersResponse
func (c *ClientWithResponses) GetCorporationsCorporationIDMembersWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDMembersParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDMembersResponse, error) {
	rsp, err := c.GetCorporationsCorporationIDMembers(ctx, corporationID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCorporationsCorporationIDMembersResponse(rsp)
}

// GetCorporationsCorporationIDMembersLimitWithResponse request returning *GetCorporationsCorporationIDMembersLimitResponse
func (c *ClientWithResponses) GetCorporationsCorporationIDMembersLimitWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDMembersLimitParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDMembersLimitResponse, error) {
	rsp, err := c.GetCorporationsCorporationIDMembersLimit(ctx, corporationID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCorporationsCorporationIDMembersLimitResponse(rsp)
}

// GetCorporationsCorporationIDMembersTitlesWithResponse request returning *GetCorporationsCorporationIDMembersTitlesResponse
func (c *ClientWithResponses) GetCorporationsCorporationIDMembersTitlesWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDMembersTitlesParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDMembersTitlesResponse, error) {
	rsp, err := c.GetCorporationsCorporationIDMembersTitles(ctx, corporationID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCorporationsCorporationIDMembersTitlesResponse(rsp)
}

// GetCorporationsCorporationIDMembertrackingWithResponse request returning *GetCorporationsCorporationIDMembertrackingResponse
func (c *ClientWithResponses) GetCorporationsCorporationIDMembertrackingWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDMembertrackingParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDMembertrackingResponse, error) {
	rsp, err := c.GetCorporationsCorporationIDMembertracking(ctx, corporationID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCorporationsCorporationIDMembertrackingResponse(rsp)
}

// GetCorporationsCorporationIDOrdersWithResponse request returning *GetCorporationsCorporationIDOrdersResponse
func (c *ClientWithResponses) GetCorporationsCorporationIDOrdersWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDOrdersParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDOrdersResponse, error) {
	rsp, err := c.GetCorporationsCorporationIDOrders(ctx, corporationID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCorporationsCorporationIDOrdersResponse(rsp)
}

// GetCorporationsCorporationIDOrdersHistoryWithResponse request returning *GetCorporationsCorporationIDOrdersHistoryResponse
func (c *ClientWithResponses) GetCorporationsCorporationIDOrdersHistoryWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDOrdersHistoryParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDOrdersHistoryResponse, error) {
	rsp, err := c.GetCorporationsCorporationIDOrdersHistory(ctx, corporationID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCorporationsCorporationIDOrdersHistoryResponse(rsp)
}

// GetCorporationsCorporationIDRolesWithResponse request returning *GetCorporationsCorporationIDRolesResponse
func (c *ClientWithResponses) GetCorporationsCorporationIDRolesWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDRolesParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDRolesResponse, error) {
	rsp, err := c.GetCorporationsCorporationIDRoles(ctx, corporationID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCorporationsCorporationIDRolesResponse(rsp)
}

// GetCorporationsCorporationIDRolesHistoryWithResponse request returning *GetCorporationsCorporationIDRolesHistoryResponse
func (c *ClientWithResponses) GetCorporationsCorporationIDRolesHistoryWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDRolesHistoryParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDRolesHistoryResponse, error) {
	rsp, err := c.GetCorporationsCorporationIDRolesHistory(ctx, corporationID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCorporationsCorporationIDRolesHistoryResponse(rsp)
}

// GetCorporationsCorporationIDShareholdersWithResponse request returning *GetCorporationsCorporationIDShareholdersResponse
func (c *ClientWithResponses) GetCorporationsCorporationIDShareholdersWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDShareholdersParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDShareholdersResponse, error) {
	rsp, err := c.GetCorporationsCorporationIDShareholders(ctx, corporationID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCorporationsCorporationIDShareholdersResponse(rsp)
}

// GetCorporationsCorporationIDStandingsWithResponse request returning *GetCorporationsCorporationIDStandingsResponse
func (c *ClientWithResponses) GetCorporationsCorporationIDStandingsWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDStandingsParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDStandingsResponse, error) {
	rsp, err := c.GetCorporationsCorporationIDStandings(ctx, corporationID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCorporationsCorporationIDStandingsResponse(rsp)
}

// GetCorporationsCorporationIDStarbasesWithResponse request returning *GetCorporationsCorporationIDStarbasesResponse
func (c *ClientWithResponses) GetCorporationsCorporationIDStarbasesWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDStarbasesParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDStarbasesResponse, error) {
	rsp, err := c.GetCorporationsCorporationIDStarbases(ctx, corporationID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCorporationsCorporationIDStarbasesResponse(rsp)
}

// GetCorporationsCorporationIDStarbasesStarbaseIDWithResponse request returning *GetCorporationsCorporationIDStarbasesStarbaseIDResponse
func (c *ClientWithResponses) GetCorporationsCorporationIDStarbasesStarbaseIDWithResponse(ctx context.Context, corporationID CorporationID, starbaseID int64, params *GetCorporationsCorporationIDStarbasesStarbaseIDParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDStarbasesStarbaseIDResponse, error) {
	rsp, err := c.GetCorporationsCorporationIDStarbasesStarbaseID(ctx, corporationID, starbaseID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCorporationsCorporationIDStarbasesStarbaseIDResponse(rsp)
}

// GetCorporationsCorporationIDStructuresWithResponse request returning *GetCorporationsCorporationIDStructuresResponse
func (c *ClientWithResponses) GetCorporationsCorporationIDStructuresWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDStructuresParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDStructuresResponse, error) {
	rsp, err := c.GetCorporationsCorporationIDStructures(ctx, corporationID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCorporationsCorporationIDStructuresResponse(rsp)
}

// GetCorporationsCorporationIDTitlesWithResponse request returning *GetCorporationsCorporationIDTitlesResponse
func (c *ClientWithResponses) GetCorporationsCorporationIDTitlesWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDTitlesParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDTitlesResponse, error) {
	rsp, err := c.GetCorporationsCorporationIDTitles(ctx, corporationID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCorporationsCorporationIDTitlesResponse(rsp)
}

// GetCorporationsCorporationIDWalletsWithResponse request returning *GetCorporationsCorporationIDWalletsResponse
func (c *ClientWithResponses) GetCorporationsCorporationIDWalletsWithResponse(ctx context.Context, corporationID CorporationID, params *GetCorporationsCorporationIDWalletsParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDWalletsResponse, error) {
	rsp, err := c.GetCorporationsCorporationIDWallets(ctx, corporationID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCorporationsCorporationIDWalletsResponse(rsp)
}

// GetCorporationsCorporationIDWalletsDivisionJournalWithResponse request returning *GetCorporationsCorporationIDWalletsDivisionJournalResponse
func (c *ClientWithResponses) GetCorporationsCorporationIDWalletsDivisionJournalWithResponse(ctx context.Context, corporationID CorporationID, division int64, params *GetCorporationsCorporationIDWalletsDivisionJournalParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDWalletsDivisionJournalResponse, error) {
	rsp, err := c.GetCorporationsCorporationIDWalletsDivisionJournal(ctx, corporationID, division, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCorporationsCorporationIDWalletsDivisionJournalResponse(rsp)
}

// GetCorporationsCorporationIDWalletsDivisionTransactionsWithResponse request returning *GetCorporationsCorporationIDWalletsDivisionTransactionsResponse
func (c *ClientWithResponses) GetCorporationsCorporationIDWalletsDivisionTransactionsWithResponse(ctx context.Context, corporationID CorporationID, division int64, params *GetCorporationsCorporationIDWalletsDivisionTransactionsParams, reqEditors ...RequestEditorFn) (*GetCorporationsCorporationIDWalletsDivisionTransactionsResponse, error) {
	rsp, err := c.GetCorporationsCorporationIDWalletsDivisionTransactions(ctx, corporationID, division, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCorporationsCorporationIDWalletsDivisionTransactionsResponse(rsp)
}

// GetDogmaAttributesWithResponse request returning *GetDogmaAttributesResponse
func (c *ClientWithResponses) GetDogmaAttributesWithResponse(ctx context.Context, params *GetDogmaAttributesParams, reqEditors ...RequestEditorFn) (*GetDogmaAttributesResponse, error) {
	rsp, err := c.GetDogmaAttributes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDogmaAttributesResponse(rsp)
}

// GetDogmaAttributesAttributeIDWithResponse request returning *GetDogmaAttributesAttributeIDResponse
func (c *ClientWithResponses) GetDogmaAttributesAttributeIDWithResponse(ctx context.Context, attributeID int64, params *GetDogmaAttributesAttributeIDParams, reqEditors ...RequestEditorFn) (*GetDogmaAttributesAttributeIDResponse, error) {
	rsp, err := c.GetDogmaAttributesAttributeID(ctx, attributeID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDogmaAttributesAttributeIDResponse(rsp)
}

// GetDogmaDynamicItemsTypeIDItemIDWithResponse request returning *GetDogmaDynamicItemsTypeIDItemIDResponse
func (c *ClientWithResponses) GetDogmaDynamicItemsTypeIDItemIDWithResponse(ctx context.Context, typeID int64, itemID int64, params *GetDogmaDynamicItemsTypeIDItemIDParams, reqEditors ...RequestEditorFn) (*GetDogmaDynamicItemsTypeIDItemIDResponse, error) {
	rsp, err := c.GetDogmaDynamicItemsTypeIDItemID(ctx, typeID, itemID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDogmaDynamicItemsTypeIDItemIDResponse(rsp)
}

// GetDogmaEffectsWithResponse request returning *GetDogmaEffectsResponse
func (c *ClientWithResponses) GetDogmaEffectsWithResponse(ctx context.Context, params *GetDogmaEffectsParams, reqEditors ...RequestEditorFn) (*GetDogmaEffectsResponse, error) {
	rsp, err := c.GetDogmaEffects(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDogmaEffectsResponse(rsp)
}

// GetDogmaEffectsEffectIDWithResponse request returning *GetDogmaEffectsEffectIDResponse
func (c *ClientWithResponses) GetDogmaEffectsEffectIDWithResponse(ctx context.Context, effectID int64, params *GetDogmaEffectsEffectIDParams, reqEditors ...RequestEditorFn) (*GetDogmaEffectsEffectIDResponse, error) {
	rsp, err := c.GetDogmaEffectsEffectID(ctx, effectID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDogmaEffectsEffectIDResponse(rsp)
}

// GetFleetsFleetIDWithResponse request returning *GetFleetsFleetIDResponse
func (c *ClientWithResponses) GetFleetsFleetIDWithResponse(ctx context.Context, fleetID int64, params *GetFleetsFleetIDParams, reqEditors ...RequestEditorFn) (*GetFleetsFleetIDResponse, error) {
	rsp, err := c.GetFleetsFleetID(ctx, fleetID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFleetsFleetIDResponse(rsp)
}

// PutFleetsFleetIDWithBodyWithResponse request with arbitrary body returning *PutFleetsFleetIDResponse
func (c *ClientWithResponses) PutFleetsFleetIDWithBodyWithResponse(ctx context.Context, fleetID int64, params *PutFleetsFleetIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutFleetsFleetIDResponse, error) {
	rsp, err := c.PutFleetsFleetIDWithBody(ctx, fleetID, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutFleetsFleetIDResponse(rsp)
}

func (c *ClientWithResponses) PutFleetsFleetIDWithResponse(ctx context.Context, fleetID int64, params *PutFleetsFleetIDParams, body PutFleetsFleetIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutFleetsFleetIDResponse, error) {
	rsp, err := c.PutFleetsFleetID(ctx, fleetID, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutFleetsFleetIDResponse(rsp)
}

// GetFleetsFleetIDMembersWithResponse request returning *GetFleetsFleetIDMembersResponse
func (c *ClientWithResponses) GetFleetsFleetIDMembersWithResponse(ctx context.Context, fleetID int64, params *GetFleetsFleetIDMembersParams, reqEditors ...RequestEditorFn) (*GetFleetsFleetIDMembersResponse, error) {
	rsp, err := c.GetFleetsFleetIDMembers(ctx, fleetID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFleetsFleetIDMembersResponse(rsp)
}

// PostFleetsFleetIDMembersWithBodyWithResponse request with arbitrary body returning *PostFleetsFleetIDMembersResponse
func (c *ClientWithResponses) PostFleetsFleetIDMembersWithBodyWithResponse(ctx context.Context, fleetID int64, params *PostFleetsFleetIDMembersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFleetsFleetIDMembersResponse, error) {
	rsp, err := c.PostFleetsFleetIDMembersWithBody(ctx, fleetID, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFleetsFleetIDMembersResponse(rsp)
}

func (c *ClientWithResponses) PostFleetsFleetIDMembersWithResponse(ctx context.Context, fleetID int64, params *PostFleetsFleetIDMembersParams, body PostFleetsFleetIDMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFleetsFleetIDMembersResponse, error) {
	rsp, err := c.PostFleetsFleetIDMembers(ctx, fleetID, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFleetsFleetIDMembersResponse(rsp)
}

// DeleteFleetsFleetIDMembersMemberIDWithResponse request returning *DeleteFleetsFleetIDMembersMemberIDResponse
func (c *ClientWithResponses) DeleteFleetsFleetIDMembersMemberIDWithResponse(ctx context.Context, fleetID int64, memberID int64, params *DeleteFleetsFleetIDMembersMemberIDParams, reqEditors ...RequestEditorFn) (*DeleteFleetsFleetIDMembersMemberIDResponse, error) {
	rsp, err := c.DeleteFleetsFleetIDMembersMemberID(ctx, fleetID, memberID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFleetsFleetIDMembersMemberIDResponse(rsp)
}

// PutFleetsFleetIDMembersMemberIDWithBodyWithResponse request with arbitrary body returning *PutFleetsFleetIDMembersMemberIDResponse
func (c *ClientWithResponses) PutFleetsFleetIDMembersMemberIDWithBodyWithResponse(ctx context.Context, fleetID int64, memberID int64, params *PutFleetsFleetIDMembersMemberIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutFleetsFleetIDMembersMemberIDResponse, error) {
	rsp, err := c.PutFleetsFleetIDMembersMemberIDWithBody(ctx, fleetID, memberID, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutFleetsFleetIDMembersMemberIDResponse(rsp)
}

func (c *ClientWithResponses) PutFleetsFleetIDMembersMemberIDWithResponse(ctx context.Context, fleetID int64, memberID int64, params *PutFleetsFleetIDMembersMemberIDParams, body PutFleetsFleetIDMembersMemberIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutFleetsFleetIDMembersMemberIDResponse, error) {
	rsp, err := c.PutFleetsFleetIDMembersMemberID(ctx, fleetID, memberID, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutFleetsFleetIDMembersMemberIDResponse(rsp)
}

// DeleteFleetsFleetIDSquadsSquadIDWithResponse request returning *DeleteFleetsFleetIDSquadsSquadIDResponse
func (c *ClientWithResponses) DeleteFleetsFleetIDSquadsSquadIDWithResponse(ctx context.Context, fleetID int64, squadID int64, params *DeleteFleetsFleetIDSquadsSquadIDParams, reqEditors ...RequestEditorFn) (*DeleteFleetsFleetIDSquadsSquadIDResponse, error) {
	rsp, err := c.DeleteFleetsFleetIDSquadsSquadID(ctx, fleetID, squadID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFleetsFleetIDSquadsSquadIDResponse(rsp)
}

// PutFleetsFleetIDSquadsSquadIDWithBodyWithResponse request with arbitrary body returning *PutFleetsFleetIDSquadsSquadIDResponse
func (c *ClientWithResponses) PutFleetsFleetIDSquadsSquadIDWithBodyWithResponse(ctx context.Context, fleetID int64, squadID int64, params *PutFleetsFleetIDSquadsSquadIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutFleetsFleetIDSquadsSquadIDResponse, error) {
	rsp, err := c.PutFleetsFleetIDSquadsSquadIDWithBody(ctx, fleetID, squadID, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutFleetsFleetIDSquadsSquadIDResponse(rsp)
}

func (c *ClientWithResponses) PutFleetsFleetIDSquadsSquadIDWithResponse(ctx context.Context, fleetID int64, squadID int64, params *PutFleetsFleetIDSquadsSquadIDParams, body PutFleetsFleetIDSquadsSquadIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutFleetsFleetIDSquadsSquadIDResponse, error) {
	rsp, err := c.PutFleetsFleetIDSquadsSquadID(ctx, fleetID, squadID, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutFleetsFleetIDSquadsSquadIDResponse(rsp)
}

// GetFleetsFleetIDWingsWithResponse request returning *GetFleetsFleetIDWingsResponse
func (c *ClientWithResponses) GetFleetsFleetIDWingsWithResponse(ctx context.Context, fleetID int64, params *GetFleetsFleetIDWingsParams, reqEditors ...RequestEditorFn) (*GetFleetsFleetIDWingsResponse, error) {
	rsp, err := c.GetFleetsFleetIDWings(ctx, fleetID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFleetsFleetIDWingsResponse(rsp)
}

// PostFleetsFleetIDWingsWithResponse request returning *PostFleetsFleetIDWingsResponse
func (c *ClientWithResponses) PostFleetsFleetIDWingsWithResponse(ctx context.Context, fleetID int64, params *PostFleetsFleetIDWingsParams, reqEditors ...RequestEditorFn) (*PostFleetsFleetIDWingsResponse, error) {
	rsp, err := c.PostFleetsFleetIDWings(ctx, fleetID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFleetsFleetIDWingsResponse(rsp)
}

// DeleteFleetsFleetIDWingsWingIDWithResponse request returning *DeleteFleetsFleetIDWingsWingIDResponse
func (c *ClientWithResponses) DeleteFleetsFleetIDWingsWingIDWithResponse(ctx context.Context, fleetID int64, wingID int64, params *DeleteFleetsFleetIDWingsWingIDParams, reqEditors ...RequestEditorFn) (*DeleteFleetsFleetIDWingsWingIDResponse, error) {
	rsp, err := c.DeleteFleetsFleetIDWingsWingID(ctx, fleetID, wingID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFleetsFleetIDWingsWingIDResponse(rsp)
}

// PutFleetsFleetIDWingsWingIDWithBodyWithResponse request with arbitrary body returning *PutFleetsFleetIDWingsWingIDResponse
func (c *ClientWithResponses) PutFleetsFleetIDWingsWingIDWithBodyWithResponse(ctx context.Context, fleetID int64, wingID int64, params *PutFleetsFleetIDWingsWingIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutFleetsFleetIDWingsWingIDResponse, error) {
	rsp, err := c.PutFleetsFleetIDWingsWingIDWithBody(ctx, fleetID, wingID, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutFleetsFleetIDWingsWingIDResponse(rsp)
}

func (c *ClientWithResponses) PutFleetsFleetIDWingsWingIDWithResponse(ctx context.Context, fleetID int64, wingID int64, params *PutFleetsFleetIDWingsWingIDParams, body PutFleetsFleetIDWingsWingIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutFleetsFleetIDWingsWingIDResponse, error) {
	rsp, err := c.PutFleetsFleetIDWingsWingID(ctx, fleetID, wingID, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutFleetsFleetIDWingsWingIDResponse(rsp)
}

// PostFleetsFleetIDWingsWingIDSquadsWithResponse request returning *PostFleetsFleetIDWingsWingIDSquadsResponse
func (c *ClientWithResponses) PostFleetsFleetIDWingsWingIDSquadsWithResponse(ctx context.Context, fleetID int64, wingID int64, params *PostFleetsFleetIDWingsWingIDSquadsParams, reqEditors ...RequestEditorFn) (*PostFleetsFleetIDWingsWingIDSquadsResponse, error) {
	rsp, err := c.PostFleetsFleetIDWingsWingIDSquads(ctx, fleetID, wingID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFleetsFleetIDWingsWingIDSquadsResponse(rsp)
}

// GetFwLeaderboardsWithResponse request returning *GetFwLeaderboardsResponse
func (c *ClientWithResponses) GetFwLeaderboardsWithResponse(ctx context.Context, params *GetFwLeaderboardsParams, reqEditors ...RequestEditorFn) (*GetFwLeaderboardsResponse, error) {
	rsp, err := c.GetFwLeaderboards(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFwLeaderboardsResponse(rsp)
}

// GetFwLeaderboardsCharactersWithResponse request returning *GetFwLeaderboardsCharactersResponse
func (c *ClientWithResponses) GetFwLeaderboardsCharactersWithResponse(ctx context.Context, params *GetFwLeaderboardsCharactersParams, reqEditors ...RequestEditorFn) (*GetFwLeaderboardsCharactersResponse, error) {
	rsp, err := c.GetFwLeaderboardsCharacters(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFwLeaderboardsCharactersResponse(rsp)
}

// GetFwLeaderboardsCorporationsWithResponse request returning *GetFwLeaderboardsCorporationsResponse
func (c *ClientWithResponses) GetFwLeaderboardsCorporationsWithResponse(ctx context.Context, params *GetFwLeaderboardsCorporationsParams, reqEditors ...RequestEditorFn) (*GetFwLeaderboardsCorporationsResponse, error) {
	rsp, err := c.GetFwLeaderboardsCorporations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFwLeaderboardsCorporationsResponse(rsp)
}

// GetFwStatsWithResponse request returning *GetFwStatsResponse
func (c *ClientWithResponses) GetFwStatsWithResponse(ctx context.Context, params *GetFwStatsParams, reqEditors ...RequestEditorFn) (*GetFwStatsResponse, error) {
	rsp, err := c.GetFwStats(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFwStatsResponse(rsp)
}

// GetFwSystemsWithResponse request returning *GetFwSystemsResponse
func (c *ClientWithResponses) GetFwSystemsWithResponse(ctx context.Context, params *GetFwSystemsParams, reqEditors ...RequestEditorFn) (*GetFwSystemsResponse, error) {
	rsp, err := c.GetFwSystems(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFwSystemsResponse(rsp)
}

// GetFwWarsWithResponse request returning *GetFwWarsResponse
func (c *ClientWithResponses) GetFwWarsWithResponse(ctx context.Context, params *GetFwWarsParams, reqEditors ...RequestEditorFn) (*GetFwWarsResponse, error) {
	rsp, err := c.GetFwWars(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFwWarsResponse(rsp)
}

// GetIncursionsWithResponse request returning *GetIncursionsResponse
func (c *ClientWithResponses) GetIncursionsWithResponse(ctx context.Context, params *GetIncursionsParams, reqEditors ...RequestEditorFn) (*GetIncursionsResponse, error) {
	rsp, err := c.GetIncursions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncursionsResponse(rsp)
}

// GetIndustryFacilitiesWithResponse request returning *GetIndustryFacilitiesResponse
func (c *ClientWithResponses) GetIndustryFacilitiesWithResponse(ctx context.Context, params *GetIndustryFacilitiesParams, reqEditors ...RequestEditorFn) (*GetIndustryFacilitiesResponse, error) {
	rsp, err := c.GetIndustryFacilities(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndustryFacilitiesResponse(rsp)
}

// GetIndustrySystemsWithResponse request returning *GetIndustrySystemsResponse
func (c *ClientWithResponses) GetIndustrySystemsWithResponse(ctx context.Context, params *GetIndustrySystemsParams, reqEditors ...RequestEditorFn) (*GetIndustrySystemsResponse, error) {
	rsp, err := c.GetIndustrySystems(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndustrySystemsResponse(rsp)
}

// GetInsurancePricesWithResponse request returning *GetInsurancePricesResponse
func (c *ClientWithResponses) GetInsurancePricesWithResponse(ctx context.Context, params *GetInsurancePricesParams, reqEditors ...RequestEditorFn) (*GetInsurancePricesResponse, error) {
	rsp, err := c.GetInsurancePrices(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInsurancePricesResponse(rsp)
}

// GetKillmailsKillmailIDKillmailHashWithResponse request returning *GetKillmailsKillmailIDKillmailHashResponse
func (c *ClientWithResponses) GetKillmailsKillmailIDKillmailHashWithResponse(ctx context.Context, killmailID int64, killmailHash string, params *GetKillmailsKillmailIDKillmailHashParams, reqEditors ...RequestEditorFn) (*GetKillmailsKillmailIDKillmailHashResponse, error) {
	rsp, err := c.GetKillmailsKillmailIDKillmailHash(ctx, killmailID, killmailHash, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetKillmailsKillmailIDKillmailHashResponse(rsp)
}

// GetLoyaltyStoresCorporationIDOffersWithResponse request returning *GetLoyaltyStoresCorporationIDOffersResponse
func (c *ClientWithResponses) GetLoyaltyStoresCorporationIDOffersWithResponse(ctx context.Context, corporationID CorporationID, params *GetLoyaltyStoresCorporationIDOffersParams, reqEditors ...RequestEditorFn) (*GetLoyaltyStoresCorporationIDOffersResponse, error) {
	rsp, err := c.GetLoyaltyStoresCorporationIDOffers(ctx, corporationID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLoyaltyStoresCorporationIDOffersResponse(rsp)
}

// GetMarketsGroupsWithResponse request returning *GetMarketsGroupsResponse
func (c *ClientWithResponses) GetMarketsGroupsWithResponse(ctx context.Context, params *GetMarketsGroupsParams, reqEditors ...RequestEditorFn) (*GetMarketsGroupsResponse, error) {
	rsp, err := c.GetMarketsGroups(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMarketsGroupsResponse(rsp)
}

// GetMarketsGroupsMarketGroupIDWithResponse request returning *GetMarketsGroupsMarketGroupIDResponse
func (c *ClientWithResponses) GetMarketsGroupsMarketGroupIDWithResponse(ctx context.Context, marketGroupID int64, params *GetMarketsGroupsMarketGroupIDParams, reqEditors ...RequestEditorFn) (*GetMarketsGroupsMarketGroupIDResponse, error) {
	rsp, err := c.GetMarketsGroupsMarketGroupID(ctx, marketGroupID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMarketsGroupsMarketGroupIDResponse(rsp)
}

// GetMarketsPricesWithResponse request returning *GetMarketsPricesResponse
func (c *ClientWithResponses) GetMarketsPricesWithResponse(ctx context.Context, params *GetMarketsPricesParams, reqEditors ...RequestEditorFn) (*GetMarketsPricesResponse, error) {
	rsp, err := c.GetMarketsPrices(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMarketsPricesResponse(rsp)
}

// GetMarketsStructuresStructureIDWithResponse request returning *GetMarketsStructuresStructureIDResponse
func (c *ClientWithResponses) GetMarketsStructuresStructureIDWithResponse(ctx context.Context, structureID int64, params *GetMarketsStructuresStructureIDParams, reqEditors ...RequestEditorFn) (*GetMarketsStructuresStructureIDResponse, error) {
	rsp, err := c.GetMarketsStructuresStructureID(ctx, structureID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMarketsStructuresStructureIDResponse(rsp)
}

// GetMarketsRegionIDHistoryWithResponse request returning *GetMarketsRegionIDHistoryResponse
func (c *ClientWithResponses) GetMarketsRegionIDHistoryWithResponse(ctx context.Context, regionID int64, params *GetMarketsRegionIDHistoryParams, reqEditors ...RequestEditorFn) (*GetMarketsRegionIDHistoryResponse, error) {
	rsp, err := c.GetMarketsRegionIDHistory(ctx, regionID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMarketsRegionIDHistoryResponse(rsp)
}

// GetMarketsRegionIDOrdersWithResponse request returning *GetMarketsRegionIDOrdersResponse
func (c *ClientWithResponses) GetMarketsRegionIDOrdersWithResponse(ctx context.Context, regionID int64, params *GetMarketsRegionIDOrdersParams, reqEditors ...RequestEditorFn) (*GetMarketsRegionIDOrdersResponse, error) {
	rsp, err := c.GetMarketsRegionIDOrders(ctx, regionID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMarketsRegionIDOrdersResponse(rsp)
}

// GetMarketsRegionIDTypesWithResponse request returning *GetMarketsRegionIDTypesResponse
func (c *ClientWithResponses) GetMarketsRegionIDTypesWithResponse(ctx context.Context, regionID int64, params *GetMarketsRegionIDTypesParams, reqEditors ...RequestEditorFn) (*GetMarketsRegionIDTypesResponse, error) {
	rsp, err := c.GetMarketsRegionIDTypes(ctx, regionID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMarketsRegionIDTypesResponse(rsp)
}

// GetRouteOriginDestinationWithResponse request returning *GetRouteOriginDestinationResponse
func (c *ClientWithResponses) GetRouteOriginDestinationWithResponse(ctx context.Context, origin int64, destination int64, params *GetRouteOriginDestinationParams, reqEditors ...RequestEditorFn) (*GetRouteOriginDestinationResponse, error) {
	rsp, err := c.GetRouteOriginDestination(ctx, origin, destination, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRouteOriginDestinationResponse(rsp)
}

// GetSovereigntyCampaignsWithResponse request returning *GetSovereigntyCampaignsResponse
func (c *ClientWithResponses) GetSovereigntyCampaignsWithResponse(ctx context.Context, params *GetSovereigntyCampaignsParams, reqEditors ...RequestEditorFn) (*GetSovereigntyCampaignsResponse, error) {
	rsp, err := c.GetSovereigntyCampaigns(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSovereigntyCampaignsResponse(rsp)
}

// GetSovereigntyMapWithResponse request returning *GetSovereigntyMapResponse
func (c *ClientWithResponses) GetSovereigntyMapWithResponse(ctx context.Context, params *GetSovereigntyMapParams, reqEditors ...RequestEditorFn) (*GetSovereigntyMapResponse, error) {
	rsp, err := c.GetSovereigntyMap(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSovereigntyMapResponse(rsp)
}

// GetSovereigntyStructuresWithResponse request returning *GetSovereigntyStructuresResponse
func (c *ClientWithResponses) GetSovereigntyStructuresWithResponse(ctx context.Context, params *GetSovereigntyStructuresParams, reqEditors ...RequestEditorFn) (*GetSovereigntyStructuresResponse, error) {
	rsp, err := c.GetSovereigntyStructures(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSovereigntyStructuresResponse(rsp)
}

// GetStatusWithResponse request returning *GetStatusResponse
func (c *ClientWithResponses) GetStatusWithResponse(ctx context.Context, params *GetStatusParams, reqEditors ...RequestEditorFn) (*GetStatusResponse, error) {
	rsp, err := c.GetStatus(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusResponse(rsp)
}

// PostUIAutopilotWaypointWithResponse request returning *PostUIAutopilotWaypointResponse
func (c *ClientWithResponses) PostUIAutopilotWaypointWithResponse(ctx context.Context, params *PostUIAutopilotWaypointParams, reqEditors ...RequestEditorFn) (*PostUIAutopilotWaypointResponse, error) {
	rsp, err := c.PostUIAutopilotWaypoint(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUIAutopilotWaypointResponse(rsp)
}

// PostUIOpenwindowContractWithResponse request returning *PostUIOpenwindowContractResponse
func (c *ClientWithResponses) PostUIOpenwindowContractWithResponse(ctx context.Context, params *PostUIOpenwindowContractParams, reqEditors ...RequestEditorFn) (*PostUIOpenwindowContractResponse, error) {
	rsp, err := c.PostUIOpenwindowContract(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUIOpenwindowContractResponse(rsp)
}

// PostUIOpenwindowInformationWithResponse request returning *PostUIOpenwindowInformationResponse
func (c *ClientWithResponses) PostUIOpenwindowInformationWithResponse(ctx context.Context, params *PostUIOpenwindowInformationParams, reqEditors ...RequestEditorFn) (*PostUIOpenwindowInformationResponse, error) {
	rsp, err := c.PostUIOpenwindowInformation(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUIOpenwindowInformationResponse(rsp)
}

// PostUIOpenwindowMarketdetailsWithResponse request returning *PostUIOpenwindowMarketdetailsResponse
func (c *ClientWithResponses) PostUIOpenwindowMarketdetailsWithResponse(ctx context.Context, params *PostUIOpenwindowMarketdetailsParams, reqEditors ...RequestEditorFn) (*PostUIOpenwindowMarketdetailsResponse, error) {
	rsp, err := c.PostUIOpenwindowMarketdetails(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUIOpenwindowMarketdetailsResponse(rsp)
}

// PostUIOpenwindowNewmailWithBodyWithResponse request with arbitrary body returning *PostUIOpenwindowNewmailResponse
func (c *ClientWithResponses) PostUIOpenwindowNewmailWithBodyWithResponse(ctx context.Context, params *PostUIOpenwindowNewmailParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUIOpenwindowNewmailResponse, error) {
	rsp, err := c.PostUIOpenwindowNewmailWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUIOpenwindowNewmailResponse(rsp)
}

func (c *ClientWithResponses) PostUIOpenwindowNewmailWithResponse(ctx context.Context, params *PostUIOpenwindowNewmailParams, body PostUIOpenwindowNewmailJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUIOpenwindowNewmailResponse, error) {
	rsp, err := c.PostUIOpenwindowNewmail(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUIOpenwindowNewmailResponse(rsp)
}

// GetUniverseAncestriesWithResponse request returning *GetUniverseAncestriesResponse
func (c *ClientWithResponses) GetUniverseAncestriesWithResponse(ctx context.Context, params *GetUniverseAncestriesParams, reqEditors ...RequestEditorFn) (*GetUniverseAncestriesResponse, error) {
	rsp, err := c.GetUniverseAncestries(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUniverseAncestriesResponse(rsp)
}

// GetUniverseAsteroidBeltsAsteroidBeltIDWithResponse request returning *GetUniverseAsteroidBeltsAsteroidBeltIDResponse
func (c *ClientWithResponses) GetUniverseAsteroidBeltsAsteroidBeltIDWithResponse(ctx context.Context, asteroidBeltID int64, params *GetUniverseAsteroidBeltsAsteroidBeltIDParams, reqEditors ...RequestEditorFn) (*GetUniverseAsteroidBeltsAsteroidBeltIDResponse, error) {
	rsp, err := c.GetUniverseAsteroidBeltsAsteroidBeltID(ctx, asteroidBeltID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUniverseAsteroidBeltsAsteroidBeltIDResponse(rsp)
}

// GetUniverseBloodlinesWithResponse request returning *GetUniverseBloodlinesResponse
func (c *ClientWithResponses) GetUniverseBloodlinesWithResponse(ctx context.Context, params *GetUniverseBloodlinesParams, reqEditors ...RequestEditorFn) (*GetUniverseBloodlinesResponse, error) {
	rsp, err := c.GetUniverseBloodlines(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUniverseBloodlinesResponse(rsp)
}

// GetUniverseCategoriesWithResponse request returning *GetUniverseCategoriesResponse
func (c *ClientWithResponses) GetUniverseCategoriesWithResponse(ctx context.Context, params *GetUniverseCategoriesParams, reqEditors ...RequestEditorFn) (*GetUniverseCategoriesResponse, error) {
	rsp, err := c.GetUniverseCategories(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUniverseCategoriesResponse(rsp)
}

// GetUniverseCategoriesCategoryIDWithResponse request returning *GetUniverseCategoriesCategoryIDResponse
func (c *ClientWithResponses) GetUniverseCategoriesCategoryIDWithResponse(ctx context.Context, categoryID int64, params *GetUniverseCategoriesCategoryIDParams, reqEditors ...RequestEditorFn) (*GetUniverseCategoriesCategoryIDResponse, error) {
	rsp, err := c.GetUniverseCategoriesCategoryID(ctx, categoryID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUniverseCategoriesCategoryIDResponse(rsp)
}

// GetUniverseConstellationsWithResponse request returning *GetUniverseConstellationsResponse
func (c *ClientWithResponses) GetUniverseConstellationsWithResponse(ctx context.Context, params *GetUniverseConstellationsParams, reqEditors ...RequestEditorFn) (*GetUniverseConstellationsResponse, error) {
	rsp, err := c.GetUniverseConstellations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUniverseConstellationsResponse(rsp)
}

// GetUniverseConstellationsConstellationIDWithResponse request returning *GetUniverseConstellationsConstellationIDResponse
func (c *ClientWithResponses) GetUniverseConstellationsConstellationIDWithResponse(ctx context.Context, constellationID int64, params *GetUniverseConstellationsConstellationIDParams, reqEditors ...RequestEditorFn) (*GetUniverseConstellationsConstellationIDResponse, error) {
	rsp, err := c.GetUniverseConstellationsConstellationID(ctx, constellationID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUniverseConstellationsConstellationIDResponse(rsp)
}

// GetUniverseFactionsWithResponse request returning *GetUniverseFactionsResponse
func (c *ClientWithResponses) GetUniverseFactionsWithResponse(ctx context.Context, params *GetUniverseFactionsParams, reqEditors ...RequestEditorFn) (*GetUniverseFactionsResponse, error) {
	rsp, err := c.GetUniverseFactions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUniverseFactionsResponse(rsp)
}

// GetUniverseGraphicsWithResponse request returning *GetUniverseGraphicsResponse
func (c *ClientWithResponses) GetUniverseGraphicsWithResponse(ctx context.Context, params *GetUniverseGraphicsParams, reqEditors ...RequestEditorFn) (*GetUniverseGraphicsResponse, error) {
	rsp, err := c.GetUniverseGraphics(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUniverseGraphicsResponse(rsp)
}

// GetUniverseGraphicsGraphicIDWithResponse request returning *GetUniverseGraphicsGraphicIDResponse
func (c *ClientWithResponses) GetUniverseGraphicsGraphicIDWithResponse(ctx context.Context, graphicID int64, params *GetUniverseGraphicsGraphicIDParams, reqEditors ...RequestEditorFn) (*GetUniverseGraphicsGraphicIDResponse, error) {
	rsp, err := c.GetUniverseGraphicsGraphicID(ctx, graphicID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUniverseGraphicsGraphicIDResponse(rsp)
}

// GetUniverseGroupsWithResponse request returning *GetUniverseGroupsResponse
func (c *ClientWithResponses) GetUniverseGroupsWithResponse(ctx context.Context, params *GetUniverseGroupsParams, reqEditors ...RequestEditorFn) (*GetUniverseGroupsResponse, error) {
	rsp, err := c.GetUniverseGroups(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUniverseGroupsResponse(rsp)
}

// GetUniverseGroupsGroupIDWithResponse request returning *GetUniverseGroupsGroupIDResponse
func (c *ClientWithResponses) GetUniverseGroupsGroupIDWithResponse(ctx context.Context, groupID int64, params *GetUniverseGroupsGroupIDParams, reqEditors ...RequestEditorFn) (*GetUniverseGroupsGroupIDResponse, error) {
	rsp, err := c.GetUniverseGroupsGroupID(ctx, groupID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUniverseGroupsGroupIDResponse(rsp)
}

// PostUniverseIdsWithBodyWithResponse request with arbitrary body returning *PostUniverseIdsResponse
func (c *ClientWithResponses) PostUniverseIdsWithBodyWithResponse(ctx context.Context, params *PostUniverseIdsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUniverseIdsResponse, error) {
	rsp, err := c.PostUniverseIdsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUniverseIdsResponse(rsp)
}

func (c *ClientWithResponses) PostUniverseIdsWithResponse(ctx context.Context, params *PostUniverseIdsParams, body PostUniverseIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUniverseIdsResponse, error) {
	rsp, err := c.PostUniverseIds(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUniverseIdsResponse(rsp)
}

// GetUniverseMoonsMoonIDWithResponse request returning *GetUniverseMoonsMoonIDResponse
func (c *ClientWithResponses) GetUniverseMoonsMoonIDWithResponse(ctx context.Context, moonID int64, params *GetUniverseMoonsMoonIDParams, reqEditors ...RequestEditorFn) (*GetUniverseMoonsMoonIDResponse, error) {
	rsp, err := c.GetUniverseMoonsMoonID(ctx, moonID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUniverseMoonsMoonIDResponse(rsp)
}

// PostUniverseNamesWithBodyWithResponse request with arbitrary body returning *PostUniverseNamesResponse
func (c *ClientWithResponses) PostUniverseNamesWithBodyWithResponse(ctx context.Context, params *PostUniverseNamesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUniverseNamesResponse, error) {
	rsp, err := c.PostUniverseNamesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUniverseNamesResponse(rsp)
}

func (c *ClientWithResponses) PostUniverseNamesWithResponse(ctx context.Context, params *PostUniverseNamesParams, body PostUniverseNamesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUniverseNamesResponse, error) {
	rsp, err := c.PostUniverseNames(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUniverseNamesResponse(rsp)
}

// GetUniversePlanetsPlanetIDWithResponse request returning *GetUniversePlanetsPlanetIDResponse
func (c *ClientWithResponses) GetUniversePlanetsPlanetIDWithResponse(ctx context.Context, planetID int64, params *GetUniversePlanetsPlanetIDParams, reqEditors ...RequestEditorFn) (*GetUniversePlanetsPlanetIDResponse, error) {
	rsp, err := c.GetUniversePlanetsPlanetID(ctx, planetID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUniversePlanetsPlanetIDResponse(rsp)
}

// GetUniverseRacesWithResponse request returning *GetUniverseRacesResponse
func (c *ClientWithResponses) GetUniverseRacesWithResponse(ctx context.Context, params *GetUniverseRacesParams, reqEditors ...RequestEditorFn) (*GetUniverseRacesResponse, error) {
	rsp, err := c.GetUniverseRaces(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUniverseRacesResponse(rsp)
}

// GetUniverseRegionsWithResponse request returning *GetUniverseRegionsResponse
func (c *ClientWithResponses) GetUniverseRegionsWithResponse(ctx context.Context, params *GetUniverseRegionsParams, reqEditors ...RequestEditorFn) (*GetUniverseRegionsResponse, error) {
	rsp, err := c.GetUniverseRegions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUniverseRegionsResponse(rsp)
}

// GetUniverseRegionsRegionIDWithResponse request returning *GetUniverseRegionsRegionIDResponse
func (c *ClientWithResponses) GetUniverseRegionsRegionIDWithResponse(ctx context.Context, regionID int64, params *GetUniverseRegionsRegionIDParams, reqEditors ...RequestEditorFn) (*GetUniverseRegionsRegionIDResponse, error) {
	rsp, err := c.GetUniverseRegionsRegionID(ctx, regionID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUniverseRegionsRegionIDResponse(rsp)
}

// GetUniverseSchematicsSchematicIDWithResponse request returning *GetUniverseSchematicsSchematicIDResponse
func (c *ClientWithResponses) GetUniverseSchematicsSchematicIDWithResponse(ctx context.Context, schematicID int64, params *GetUniverseSchematicsSchematicIDParams, reqEditors ...RequestEditorFn) (*GetUniverseSchematicsSchematicIDResponse, error) {
	rsp, err := c.GetUniverseSchematicsSchematicID(ctx, schematicID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUniverseSchematicsSchematicIDResponse(rsp)
}

// GetUniverseStargatesStargateIDWithResponse request returning *GetUniverseStargatesStargateIDResponse
func (c *ClientWithResponses) GetUniverseStargatesStargateIDWithResponse(ctx context.Context, stargateID int64, params *GetUniverseStargatesStargateIDParams, reqEditors ...RequestEditorFn) (*GetUniverseStargatesStargateIDResponse, error) {
	rsp, err := c.GetUniverseStargatesStargateID(ctx, stargateID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUniverseStargatesStargateIDResponse(rsp)
}

// GetUniverseStarsStarIDWithResponse request returning *GetUniverseStarsStarIDResponse
func (c *ClientWithResponses) GetUniverseStarsStarIDWithResponse(ctx context.Context, starID int64, params *GetUniverseStarsStarIDParams, reqEditors ...RequestEditorFn) (*GetUniverseStarsStarIDResponse, error) {
	rsp, err := c.GetUniverseStarsStarID(ctx, starID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUniverseStarsStarIDResponse(rsp)
}

// GetUniverseStationsStationIDWithResponse request returning *GetUniverseStationsStationIDResponse
func (c *ClientWithResponses) GetUniverseStationsStationIDWithResponse(ctx context.Context, stationID int64, params *GetUniverseStationsStationIDParams, reqEditors ...RequestEditorFn) (*GetUniverseStationsStationIDResponse, error) {
	rsp, err := c.GetUniverseStationsStationID(ctx, stationID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUniverseStationsStationIDResponse(rsp)
}

// GetUniverseStructuresWithResponse request returning *GetUniverseStructuresResponse
func (c *ClientWithResponses) GetUniverseStructuresWithResponse(ctx context.Context, params *GetUniverseStructuresParams, reqEditors ...RequestEditorFn) (*GetUniverseStructuresResponse, error) {
	rsp, err := c.GetUniverseStructures(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUniverseStructuresResponse(rsp)
}

// GetUniverseStructuresStructureIDWithResponse request returning *GetUniverseStructuresStructureIDResponse
func (c *ClientWithResponses) GetUniverseStructuresStructureIDWithResponse(ctx context.Context, structureID int64, params *GetUniverseStructuresStructureIDParams, reqEditors ...RequestEditorFn) (*GetUniverseStructuresStructureIDResponse, error) {
	rsp, err := c.GetUniverseStructuresStructureID(ctx, structureID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUniverseStructuresStructureIDResponse(rsp)
}

// GetUniverseSystemJumpsWithResponse request returning *GetUniverseSystemJumpsResponse
func (c *ClientWithResponses) GetUniverseSystemJumpsWithResponse(ctx context.Context, params *GetUniverseSystemJumpsParams, reqEditors ...RequestEditorFn) (*GetUniverseSystemJumpsResponse, error) {
	rsp, err := c.GetUniverseSystemJumps(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUniverseSystemJumpsResponse(rsp)
}

// GetUniverseSystemKillsWithResponse request returning *GetUniverseSystemKillsResponse
func (c *ClientWithResponses) GetUniverseSystemKillsWithResponse(ctx context.Context, params *GetUniverseSystemKillsParams, reqEditors ...RequestEditorFn) (*GetUniverseSystemKillsResponse, error) {
	rsp, err := c.GetUniverseSystemKills(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUniverseSystemKillsResponse(rsp)
}

// GetUniverseSystemsWithResponse request returning *GetUniverseSystemsResponse
func (c *ClientWithResponses) GetUniverseSystemsWithResponse(ctx context.Context, params *GetUniverseSystemsParams, reqEditors ...RequestEditorFn) (*GetUniverseSystemsResponse, error) {
	rsp, err := c.GetUniverseSystems(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUniverseSystemsResponse(rsp)
}

// GetUniverseSystemsSystemIDWithResponse request returning *GetUniverseSystemsSystemIDResponse
func (c *ClientWithResponses) GetUniverseSystemsSystemIDWithResponse(ctx context.Context, systemID int64, params *GetUniverseSystemsSystemIDParams, reqEditors ...RequestEditorFn) (*GetUniverseSystemsSystemIDResponse, error) {
	rsp, err := c.GetUniverseSystemsSystemID(ctx, systemID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUniverseSystemsSystemIDResponse(rsp)
}

// GetUniverseTypesWithResponse request returning *GetUniverseTypesResponse
func (c *ClientWithResponses) GetUniverseTypesWithResponse(ctx context.Context, params *GetUniverseTypesParams, reqEditors ...RequestEditorFn) (*GetUniverseTypesResponse, error) {
	rsp, err := c.GetUniverseTypes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUniverseTypesResponse(rsp)
}

// GetUniverseTypesTypeIDWithResponse request returning *GetUniverseTypesTypeIDResponse
func (c *ClientWithResponses) GetUniverseTypesTypeIDWithResponse(ctx context.Context, typeID int64, params *GetUniverseTypesTypeIDParams, reqEditors ...RequestEditorFn) (*GetUniverseTypesTypeIDResponse, error) {
	rsp, err := c.GetUniverseTypesTypeID(ctx, typeID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUniverseTypesTypeIDResponse(rsp)
}

// GetWarsWithResponse request returning *GetWarsResponse
func (c *ClientWithResponses) GetWarsWithResponse(ctx context.Context, params *GetWarsParams, reqEditors ...RequestEditorFn) (*GetWarsResponse, error) {
	rsp, err := c.GetWars(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWarsResponse(rsp)
}

// GetWarsWarIDWithResponse request returning *GetWarsWarIDResponse
func (c *ClientWithResponses) GetWarsWarIDWithResponse(ctx context.Context, warID int64, params *GetWarsWarIDParams, reqEditors ...RequestEditorFn) (*GetWarsWarIDResponse, error) {
	rsp, err := c.GetWarsWarID(ctx, warID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWarsWarIDResponse(rsp)
}

// GetWarsWarIDKillmailsWithResponse request returning *GetWarsWarIDKillmailsResponse
func (c *ClientWithResponses) GetWarsWarIDKillmailsWithResponse(ctx context.Context, warID int64, params *GetWarsWarIDKillmailsParams, reqEditors ...RequestEditorFn) (*GetWarsWarIDKillmailsResponse, error) {
	rsp, err := c.GetWarsWarIDKillmails(ctx, warID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWarsWarIDKillmailsResponse(rsp)
}

// ParseGetAlliancesResponse parses an HTTP response from a GetAlliancesWithResponse call
func ParseGetAlliancesResponse(rsp *http.Response) (*GetAlliancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlliancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlliancesGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAlliancesAllianceIDResponse parses an HTTP response from a GetAlliancesAllianceIDWithResponse call
func ParseGetAlliancesAllianceIDResponse(rsp *http.Response) (*GetAlliancesAllianceIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlliancesAllianceIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlliancesAllianceIDGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAlliancesAllianceIDContactsResponse parses an HTTP response from a GetAlliancesAllianceIDContactsWithResponse call
func ParseGetAlliancesAllianceIDContactsResponse(rsp *http.Response) (*GetAlliancesAllianceIDContactsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlliancesAllianceIDContactsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlliancesAllianceIDContactsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAlliancesAllianceIDContactsLabelsResponse parses an HTTP response from a GetAlliancesAllianceIDContactsLabelsWithResponse call
func ParseGetAlliancesAllianceIDContactsLabelsResponse(rsp *http.Response) (*GetAlliancesAllianceIDContactsLabelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlliancesAllianceIDContactsLabelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlliancesAllianceIDContactsLabelsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAlliancesAllianceIDCorporationsResponse parses an HTTP response from a GetAlliancesAllianceIDCorporationsWithResponse call
func ParseGetAlliancesAllianceIDCorporationsResponse(rsp *http.Response) (*GetAlliancesAllianceIDCorporationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlliancesAllianceIDCorporationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlliancesAllianceIDCorporationsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAlliancesAllianceIDIconsResponse parses an HTTP response from a GetAlliancesAllianceIDIconsWithResponse call
func ParseGetAlliancesAllianceIDIconsResponse(rsp *http.Response) (*GetAlliancesAllianceIDIconsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlliancesAllianceIDIconsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlliancesAllianceIDIconsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostCharactersAffiliationResponse parses an HTTP response from a PostCharactersAffiliationWithResponse call
func ParsePostCharactersAffiliationResponse(rsp *http.Response) (*PostCharactersAffiliationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCharactersAffiliationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharactersAffiliationPost
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCharactersCharacterIDResponse parses an HTTP response from a GetCharactersCharacterIDWithResponse call
func ParseGetCharactersCharacterIDResponse(rsp *http.Response) (*GetCharactersCharacterIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharactersCharacterIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharactersCharacterIDGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCharactersCharacterIDAgentsResearchResponse parses an HTTP response from a GetCharactersCharacterIDAgentsResearchWithResponse call
func ParseGetCharactersCharacterIDAgentsResearchResponse(rsp *http.Response) (*GetCharactersCharacterIDAgentsResearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharactersCharacterIDAgentsResearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharactersCharacterIDAgentsResearchGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCharactersCharacterIDAssetsResponse parses an HTTP response from a GetCharactersCharacterIDAssetsWithResponse call
func ParseGetCharactersCharacterIDAssetsResponse(rsp *http.Response) (*GetCharactersCharacterIDAssetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharactersCharacterIDAssetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharactersCharacterIDAssetsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostCharactersCharacterIDAssetsLocationsResponse parses an HTTP response from a PostCharactersCharacterIDAssetsLocationsWithResponse call
func ParsePostCharactersCharacterIDAssetsLocationsResponse(rsp *http.Response) (*PostCharactersCharacterIDAssetsLocationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCharactersCharacterIDAssetsLocationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharactersCharacterIDAssetsLocationsPost
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostCharactersCharacterIDAssetsNamesResponse parses an HTTP response from a PostCharactersCharacterIDAssetsNamesWithResponse call
func ParsePostCharactersCharacterIDAssetsNamesResponse(rsp *http.Response) (*PostCharactersCharacterIDAssetsNamesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCharactersCharacterIDAssetsNamesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharactersCharacterIDAssetsNamesPost
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCharactersCharacterIDAttributesResponse parses an HTTP response from a GetCharactersCharacterIDAttributesWithResponse call
func ParseGetCharactersCharacterIDAttributesResponse(rsp *http.Response) (*GetCharactersCharacterIDAttributesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharactersCharacterIDAttributesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharactersCharacterIDAttributesGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCharactersCharacterIDBlueprintsResponse parses an HTTP response from a GetCharactersCharacterIDBlueprintsWithResponse call
func ParseGetCharactersCharacterIDBlueprintsResponse(rsp *http.Response) (*GetCharactersCharacterIDBlueprintsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharactersCharacterIDBlueprintsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharactersCharacterIDBlueprintsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCharactersCharacterIDCalendarResponse parses an HTTP response from a GetCharactersCharacterIDCalendarWithResponse call
func ParseGetCharactersCharacterIDCalendarResponse(rsp *http.Response) (*GetCharactersCharacterIDCalendarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharactersCharacterIDCalendarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharactersCharacterIDCalendarGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCharactersCharacterIDCalendarEventIDResponse parses an HTTP response from a GetCharactersCharacterIDCalendarEventIDWithResponse call
func ParseGetCharactersCharacterIDCalendarEventIDResponse(rsp *http.Response) (*GetCharactersCharacterIDCalendarEventIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharactersCharacterIDCalendarEventIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharactersCharacterIDCalendarEventIDGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutCharactersCharacterIDCalendarEventIDResponse parses an HTTP response from a PutCharactersCharacterIDCalendarEventIDWithResponse call
func ParsePutCharactersCharacterIDCalendarEventIDResponse(rsp *http.Response) (*PutCharactersCharacterIDCalendarEventIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutCharactersCharacterIDCalendarEventIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCharactersCharacterIDCalendarEventIDAttendeesResponse parses an HTTP response from a GetCharactersCharacterIDCalendarEventIDAttendeesWithResponse call
func ParseGetCharactersCharacterIDCalendarEventIDAttendeesResponse(rsp *http.Response) (*GetCharactersCharacterIDCalendarEventIDAttendeesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharactersCharacterIDCalendarEventIDAttendeesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharactersCharacterIDCalendarEventIDAttendeesGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCharactersCharacterIDClonesResponse parses an HTTP response from a GetCharactersCharacterIDClonesWithResponse call
func ParseGetCharactersCharacterIDClonesResponse(rsp *http.Response) (*GetCharactersCharacterIDClonesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharactersCharacterIDClonesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharactersCharacterIDClonesGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteCharactersCharacterIDContactsResponse parses an HTTP response from a DeleteCharactersCharacterIDContactsWithResponse call
func ParseDeleteCharactersCharacterIDContactsResponse(rsp *http.Response) (*DeleteCharactersCharacterIDContactsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCharactersCharacterIDContactsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCharactersCharacterIDContactsResponse parses an HTTP response from a GetCharactersCharacterIDContactsWithResponse call
func ParseGetCharactersCharacterIDContactsResponse(rsp *http.Response) (*GetCharactersCharacterIDContactsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharactersCharacterIDContactsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharactersCharacterIDContactsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostCharactersCharacterIDContactsResponse parses an HTTP response from a PostCharactersCharacterIDContactsWithResponse call
func ParsePostCharactersCharacterIDContactsResponse(rsp *http.Response) (*PostCharactersCharacterIDContactsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCharactersCharacterIDContactsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CharactersCharacterIDContactsPost
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutCharactersCharacterIDContactsResponse parses an HTTP response from a PutCharactersCharacterIDContactsWithResponse call
func ParsePutCharactersCharacterIDContactsResponse(rsp *http.Response) (*PutCharactersCharacterIDContactsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutCharactersCharacterIDContactsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCharactersCharacterIDContactsLabelsResponse parses an HTTP response from a GetCharactersCharacterIDContactsLabelsWithResponse call
func ParseGetCharactersCharacterIDContactsLabelsResponse(rsp *http.Response) (*GetCharactersCharacterIDContactsLabelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharactersCharacterIDContactsLabelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharactersCharacterIDContactsLabelsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCharactersCharacterIDContractsResponse parses an HTTP response from a GetCharactersCharacterIDContractsWithResponse call
func ParseGetCharactersCharacterIDContractsResponse(rsp *http.Response) (*GetCharactersCharacterIDContractsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharactersCharacterIDContractsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharactersCharacterIDContractsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCharactersCharacterIDContractsContractIDBidsResponse parses an HTTP response from a GetCharactersCharacterIDContractsContractIDBidsWithResponse call
func ParseGetCharactersCharacterIDContractsContractIDBidsResponse(rsp *http.Response) (*GetCharactersCharacterIDContractsContractIDBidsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharactersCharacterIDContractsContractIDBidsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharactersCharacterIDContractsContractIDBidsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCharactersCharacterIDContractsContractIDItemsResponse parses an HTTP response from a GetCharactersCharacterIDContractsContractIDItemsWithResponse call
func ParseGetCharactersCharacterIDContractsContractIDItemsResponse(rsp *http.Response) (*GetCharactersCharacterIDContractsContractIDItemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharactersCharacterIDContractsContractIDItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharactersCharacterIDContractsContractIDItemsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCharactersCharacterIDCorporationhistoryResponse parses an HTTP response from a GetCharactersCharacterIDCorporationhistoryWithResponse call
func ParseGetCharactersCharacterIDCorporationhistoryResponse(rsp *http.Response) (*GetCharactersCharacterIDCorporationhistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharactersCharacterIDCorporationhistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharactersCharacterIDCorporationhistoryGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostCharactersCharacterIDCspaResponse parses an HTTP response from a PostCharactersCharacterIDCspaWithResponse call
func ParsePostCharactersCharacterIDCspaResponse(rsp *http.Response) (*PostCharactersCharacterIDCspaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCharactersCharacterIDCspaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CharactersCharacterIDCspaPost
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCharactersCharacterIDFatigueResponse parses an HTTP response from a GetCharactersCharacterIDFatigueWithResponse call
func ParseGetCharactersCharacterIDFatigueResponse(rsp *http.Response) (*GetCharactersCharacterIDFatigueResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharactersCharacterIDFatigueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharactersCharacterIDFatigueGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCharactersCharacterIDFittingsResponse parses an HTTP response from a GetCharactersCharacterIDFittingsWithResponse call
func ParseGetCharactersCharacterIDFittingsResponse(rsp *http.Response) (*GetCharactersCharacterIDFittingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharactersCharacterIDFittingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharactersCharacterIDFittingsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostCharactersCharacterIDFittingsResponse parses an HTTP response from a PostCharactersCharacterIDFittingsWithResponse call
func ParsePostCharactersCharacterIDFittingsResponse(rsp *http.Response) (*PostCharactersCharacterIDFittingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCharactersCharacterIDFittingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CharactersCharacterIDFittingsPost
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteCharactersCharacterIDFittingsFittingIDResponse parses an HTTP response from a DeleteCharactersCharacterIDFittingsFittingIDWithResponse call
func ParseDeleteCharactersCharacterIDFittingsFittingIDResponse(rsp *http.Response) (*DeleteCharactersCharacterIDFittingsFittingIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCharactersCharacterIDFittingsFittingIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCharactersCharacterIDFleetResponse parses an HTTP response from a GetCharactersCharacterIDFleetWithResponse call
func ParseGetCharactersCharacterIDFleetResponse(rsp *http.Response) (*GetCharactersCharacterIDFleetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharactersCharacterIDFleetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharactersCharacterIDFleetGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCharactersCharacterIDFwStatsResponse parses an HTTP response from a GetCharactersCharacterIDFwStatsWithResponse call
func ParseGetCharactersCharacterIDFwStatsResponse(rsp *http.Response) (*GetCharactersCharacterIDFwStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharactersCharacterIDFwStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharactersCharacterIDFwStatsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCharactersCharacterIDImplantsResponse parses an HTTP response from a GetCharactersCharacterIDImplantsWithResponse call
func ParseGetCharactersCharacterIDImplantsResponse(rsp *http.Response) (*GetCharactersCharacterIDImplantsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharactersCharacterIDImplantsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharactersCharacterIDImplantsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCharactersCharacterIDIndustryJobsResponse parses an HTTP response from a GetCharactersCharacterIDIndustryJobsWithResponse call
func ParseGetCharactersCharacterIDIndustryJobsResponse(rsp *http.Response) (*GetCharactersCharacterIDIndustryJobsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharactersCharacterIDIndustryJobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharactersCharacterIDIndustryJobsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCharactersCharacterIDKillmailsRecentResponse parses an HTTP response from a GetCharactersCharacterIDKillmailsRecentWithResponse call
func ParseGetCharactersCharacterIDKillmailsRecentResponse(rsp *http.Response) (*GetCharactersCharacterIDKillmailsRecentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharactersCharacterIDKillmailsRecentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharactersCharacterIDKillmailsRecentGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCharactersCharacterIDLocationResponse parses an HTTP response from a GetCharactersCharacterIDLocationWithResponse call
func ParseGetCharactersCharacterIDLocationResponse(rsp *http.Response) (*GetCharactersCharacterIDLocationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharactersCharacterIDLocationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharactersCharacterIDLocationGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCharactersCharacterIDLoyaltyPointsResponse parses an HTTP response from a GetCharactersCharacterIDLoyaltyPointsWithResponse call
func ParseGetCharactersCharacterIDLoyaltyPointsResponse(rsp *http.Response) (*GetCharactersCharacterIDLoyaltyPointsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharactersCharacterIDLoyaltyPointsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharactersCharacterIDLoyaltyPointsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCharactersCharacterIDMailResponse parses an HTTP response from a GetCharactersCharacterIDMailWithResponse call
func ParseGetCharactersCharacterIDMailResponse(rsp *http.Response) (*GetCharactersCharacterIDMailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharactersCharacterIDMailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharactersCharacterIDMailGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostCharactersCharacterIDMailResponse parses an HTTP response from a PostCharactersCharacterIDMailWithResponse call
func ParsePostCharactersCharacterIDMailResponse(rsp *http.Response) (*PostCharactersCharacterIDMailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCharactersCharacterIDMailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CharactersCharacterIDMailPost
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCharactersCharacterIDMailLabelsResponse parses an HTTP response from a GetCharactersCharacterIDMailLabelsWithResponse call
func ParseGetCharactersCharacterIDMailLabelsResponse(rsp *http.Response) (*GetCharactersCharacterIDMailLabelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharactersCharacterIDMailLabelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharactersCharacterIDMailLabelsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostCharactersCharacterIDMailLabelsResponse parses an HTTP response from a PostCharactersCharacterIDMailLabelsWithResponse call
func ParsePostCharactersCharacterIDMailLabelsResponse(rsp *http.Response) (*PostCharactersCharacterIDMailLabelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCharactersCharacterIDMailLabelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CharactersCharacterIDMailLabelsPost
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteCharactersCharacterIDMailLabelsLabelIDResponse parses an HTTP response from a DeleteCharactersCharacterIDMailLabelsLabelIDWithResponse call
func ParseDeleteCharactersCharacterIDMailLabelsLabelIDResponse(rsp *http.Response) (*DeleteCharactersCharacterIDMailLabelsLabelIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCharactersCharacterIDMailLabelsLabelIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCharactersCharacterIDMailListsResponse parses an HTTP response from a GetCharactersCharacterIDMailListsWithResponse call
func ParseGetCharactersCharacterIDMailListsResponse(rsp *http.Response) (*GetCharactersCharacterIDMailListsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharactersCharacterIDMailListsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharactersCharacterIDMailListsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteCharactersCharacterIDMailMailIDResponse parses an HTTP response from a DeleteCharactersCharacterIDMailMailIDWithResponse call
func ParseDeleteCharactersCharacterIDMailMailIDResponse(rsp *http.Response) (*DeleteCharactersCharacterIDMailMailIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCharactersCharacterIDMailMailIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCharactersCharacterIDMailMailIDResponse parses an HTTP response from a GetCharactersCharacterIDMailMailIDWithResponse call
func ParseGetCharactersCharacterIDMailMailIDResponse(rsp *http.Response) (*GetCharactersCharacterIDMailMailIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharactersCharacterIDMailMailIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharactersCharacterIDMailMailIDGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutCharactersCharacterIDMailMailIDResponse parses an HTTP response from a PutCharactersCharacterIDMailMailIDWithResponse call
func ParsePutCharactersCharacterIDMailMailIDResponse(rsp *http.Response) (*PutCharactersCharacterIDMailMailIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutCharactersCharacterIDMailMailIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCharactersCharacterIDMedalsResponse parses an HTTP response from a GetCharactersCharacterIDMedalsWithResponse call
func ParseGetCharactersCharacterIDMedalsResponse(rsp *http.Response) (*GetCharactersCharacterIDMedalsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharactersCharacterIDMedalsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharactersCharacterIDMedalsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCharactersCharacterIDMiningResponse parses an HTTP response from a GetCharactersCharacterIDMiningWithResponse call
func ParseGetCharactersCharacterIDMiningResponse(rsp *http.Response) (*GetCharactersCharacterIDMiningResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharactersCharacterIDMiningResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharactersCharacterIDMiningGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCharactersCharacterIDNotificationsResponse parses an HTTP response from a GetCharactersCharacterIDNotificationsWithResponse call
func ParseGetCharactersCharacterIDNotificationsResponse(rsp *http.Response) (*GetCharactersCharacterIDNotificationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharactersCharacterIDNotificationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharactersCharacterIDNotificationsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCharactersCharacterIDNotificationsContactsResponse parses an HTTP response from a GetCharactersCharacterIDNotificationsContactsWithResponse call
func ParseGetCharactersCharacterIDNotificationsContactsResponse(rsp *http.Response) (*GetCharactersCharacterIDNotificationsContactsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharactersCharacterIDNotificationsContactsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharactersCharacterIDNotificationsContactsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCharactersCharacterIDOnlineResponse parses an HTTP response from a GetCharactersCharacterIDOnlineWithResponse call
func ParseGetCharactersCharacterIDOnlineResponse(rsp *http.Response) (*GetCharactersCharacterIDOnlineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharactersCharacterIDOnlineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharactersCharacterIDOnlineGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCharactersCharacterIDOrdersResponse parses an HTTP response from a GetCharactersCharacterIDOrdersWithResponse call
func ParseGetCharactersCharacterIDOrdersResponse(rsp *http.Response) (*GetCharactersCharacterIDOrdersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharactersCharacterIDOrdersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharactersCharacterIDOrdersGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCharactersCharacterIDOrdersHistoryResponse parses an HTTP response from a GetCharactersCharacterIDOrdersHistoryWithResponse call
func ParseGetCharactersCharacterIDOrdersHistoryResponse(rsp *http.Response) (*GetCharactersCharacterIDOrdersHistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharactersCharacterIDOrdersHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharactersCharacterIDOrdersHistoryGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCharactersCharacterIDPlanetsResponse parses an HTTP response from a GetCharactersCharacterIDPlanetsWithResponse call
func ParseGetCharactersCharacterIDPlanetsResponse(rsp *http.Response) (*GetCharactersCharacterIDPlanetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharactersCharacterIDPlanetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharactersCharacterIDPlanetsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCharactersCharacterIDPlanetsPlanetIDResponse parses an HTTP response from a GetCharactersCharacterIDPlanetsPlanetIDWithResponse call
func ParseGetCharactersCharacterIDPlanetsPlanetIDResponse(rsp *http.Response) (*GetCharactersCharacterIDPlanetsPlanetIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharactersCharacterIDPlanetsPlanetIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharactersCharacterIDPlanetsPlanetIDGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCharactersCharacterIDPortraitResponse parses an HTTP response from a GetCharactersCharacterIDPortraitWithResponse call
func ParseGetCharactersCharacterIDPortraitResponse(rsp *http.Response) (*GetCharactersCharacterIDPortraitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharactersCharacterIDPortraitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharactersCharacterIDPortraitGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCharactersCharacterIDRolesResponse parses an HTTP response from a GetCharactersCharacterIDRolesWithResponse call
func ParseGetCharactersCharacterIDRolesResponse(rsp *http.Response) (*GetCharactersCharacterIDRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharactersCharacterIDRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharactersCharacterIDRolesGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCharactersCharacterIDSearchResponse parses an HTTP response from a GetCharactersCharacterIDSearchWithResponse call
func ParseGetCharactersCharacterIDSearchResponse(rsp *http.Response) (*GetCharactersCharacterIDSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharactersCharacterIDSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharactersCharacterIDSearchGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCharactersCharacterIDShipResponse parses an HTTP response from a GetCharactersCharacterIDShipWithResponse call
func ParseGetCharactersCharacterIDShipResponse(rsp *http.Response) (*GetCharactersCharacterIDShipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharactersCharacterIDShipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharactersCharacterIDShipGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCharactersCharacterIDSkillqueueResponse parses an HTTP response from a GetCharactersCharacterIDSkillqueueWithResponse call
func ParseGetCharactersCharacterIDSkillqueueResponse(rsp *http.Response) (*GetCharactersCharacterIDSkillqueueResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharactersCharacterIDSkillqueueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharactersCharacterIDSkillqueueGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCharactersCharacterIDSkillsResponse parses an HTTP response from a GetCharactersCharacterIDSkillsWithResponse call
func ParseGetCharactersCharacterIDSkillsResponse(rsp *http.Response) (*GetCharactersCharacterIDSkillsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharactersCharacterIDSkillsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharactersCharacterIDSkillsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCharactersCharacterIDStandingsResponse parses an HTTP response from a GetCharactersCharacterIDStandingsWithResponse call
func ParseGetCharactersCharacterIDStandingsResponse(rsp *http.Response) (*GetCharactersCharacterIDStandingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharactersCharacterIDStandingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharactersCharacterIDStandingsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCharactersCharacterIDTitlesResponse parses an HTTP response from a GetCharactersCharacterIDTitlesWithResponse call
func ParseGetCharactersCharacterIDTitlesResponse(rsp *http.Response) (*GetCharactersCharacterIDTitlesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharactersCharacterIDTitlesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharactersCharacterIDTitlesGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCharactersCharacterIDWalletResponse parses an HTTP response from a GetCharactersCharacterIDWalletWithResponse call
func ParseGetCharactersCharacterIDWalletResponse(rsp *http.Response) (*GetCharactersCharacterIDWalletResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharactersCharacterIDWalletResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharactersCharacterIDWalletGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCharactersCharacterIDWalletJournalResponse parses an HTTP response from a GetCharactersCharacterIDWalletJournalWithResponse call
func ParseGetCharactersCharacterIDWalletJournalResponse(rsp *http.Response) (*GetCharactersCharacterIDWalletJournalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharactersCharacterIDWalletJournalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharactersCharacterIDWalletJournalGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCharactersCharacterIDWalletTransactionsResponse parses an HTTP response from a GetCharactersCharacterIDWalletTransactionsWithResponse call
func ParseGetCharactersCharacterIDWalletTransactionsResponse(rsp *http.Response) (*GetCharactersCharacterIDWalletTransactionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharactersCharacterIDWalletTransactionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharactersCharacterIDWalletTransactionsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetContractsPublicBidsContractIDResponse parses an HTTP response from a GetContractsPublicBidsContractIDWithResponse call
func ParseGetContractsPublicBidsContractIDResponse(rsp *http.Response) (*GetContractsPublicBidsContractIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContractsPublicBidsContractIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContractsPublicBidsContractIDGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	}

	return response, nil
}

// ParseGetContractsPublicItemsContractIDResponse parses an HTTP response from a GetContractsPublicItemsContractIDWithResponse call
func ParseGetContractsPublicItemsContractIDResponse(rsp *http.Response) (*GetContractsPublicItemsContractIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContractsPublicItemsContractIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContractsPublicItemsContractIDGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	}

	return response, nil
}

// ParseGetContractsPublicRegionIDResponse parses an HTTP response from a GetContractsPublicRegionIDWithResponse call
func ParseGetContractsPublicRegionIDResponse(rsp *http.Response) (*GetContractsPublicRegionIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContractsPublicRegionIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContractsPublicRegionIDGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCorporationCorporationIDMiningExtractionsResponse parses an HTTP response from a GetCorporationCorporationIDMiningExtractionsWithResponse call
func ParseGetCorporationCorporationIDMiningExtractionsResponse(rsp *http.Response) (*GetCorporationCorporationIDMiningExtractionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCorporationCorporationIDMiningExtractionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CorporationCorporationIDMiningExtractionsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCorporationCorporationIDMiningObserversResponse parses an HTTP response from a GetCorporationCorporationIDMiningObserversWithResponse call
func ParseGetCorporationCorporationIDMiningObserversResponse(rsp *http.Response) (*GetCorporationCorporationIDMiningObserversResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCorporationCorporationIDMiningObserversResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CorporationCorporationIDMiningObserversGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCorporationCorporationIDMiningObserversObserverIDResponse parses an HTTP response from a GetCorporationCorporationIDMiningObserversObserverIDWithResponse call
func ParseGetCorporationCorporationIDMiningObserversObserverIDResponse(rsp *http.Response) (*GetCorporationCorporationIDMiningObserversObserverIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCorporationCorporationIDMiningObserversObserverIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CorporationCorporationIDMiningObserversObserverIDGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCorporationsNpccorpsResponse parses an HTTP response from a GetCorporationsNpccorpsWithResponse call
func ParseGetCorporationsNpccorpsResponse(rsp *http.Response) (*GetCorporationsNpccorpsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCorporationsNpccorpsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CorporationsNpccorpsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCorporationsCorporationIDResponse parses an HTTP response from a GetCorporationsCorporationIDWithResponse call
func ParseGetCorporationsCorporationIDResponse(rsp *http.Response) (*GetCorporationsCorporationIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCorporationsCorporationIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CorporationsCorporationIDGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCorporationsCorporationIDAlliancehistoryResponse parses an HTTP response from a GetCorporationsCorporationIDAlliancehistoryWithResponse call
func ParseGetCorporationsCorporationIDAlliancehistoryResponse(rsp *http.Response) (*GetCorporationsCorporationIDAlliancehistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCorporationsCorporationIDAlliancehistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CorporationsCorporationIDAlliancehistoryGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCorporationsCorporationIDAssetsResponse parses an HTTP response from a GetCorporationsCorporationIDAssetsWithResponse call
func ParseGetCorporationsCorporationIDAssetsResponse(rsp *http.Response) (*GetCorporationsCorporationIDAssetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCorporationsCorporationIDAssetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CorporationsCorporationIDAssetsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostCorporationsCorporationIDAssetsLocationsResponse parses an HTTP response from a PostCorporationsCorporationIDAssetsLocationsWithResponse call
func ParsePostCorporationsCorporationIDAssetsLocationsResponse(rsp *http.Response) (*PostCorporationsCorporationIDAssetsLocationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCorporationsCorporationIDAssetsLocationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CorporationsCorporationIDAssetsLocationsPost
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostCorporationsCorporationIDAssetsNamesResponse parses an HTTP response from a PostCorporationsCorporationIDAssetsNamesWithResponse call
func ParsePostCorporationsCorporationIDAssetsNamesResponse(rsp *http.Response) (*PostCorporationsCorporationIDAssetsNamesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCorporationsCorporationIDAssetsNamesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CorporationsCorporationIDAssetsNamesPost
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCorporationsCorporationIDBlueprintsResponse parses an HTTP response from a GetCorporationsCorporationIDBlueprintsWithResponse call
func ParseGetCorporationsCorporationIDBlueprintsResponse(rsp *http.Response) (*GetCorporationsCorporationIDBlueprintsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCorporationsCorporationIDBlueprintsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CorporationsCorporationIDBlueprintsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCorporationsCorporationIDContactsResponse parses an HTTP response from a GetCorporationsCorporationIDContactsWithResponse call
func ParseGetCorporationsCorporationIDContactsResponse(rsp *http.Response) (*GetCorporationsCorporationIDContactsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCorporationsCorporationIDContactsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CorporationsCorporationIDContactsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCorporationsCorporationIDContactsLabelsResponse parses an HTTP response from a GetCorporationsCorporationIDContactsLabelsWithResponse call
func ParseGetCorporationsCorporationIDContactsLabelsResponse(rsp *http.Response) (*GetCorporationsCorporationIDContactsLabelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCorporationsCorporationIDContactsLabelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CorporationsCorporationIDContactsLabelsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCorporationsCorporationIDContainersLogsResponse parses an HTTP response from a GetCorporationsCorporationIDContainersLogsWithResponse call
func ParseGetCorporationsCorporationIDContainersLogsResponse(rsp *http.Response) (*GetCorporationsCorporationIDContainersLogsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCorporationsCorporationIDContainersLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CorporationsCorporationIDContainersLogsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCorporationsCorporationIDContractsResponse parses an HTTP response from a GetCorporationsCorporationIDContractsWithResponse call
func ParseGetCorporationsCorporationIDContractsResponse(rsp *http.Response) (*GetCorporationsCorporationIDContractsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCorporationsCorporationIDContractsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CorporationsCorporationIDContractsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCorporationsCorporationIDContractsContractIDBidsResponse parses an HTTP response from a GetCorporationsCorporationIDContractsContractIDBidsWithResponse call
func ParseGetCorporationsCorporationIDContractsContractIDBidsResponse(rsp *http.Response) (*GetCorporationsCorporationIDContractsContractIDBidsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCorporationsCorporationIDContractsContractIDBidsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CorporationsCorporationIDContractsContractIDBidsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCorporationsCorporationIDContractsContractIDItemsResponse parses an HTTP response from a GetCorporationsCorporationIDContractsContractIDItemsWithResponse call
func ParseGetCorporationsCorporationIDContractsContractIDItemsResponse(rsp *http.Response) (*GetCorporationsCorporationIDContractsContractIDItemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCorporationsCorporationIDContractsContractIDItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CorporationsCorporationIDContractsContractIDItemsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCorporationsCorporationIDCustomsOfficesResponse parses an HTTP response from a GetCorporationsCorporationIDCustomsOfficesWithResponse call
func ParseGetCorporationsCorporationIDCustomsOfficesResponse(rsp *http.Response) (*GetCorporationsCorporationIDCustomsOfficesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCorporationsCorporationIDCustomsOfficesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CorporationsCorporationIDCustomsOfficesGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCorporationsCorporationIDDivisionsResponse parses an HTTP response from a GetCorporationsCorporationIDDivisionsWithResponse call
func ParseGetCorporationsCorporationIDDivisionsResponse(rsp *http.Response) (*GetCorporationsCorporationIDDivisionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCorporationsCorporationIDDivisionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CorporationsCorporationIDDivisionsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCorporationsCorporationIDFacilitiesResponse parses an HTTP response from a GetCorporationsCorporationIDFacilitiesWithResponse call
func ParseGetCorporationsCorporationIDFacilitiesResponse(rsp *http.Response) (*GetCorporationsCorporationIDFacilitiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCorporationsCorporationIDFacilitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CorporationsCorporationIDFacilitiesGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCorporationsCorporationIDFwStatsResponse parses an HTTP response from a GetCorporationsCorporationIDFwStatsWithResponse call
func ParseGetCorporationsCorporationIDFwStatsResponse(rsp *http.Response) (*GetCorporationsCorporationIDFwStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCorporationsCorporationIDFwStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CorporationsCorporationIDFwStatsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCorporationsCorporationIDIconsResponse parses an HTTP response from a GetCorporationsCorporationIDIconsWithResponse call
func ParseGetCorporationsCorporationIDIconsResponse(rsp *http.Response) (*GetCorporationsCorporationIDIconsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCorporationsCorporationIDIconsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CorporationsCorporationIDIconsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCorporationsCorporationIDIndustryJobsResponse parses an HTTP response from a GetCorporationsCorporationIDIndustryJobsWithResponse call
func ParseGetCorporationsCorporationIDIndustryJobsResponse(rsp *http.Response) (*GetCorporationsCorporationIDIndustryJobsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCorporationsCorporationIDIndustryJobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CorporationsCorporationIDIndustryJobsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCorporationsCorporationIDKillmailsRecentResponse parses an HTTP response from a GetCorporationsCorporationIDKillmailsRecentWithResponse call
func ParseGetCorporationsCorporationIDKillmailsRecentResponse(rsp *http.Response) (*GetCorporationsCorporationIDKillmailsRecentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCorporationsCorporationIDKillmailsRecentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CorporationsCorporationIDKillmailsRecentGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCorporationsCorporationIDMedalsResponse parses an HTTP response from a GetCorporationsCorporationIDMedalsWithResponse call
func ParseGetCorporationsCorporationIDMedalsResponse(rsp *http.Response) (*GetCorporationsCorporationIDMedalsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCorporationsCorporationIDMedalsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CorporationsCorporationIDMedalsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCorporationsCorporationIDMedalsIssuedResponse parses an HTTP response from a GetCorporationsCorporationIDMedalsIssuedWithResponse call
func ParseGetCorporationsCorporationIDMedalsIssuedResponse(rsp *http.Response) (*GetCorporationsCorporationIDMedalsIssuedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCorporationsCorporationIDMedalsIssuedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CorporationsCorporationIDMedalsIssuedGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCorporationsCorporationIDMembersResponse parses an HTTP response from a GetCorporationsCorporationIDMembersWithResponse call
func ParseGetCorporationsCorporationIDMembersResponse(rsp *http.Response) (*GetCorporationsCorporationIDMembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCorporationsCorporationIDMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CorporationsCorporationIDMembersGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCorporationsCorporationIDMembersLimitResponse parses an HTTP response from a GetCorporationsCorporationIDMembersLimitWithResponse call
func ParseGetCorporationsCorporationIDMembersLimitResponse(rsp *http.Response) (*GetCorporationsCorporationIDMembersLimitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCorporationsCorporationIDMembersLimitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CorporationsCorporationIDMembersLimitGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCorporationsCorporationIDMembersTitlesResponse parses an HTTP response from a GetCorporationsCorporationIDMembersTitlesWithResponse call
func ParseGetCorporationsCorporationIDMembersTitlesResponse(rsp *http.Response) (*GetCorporationsCorporationIDMembersTitlesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCorporationsCorporationIDMembersTitlesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CorporationsCorporationIDMembersTitlesGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCorporationsCorporationIDMembertrackingResponse parses an HTTP response from a GetCorporationsCorporationIDMembertrackingWithResponse call
func ParseGetCorporationsCorporationIDMembertrackingResponse(rsp *http.Response) (*GetCorporationsCorporationIDMembertrackingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCorporationsCorporationIDMembertrackingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CorporationsCorporationIDMembertrackingGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCorporationsCorporationIDOrdersResponse parses an HTTP response from a GetCorporationsCorporationIDOrdersWithResponse call
func ParseGetCorporationsCorporationIDOrdersResponse(rsp *http.Response) (*GetCorporationsCorporationIDOrdersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCorporationsCorporationIDOrdersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CorporationsCorporationIDOrdersGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCorporationsCorporationIDOrdersHistoryResponse parses an HTTP response from a GetCorporationsCorporationIDOrdersHistoryWithResponse call
func ParseGetCorporationsCorporationIDOrdersHistoryResponse(rsp *http.Response) (*GetCorporationsCorporationIDOrdersHistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCorporationsCorporationIDOrdersHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CorporationsCorporationIDOrdersHistoryGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCorporationsCorporationIDRolesResponse parses an HTTP response from a GetCorporationsCorporationIDRolesWithResponse call
func ParseGetCorporationsCorporationIDRolesResponse(rsp *http.Response) (*GetCorporationsCorporationIDRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCorporationsCorporationIDRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CorporationsCorporationIDRolesGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCorporationsCorporationIDRolesHistoryResponse parses an HTTP response from a GetCorporationsCorporationIDRolesHistoryWithResponse call
func ParseGetCorporationsCorporationIDRolesHistoryResponse(rsp *http.Response) (*GetCorporationsCorporationIDRolesHistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCorporationsCorporationIDRolesHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CorporationsCorporationIDRolesHistoryGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCorporationsCorporationIDShareholdersResponse parses an HTTP response from a GetCorporationsCorporationIDShareholdersWithResponse call
func ParseGetCorporationsCorporationIDShareholdersResponse(rsp *http.Response) (*GetCorporationsCorporationIDShareholdersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCorporationsCorporationIDShareholdersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CorporationsCorporationIDShareholdersGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCorporationsCorporationIDStandingsResponse parses an HTTP response from a GetCorporationsCorporationIDStandingsWithResponse call
func ParseGetCorporationsCorporationIDStandingsResponse(rsp *http.Response) (*GetCorporationsCorporationIDStandingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCorporationsCorporationIDStandingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CorporationsCorporationIDStandingsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCorporationsCorporationIDStarbasesResponse parses an HTTP response from a GetCorporationsCorporationIDStarbasesWithResponse call
func ParseGetCorporationsCorporationIDStarbasesResponse(rsp *http.Response) (*GetCorporationsCorporationIDStarbasesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCorporationsCorporationIDStarbasesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CorporationsCorporationIDStarbasesGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCorporationsCorporationIDStarbasesStarbaseIDResponse parses an HTTP response from a GetCorporationsCorporationIDStarbasesStarbaseIDWithResponse call
func ParseGetCorporationsCorporationIDStarbasesStarbaseIDResponse(rsp *http.Response) (*GetCorporationsCorporationIDStarbasesStarbaseIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCorporationsCorporationIDStarbasesStarbaseIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CorporationsCorporationIDStarbasesStarbaseIDGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCorporationsCorporationIDStructuresResponse parses an HTTP response from a GetCorporationsCorporationIDStructuresWithResponse call
func ParseGetCorporationsCorporationIDStructuresResponse(rsp *http.Response) (*GetCorporationsCorporationIDStructuresResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCorporationsCorporationIDStructuresResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CorporationsCorporationIDStructuresGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCorporationsCorporationIDTitlesResponse parses an HTTP response from a GetCorporationsCorporationIDTitlesWithResponse call
func ParseGetCorporationsCorporationIDTitlesResponse(rsp *http.Response) (*GetCorporationsCorporationIDTitlesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCorporationsCorporationIDTitlesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CorporationsCorporationIDTitlesGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCorporationsCorporationIDWalletsResponse parses an HTTP response from a GetCorporationsCorporationIDWalletsWithResponse call
func ParseGetCorporationsCorporationIDWalletsResponse(rsp *http.Response) (*GetCorporationsCorporationIDWalletsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCorporationsCorporationIDWalletsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CorporationsCorporationIDWalletsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCorporationsCorporationIDWalletsDivisionJournalResponse parses an HTTP response from a GetCorporationsCorporationIDWalletsDivisionJournalWithResponse call
func ParseGetCorporationsCorporationIDWalletsDivisionJournalResponse(rsp *http.Response) (*GetCorporationsCorporationIDWalletsDivisionJournalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCorporationsCorporationIDWalletsDivisionJournalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CorporationsCorporationIDWalletsDivisionJournalGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCorporationsCorporationIDWalletsDivisionTransactionsResponse parses an HTTP response from a GetCorporationsCorporationIDWalletsDivisionTransactionsWithResponse call
func ParseGetCorporationsCorporationIDWalletsDivisionTransactionsResponse(rsp *http.Response) (*GetCorporationsCorporationIDWalletsDivisionTransactionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCorporationsCorporationIDWalletsDivisionTransactionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CorporationsCorporationIDWalletsDivisionTransactionsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetDogmaAttributesResponse parses an HTTP response from a GetDogmaAttributesWithResponse call
func ParseGetDogmaAttributesResponse(rsp *http.Response) (*GetDogmaAttributesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDogmaAttributesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DogmaAttributesGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetDogmaAttributesAttributeIDResponse parses an HTTP response from a GetDogmaAttributesAttributeIDWithResponse call
func ParseGetDogmaAttributesAttributeIDResponse(rsp *http.Response) (*GetDogmaAttributesAttributeIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDogmaAttributesAttributeIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DogmaAttributesAttributeIDGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetDogmaDynamicItemsTypeIDItemIDResponse parses an HTTP response from a GetDogmaDynamicItemsTypeIDItemIDWithResponse call
func ParseGetDogmaDynamicItemsTypeIDItemIDResponse(rsp *http.Response) (*GetDogmaDynamicItemsTypeIDItemIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDogmaDynamicItemsTypeIDItemIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DogmaDynamicItemsTypeIDItemIDGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetDogmaEffectsResponse parses an HTTP response from a GetDogmaEffectsWithResponse call
func ParseGetDogmaEffectsResponse(rsp *http.Response) (*GetDogmaEffectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDogmaEffectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DogmaEffectsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetDogmaEffectsEffectIDResponse parses an HTTP response from a GetDogmaEffectsEffectIDWithResponse call
func ParseGetDogmaEffectsEffectIDResponse(rsp *http.Response) (*GetDogmaEffectsEffectIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDogmaEffectsEffectIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DogmaEffectsEffectIDGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetFleetsFleetIDResponse parses an HTTP response from a GetFleetsFleetIDWithResponse call
func ParseGetFleetsFleetIDResponse(rsp *http.Response) (*GetFleetsFleetIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFleetsFleetIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FleetsFleetIDGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutFleetsFleetIDResponse parses an HTTP response from a PutFleetsFleetIDWithResponse call
func ParsePutFleetsFleetIDResponse(rsp *http.Response) (*PutFleetsFleetIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutFleetsFleetIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetFleetsFleetIDMembersResponse parses an HTTP response from a GetFleetsFleetIDMembersWithResponse call
func ParseGetFleetsFleetIDMembersResponse(rsp *http.Response) (*GetFleetsFleetIDMembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFleetsFleetIDMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FleetsFleetIDMembersGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostFleetsFleetIDMembersResponse parses an HTTP response from a PostFleetsFleetIDMembersWithResponse call
func ParsePostFleetsFleetIDMembersResponse(rsp *http.Response) (*PostFleetsFleetIDMembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFleetsFleetIDMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteFleetsFleetIDMembersMemberIDResponse parses an HTTP response from a DeleteFleetsFleetIDMembersMemberIDWithResponse call
func ParseDeleteFleetsFleetIDMembersMemberIDResponse(rsp *http.Response) (*DeleteFleetsFleetIDMembersMemberIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFleetsFleetIDMembersMemberIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutFleetsFleetIDMembersMemberIDResponse parses an HTTP response from a PutFleetsFleetIDMembersMemberIDWithResponse call
func ParsePutFleetsFleetIDMembersMemberIDResponse(rsp *http.Response) (*PutFleetsFleetIDMembersMemberIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutFleetsFleetIDMembersMemberIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteFleetsFleetIDSquadsSquadIDResponse parses an HTTP response from a DeleteFleetsFleetIDSquadsSquadIDWithResponse call
func ParseDeleteFleetsFleetIDSquadsSquadIDResponse(rsp *http.Response) (*DeleteFleetsFleetIDSquadsSquadIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFleetsFleetIDSquadsSquadIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutFleetsFleetIDSquadsSquadIDResponse parses an HTTP response from a PutFleetsFleetIDSquadsSquadIDWithResponse call
func ParsePutFleetsFleetIDSquadsSquadIDResponse(rsp *http.Response) (*PutFleetsFleetIDSquadsSquadIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutFleetsFleetIDSquadsSquadIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetFleetsFleetIDWingsResponse parses an HTTP response from a GetFleetsFleetIDWingsWithResponse call
func ParseGetFleetsFleetIDWingsResponse(rsp *http.Response) (*GetFleetsFleetIDWingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFleetsFleetIDWingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FleetsFleetIDWingsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostFleetsFleetIDWingsResponse parses an HTTP response from a PostFleetsFleetIDWingsWithResponse call
func ParsePostFleetsFleetIDWingsResponse(rsp *http.Response) (*PostFleetsFleetIDWingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFleetsFleetIDWingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest FleetsFleetIDWingsPost
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteFleetsFleetIDWingsWingIDResponse parses an HTTP response from a DeleteFleetsFleetIDWingsWingIDWithResponse call
func ParseDeleteFleetsFleetIDWingsWingIDResponse(rsp *http.Response) (*DeleteFleetsFleetIDWingsWingIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFleetsFleetIDWingsWingIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutFleetsFleetIDWingsWingIDResponse parses an HTTP response from a PutFleetsFleetIDWingsWingIDWithResponse call
func ParsePutFleetsFleetIDWingsWingIDResponse(rsp *http.Response) (*PutFleetsFleetIDWingsWingIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutFleetsFleetIDWingsWingIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostFleetsFleetIDWingsWingIDSquadsResponse parses an HTTP response from a PostFleetsFleetIDWingsWingIDSquadsWithResponse call
func ParsePostFleetsFleetIDWingsWingIDSquadsResponse(rsp *http.Response) (*PostFleetsFleetIDWingsWingIDSquadsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFleetsFleetIDWingsWingIDSquadsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest FleetsFleetIDWingsWingIDSquadsPost
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetFwLeaderboardsResponse parses an HTTP response from a GetFwLeaderboardsWithResponse call
func ParseGetFwLeaderboardsResponse(rsp *http.Response) (*GetFwLeaderboardsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFwLeaderboardsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FwLeaderboardsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetFwLeaderboardsCharactersResponse parses an HTTP response from a GetFwLeaderboardsCharactersWithResponse call
func ParseGetFwLeaderboardsCharactersResponse(rsp *http.Response) (*GetFwLeaderboardsCharactersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFwLeaderboardsCharactersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FwLeaderboardsCharactersGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetFwLeaderboardsCorporationsResponse parses an HTTP response from a GetFwLeaderboardsCorporationsWithResponse call
func ParseGetFwLeaderboardsCorporationsResponse(rsp *http.Response) (*GetFwLeaderboardsCorporationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFwLeaderboardsCorporationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FwLeaderboardsCorporationsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetFwStatsResponse parses an HTTP response from a GetFwStatsWithResponse call
func ParseGetFwStatsResponse(rsp *http.Response) (*GetFwStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFwStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FwStatsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetFwSystemsResponse parses an HTTP response from a GetFwSystemsWithResponse call
func ParseGetFwSystemsResponse(rsp *http.Response) (*GetFwSystemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFwSystemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FwSystemsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetFwWarsResponse parses an HTTP response from a GetFwWarsWithResponse call
func ParseGetFwWarsResponse(rsp *http.Response) (*GetFwWarsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFwWarsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FwWarsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetIncursionsResponse parses an HTTP response from a GetIncursionsWithResponse call
func ParseGetIncursionsResponse(rsp *http.Response) (*GetIncursionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncursionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncursionsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetIndustryFacilitiesResponse parses an HTTP response from a GetIndustryFacilitiesWithResponse call
func ParseGetIndustryFacilitiesResponse(rsp *http.Response) (*GetIndustryFacilitiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndustryFacilitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IndustryFacilitiesGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetIndustrySystemsResponse parses an HTTP response from a GetIndustrySystemsWithResponse call
func ParseGetIndustrySystemsResponse(rsp *http.Response) (*GetIndustrySystemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndustrySystemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IndustrySystemsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetInsurancePricesResponse parses an HTTP response from a GetInsurancePricesWithResponse call
func ParseGetInsurancePricesResponse(rsp *http.Response) (*GetInsurancePricesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInsurancePricesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsurancePricesGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetKillmailsKillmailIDKillmailHashResponse parses an HTTP response from a GetKillmailsKillmailIDKillmailHashWithResponse call
func ParseGetKillmailsKillmailIDKillmailHashResponse(rsp *http.Response) (*GetKillmailsKillmailIDKillmailHashResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetKillmailsKillmailIDKillmailHashResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest KillmailsKillmailIDKillmailHashGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetLoyaltyStoresCorporationIDOffersResponse parses an HTTP response from a GetLoyaltyStoresCorporationIDOffersWithResponse call
func ParseGetLoyaltyStoresCorporationIDOffersResponse(rsp *http.Response) (*GetLoyaltyStoresCorporationIDOffersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLoyaltyStoresCorporationIDOffersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LoyaltyStoresCorporationIDOffersGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetMarketsGroupsResponse parses an HTTP response from a GetMarketsGroupsWithResponse call
func ParseGetMarketsGroupsResponse(rsp *http.Response) (*GetMarketsGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMarketsGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MarketsGroupsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetMarketsGroupsMarketGroupIDResponse parses an HTTP response from a GetMarketsGroupsMarketGroupIDWithResponse call
func ParseGetMarketsGroupsMarketGroupIDResponse(rsp *http.Response) (*GetMarketsGroupsMarketGroupIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMarketsGroupsMarketGroupIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MarketsGroupsMarketGroupIDGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetMarketsPricesResponse parses an HTTP response from a GetMarketsPricesWithResponse call
func ParseGetMarketsPricesResponse(rsp *http.Response) (*GetMarketsPricesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMarketsPricesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MarketsPricesGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetMarketsStructuresStructureIDResponse parses an HTTP response from a GetMarketsStructuresStructureIDWithResponse call
func ParseGetMarketsStructuresStructureIDResponse(rsp *http.Response) (*GetMarketsStructuresStructureIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMarketsStructuresStructureIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MarketsStructuresStructureIDGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetMarketsRegionIDHistoryResponse parses an HTTP response from a GetMarketsRegionIDHistoryWithResponse call
func ParseGetMarketsRegionIDHistoryResponse(rsp *http.Response) (*GetMarketsRegionIDHistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMarketsRegionIDHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MarketsRegionIDHistoryGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetMarketsRegionIDOrdersResponse parses an HTTP response from a GetMarketsRegionIDOrdersWithResponse call
func ParseGetMarketsRegionIDOrdersResponse(rsp *http.Response) (*GetMarketsRegionIDOrdersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMarketsRegionIDOrdersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MarketsRegionIDOrdersGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetMarketsRegionIDTypesResponse parses an HTTP response from a GetMarketsRegionIDTypesWithResponse call
func ParseGetMarketsRegionIDTypesResponse(rsp *http.Response) (*GetMarketsRegionIDTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMarketsRegionIDTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MarketsRegionIDTypesGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetRouteOriginDestinationResponse parses an HTTP response from a GetRouteOriginDestinationWithResponse call
func ParseGetRouteOriginDestinationResponse(rsp *http.Response) (*GetRouteOriginDestinationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRouteOriginDestinationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RouteOriginDestinationGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetSovereigntyCampaignsResponse parses an HTTP response from a GetSovereigntyCampaignsWithResponse call
func ParseGetSovereigntyCampaignsResponse(rsp *http.Response) (*GetSovereigntyCampaignsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSovereigntyCampaignsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SovereigntyCampaignsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetSovereigntyMapResponse parses an HTTP response from a GetSovereigntyMapWithResponse call
func ParseGetSovereigntyMapResponse(rsp *http.Response) (*GetSovereigntyMapResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSovereigntyMapResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SovereigntyMapGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetSovereigntyStructuresResponse parses an HTTP response from a GetSovereigntyStructuresWithResponse call
func ParseGetSovereigntyStructuresResponse(rsp *http.Response) (*GetSovereigntyStructuresResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSovereigntyStructuresResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SovereigntyStructuresGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetStatusResponse parses an HTTP response from a GetStatusWithResponse call
func ParseGetStatusResponse(rsp *http.Response) (*GetStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostUIAutopilotWaypointResponse parses an HTTP response from a PostUIAutopilotWaypointWithResponse call
func ParsePostUIAutopilotWaypointResponse(rsp *http.Response) (*PostUIAutopilotWaypointResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUIAutopilotWaypointResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostUIOpenwindowContractResponse parses an HTTP response from a PostUIOpenwindowContractWithResponse call
func ParsePostUIOpenwindowContractResponse(rsp *http.Response) (*PostUIOpenwindowContractResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUIOpenwindowContractResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostUIOpenwindowInformationResponse parses an HTTP response from a PostUIOpenwindowInformationWithResponse call
func ParsePostUIOpenwindowInformationResponse(rsp *http.Response) (*PostUIOpenwindowInformationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUIOpenwindowInformationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostUIOpenwindowMarketdetailsResponse parses an HTTP response from a PostUIOpenwindowMarketdetailsWithResponse call
func ParsePostUIOpenwindowMarketdetailsResponse(rsp *http.Response) (*PostUIOpenwindowMarketdetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUIOpenwindowMarketdetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostUIOpenwindowNewmailResponse parses an HTTP response from a PostUIOpenwindowNewmailWithResponse call
func ParsePostUIOpenwindowNewmailResponse(rsp *http.Response) (*PostUIOpenwindowNewmailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUIOpenwindowNewmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUniverseAncestriesResponse parses an HTTP response from a GetUniverseAncestriesWithResponse call
func ParseGetUniverseAncestriesResponse(rsp *http.Response) (*GetUniverseAncestriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUniverseAncestriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UniverseAncestriesGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUniverseAsteroidBeltsAsteroidBeltIDResponse parses an HTTP response from a GetUniverseAsteroidBeltsAsteroidBeltIDWithResponse call
func ParseGetUniverseAsteroidBeltsAsteroidBeltIDResponse(rsp *http.Response) (*GetUniverseAsteroidBeltsAsteroidBeltIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUniverseAsteroidBeltsAsteroidBeltIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UniverseAsteroidBeltsAsteroidBeltIDGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUniverseBloodlinesResponse parses an HTTP response from a GetUniverseBloodlinesWithResponse call
func ParseGetUniverseBloodlinesResponse(rsp *http.Response) (*GetUniverseBloodlinesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUniverseBloodlinesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UniverseBloodlinesGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUniverseCategoriesResponse parses an HTTP response from a GetUniverseCategoriesWithResponse call
func ParseGetUniverseCategoriesResponse(rsp *http.Response) (*GetUniverseCategoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUniverseCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UniverseCategoriesGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUniverseCategoriesCategoryIDResponse parses an HTTP response from a GetUniverseCategoriesCategoryIDWithResponse call
func ParseGetUniverseCategoriesCategoryIDResponse(rsp *http.Response) (*GetUniverseCategoriesCategoryIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUniverseCategoriesCategoryIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UniverseCategoriesCategoryIDGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUniverseConstellationsResponse parses an HTTP response from a GetUniverseConstellationsWithResponse call
func ParseGetUniverseConstellationsResponse(rsp *http.Response) (*GetUniverseConstellationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUniverseConstellationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UniverseConstellationsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUniverseConstellationsConstellationIDResponse parses an HTTP response from a GetUniverseConstellationsConstellationIDWithResponse call
func ParseGetUniverseConstellationsConstellationIDResponse(rsp *http.Response) (*GetUniverseConstellationsConstellationIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUniverseConstellationsConstellationIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UniverseConstellationsConstellationIDGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUniverseFactionsResponse parses an HTTP response from a GetUniverseFactionsWithResponse call
func ParseGetUniverseFactionsResponse(rsp *http.Response) (*GetUniverseFactionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUniverseFactionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UniverseFactionsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUniverseGraphicsResponse parses an HTTP response from a GetUniverseGraphicsWithResponse call
func ParseGetUniverseGraphicsResponse(rsp *http.Response) (*GetUniverseGraphicsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUniverseGraphicsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UniverseGraphicsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUniverseGraphicsGraphicIDResponse parses an HTTP response from a GetUniverseGraphicsGraphicIDWithResponse call
func ParseGetUniverseGraphicsGraphicIDResponse(rsp *http.Response) (*GetUniverseGraphicsGraphicIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUniverseGraphicsGraphicIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UniverseGraphicsGraphicIDGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUniverseGroupsResponse parses an HTTP response from a GetUniverseGroupsWithResponse call
func ParseGetUniverseGroupsResponse(rsp *http.Response) (*GetUniverseGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUniverseGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UniverseGroupsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUniverseGroupsGroupIDResponse parses an HTTP response from a GetUniverseGroupsGroupIDWithResponse call
func ParseGetUniverseGroupsGroupIDResponse(rsp *http.Response) (*GetUniverseGroupsGroupIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUniverseGroupsGroupIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UniverseGroupsGroupIDGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostUniverseIdsResponse parses an HTTP response from a PostUniverseIdsWithResponse call
func ParsePostUniverseIdsResponse(rsp *http.Response) (*PostUniverseIdsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUniverseIdsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UniverseIdsPost
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUniverseMoonsMoonIDResponse parses an HTTP response from a GetUniverseMoonsMoonIDWithResponse call
func ParseGetUniverseMoonsMoonIDResponse(rsp *http.Response) (*GetUniverseMoonsMoonIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUniverseMoonsMoonIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UniverseMoonsMoonIDGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostUniverseNamesResponse parses an HTTP response from a PostUniverseNamesWithResponse call
func ParsePostUniverseNamesResponse(rsp *http.Response) (*PostUniverseNamesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUniverseNamesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UniverseNamesPost
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUniversePlanetsPlanetIDResponse parses an HTTP response from a GetUniversePlanetsPlanetIDWithResponse call
func ParseGetUniversePlanetsPlanetIDResponse(rsp *http.Response) (*GetUniversePlanetsPlanetIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUniversePlanetsPlanetIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UniversePlanetsPlanetIDGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUniverseRacesResponse parses an HTTP response from a GetUniverseRacesWithResponse call
func ParseGetUniverseRacesResponse(rsp *http.Response) (*GetUniverseRacesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUniverseRacesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UniverseRacesGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUniverseRegionsResponse parses an HTTP response from a GetUniverseRegionsWithResponse call
func ParseGetUniverseRegionsResponse(rsp *http.Response) (*GetUniverseRegionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUniverseRegionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UniverseRegionsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUniverseRegionsRegionIDResponse parses an HTTP response from a GetUniverseRegionsRegionIDWithResponse call
func ParseGetUniverseRegionsRegionIDResponse(rsp *http.Response) (*GetUniverseRegionsRegionIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUniverseRegionsRegionIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UniverseRegionsRegionIDGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUniverseSchematicsSchematicIDResponse parses an HTTP response from a GetUniverseSchematicsSchematicIDWithResponse call
func ParseGetUniverseSchematicsSchematicIDResponse(rsp *http.Response) (*GetUniverseSchematicsSchematicIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUniverseSchematicsSchematicIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UniverseSchematicsSchematicIDGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUniverseStargatesStargateIDResponse parses an HTTP response from a GetUniverseStargatesStargateIDWithResponse call
func ParseGetUniverseStargatesStargateIDResponse(rsp *http.Response) (*GetUniverseStargatesStargateIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUniverseStargatesStargateIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UniverseStargatesStargateIDGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUniverseStarsStarIDResponse parses an HTTP response from a GetUniverseStarsStarIDWithResponse call
func ParseGetUniverseStarsStarIDResponse(rsp *http.Response) (*GetUniverseStarsStarIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUniverseStarsStarIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UniverseStarsStarIDGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUniverseStationsStationIDResponse parses an HTTP response from a GetUniverseStationsStationIDWithResponse call
func ParseGetUniverseStationsStationIDResponse(rsp *http.Response) (*GetUniverseStationsStationIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUniverseStationsStationIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UniverseStationsStationIDGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUniverseStructuresResponse parses an HTTP response from a GetUniverseStructuresWithResponse call
func ParseGetUniverseStructuresResponse(rsp *http.Response) (*GetUniverseStructuresResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUniverseStructuresResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UniverseStructuresGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUniverseStructuresStructureIDResponse parses an HTTP response from a GetUniverseStructuresStructureIDWithResponse call
func ParseGetUniverseStructuresStructureIDResponse(rsp *http.Response) (*GetUniverseStructuresStructureIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUniverseStructuresStructureIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UniverseStructuresStructureIDGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUniverseSystemJumpsResponse parses an HTTP response from a GetUniverseSystemJumpsWithResponse call
func ParseGetUniverseSystemJumpsResponse(rsp *http.Response) (*GetUniverseSystemJumpsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUniverseSystemJumpsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UniverseSystemJumpsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUniverseSystemKillsResponse parses an HTTP response from a GetUniverseSystemKillsWithResponse call
func ParseGetUniverseSystemKillsResponse(rsp *http.Response) (*GetUniverseSystemKillsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUniverseSystemKillsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UniverseSystemKillsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUniverseSystemsResponse parses an HTTP response from a GetUniverseSystemsWithResponse call
func ParseGetUniverseSystemsResponse(rsp *http.Response) (*GetUniverseSystemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUniverseSystemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UniverseSystemsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUniverseSystemsSystemIDResponse parses an HTTP response from a GetUniverseSystemsSystemIDWithResponse call
func ParseGetUniverseSystemsSystemIDResponse(rsp *http.Response) (*GetUniverseSystemsSystemIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUniverseSystemsSystemIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UniverseSystemsSystemIDGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUniverseTypesResponse parses an HTTP response from a GetUniverseTypesWithResponse call
func ParseGetUniverseTypesResponse(rsp *http.Response) (*GetUniverseTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUniverseTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UniverseTypesGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUniverseTypesTypeIDResponse parses an HTTP response from a GetUniverseTypesTypeIDWithResponse call
func ParseGetUniverseTypesTypeIDResponse(rsp *http.Response) (*GetUniverseTypesTypeIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUniverseTypesTypeIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UniverseTypesTypeIDGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetWarsResponse parses an HTTP response from a GetWarsWithResponse call
func ParseGetWarsResponse(rsp *http.Response) (*GetWarsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWarsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WarsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetWarsWarIDResponse parses an HTTP response from a GetWarsWarIDWithResponse call
func ParseGetWarsWarIDResponse(rsp *http.Response) (*GetWarsWarIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWarsWarIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WarsWarIDGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetWarsWarIDKillmailsResponse parses an HTTP response from a GetWarsWarIDKillmailsWithResponse call
func ParseGetWarsWarIDKillmailsResponse(rsp *http.Response) (*GetWarsWarIDKillmailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWarsWarIDKillmailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WarsWarIDKillmailsGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}
